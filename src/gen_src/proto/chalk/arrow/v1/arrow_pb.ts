// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/arrow/v1/arrow.proto (package chalk.arrow.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.arrow.v1.TimeUnit
 */
export enum TimeUnit {
  /**
   * @generated from enum value: TIME_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TIME_UNIT_SECOND = 1;
   */
  SECOND = 1,

  /**
   * @generated from enum value: TIME_UNIT_MILLISECOND = 2;
   */
  MILLISECOND = 2,

  /**
   * @generated from enum value: TIME_UNIT_MICROSECOND = 3;
   */
  MICROSECOND = 3,

  /**
   * @generated from enum value: TIME_UNIT_NANOSECOND = 4;
   */
  NANOSECOND = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(TimeUnit)
proto3.util.setEnumType(TimeUnit, "chalk.arrow.v1.TimeUnit", [
  { no: 0, name: "TIME_UNIT_UNSPECIFIED" },
  { no: 1, name: "TIME_UNIT_SECOND" },
  { no: 2, name: "TIME_UNIT_MILLISECOND" },
  { no: 3, name: "TIME_UNIT_MICROSECOND" },
  { no: 4, name: "TIME_UNIT_NANOSECOND" },
]);

/**
 * @generated from enum chalk.arrow.v1.FeatherCompression
 */
export enum FeatherCompression {
  /**
   * @generated from enum value: FEATHER_COMPRESSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATHER_COMPRESSION_UNCOMPRESSED = 1;
   */
  UNCOMPRESSED = 1,

  /**
   * @generated from enum value: FEATHER_COMPRESSION_LZ4 = 2;
   */
  LZ4 = 2,

  /**
   * @generated from enum value: FEATHER_COMPRESSION_ZSTD = 3;
   */
  ZSTD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatherCompression)
proto3.util.setEnumType(FeatherCompression, "chalk.arrow.v1.FeatherCompression", [
  { no: 0, name: "FEATHER_COMPRESSION_UNSPECIFIED" },
  { no: 1, name: "FEATHER_COMPRESSION_UNCOMPRESSED" },
  { no: 2, name: "FEATHER_COMPRESSION_LZ4" },
  { no: 3, name: "FEATHER_COMPRESSION_ZSTD" },
]);

/**
 * @generated from message chalk.arrow.v1.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * @generated from field: repeated chalk.arrow.v1.Field columns = 1;
   */
  columns: Field[] = [];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "columns", kind: "message", T: Field, repeated: true },
    { no: 2, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.Field
 */
export class Field extends Message<Field> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 2;
   */
  arrowType?: ArrowType;

  /**
   * @generated from field: bool nullable = 3;
   */
  nullable = false;

  /**
   * @generated from field: repeated chalk.arrow.v1.Field children = 4;
   */
  children: Field[] = [];

  /**
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arrow_type", kind: "message", T: ArrowType },
    { no: 3, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "children", kind: "message", T: Field, repeated: true },
    { no: 5, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Field {
    return new Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJsonString(jsonString, options);
  }

  static equals(a: Field | PlainMessage<Field> | undefined, b: Field | PlainMessage<Field> | undefined): boolean {
    return proto3.util.equals(Field, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.FixedSizeBinary
 */
export class FixedSizeBinary extends Message<FixedSizeBinary> {
  /**
   * @generated from field: int32 length = 1;
   */
  length = 0;

  constructor(data?: PartialMessage<FixedSizeBinary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.FixedSizeBinary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixedSizeBinary {
    return new FixedSizeBinary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixedSizeBinary {
    return new FixedSizeBinary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixedSizeBinary {
    return new FixedSizeBinary().fromJsonString(jsonString, options);
  }

  static equals(a: FixedSizeBinary | PlainMessage<FixedSizeBinary> | undefined, b: FixedSizeBinary | PlainMessage<FixedSizeBinary> | undefined): boolean {
    return proto3.util.equals(FixedSizeBinary, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.Timestamp
 */
export class Timestamp extends Message<Timestamp> {
  /**
   * @generated from field: chalk.arrow.v1.TimeUnit time_unit = 1;
   */
  timeUnit = TimeUnit.UNSPECIFIED;

  /**
   * @generated from field: string timezone = 2;
   */
  timezone = "";

  constructor(data?: PartialMessage<Timestamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Timestamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_unit", kind: "enum", T: proto3.getEnumType(TimeUnit) },
    { no: 2, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timestamp {
    return new Timestamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timestamp {
    return new Timestamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timestamp {
    return new Timestamp().fromJsonString(jsonString, options);
  }

  static equals(a: Timestamp | PlainMessage<Timestamp> | undefined, b: Timestamp | PlainMessage<Timestamp> | undefined): boolean {
    return proto3.util.equals(Timestamp, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.Decimal
 */
export class Decimal extends Message<Decimal> {
  /**
   * @generated from field: int32 precision = 1;
   */
  precision = 0;

  /**
   * @generated from field: int32 scale = 2;
   */
  scale = 0;

  constructor(data?: PartialMessage<Decimal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Decimal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "precision", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "scale", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Decimal {
    return new Decimal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Decimal {
    return new Decimal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Decimal {
    return new Decimal().fromJsonString(jsonString, options);
  }

  static equals(a: Decimal | PlainMessage<Decimal> | undefined, b: Decimal | PlainMessage<Decimal> | undefined): boolean {
    return proto3.util.equals(Decimal, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.List
 */
export class List extends Message<List> {
  /**
   * @generated from field: chalk.arrow.v1.Field field_type = 1;
   */
  fieldType?: Field;

  constructor(data?: PartialMessage<List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_type", kind: "message", T: Field },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List {
    return new List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List {
    return new List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List {
    return new List().fromJsonString(jsonString, options);
  }

  static equals(a: List | PlainMessage<List> | undefined, b: List | PlainMessage<List> | undefined): boolean {
    return proto3.util.equals(List, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.FixedSizeList
 */
export class FixedSizeList extends Message<FixedSizeList> {
  /**
   * @generated from field: chalk.arrow.v1.Field field_type = 1;
   */
  fieldType?: Field;

  /**
   * @generated from field: int32 list_size = 2;
   */
  listSize = 0;

  constructor(data?: PartialMessage<FixedSizeList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.FixedSizeList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_type", kind: "message", T: Field },
    { no: 2, name: "list_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixedSizeList {
    return new FixedSizeList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixedSizeList {
    return new FixedSizeList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixedSizeList {
    return new FixedSizeList().fromJsonString(jsonString, options);
  }

  static equals(a: FixedSizeList | PlainMessage<FixedSizeList> | undefined, b: FixedSizeList | PlainMessage<FixedSizeList> | undefined): boolean {
    return proto3.util.equals(FixedSizeList, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.Struct
 */
export class Struct extends Message<Struct> {
  /**
   * @generated from field: repeated chalk.arrow.v1.Field sub_field_types = 1;
   */
  subFieldTypes: Field[] = [];

  constructor(data?: PartialMessage<Struct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Struct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sub_field_types", kind: "message", T: Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Struct {
    return new Struct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Struct {
    return new Struct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Struct {
    return new Struct().fromJsonString(jsonString, options);
  }

  static equals(a: Struct | PlainMessage<Struct> | undefined, b: Struct | PlainMessage<Struct> | undefined): boolean {
    return proto3.util.equals(Struct, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.Map
 */
export class Map extends Message<Map> {
  /**
   * @generated from field: chalk.arrow.v1.Field key_field = 1;
   */
  keyField?: Field;

  /**
   * @generated from field: chalk.arrow.v1.Field item_field = 2;
   */
  itemField?: Field;

  /**
   * @generated from field: bool keys_sorted = 3;
   */
  keysSorted = false;

  constructor(data?: PartialMessage<Map>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Map";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_field", kind: "message", T: Field },
    { no: 2, name: "item_field", kind: "message", T: Field },
    { no: 3, name: "keys_sorted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Map {
    return new Map().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJsonString(jsonString, options);
  }

  static equals(a: Map | PlainMessage<Map> | undefined, b: Map | PlainMessage<Map> | undefined): boolean {
    return proto3.util.equals(Map, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarListValue
 */
export class ScalarListValue extends Message<ScalarListValue> {
  /**
   * @generated from field: bytes arrow_data = 1;
   */
  arrowData = new Uint8Array(0);

  /**
   * @generated from field: chalk.arrow.v1.Schema schema = 2;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<ScalarListValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarListValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arrow_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarListValue {
    return new ScalarListValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarListValue {
    return new ScalarListValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarListValue {
    return new ScalarListValue().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarListValue | PlainMessage<ScalarListValue> | undefined, b: ScalarListValue | PlainMessage<ScalarListValue> | undefined): boolean {
    return proto3.util.equals(ScalarListValue, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarTime32Value
 */
export class ScalarTime32Value extends Message<ScalarTime32Value> {
  /**
   * @generated from oneof chalk.arrow.v1.ScalarTime32Value.value
   */
  value: {
    /**
     * @generated from field: int32 time32_second_value = 1;
     */
    value: number;
    case: "time32SecondValue";
  } | {
    /**
     * @generated from field: int32 time32_millisecond_value = 2;
     */
    value: number;
    case: "time32MillisecondValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ScalarTime32Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarTime32Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time32_second_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 2, name: "time32_millisecond_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarTime32Value {
    return new ScalarTime32Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarTime32Value {
    return new ScalarTime32Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarTime32Value {
    return new ScalarTime32Value().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarTime32Value | PlainMessage<ScalarTime32Value> | undefined, b: ScalarTime32Value | PlainMessage<ScalarTime32Value> | undefined): boolean {
    return proto3.util.equals(ScalarTime32Value, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarTime64Value
 */
export class ScalarTime64Value extends Message<ScalarTime64Value> {
  /**
   * @generated from oneof chalk.arrow.v1.ScalarTime64Value.value
   */
  value: {
    /**
     * @generated from field: int64 time64_microsecond_value = 1;
     */
    value: bigint;
    case: "time64MicrosecondValue";
  } | {
    /**
     * @generated from field: int64 time64_nanosecond_value = 2;
     */
    value: bigint;
    case: "time64NanosecondValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ScalarTime64Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarTime64Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time64_microsecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 2, name: "time64_nanosecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarTime64Value {
    return new ScalarTime64Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarTime64Value {
    return new ScalarTime64Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarTime64Value {
    return new ScalarTime64Value().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarTime64Value | PlainMessage<ScalarTime64Value> | undefined, b: ScalarTime64Value | PlainMessage<ScalarTime64Value> | undefined): boolean {
    return proto3.util.equals(ScalarTime64Value, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarTimestampValue
 */
export class ScalarTimestampValue extends Message<ScalarTimestampValue> {
  /**
   * @generated from oneof chalk.arrow.v1.ScalarTimestampValue.value
   */
  value: {
    /**
     * @generated from field: int64 time_microsecond_value = 1;
     */
    value: bigint;
    case: "timeMicrosecondValue";
  } | {
    /**
     * @generated from field: int64 time_nanosecond_value = 2;
     */
    value: bigint;
    case: "timeNanosecondValue";
  } | {
    /**
     * @generated from field: int64 time_second_value = 3;
     */
    value: bigint;
    case: "timeSecondValue";
  } | {
    /**
     * @generated from field: int64 time_millisecond_value = 4;
     */
    value: bigint;
    case: "timeMillisecondValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string timezone = 5;
   */
  timezone = "";

  constructor(data?: PartialMessage<ScalarTimestampValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarTimestampValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_microsecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 2, name: "time_nanosecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "time_second_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 4, name: "time_millisecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarTimestampValue {
    return new ScalarTimestampValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarTimestampValue {
    return new ScalarTimestampValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarTimestampValue {
    return new ScalarTimestampValue().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarTimestampValue | PlainMessage<ScalarTimestampValue> | undefined, b: ScalarTimestampValue | PlainMessage<ScalarTimestampValue> | undefined): boolean {
    return proto3.util.equals(ScalarTimestampValue, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.StructValue
 */
export class StructValue extends Message<StructValue> {
  /**
   * @generated from field: repeated chalk.arrow.v1.ScalarValue field_values = 2;
   */
  fieldValues: ScalarValue[] = [];

  /**
   * @generated from field: repeated chalk.arrow.v1.Field fields = 3;
   */
  fields: Field[] = [];

  constructor(data?: PartialMessage<StructValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.StructValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "field_values", kind: "message", T: ScalarValue, repeated: true },
    { no: 3, name: "fields", kind: "message", T: Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructValue {
    return new StructValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructValue {
    return new StructValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructValue {
    return new StructValue().fromJsonString(jsonString, options);
  }

  static equals(a: StructValue | PlainMessage<StructValue> | undefined, b: StructValue | PlainMessage<StructValue> | undefined): boolean {
    return proto3.util.equals(StructValue, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarFixedSizeBinary
 */
export class ScalarFixedSizeBinary extends Message<ScalarFixedSizeBinary> {
  /**
   * @generated from field: bytes values = 1;
   */
  values = new Uint8Array(0);

  /**
   * @generated from field: int32 length = 2;
   */
  length = 0;

  constructor(data?: PartialMessage<ScalarFixedSizeBinary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarFixedSizeBinary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarFixedSizeBinary {
    return new ScalarFixedSizeBinary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarFixedSizeBinary {
    return new ScalarFixedSizeBinary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarFixedSizeBinary {
    return new ScalarFixedSizeBinary().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarFixedSizeBinary | PlainMessage<ScalarFixedSizeBinary> | undefined, b: ScalarFixedSizeBinary | PlainMessage<ScalarFixedSizeBinary> | undefined): boolean {
    return proto3.util.equals(ScalarFixedSizeBinary, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.DecimalValue
 */
export class DecimalValue extends Message<DecimalValue> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  /**
   * @generated from field: int32 precision = 2;
   */
  precision = 0;

  /**
   * @generated from field: int32 scale = 3;
   */
  scale = 0;

  constructor(data?: PartialMessage<DecimalValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.DecimalValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "precision", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "scale", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecimalValue {
    return new DecimalValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecimalValue {
    return new DecimalValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecimalValue {
    return new DecimalValue().fromJsonString(jsonString, options);
  }

  static equals(a: DecimalValue | PlainMessage<DecimalValue> | undefined, b: DecimalValue | PlainMessage<DecimalValue> | undefined): boolean {
    return proto3.util.equals(DecimalValue, a, b);
  }
}

/**
 * Extension is used to
 *
 * @generated from message chalk.arrow.v1.Extension
 */
export class Extension extends Message<Extension> {
  /**
   * The name of the extension -- e.g. arrow.json. See
   * https://arrow.apache.org/docs/format/CanonicalExtensions.html
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The underlying storage type for this extension type.
   *
   * @generated from field: chalk.arrow.v1.ArrowType storage_type = 2;
   */
  storageType?: ArrowType;

  constructor(data?: PartialMessage<Extension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.Extension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "storage_type", kind: "message", T: ArrowType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension {
    return new Extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJsonString(jsonString, options);
  }

  static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean {
    return proto3.util.equals(Extension, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ExtensionValue
 */
export class ExtensionValue extends Message<ExtensionValue> {
  /**
   * @generated from field: chalk.arrow.v1.Extension extension_type = 1;
   */
  extensionType?: Extension;

  /**
   * @generated from field: chalk.arrow.v1.ScalarValue storage_value = 2;
   */
  storageValue?: ScalarValue;

  constructor(data?: PartialMessage<ExtensionValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ExtensionValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extension_type", kind: "message", T: Extension },
    { no: 2, name: "storage_value", kind: "message", T: ScalarValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionValue {
    return new ExtensionValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionValue {
    return new ExtensionValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionValue {
    return new ExtensionValue().fromJsonString(jsonString, options);
  }

  static equals(a: ExtensionValue | PlainMessage<ExtensionValue> | undefined, b: ExtensionValue | PlainMessage<ExtensionValue> | undefined): boolean {
    return proto3.util.equals(ExtensionValue, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ScalarValue
 */
export class ScalarValue extends Message<ScalarValue> {
  /**
   * @generated from oneof chalk.arrow.v1.ScalarValue.value
   */
  value: {
    /**
     * Group popular types at the top
     * to save space in the serialized
     * message.
     *
     * @generated from field: chalk.arrow.v1.ArrowType null_value = 1;
     */
    value: ArrowType;
    case: "nullValue";
  } | {
    /**
     * @generated from field: bool bool_value = 2;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * @generated from field: double float64_value = 3;
     */
    value: number;
    case: "float64Value";
  } | {
    /**
     * @generated from field: int64 int64_value = 4;
     */
    value: bigint;
    case: "int64Value";
  } | {
    /**
     * @generated from field: string large_utf8_value = 5;
     */
    value: string;
    case: "largeUtf8Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarTimestampValue timestamp_value = 6;
     */
    value: ScalarTimestampValue;
    case: "timestampValue";
  } | {
    /**
     * @generated from field: int64 date_64_value = 7;
     */
    value: bigint;
    case: "date64Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.StructValue struct_value = 8;
     */
    value: StructValue;
    case: "structValue";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarListValue large_list_value = 9;
     */
    value: ScalarListValue;
    case: "largeListValue";
  } | {
    /**
     * Leave placeholders for 11-15 in case
     * we get the most popular types wrong.
     *
     * @generated from field: chalk.arrow.v1.ScalarTime64Value time64_value = 10;
     */
    value: ScalarTime64Value;
    case: "time64Value";
  } | {
    /**
     * @generated from field: int64 duration_second_value = 16;
     */
    value: bigint;
    case: "durationSecondValue";
  } | {
    /**
     * @generated from field: int64 duration_millisecond_value = 17;
     */
    value: bigint;
    case: "durationMillisecondValue";
  } | {
    /**
     * @generated from field: int64 duration_microsecond_value = 18;
     */
    value: bigint;
    case: "durationMicrosecondValue";
  } | {
    /**
     * @generated from field: int64 duration_nanosecond_value = 19;
     */
    value: bigint;
    case: "durationNanosecondValue";
  } | {
    /**
     * @generated from field: string utf8_value = 20;
     */
    value: string;
    case: "utf8Value";
  } | {
    /**
     * @generated from field: int32 int8_value = 21;
     */
    value: number;
    case: "int8Value";
  } | {
    /**
     * @generated from field: int32 int16_value = 22;
     */
    value: number;
    case: "int16Value";
  } | {
    /**
     * @generated from field: int32 int32_value = 23;
     */
    value: number;
    case: "int32Value";
  } | {
    /**
     * @generated from field: uint32 uint8_value = 24;
     */
    value: number;
    case: "uint8Value";
  } | {
    /**
     * @generated from field: uint32 uint16_value = 25;
     */
    value: number;
    case: "uint16Value";
  } | {
    /**
     * @generated from field: uint32 uint32_value = 26;
     */
    value: number;
    case: "uint32Value";
  } | {
    /**
     * @generated from field: uint64 uint64_value = 27;
     */
    value: bigint;
    case: "uint64Value";
  } | {
    /**
     * @generated from field: float float16_value = 28;
     */
    value: number;
    case: "float16Value";
  } | {
    /**
     * @generated from field: float float32_value = 29;
     */
    value: number;
    case: "float32Value";
  } | {
    /**
     * @generated from field: int32 date_32_value = 30;
     */
    value: number;
    case: "date32Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarTime32Value time32_value = 31;
     */
    value: ScalarTime32Value;
    case: "time32Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarListValue list_value = 32;
     */
    value: ScalarListValue;
    case: "listValue";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarListValue fixed_size_list_value = 33;
     */
    value: ScalarListValue;
    case: "fixedSizeListValue";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarListValue map_value = 34;
     */
    value: ScalarListValue;
    case: "mapValue";
  } | {
    /**
     * @generated from field: bytes binary_value = 35;
     */
    value: Uint8Array;
    case: "binaryValue";
  } | {
    /**
     * @generated from field: bytes large_binary_value = 36;
     */
    value: Uint8Array;
    case: "largeBinaryValue";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarFixedSizeBinary fixed_size_binary_value = 37;
     */
    value: ScalarFixedSizeBinary;
    case: "fixedSizeBinaryValue";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.DecimalValue decimal128_value = 38;
     */
    value: DecimalValue;
    case: "decimal128Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.DecimalValue decimal256_value = 39;
     */
    value: DecimalValue;
    case: "decimal256Value";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ExtensionValue extension_value = 40;
     */
    value: ExtensionValue;
    case: "extensionValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ScalarValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ScalarValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "null_value", kind: "message", T: ArrowType, oneof: "value" },
    { no: 2, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 3, name: "float64_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 4, name: "int64_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "large_utf8_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 6, name: "timestamp_value", kind: "message", T: ScalarTimestampValue, oneof: "value" },
    { no: 7, name: "date_64_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 8, name: "struct_value", kind: "message", T: StructValue, oneof: "value" },
    { no: 9, name: "large_list_value", kind: "message", T: ScalarListValue, oneof: "value" },
    { no: 10, name: "time64_value", kind: "message", T: ScalarTime64Value, oneof: "value" },
    { no: 16, name: "duration_second_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 17, name: "duration_millisecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 18, name: "duration_microsecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 19, name: "duration_nanosecond_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 20, name: "utf8_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 21, name: "int8_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 22, name: "int16_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 23, name: "int32_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 24, name: "uint8_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "value" },
    { no: 25, name: "uint16_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "value" },
    { no: 26, name: "uint32_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "value" },
    { no: 27, name: "uint64_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
    { no: 28, name: "float16_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "value" },
    { no: 29, name: "float32_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "value" },
    { no: 30, name: "date_32_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 31, name: "time32_value", kind: "message", T: ScalarTime32Value, oneof: "value" },
    { no: 32, name: "list_value", kind: "message", T: ScalarListValue, oneof: "value" },
    { no: 33, name: "fixed_size_list_value", kind: "message", T: ScalarListValue, oneof: "value" },
    { no: 34, name: "map_value", kind: "message", T: ScalarListValue, oneof: "value" },
    { no: 35, name: "binary_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
    { no: 36, name: "large_binary_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
    { no: 37, name: "fixed_size_binary_value", kind: "message", T: ScalarFixedSizeBinary, oneof: "value" },
    { no: 38, name: "decimal128_value", kind: "message", T: DecimalValue, oneof: "value" },
    { no: 39, name: "decimal256_value", kind: "message", T: DecimalValue, oneof: "value" },
    { no: 40, name: "extension_value", kind: "message", T: ExtensionValue, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarValue {
    return new ScalarValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarValue {
    return new ScalarValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarValue {
    return new ScalarValue().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarValue | PlainMessage<ScalarValue> | undefined, b: ScalarValue | PlainMessage<ScalarValue> | undefined): boolean {
    return proto3.util.equals(ScalarValue, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.ArrowType
 */
export class ArrowType extends Message<ArrowType> {
  /**
   * @generated from oneof chalk.arrow.v1.ArrowType.arrow_type_enum
   */
  arrowTypeEnum: {
    /**
     * Group popular types at the top
     * to save space in the serialized
     * message.
     *
     * @generated from field: chalk.arrow.v1.EmptyMessage none = 1;
     */
    value: EmptyMessage;
    case: "none";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage bool = 2;
     */
    value: EmptyMessage;
    case: "bool";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage float64 = 3;
     */
    value: EmptyMessage;
    case: "float64";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage int64 = 4;
     */
    value: EmptyMessage;
    case: "int64";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage large_utf8 = 5;
     */
    value: EmptyMessage;
    case: "largeUtf8";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Timestamp timestamp = 6;
     */
    value: Timestamp;
    case: "timestamp";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage date64 = 7;
     */
    value: EmptyMessage;
    case: "date64";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Struct struct = 8;
     */
    value: Struct;
    case: "struct";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.List large_list = 9;
     */
    value: List;
    case: "largeList";
  } | {
    /**
     * Leave placeholders for 11-15 in case
     * we get the most popular types wrong.
     *
     * @generated from field: chalk.arrow.v1.TimeUnit time64 = 10;
     */
    value: TimeUnit;
    case: "time64";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.TimeUnit duration = 16;
     */
    value: TimeUnit;
    case: "duration";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage utf8 = 17;
     */
    value: EmptyMessage;
    case: "utf8";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage int8 = 18;
     */
    value: EmptyMessage;
    case: "int8";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage int16 = 19;
     */
    value: EmptyMessage;
    case: "int16";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage int32 = 20;
     */
    value: EmptyMessage;
    case: "int32";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage uint8 = 21;
     */
    value: EmptyMessage;
    case: "uint8";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage uint16 = 22;
     */
    value: EmptyMessage;
    case: "uint16";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage uint32 = 23;
     */
    value: EmptyMessage;
    case: "uint32";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage uint64 = 24;
     */
    value: EmptyMessage;
    case: "uint64";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage float16 = 25;
     */
    value: EmptyMessage;
    case: "float16";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage float32 = 26;
     */
    value: EmptyMessage;
    case: "float32";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage date32 = 27;
     */
    value: EmptyMessage;
    case: "date32";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.TimeUnit time32 = 28;
     */
    value: TimeUnit;
    case: "time32";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.List list = 29;
     */
    value: List;
    case: "list";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.FixedSizeList fixed_size_list = 30;
     */
    value: FixedSizeList;
    case: "fixedSizeList";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage binary = 31;
     */
    value: EmptyMessage;
    case: "binary";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.EmptyMessage large_binary = 32;
     */
    value: EmptyMessage;
    case: "largeBinary";
  } | {
    /**
     * @generated from field: int32 fixed_size_binary = 33;
     */
    value: number;
    case: "fixedSizeBinary";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Decimal decimal_128 = 34;
     */
    value: Decimal;
    case: "decimal128";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Decimal decimal_256 = 35;
     */
    value: Decimal;
    case: "decimal256";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Map map = 36;
     */
    value: Map;
    case: "map";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.Extension extension = 37;
     */
    value: Extension;
    case: "extension";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ArrowType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.ArrowType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 2, name: "bool", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 3, name: "float64", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 4, name: "int64", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 5, name: "large_utf8", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 6, name: "timestamp", kind: "message", T: Timestamp, oneof: "arrow_type_enum" },
    { no: 7, name: "date64", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 8, name: "struct", kind: "message", T: Struct, oneof: "arrow_type_enum" },
    { no: 9, name: "large_list", kind: "message", T: List, oneof: "arrow_type_enum" },
    { no: 10, name: "time64", kind: "enum", T: proto3.getEnumType(TimeUnit), oneof: "arrow_type_enum" },
    { no: 16, name: "duration", kind: "enum", T: proto3.getEnumType(TimeUnit), oneof: "arrow_type_enum" },
    { no: 17, name: "utf8", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 18, name: "int8", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 19, name: "int16", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 20, name: "int32", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 21, name: "uint8", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 22, name: "uint16", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 23, name: "uint32", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 24, name: "uint64", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 25, name: "float16", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 26, name: "float32", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 27, name: "date32", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 28, name: "time32", kind: "enum", T: proto3.getEnumType(TimeUnit), oneof: "arrow_type_enum" },
    { no: 29, name: "list", kind: "message", T: List, oneof: "arrow_type_enum" },
    { no: 30, name: "fixed_size_list", kind: "message", T: FixedSizeList, oneof: "arrow_type_enum" },
    { no: 31, name: "binary", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 32, name: "large_binary", kind: "message", T: EmptyMessage, oneof: "arrow_type_enum" },
    { no: 33, name: "fixed_size_binary", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "arrow_type_enum" },
    { no: 34, name: "decimal_128", kind: "message", T: Decimal, oneof: "arrow_type_enum" },
    { no: 35, name: "decimal_256", kind: "message", T: Decimal, oneof: "arrow_type_enum" },
    { no: 36, name: "map", kind: "message", T: Map, oneof: "arrow_type_enum" },
    { no: 37, name: "extension", kind: "message", T: Extension, oneof: "arrow_type_enum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArrowType {
    return new ArrowType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArrowType {
    return new ArrowType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArrowType {
    return new ArrowType().fromJsonString(jsonString, options);
  }

  static equals(a: ArrowType | PlainMessage<ArrowType> | undefined, b: ArrowType | PlainMessage<ArrowType> | undefined): boolean {
    return proto3.util.equals(ArrowType, a, b);
  }
}

/**
 * @generated from message chalk.arrow.v1.EmptyMessage
 */
export class EmptyMessage extends Message<EmptyMessage> {
  constructor(data?: PartialMessage<EmptyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.arrow.v1.EmptyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyMessage {
    return new EmptyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyMessage {
    return new EmptyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyMessage {
    return new EmptyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyMessage | PlainMessage<EmptyMessage> | undefined, b: EmptyMessage | PlainMessage<EmptyMessage> | undefined): boolean {
    return proto3.util.equals(EmptyMessage, a, b);
  }
}

