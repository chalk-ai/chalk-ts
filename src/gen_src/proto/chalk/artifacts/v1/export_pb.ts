// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/artifacts/v1/export.proto (package chalk.artifacts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Graph } from "../../graph/v1/graph_pb";
import { CronQuery } from "./cron_query_pb";
import { Chart } from "./chart_pb";
import { CDCSource } from "./cdc_pb";
import { LSP } from "../../lsp/v1/lsp_pb";
import { ChalkError } from "../../common/v1/chalk_error_pb";

/**
 * @generated from enum chalk.artifacts.v1.ValidationLogSeverity
 */
export enum ValidationLogSeverity {
  /**
   * @generated from enum value: VALIDATION_LOG_SEVERITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Space field numbers out in case we need to add more
   * levels and have it be numerically congruent.
   *
   * @generated from enum value: VALIDATION_LOG_SEVERITY_INFO = 4;
   */
  INFO = 4,

  /**
   * @generated from enum value: VALIDATION_LOG_SEVERITY_WARNING = 8;
   */
  WARNING = 8,

  /**
   * @generated from enum value: VALIDATION_LOG_SEVERITY_ERROR = 12;
   */
  ERROR = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(ValidationLogSeverity)
proto3.util.setEnumType(ValidationLogSeverity, "chalk.artifacts.v1.ValidationLogSeverity", [
  { no: 0, name: "VALIDATION_LOG_SEVERITY_UNSPECIFIED" },
  { no: 4, name: "VALIDATION_LOG_SEVERITY_INFO" },
  { no: 8, name: "VALIDATION_LOG_SEVERITY_WARNING" },
  { no: 12, name: "VALIDATION_LOG_SEVERITY_ERROR" },
]);

/**
 * @generated from message chalk.artifacts.v1.EnvironmentSettings
 */
export class EnvironmentSettings extends Message<EnvironmentSettings> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string runtime = 2;
   */
  runtime?: string;

  /**
   * @generated from field: optional string requirements = 3;
   */
  requirements?: string;

  /**
   * @generated from field: optional string dockerfile = 4;
   */
  dockerfile?: string;

  /**
   * @generated from field: repeated string requires_packages = 5;
   */
  requiresPackages: string[] = [];

  /**
   * @generated from field: optional string platform_version = 6;
   */
  platformVersion?: string;

  constructor(data?: PartialMessage<EnvironmentSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.EnvironmentSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runtime", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "requirements", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "dockerfile", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "requires_packages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "platform_version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentSettings {
    return new EnvironmentSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentSettings {
    return new EnvironmentSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentSettings {
    return new EnvironmentSettings().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentSettings | PlainMessage<EnvironmentSettings> | undefined, b: EnvironmentSettings | PlainMessage<EnvironmentSettings> | undefined): boolean {
    return proto3.util.equals(EnvironmentSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.ProjectSettings
 */
export class ProjectSettings extends Message<ProjectSettings> {
  /**
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * @generated from field: repeated chalk.artifacts.v1.EnvironmentSettings environments = 2;
   */
  environments: EnvironmentSettings[] = [];

  /**
   * @generated from field: chalk.artifacts.v1.ValidationSettings validation = 3;
   */
  validation?: ValidationSettings;

  constructor(data?: PartialMessage<ProjectSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.ProjectSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environments", kind: "message", T: EnvironmentSettings, repeated: true },
    { no: 3, name: "validation", kind: "message", T: ValidationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectSettings {
    return new ProjectSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectSettings {
    return new ProjectSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectSettings {
    return new ProjectSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectSettings | PlainMessage<ProjectSettings> | undefined, b: ProjectSettings | PlainMessage<ProjectSettings> | undefined): boolean {
    return proto3.util.equals(ProjectSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.MetadataSettings
 */
export class MetadataSettings extends Message<MetadataSettings> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string missing = 2;
   */
  missing = "";

  constructor(data?: PartialMessage<MetadataSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.MetadataSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "missing", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataSettings {
    return new MetadataSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataSettings {
    return new MetadataSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataSettings {
    return new MetadataSettings().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataSettings | PlainMessage<MetadataSettings> | undefined, b: MetadataSettings | PlainMessage<MetadataSettings> | undefined): boolean {
    return proto3.util.equals(MetadataSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.FeatureSettings
 */
export class FeatureSettings extends Message<FeatureSettings> {
  /**
   * @generated from field: repeated chalk.artifacts.v1.MetadataSettings metadata = 1;
   */
  metadata: MetadataSettings[] = [];

  constructor(data?: PartialMessage<FeatureSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.FeatureSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: MetadataSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureSettings {
    return new FeatureSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureSettings {
    return new FeatureSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureSettings {
    return new FeatureSettings().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureSettings | PlainMessage<FeatureSettings> | undefined, b: FeatureSettings | PlainMessage<FeatureSettings> | undefined): boolean {
    return proto3.util.equals(FeatureSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.ResolverSettings
 */
export class ResolverSettings extends Message<ResolverSettings> {
  /**
   * @generated from field: repeated chalk.artifacts.v1.MetadataSettings metadata = 1;
   */
  metadata: MetadataSettings[] = [];

  constructor(data?: PartialMessage<ResolverSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.ResolverSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: MetadataSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolverSettings {
    return new ResolverSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolverSettings {
    return new ResolverSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolverSettings {
    return new ResolverSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ResolverSettings | PlainMessage<ResolverSettings> | undefined, b: ResolverSettings | PlainMessage<ResolverSettings> | undefined): boolean {
    return proto3.util.equals(ResolverSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.ValidationSettings
 */
export class ValidationSettings extends Message<ValidationSettings> {
  /**
   * @generated from field: chalk.artifacts.v1.FeatureSettings feature = 1;
   */
  feature?: FeatureSettings;

  /**
   * @generated from field: chalk.artifacts.v1.ResolverSettings resolver = 2;
   */
  resolver?: ResolverSettings;

  constructor(data?: PartialMessage<ValidationSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.ValidationSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "message", T: FeatureSettings },
    { no: 2, name: "resolver", kind: "message", T: ResolverSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationSettings {
    return new ValidationSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationSettings {
    return new ValidationSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationSettings {
    return new ValidationSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationSettings | PlainMessage<ValidationSettings> | undefined, b: ValidationSettings | PlainMessage<ValidationSettings> | undefined): boolean {
    return proto3.util.equals(ValidationSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.FailedImport
 */
export class FailedImport extends Message<FailedImport> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  /**
   * @generated from field: string module = 2;
   */
  module = "";

  /**
   * @generated from field: string traceback = 3;
   */
  traceback = "";

  constructor(data?: PartialMessage<FailedImport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.FailedImport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "traceback", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailedImport {
    return new FailedImport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailedImport {
    return new FailedImport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailedImport {
    return new FailedImport().fromJsonString(jsonString, options);
  }

  static equals(a: FailedImport | PlainMessage<FailedImport> | undefined, b: FailedImport | PlainMessage<FailedImport> | undefined): boolean {
    return proto3.util.equals(FailedImport, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.ChalkpyInfo
 */
export class ChalkpyInfo extends Message<ChalkpyInfo> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: optional string python = 2;
   */
  python?: string;

  constructor(data?: PartialMessage<ChalkpyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.ChalkpyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "python", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChalkpyInfo {
    return new ChalkpyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChalkpyInfo {
    return new ChalkpyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChalkpyInfo {
    return new ChalkpyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ChalkpyInfo | PlainMessage<ChalkpyInfo> | undefined, b: ChalkpyInfo | PlainMessage<ChalkpyInfo> | undefined): boolean {
    return proto3.util.equals(ChalkpyInfo, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.ValidationLog
 */
export class ValidationLog extends Message<ValidationLog> {
  /**
   * @generated from field: string header = 1;
   */
  header = "";

  /**
   * @generated from field: string subheader = 2;
   */
  subheader = "";

  /**
   * @generated from field: chalk.artifacts.v1.ValidationLogSeverity severity = 3;
   */
  severity = ValidationLogSeverity.UNSPECIFIED;

  constructor(data?: PartialMessage<ValidationLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.ValidationLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subheader", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "severity", kind: "enum", T: proto3.getEnumType(ValidationLogSeverity) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationLog {
    return new ValidationLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationLog {
    return new ValidationLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationLog {
    return new ValidationLog().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationLog | PlainMessage<ValidationLog> | undefined, b: ValidationLog | PlainMessage<ValidationLog> | undefined): boolean {
    return proto3.util.equals(ValidationLog, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.Export
 */
export class Export extends Message<Export> {
  /**
   * @generated from field: chalk.graph.v1.Graph graph = 1;
   */
  graph?: Graph;

  /**
   * @generated from field: repeated chalk.artifacts.v1.CronQuery crons = 2;
   */
  crons: CronQuery[] = [];

  /**
   * @generated from field: repeated chalk.artifacts.v1.Chart charts = 3;
   */
  charts: Chart[] = [];

  /**
   * @generated from field: repeated chalk.artifacts.v1.CDCSource cdc_sources = 4;
   */
  cdcSources: CDCSource[] = [];

  /**
   * @generated from field: chalk.artifacts.v1.ProjectSettings config = 5;
   */
  config?: ProjectSettings;

  /**
   * @generated from field: chalk.artifacts.v1.ChalkpyInfo chalkpy = 6;
   */
  chalkpy?: ChalkpyInfo;

  /**
   * @generated from field: repeated chalk.artifacts.v1.FailedImport failed = 7;
   */
  failed: FailedImport[] = [];

  /**
   * @generated from field: repeated chalk.artifacts.v1.ValidationLog logs = 8;
   */
  logs: ValidationLog[] = [];

  /**
   * @generated from field: chalk.lsp.v1.LSP lsp = 9;
   */
  lsp?: LSP;

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError conversion_errors = 10;
   */
  conversionErrors: ChalkError[] = [];

  constructor(data?: PartialMessage<Export>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.Export";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph", kind: "message", T: Graph },
    { no: 2, name: "crons", kind: "message", T: CronQuery, repeated: true },
    { no: 3, name: "charts", kind: "message", T: Chart, repeated: true },
    { no: 4, name: "cdc_sources", kind: "message", T: CDCSource, repeated: true },
    { no: 5, name: "config", kind: "message", T: ProjectSettings },
    { no: 6, name: "chalkpy", kind: "message", T: ChalkpyInfo },
    { no: 7, name: "failed", kind: "message", T: FailedImport, repeated: true },
    { no: 8, name: "logs", kind: "message", T: ValidationLog, repeated: true },
    { no: 9, name: "lsp", kind: "message", T: LSP },
    { no: 10, name: "conversion_errors", kind: "message", T: ChalkError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Export {
    return new Export().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Export {
    return new Export().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Export {
    return new Export().fromJsonString(jsonString, options);
  }

  static equals(a: Export | PlainMessage<Export> | undefined, b: Export | PlainMessage<Export> | undefined): boolean {
    return proto3.util.equals(Export, a, b);
  }
}

