// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/artifacts/v1/chart.proto (package chalk.artifacts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.artifacts.v1.MetricKind
 */
export enum MetricKind {
  /**
   * @generated from enum value: METRIC_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_REQUEST_COUNT = 1;
   */
  FEATURE_REQUEST_COUNT = 1,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_LATENCY = 2;
   */
  FEATURE_LATENCY = 2,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_STALENESS = 3;
   */
  FEATURE_STALENESS = 3,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_VALUE = 4;
   */
  FEATURE_VALUE = 4,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_WRITE = 5;
   */
  FEATURE_WRITE = 5,

  /**
   * @generated from enum value: METRIC_KIND_FEATURE_NULL_RATIO = 6;
   */
  FEATURE_NULL_RATIO = 6,

  /**
   * @generated from enum value: METRIC_KIND_RESOLVER_REQUEST_COUNT = 7;
   */
  RESOLVER_REQUEST_COUNT = 7,

  /**
   * @generated from enum value: METRIC_KIND_RESOLVER_LATENCY = 8;
   */
  RESOLVER_LATENCY = 8,

  /**
   * @generated from enum value: METRIC_KIND_RESOLVER_SUCCESS_RATIO = 9;
   */
  RESOLVER_SUCCESS_RATIO = 9,

  /**
   * @generated from enum value: METRIC_KIND_QUERY_COUNT = 10;
   */
  QUERY_COUNT = 10,

  /**
   * @generated from enum value: METRIC_KIND_QUERY_LATENCY = 11;
   */
  QUERY_LATENCY = 11,

  /**
   * @generated from enum value: METRIC_KIND_QUERY_SUCCESS_RATIO = 12;
   */
  QUERY_SUCCESS_RATIO = 12,

  /**
   * @generated from enum value: METRIC_KIND_BILLING_INFERENCE = 13;
   */
  BILLING_INFERENCE = 13,

  /**
   * @generated from enum value: METRIC_KIND_BILLING_CRON = 14;
   */
  BILLING_CRON = 14,

  /**
   * @generated from enum value: METRIC_KIND_BILLING_MIGRATION = 15;
   */
  BILLING_MIGRATION = 15,

  /**
   * @generated from enum value: METRIC_KIND_CRON_COUNT = 16;
   */
  CRON_COUNT = 16,

  /**
   * @generated from enum value: METRIC_KIND_CRON_LATENCY = 17;
   */
  CRON_LATENCY = 17,

  /**
   * @generated from enum value: METRIC_KIND_STREAM_MESSAGES_PROCESSED = 18;
   */
  STREAM_MESSAGES_PROCESSED = 18,

  /**
   * @generated from enum value: METRIC_KIND_STREAM_MESSAGE_LATENCY = 19;
   */
  STREAM_MESSAGE_LATENCY = 19,

  /**
   * @generated from enum value: METRIC_KIND_STREAM_WINDOWS_PROCESSED = 20;
   */
  STREAM_WINDOWS_PROCESSED = 20,

  /**
   * @generated from enum value: METRIC_KIND_STREAM_WINDOW_LATENCY = 21;
   */
  STREAM_WINDOW_LATENCY = 21,
}
// Retrieve enum metadata with: proto3.getEnumType(MetricKind)
proto3.util.setEnumType(MetricKind, "chalk.artifacts.v1.MetricKind", [
  { no: 0, name: "METRIC_KIND_UNSPECIFIED" },
  { no: 1, name: "METRIC_KIND_FEATURE_REQUEST_COUNT" },
  { no: 2, name: "METRIC_KIND_FEATURE_LATENCY" },
  { no: 3, name: "METRIC_KIND_FEATURE_STALENESS" },
  { no: 4, name: "METRIC_KIND_FEATURE_VALUE" },
  { no: 5, name: "METRIC_KIND_FEATURE_WRITE" },
  { no: 6, name: "METRIC_KIND_FEATURE_NULL_RATIO" },
  { no: 7, name: "METRIC_KIND_RESOLVER_REQUEST_COUNT" },
  { no: 8, name: "METRIC_KIND_RESOLVER_LATENCY" },
  { no: 9, name: "METRIC_KIND_RESOLVER_SUCCESS_RATIO" },
  { no: 10, name: "METRIC_KIND_QUERY_COUNT" },
  { no: 11, name: "METRIC_KIND_QUERY_LATENCY" },
  { no: 12, name: "METRIC_KIND_QUERY_SUCCESS_RATIO" },
  { no: 13, name: "METRIC_KIND_BILLING_INFERENCE" },
  { no: 14, name: "METRIC_KIND_BILLING_CRON" },
  { no: 15, name: "METRIC_KIND_BILLING_MIGRATION" },
  { no: 16, name: "METRIC_KIND_CRON_COUNT" },
  { no: 17, name: "METRIC_KIND_CRON_LATENCY" },
  { no: 18, name: "METRIC_KIND_STREAM_MESSAGES_PROCESSED" },
  { no: 19, name: "METRIC_KIND_STREAM_MESSAGE_LATENCY" },
  { no: 20, name: "METRIC_KIND_STREAM_WINDOWS_PROCESSED" },
  { no: 21, name: "METRIC_KIND_STREAM_WINDOW_LATENCY" },
]);

/**
 * @generated from enum chalk.artifacts.v1.FilterKind
 */
export enum FilterKind {
  /**
   * @generated from enum value: FILTER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILTER_KIND_FEATURE_STATUS = 1;
   */
  FEATURE_STATUS = 1,

  /**
   * @generated from enum value: FILTER_KIND_FEATURE_NAME = 2;
   */
  FEATURE_NAME = 2,

  /**
   * @generated from enum value: FILTER_KIND_FEATURE_TAG = 3;
   */
  FEATURE_TAG = 3,

  /**
   * @generated from enum value: FILTER_KIND_RESOLVER_STATUS = 4;
   */
  RESOLVER_STATUS = 4,

  /**
   * @generated from enum value: FILTER_KIND_RESOLVER_NAME = 5;
   */
  RESOLVER_NAME = 5,

  /**
   * @generated from enum value: FILTER_KIND_RESOLVER_TAG = 6;
   */
  RESOLVER_TAG = 6,

  /**
   * @generated from enum value: FILTER_KIND_CRON_STATUS = 7;
   */
  CRON_STATUS = 7,

  /**
   * @generated from enum value: FILTER_KIND_MIGRATION_STATUS = 8;
   */
  MIGRATION_STATUS = 8,

  /**
   * @generated from enum value: FILTER_KIND_ONLINE_OFFLINE = 9;
   */
  ONLINE_OFFLINE = 9,

  /**
   * @generated from enum value: FILTER_KIND_CACHE_HIT = 10;
   */
  CACHE_HIT = 10,

  /**
   * @generated from enum value: FILTER_KIND_OPERATION_ID = 11;
   */
  OPERATION_ID = 11,

  /**
   * @generated from enum value: FILTER_KIND_QUERY_NAME = 12;
   */
  QUERY_NAME = 12,

  /**
   * @generated from enum value: FILTER_KIND_QUERY_STATUS = 13;
   */
  QUERY_STATUS = 13,

  /**
   * @generated from enum value: FILTER_KIND_IS_NULL = 14;
   */
  IS_NULL = 14,

  /**
   * @generated from enum value: FILTER_KIND_USAGE_KIND = 15;
   */
  USAGE_KIND = 15,

  /**
   * @generated from enum value: FILTER_KIND_RESOURCE_GROUP = 16;
   */
  RESOURCE_GROUP = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(FilterKind)
proto3.util.setEnumType(FilterKind, "chalk.artifacts.v1.FilterKind", [
  { no: 0, name: "FILTER_KIND_UNSPECIFIED" },
  { no: 1, name: "FILTER_KIND_FEATURE_STATUS" },
  { no: 2, name: "FILTER_KIND_FEATURE_NAME" },
  { no: 3, name: "FILTER_KIND_FEATURE_TAG" },
  { no: 4, name: "FILTER_KIND_RESOLVER_STATUS" },
  { no: 5, name: "FILTER_KIND_RESOLVER_NAME" },
  { no: 6, name: "FILTER_KIND_RESOLVER_TAG" },
  { no: 7, name: "FILTER_KIND_CRON_STATUS" },
  { no: 8, name: "FILTER_KIND_MIGRATION_STATUS" },
  { no: 9, name: "FILTER_KIND_ONLINE_OFFLINE" },
  { no: 10, name: "FILTER_KIND_CACHE_HIT" },
  { no: 11, name: "FILTER_KIND_OPERATION_ID" },
  { no: 12, name: "FILTER_KIND_QUERY_NAME" },
  { no: 13, name: "FILTER_KIND_QUERY_STATUS" },
  { no: 14, name: "FILTER_KIND_IS_NULL" },
  { no: 15, name: "FILTER_KIND_USAGE_KIND" },
  { no: 16, name: "FILTER_KIND_RESOURCE_GROUP" },
]);

/**
 * @generated from enum chalk.artifacts.v1.ComparatorKind
 */
export enum ComparatorKind {
  /**
   * @generated from enum value: COMPARATOR_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COMPARATOR_KIND_EQ = 1;
   */
  EQ = 1,

  /**
   * @generated from enum value: COMPARATOR_KIND_NEQ = 2;
   */
  NEQ = 2,

  /**
   * @generated from enum value: COMPARATOR_KIND_ONE_OF = 3;
   */
  ONE_OF = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ComparatorKind)
proto3.util.setEnumType(ComparatorKind, "chalk.artifacts.v1.ComparatorKind", [
  { no: 0, name: "COMPARATOR_KIND_UNSPECIFIED" },
  { no: 1, name: "COMPARATOR_KIND_EQ" },
  { no: 2, name: "COMPARATOR_KIND_NEQ" },
  { no: 3, name: "COMPARATOR_KIND_ONE_OF" },
]);

/**
 * @generated from enum chalk.artifacts.v1.WindowFunctionKind
 */
export enum WindowFunctionKind {
  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_COUNT = 1;
   */
  COUNT = 1,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_MEAN = 2;
   */
  MEAN = 2,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_SUM = 3;
   */
  SUM = 3,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_MIN = 4;
   */
  MIN = 4,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_MAX = 5;
   */
  MAX = 5,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_99 = 6;
   */
  PERCENTILE_99 = 6,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_95 = 7;
   */
  PERCENTILE_95 = 7,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_75 = 8;
   */
  PERCENTILE_75 = 8,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_50 = 9;
   */
  PERCENTILE_50 = 9,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_25 = 10;
   */
  PERCENTILE_25 = 10,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_PERCENTILE_5 = 11;
   */
  PERCENTILE_5 = 11,

  /**
   * @generated from enum value: WINDOW_FUNCTION_KIND_ALL_PERCENTILES = 12;
   */
  ALL_PERCENTILES = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(WindowFunctionKind)
proto3.util.setEnumType(WindowFunctionKind, "chalk.artifacts.v1.WindowFunctionKind", [
  { no: 0, name: "WINDOW_FUNCTION_KIND_UNSPECIFIED" },
  { no: 1, name: "WINDOW_FUNCTION_KIND_COUNT" },
  { no: 2, name: "WINDOW_FUNCTION_KIND_MEAN" },
  { no: 3, name: "WINDOW_FUNCTION_KIND_SUM" },
  { no: 4, name: "WINDOW_FUNCTION_KIND_MIN" },
  { no: 5, name: "WINDOW_FUNCTION_KIND_MAX" },
  { no: 6, name: "WINDOW_FUNCTION_KIND_PERCENTILE_99" },
  { no: 7, name: "WINDOW_FUNCTION_KIND_PERCENTILE_95" },
  { no: 8, name: "WINDOW_FUNCTION_KIND_PERCENTILE_75" },
  { no: 9, name: "WINDOW_FUNCTION_KIND_PERCENTILE_50" },
  { no: 10, name: "WINDOW_FUNCTION_KIND_PERCENTILE_25" },
  { no: 11, name: "WINDOW_FUNCTION_KIND_PERCENTILE_5" },
  { no: 12, name: "WINDOW_FUNCTION_KIND_ALL_PERCENTILES" },
]);

/**
 * @generated from enum chalk.artifacts.v1.GroupByKind
 */
export enum GroupByKind {
  /**
   * @generated from enum value: GROUP_BY_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GROUP_BY_KIND_FEATURE_STATUS = 1;
   */
  FEATURE_STATUS = 1,

  /**
   * @generated from enum value: GROUP_BY_KIND_FEATURE_NAME = 2;
   */
  FEATURE_NAME = 2,

  /**
   * @generated from enum value: GROUP_BY_KIND_IS_NULL = 3;
   */
  IS_NULL = 3,

  /**
   * @generated from enum value: GROUP_BY_KIND_RESOLVER_STATUS = 4;
   */
  RESOLVER_STATUS = 4,

  /**
   * @generated from enum value: GROUP_BY_KIND_RESOLVER_NAME = 5;
   */
  RESOLVER_NAME = 5,

  /**
   * @generated from enum value: GROUP_BY_KIND_QUERY_STATUS = 6;
   */
  QUERY_STATUS = 6,

  /**
   * @generated from enum value: GROUP_BY_KIND_QUERY_NAME = 7;
   */
  QUERY_NAME = 7,

  /**
   * @generated from enum value: GROUP_BY_KIND_ONLINE_OFFLINE = 8;
   */
  ONLINE_OFFLINE = 8,

  /**
   * @generated from enum value: GROUP_BY_KIND_CACHE_HIT = 9;
   */
  CACHE_HIT = 9,

  /**
   * @generated from enum value: GROUP_BY_KIND_USAGE_KIND = 10;
   */
  USAGE_KIND = 10,

  /**
   * @generated from enum value: GROUP_BY_KIND_RESOURCE_GROUP = 11;
   */
  RESOURCE_GROUP = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(GroupByKind)
proto3.util.setEnumType(GroupByKind, "chalk.artifacts.v1.GroupByKind", [
  { no: 0, name: "GROUP_BY_KIND_UNSPECIFIED" },
  { no: 1, name: "GROUP_BY_KIND_FEATURE_STATUS" },
  { no: 2, name: "GROUP_BY_KIND_FEATURE_NAME" },
  { no: 3, name: "GROUP_BY_KIND_IS_NULL" },
  { no: 4, name: "GROUP_BY_KIND_RESOLVER_STATUS" },
  { no: 5, name: "GROUP_BY_KIND_RESOLVER_NAME" },
  { no: 6, name: "GROUP_BY_KIND_QUERY_STATUS" },
  { no: 7, name: "GROUP_BY_KIND_QUERY_NAME" },
  { no: 8, name: "GROUP_BY_KIND_ONLINE_OFFLINE" },
  { no: 9, name: "GROUP_BY_KIND_CACHE_HIT" },
  { no: 10, name: "GROUP_BY_KIND_USAGE_KIND" },
  { no: 11, name: "GROUP_BY_KIND_RESOURCE_GROUP" },
]);

/**
 * @generated from enum chalk.artifacts.v1.MetricFormulaKind
 */
export enum MetricFormulaKind {
  /**
   * @generated from enum value: METRIC_FORMULA_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_SUM = 1;
   */
  SUM = 1,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_TOTAL_RATIO = 2;
   */
  TOTAL_RATIO = 2,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_RATIO = 3;
   */
  RATIO = 3,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_PRODUCT = 4;
   */
  PRODUCT = 4,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_ABS = 5;
   */
  ABS = 5,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_KS_STAT = 6;
   */
  KS_STAT = 6,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_KS_TEST = 7;
   */
  KS_TEST = 7,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_KS_THRESHOLD = 8;
   */
  KS_THRESHOLD = 8,

  /**
   * @generated from enum value: METRIC_FORMULA_KIND_TIME_OFFSET = 9;
   */
  TIME_OFFSET = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(MetricFormulaKind)
proto3.util.setEnumType(MetricFormulaKind, "chalk.artifacts.v1.MetricFormulaKind", [
  { no: 0, name: "METRIC_FORMULA_KIND_UNSPECIFIED" },
  { no: 1, name: "METRIC_FORMULA_KIND_SUM" },
  { no: 2, name: "METRIC_FORMULA_KIND_TOTAL_RATIO" },
  { no: 3, name: "METRIC_FORMULA_KIND_RATIO" },
  { no: 4, name: "METRIC_FORMULA_KIND_PRODUCT" },
  { no: 5, name: "METRIC_FORMULA_KIND_ABS" },
  { no: 6, name: "METRIC_FORMULA_KIND_KS_STAT" },
  { no: 7, name: "METRIC_FORMULA_KIND_KS_TEST" },
  { no: 8, name: "METRIC_FORMULA_KIND_KS_THRESHOLD" },
  { no: 9, name: "METRIC_FORMULA_KIND_TIME_OFFSET" },
]);

/**
 * @generated from enum chalk.artifacts.v1.AlertSeverityKind
 */
export enum AlertSeverityKind {
  /**
   * @generated from enum value: ALERT_SEVERITY_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ALERT_SEVERITY_KIND_CRITICAL = 1;
   */
  CRITICAL = 1,

  /**
   * @generated from enum value: ALERT_SEVERITY_KIND_ERROR = 2;
   */
  ERROR = 2,

  /**
   * @generated from enum value: ALERT_SEVERITY_KIND_WARNING = 3;
   */
  WARNING = 3,

  /**
   * @generated from enum value: ALERT_SEVERITY_KIND_INFO = 4;
   */
  INFO = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AlertSeverityKind)
proto3.util.setEnumType(AlertSeverityKind, "chalk.artifacts.v1.AlertSeverityKind", [
  { no: 0, name: "ALERT_SEVERITY_KIND_UNSPECIFIED" },
  { no: 1, name: "ALERT_SEVERITY_KIND_CRITICAL" },
  { no: 2, name: "ALERT_SEVERITY_KIND_ERROR" },
  { no: 3, name: "ALERT_SEVERITY_KIND_WARNING" },
  { no: 4, name: "ALERT_SEVERITY_KIND_INFO" },
]);

/**
 * @generated from enum chalk.artifacts.v1.ThresholdKind
 */
export enum ThresholdKind {
  /**
   * @generated from enum value: THRESHOLD_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THRESHOLD_KIND_ABOVE = 1;
   */
  ABOVE = 1,

  /**
   * @generated from enum value: THRESHOLD_KIND_BELOW = 2;
   */
  BELOW = 2,

  /**
   * @generated from enum value: THRESHOLD_KIND_GREATER_EQUAL = 3;
   */
  GREATER_EQUAL = 3,

  /**
   * @generated from enum value: THRESHOLD_KIND_LESS_EQUAL = 4;
   */
  LESS_EQUAL = 4,

  /**
   * @generated from enum value: THRESHOLD_KIND_EQUAL = 5;
   */
  EQUAL = 5,

  /**
   * @generated from enum value: THRESHOLD_KIND_NOT_EQUAL = 6;
   */
  NOT_EQUAL = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(ThresholdKind)
proto3.util.setEnumType(ThresholdKind, "chalk.artifacts.v1.ThresholdKind", [
  { no: 0, name: "THRESHOLD_KIND_UNSPECIFIED" },
  { no: 1, name: "THRESHOLD_KIND_ABOVE" },
  { no: 2, name: "THRESHOLD_KIND_BELOW" },
  { no: 3, name: "THRESHOLD_KIND_GREATER_EQUAL" },
  { no: 4, name: "THRESHOLD_KIND_LESS_EQUAL" },
  { no: 5, name: "THRESHOLD_KIND_EQUAL" },
  { no: 6, name: "THRESHOLD_KIND_NOT_EQUAL" },
]);

/**
 * @generated from enum chalk.artifacts.v1.ChartLinkKind
 */
export enum ChartLinkKind {
  /**
   * @generated from enum value: CHART_LINK_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHART_LINK_KIND_RESOLVER = 1;
   */
  RESOLVER = 1,

  /**
   * @generated from enum value: CHART_LINK_KIND_FEATURE = 2;
   */
  FEATURE = 2,

  /**
   * @generated from enum value: CHART_LINK_KIND_QUERY = 3;
   */
  QUERY = 3,

  /**
   * @generated from enum value: CHART_LINK_KIND_MANUAL = 4;
   */
  MANUAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ChartLinkKind)
proto3.util.setEnumType(ChartLinkKind, "chalk.artifacts.v1.ChartLinkKind", [
  { no: 0, name: "CHART_LINK_KIND_UNSPECIFIED" },
  { no: 1, name: "CHART_LINK_KIND_RESOLVER" },
  { no: 2, name: "CHART_LINK_KIND_FEATURE" },
  { no: 3, name: "CHART_LINK_KIND_QUERY" },
  { no: 4, name: "CHART_LINK_KIND_MANUAL" },
]);

/**
 * @generated from message chalk.artifacts.v1.AlertTrigger
 */
export class AlertTrigger extends Message<AlertTrigger> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.artifacts.v1.AlertSeverityKind severity = 2;
   */
  severity = AlertSeverityKind.UNSPECIFIED;

  /**
   * @generated from field: chalk.artifacts.v1.ThresholdKind threshold_position = 3;
   */
  thresholdPosition = ThresholdKind.UNSPECIFIED;

  /**
   * @generated from field: float threshold_value = 4;
   */
  thresholdValue = 0;

  /**
   * @generated from field: optional string series_name = 5;
   */
  seriesName?: string;

  /**
   * @generated from field: optional string channel_name = 6;
   */
  channelName?: string;

  /**
   * @generated from field: optional string description = 7;
   */
  description?: string;

  constructor(data?: PartialMessage<AlertTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.AlertTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "severity", kind: "enum", T: proto3.getEnumType(AlertSeverityKind) },
    { no: 3, name: "threshold_position", kind: "enum", T: proto3.getEnumType(ThresholdKind) },
    { no: 4, name: "threshold_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "series_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "channel_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertTrigger {
    return new AlertTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertTrigger {
    return new AlertTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertTrigger {
    return new AlertTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: AlertTrigger | PlainMessage<AlertTrigger> | undefined, b: AlertTrigger | PlainMessage<AlertTrigger> | undefined): boolean {
    return proto3.util.equals(AlertTrigger, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.DatasetFeatureOperand
 */
export class DatasetFeatureOperand extends Message<DatasetFeatureOperand> {
  /**
   * @generated from field: string dataset = 1;
   */
  dataset = "";

  /**
   * @generated from field: string feature = 2;
   */
  feature = "";

  constructor(data?: PartialMessage<DatasetFeatureOperand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.DatasetFeatureOperand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetFeatureOperand {
    return new DatasetFeatureOperand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetFeatureOperand {
    return new DatasetFeatureOperand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetFeatureOperand {
    return new DatasetFeatureOperand().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetFeatureOperand | PlainMessage<DatasetFeatureOperand> | undefined, b: DatasetFeatureOperand | PlainMessage<DatasetFeatureOperand> | undefined): boolean {
    return proto3.util.equals(DatasetFeatureOperand, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.MetricFormula
 */
export class MetricFormula extends Message<MetricFormula> {
  /**
   * @generated from field: chalk.artifacts.v1.MetricFormulaKind kind = 1;
   */
  kind = MetricFormulaKind.UNSPECIFIED;

  /**
   * The following fields are mutually exclusive
   * but we're not using `oneof` because one of
   * the fields is a repeated field, which would
   * make using `oneof` really ugly.
   * ---- UNION START ----
   *
   * @generated from field: optional int64 single_series_operands = 2;
   */
  singleSeriesOperands?: bigint;

  /**
   * @generated from field: repeated int64 multi_series_operands = 3;
   */
  multiSeriesOperands: bigint[] = [];

  /**
   * @generated from field: chalk.artifacts.v1.DatasetFeatureOperand dataset_feature_operands = 4;
   */
  datasetFeatureOperands?: DatasetFeatureOperand;

  /**
   * ---- UNION END ----
   *
   * @generated from field: optional string name = 5;
   */
  name?: string;

  constructor(data?: PartialMessage<MetricFormula>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.MetricFormula";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(MetricFormulaKind) },
    { no: 2, name: "single_series_operands", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "multi_series_operands", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 4, name: "dataset_feature_operands", kind: "message", T: DatasetFeatureOperand },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricFormula {
    return new MetricFormula().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricFormula {
    return new MetricFormula().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricFormula {
    return new MetricFormula().fromJsonString(jsonString, options);
  }

  static equals(a: MetricFormula | PlainMessage<MetricFormula> | undefined, b: MetricFormula | PlainMessage<MetricFormula> | undefined): boolean {
    return proto3.util.equals(MetricFormula, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.MetricFilter
 */
export class MetricFilter extends Message<MetricFilter> {
  /**
   * @generated from field: chalk.artifacts.v1.FilterKind kind = 1;
   */
  kind = FilterKind.UNSPECIFIED;

  /**
   * @generated from field: chalk.artifacts.v1.ComparatorKind comparator = 2;
   */
  comparator = ComparatorKind.UNSPECIFIED;

  /**
   * @generated from field: repeated string value = 3;
   */
  value: string[] = [];

  constructor(data?: PartialMessage<MetricFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.MetricFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(FilterKind) },
    { no: 2, name: "comparator", kind: "enum", T: proto3.getEnumType(ComparatorKind) },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricFilter {
    return new MetricFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricFilter {
    return new MetricFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricFilter {
    return new MetricFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MetricFilter | PlainMessage<MetricFilter> | undefined, b: MetricFilter | PlainMessage<MetricFilter> | undefined): boolean {
    return proto3.util.equals(MetricFilter, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.MetricConfigSeries
 */
export class MetricConfigSeries extends Message<MetricConfigSeries> {
  /**
   * @generated from field: chalk.artifacts.v1.MetricKind metric = 1;
   */
  metric = MetricKind.UNSPECIFIED;

  /**
   * @generated from field: repeated chalk.artifacts.v1.MetricFilter filters = 2;
   */
  filters: MetricFilter[] = [];

  /**
   * @generated from field: optional string name = 3;
   */
  name?: string;

  /**
   * @generated from field: chalk.artifacts.v1.WindowFunctionKind window_function = 4;
   */
  windowFunction = WindowFunctionKind.UNSPECIFIED;

  /**
   * @generated from field: repeated chalk.artifacts.v1.GroupByKind group_by = 5;
   */
  groupBy: GroupByKind[] = [];

  constructor(data?: PartialMessage<MetricConfigSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.MetricConfigSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metric", kind: "enum", T: proto3.getEnumType(MetricKind) },
    { no: 2, name: "filters", kind: "message", T: MetricFilter, repeated: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "window_function", kind: "enum", T: proto3.getEnumType(WindowFunctionKind) },
    { no: 5, name: "group_by", kind: "enum", T: proto3.getEnumType(GroupByKind), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricConfigSeries {
    return new MetricConfigSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricConfigSeries {
    return new MetricConfigSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricConfigSeries {
    return new MetricConfigSeries().fromJsonString(jsonString, options);
  }

  static equals(a: MetricConfigSeries | PlainMessage<MetricConfigSeries> | undefined, b: MetricConfigSeries | PlainMessage<MetricConfigSeries> | undefined): boolean {
    return proto3.util.equals(MetricConfigSeries, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.MetricConfig
 */
export class MetricConfig extends Message<MetricConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string window_period = 2;
   */
  windowPeriod = "";

  /**
   * @generated from field: repeated chalk.artifacts.v1.MetricConfigSeries series = 3;
   */
  series: MetricConfigSeries[] = [];

  /**
   * @generated from field: repeated chalk.artifacts.v1.MetricFormula formulas = 4;
   */
  formulas: MetricFormula[] = [];

  /**
   * @generated from field: chalk.artifacts.v1.AlertTrigger trigger = 5;
   */
  trigger?: AlertTrigger;

  constructor(data?: PartialMessage<MetricConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.MetricConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window_period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "series", kind: "message", T: MetricConfigSeries, repeated: true },
    { no: 4, name: "formulas", kind: "message", T: MetricFormula, repeated: true },
    { no: 5, name: "trigger", kind: "message", T: AlertTrigger },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricConfig {
    return new MetricConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricConfig {
    return new MetricConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricConfig {
    return new MetricConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MetricConfig | PlainMessage<MetricConfig> | undefined, b: MetricConfig | PlainMessage<MetricConfig> | undefined): boolean {
    return proto3.util.equals(MetricConfig, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.Chart
 */
export class Chart extends Message<Chart> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: chalk.artifacts.v1.MetricConfig config = 2;
   */
  config?: MetricConfig;

  /**
   * @generated from field: chalk.artifacts.v1.ChartLinkKind entity_kind = 3;
   */
  entityKind = ChartLinkKind.UNSPECIFIED;

  /**
   * @generated from field: optional string entity_id = 4;
   */
  entityId?: string;

  constructor(data?: PartialMessage<Chart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.Chart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: MetricConfig },
    { no: 3, name: "entity_kind", kind: "enum", T: proto3.getEnumType(ChartLinkKind) },
    { no: 4, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chart {
    return new Chart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJsonString(jsonString, options);
  }

  static equals(a: Chart | PlainMessage<Chart> | undefined, b: Chart | PlainMessage<Chart> | undefined): boolean {
    return proto3.util.equals(Chart, a, b);
  }
}

