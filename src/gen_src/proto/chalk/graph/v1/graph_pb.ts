// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/graph/v1/graph.proto (package chalk.graph.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { DatabaseSource, DatabaseSourceReference, StreamSource, StreamSourceReference } from "./sources_pb";
import { DatabaseSource as DatabaseSource$1, DatabaseSourceGroup, DatabaseSourceReference as DatabaseSourceReference$1, StreamSource as StreamSource$1, StreamSourceReference as StreamSourceReference$1 } from "../v2/sources_pb";
import { LogicalExprNode } from "../../expression/v1/expression_pb";
import { ArrowType, ScalarValue } from "../../arrow/v1/arrow_pb";
import { Range } from "../../lsp/v1/lsp_pb";

/**
 * @generated from enum chalk.graph.v1.CacheStrategy
 */
export enum CacheStrategy {
  /**
   * @generated from enum value: CACHE_STRATEGY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CACHE_STRATEGY_ALL = 1;
   */
  ALL = 1,

  /**
   * @generated from enum value: CACHE_STRATEGY_NO_NULLS = 2;
   */
  NO_NULLS = 2,

  /**
   * @generated from enum value: CACHE_STRATEGY_EVICT_NULLS = 3;
   */
  EVICT_NULLS = 3,

  /**
   * @generated from enum value: CACHE_STRATEGY_NO_DEFAULTS = 4;
   */
  NO_DEFAULTS = 4,

  /**
   * @generated from enum value: CACHE_STRATEGY_EVICT_DEFAULTS = 5;
   */
  EVICT_DEFAULTS = 5,

  /**
   * @generated from enum value: CACHE_STRATEGY_NO_NULLS_OR_DEFAULTS = 6;
   */
  NO_NULLS_OR_DEFAULTS = 6,

  /**
   * @generated from enum value: CACHE_STRATEGY_EVICT_NULLS_AND_DEFAULTS = 7;
   */
  EVICT_NULLS_AND_DEFAULTS = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(CacheStrategy)
proto3.util.setEnumType(CacheStrategy, "chalk.graph.v1.CacheStrategy", [
  { no: 0, name: "CACHE_STRATEGY_UNSPECIFIED" },
  { no: 1, name: "CACHE_STRATEGY_ALL" },
  { no: 2, name: "CACHE_STRATEGY_NO_NULLS" },
  { no: 3, name: "CACHE_STRATEGY_EVICT_NULLS" },
  { no: 4, name: "CACHE_STRATEGY_NO_DEFAULTS" },
  { no: 5, name: "CACHE_STRATEGY_EVICT_DEFAULTS" },
  { no: 6, name: "CACHE_STRATEGY_NO_NULLS_OR_DEFAULTS" },
  { no: 7, name: "CACHE_STRATEGY_EVICT_NULLS_AND_DEFAULTS" },
]);

/**
 * @generated from enum chalk.graph.v1.ResolverKind
 */
export enum ResolverKind {
  /**
   * @generated from enum value: RESOLVER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOLVER_KIND_ONLINE = 1;
   */
  ONLINE = 1,

  /**
   * @generated from enum value: RESOLVER_KIND_OFFLINE = 2;
   */
  OFFLINE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResolverKind)
proto3.util.setEnumType(ResolverKind, "chalk.graph.v1.ResolverKind", [
  { no: 0, name: "RESOLVER_KIND_UNSPECIFIED" },
  { no: 1, name: "RESOLVER_KIND_ONLINE" },
  { no: 2, name: "RESOLVER_KIND_OFFLINE" },
]);

/**
 * @generated from enum chalk.graph.v1.ResourceHint
 */
export enum ResourceHint {
  /**
   * @generated from enum value: RESOURCE_HINT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOURCE_HINT_CPU = 1;
   */
  CPU = 1,

  /**
   * @generated from enum value: RESOURCE_HINT_IO = 2;
   */
  IO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceHint)
proto3.util.setEnumType(ResourceHint, "chalk.graph.v1.ResourceHint", [
  { no: 0, name: "RESOURCE_HINT_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_HINT_CPU" },
  { no: 2, name: "RESOURCE_HINT_IO" },
]);

/**
 * @generated from enum chalk.graph.v1.Finalizer
 */
export enum Finalizer {
  /**
   * @generated from enum value: FINALIZER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FINALIZER_ONE_OR_NONE = 1;
   */
  ONE_OR_NONE = 1,

  /**
   * @generated from enum value: FINALIZER_ONE = 2;
   */
  ONE = 2,

  /**
   * @generated from enum value: FINALIZER_FIRST = 3;
   */
  FIRST = 3,

  /**
   * @generated from enum value: FINALIZER_ALL = 4;
   */
  ALL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Finalizer)
proto3.util.setEnumType(Finalizer, "chalk.graph.v1.Finalizer", [
  { no: 0, name: "FINALIZER_UNSPECIFIED" },
  { no: 1, name: "FINALIZER_ONE_OR_NONE" },
  { no: 2, name: "FINALIZER_ONE" },
  { no: 3, name: "FINALIZER_FIRST" },
  { no: 4, name: "FINALIZER_ALL" },
]);

/**
 * @generated from enum chalk.graph.v1.IncrementalMode
 */
export enum IncrementalMode {
  /**
   * @generated from enum value: INCREMENTAL_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INCREMENTAL_MODE_ROW = 1;
   */
  ROW = 1,

  /**
   * @generated from enum value: INCREMENTAL_MODE_GROUP = 2;
   */
  GROUP = 2,

  /**
   * @generated from enum value: INCREMENTAL_MODE_PARAMETER = 3;
   */
  PARAMETER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(IncrementalMode)
proto3.util.setEnumType(IncrementalMode, "chalk.graph.v1.IncrementalMode", [
  { no: 0, name: "INCREMENTAL_MODE_UNSPECIFIED" },
  { no: 1, name: "INCREMENTAL_MODE_ROW" },
  { no: 2, name: "INCREMENTAL_MODE_GROUP" },
  { no: 3, name: "INCREMENTAL_MODE_PARAMETER" },
]);

/**
 * @generated from enum chalk.graph.v1.IncrementalTimestampMode
 */
export enum IncrementalTimestampMode {
  /**
   * @generated from enum value: INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INCREMENTAL_TIMESTAMP_MODE_FEATURE_TIME = 1;
   */
  FEATURE_TIME = 1,

  /**
   * @generated from enum value: INCREMENTAL_TIMESTAMP_MODE_RESOLVER_EXECUTION_TIME = 2;
   */
  RESOLVER_EXECUTION_TIME = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IncrementalTimestampMode)
proto3.util.setEnumType(IncrementalTimestampMode, "chalk.graph.v1.IncrementalTimestampMode", [
  { no: 0, name: "INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED" },
  { no: 1, name: "INCREMENTAL_TIMESTAMP_MODE_FEATURE_TIME" },
  { no: 2, name: "INCREMENTAL_TIMESTAMP_MODE_RESOLVER_EXECUTION_TIME" },
]);

/**
 * @generated from enum chalk.graph.v1.WindowMode
 */
export enum WindowMode {
  /**
   * @generated from enum value: WINDOW_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: WINDOW_MODE_CONTINUOUS = 1;
   */
  CONTINUOUS = 1,

  /**
   * @generated from enum value: WINDOW_MODE_TUMBLING = 2;
   */
  TUMBLING = 2,

  /**
   * @generated from enum value: WINDOW_MODE_CDC = 3;
   */
  CDC = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(WindowMode)
proto3.util.setEnumType(WindowMode, "chalk.graph.v1.WindowMode", [
  { no: 0, name: "WINDOW_MODE_UNSPECIFIED" },
  { no: 1, name: "WINDOW_MODE_CONTINUOUS" },
  { no: 2, name: "WINDOW_MODE_TUMBLING" },
  { no: 3, name: "WINDOW_MODE_CDC" },
]);

/**
 * @generated from message chalk.graph.v1.Graph
 */
export class Graph extends Message<Graph> {
  /**
   * @generated from field: repeated chalk.graph.v1.FeatureSet feature_sets = 1;
   */
  featureSets: FeatureSet[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.Resolver resolvers = 2;
   */
  resolvers: Resolver[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.StreamResolver stream_resolvers = 3;
   */
  streamResolvers: StreamResolver[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.SinkResolver sink_resolvers = 4;
   */
  sinkResolvers: SinkResolver[] = [];

  /**
   * database_sources is deprecated; see database_sources_v2
   *
   * @generated from field: repeated chalk.graph.v1.DatabaseSource database_sources = 5 [deprecated = true];
   * @deprecated
   */
  databaseSources: DatabaseSource[] = [];

  /**
   * stream_sources is deprecated; see stream_sources_v2
   *
   * @generated from field: repeated chalk.graph.v1.StreamSource stream_sources = 6 [deprecated = true];
   * @deprecated
   */
  streamSources: StreamSource[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.NamedQuery named_queries = 7;
   */
  namedQueries: NamedQuery[] = [];

  /**
   * @generated from field: repeated chalk.graph.v2.DatabaseSource database_sources_v2 = 8;
   */
  databaseSourcesV2: DatabaseSource$1[] = [];

  /**
   * @generated from field: repeated chalk.graph.v2.DatabaseSourceGroup database_source_groups = 10;
   */
  databaseSourceGroups: DatabaseSourceGroup[] = [];

  /**
   * @generated from field: repeated chalk.graph.v2.StreamSource stream_sources_v2 = 9;
   */
  streamSourcesV2: StreamSource$1[] = [];

  constructor(data?: PartialMessage<Graph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.Graph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_sets", kind: "message", T: FeatureSet, repeated: true },
    { no: 2, name: "resolvers", kind: "message", T: Resolver, repeated: true },
    { no: 3, name: "stream_resolvers", kind: "message", T: StreamResolver, repeated: true },
    { no: 4, name: "sink_resolvers", kind: "message", T: SinkResolver, repeated: true },
    { no: 5, name: "database_sources", kind: "message", T: DatabaseSource, repeated: true },
    { no: 6, name: "stream_sources", kind: "message", T: StreamSource, repeated: true },
    { no: 7, name: "named_queries", kind: "message", T: NamedQuery, repeated: true },
    { no: 8, name: "database_sources_v2", kind: "message", T: DatabaseSource$1, repeated: true },
    { no: 10, name: "database_source_groups", kind: "message", T: DatabaseSourceGroup, repeated: true },
    { no: 9, name: "stream_sources_v2", kind: "message", T: StreamSource$1, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph {
    return new Graph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJsonString(jsonString, options);
  }

  static equals(a: Graph | PlainMessage<Graph> | undefined, b: Graph | PlainMessage<Graph> | undefined): boolean {
    return proto3.util.equals(Graph, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.NamedQuery
 */
export class NamedQuery extends Message<NamedQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string query_version = 2;
   */
  queryVersion?: string;

  /**
   * @generated from field: repeated string input = 3;
   */
  input: string[] = [];

  /**
   * @generated from field: repeated string output = 4;
   */
  output: string[] = [];

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 6;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 7;
   */
  owner?: string;

  /**
   * @generated from field: map<string, string> meta = 8;
   */
  meta: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, google.protobuf.Duration> staleness = 9;
   */
  staleness: { [key: string]: Duration } = {};

  /**
   * @generated from field: map<string, string> planner_options = 10;
   */
  plannerOptions: { [key: string]: string } = {};

  /**
   * @generated from field: string file_name = 11;
   */
  fileName = "";

  /**
   * required
   *
   * @generated from field: optional string deployment_id = 12;
   */
  deploymentId?: string;

  /**
   * @generated from field: optional chalk.graph.v1.SourceFileReference source_file_reference = 13;
   */
  sourceFileReference?: SourceFileReference;

  /**
   * @generated from field: repeated string additional_logged_features = 14;
   */
  additionalLoggedFeatures: string[] = [];

  /**
   * @generated from field: optional bool valid_plan_not_required = 15;
   */
  validPlanNotRequired?: boolean;

  constructor(data?: PartialMessage<NamedQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.NamedQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query_version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "staleness", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Duration} },
    { no: 10, name: "planner_options", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 11, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "source_file_reference", kind: "message", T: SourceFileReference, opt: true },
    { no: 14, name: "additional_logged_features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "valid_plan_not_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedQuery {
    return new NamedQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedQuery {
    return new NamedQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedQuery {
    return new NamedQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NamedQuery | PlainMessage<NamedQuery> | undefined, b: NamedQuery | PlainMessage<NamedQuery> | undefined): boolean {
    return proto3.util.equals(NamedQuery, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureSet
 */
export class FeatureSet extends Message<FeatureSet> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureType features = 2;
   */
  features: FeatureType[] = [];

  /**
   * @generated from field: google.protobuf.Duration max_staleness_duration = 3;
   */
  maxStalenessDuration?: Duration;

  /**
   * @generated from field: bool is_singleton = 4;
   */
  isSingleton = false;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string owner = 6;
   */
  owner?: string;

  /**
   * The docstring of the class on which the features are defined.
   *
   * @generated from field: optional string doc = 7;
   */
  doc?: string;

  /**
   * @generated from field: optional bool etl_offline_to_online = 8;
   */
  etlOfflineToOnline?: boolean;

  /**
   * @generated from field: optional string class_path = 9;
   */
  classPath?: string;

  constructor(data?: PartialMessage<FeatureSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "features", kind: "message", T: FeatureType, repeated: true },
    { no: 3, name: "max_staleness_duration", kind: "message", T: Duration },
    { no: 4, name: "is_singleton", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "etl_offline_to_online", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "class_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureSet {
    return new FeatureSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureSet {
    return new FeatureSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureSet {
    return new FeatureSet().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureSet | PlainMessage<FeatureSet> | undefined, b: FeatureSet | PlainMessage<FeatureSet> | undefined): boolean {
    return proto3.util.equals(FeatureSet, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureType
 */
export class FeatureType extends Message<FeatureType> {
  /**
   * @generated from oneof chalk.graph.v1.FeatureType.type
   */
  type: {
    /**
     * @generated from field: chalk.graph.v1.ScalarFeatureType scalar = 1;
     */
    value: ScalarFeatureType;
    case: "scalar";
  } | {
    /**
     * @generated from field: chalk.graph.v1.HasOneFeatureType has_one = 2;
     */
    value: HasOneFeatureType;
    case: "hasOne";
  } | {
    /**
     * @generated from field: chalk.graph.v1.HasManyFeatureType has_many = 3;
     */
    value: HasManyFeatureType;
    case: "hasMany";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FeatureTimeFeatureType feature_time = 4;
     */
    value: FeatureTimeFeatureType;
    case: "featureTime";
  } | {
    /**
     * @generated from field: chalk.graph.v1.WindowedFeatureType windowed = 5;
     */
    value: WindowedFeatureType;
    case: "windowed";
  } | {
    /**
     * @generated from field: chalk.graph.v1.GroupByFeatureType group_by = 6;
     */
    value: GroupByFeatureType;
    case: "groupBy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scalar", kind: "message", T: ScalarFeatureType, oneof: "type" },
    { no: 2, name: "has_one", kind: "message", T: HasOneFeatureType, oneof: "type" },
    { no: 3, name: "has_many", kind: "message", T: HasManyFeatureType, oneof: "type" },
    { no: 4, name: "feature_time", kind: "message", T: FeatureTimeFeatureType, oneof: "type" },
    { no: 5, name: "windowed", kind: "message", T: WindowedFeatureType, oneof: "type" },
    { no: 6, name: "group_by", kind: "message", T: GroupByFeatureType, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureType {
    return new FeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureType {
    return new FeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureType {
    return new FeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureType | PlainMessage<FeatureType> | undefined, b: FeatureType | PlainMessage<FeatureType> | undefined): boolean {
    return proto3.util.equals(FeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureReference
 */
export class FeatureReference extends Message<FeatureReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureReference path = 3;
   */
  path: FeatureReference[] = [];

  /**
   * @generated from field: chalk.graph.v1.DataFrameType df = 4;
   */
  df?: DataFrameType;

  constructor(data?: PartialMessage<FeatureReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "message", T: FeatureReference, repeated: true },
    { no: 4, name: "df", kind: "message", T: DataFrameType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureReference {
    return new FeatureReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureReference {
    return new FeatureReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureReference {
    return new FeatureReference().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureReference | PlainMessage<FeatureReference> | undefined, b: FeatureReference | PlainMessage<FeatureReference> | undefined): boolean {
    return proto3.util.equals(FeatureReference, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.DataFrameType
 */
export class DataFrameType extends Message<DataFrameType> {
  /**
   * @generated from field: string root_namespace = 1;
   */
  rootNamespace = "";

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureReference required_columns = 2;
   */
  requiredColumns: FeatureReference[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureReference optional_columns = 3;
   */
  optionalColumns: FeatureReference[] = [];

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode filter = 4;
   */
  filter?: LogicalExprNode;

  /**
   * @generated from field: optional uint64 limit = 5;
   */
  limit?: bigint;

  constructor(data?: PartialMessage<DataFrameType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.DataFrameType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "required_columns", kind: "message", T: FeatureReference, repeated: true },
    { no: 3, name: "optional_columns", kind: "message", T: FeatureReference, repeated: true },
    { no: 4, name: "filter", kind: "message", T: LogicalExprNode },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataFrameType {
    return new DataFrameType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataFrameType {
    return new DataFrameType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataFrameType {
    return new DataFrameType().fromJsonString(jsonString, options);
  }

  static equals(a: DataFrameType | PlainMessage<DataFrameType> | undefined, b: DataFrameType | PlainMessage<DataFrameType> | undefined): boolean {
    return proto3.util.equals(DataFrameType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.GroupByFeatureType
 */
export class GroupByFeatureType extends Message<GroupByFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: bool is_nullable = 3;
   */
  isNullable = false;

  /**
   * @generated from field: optional uint64 internal_version = 4;
   */
  internalVersion?: bigint;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 5;
   */
  arrowType?: ArrowType;

  /**
   * @generated from field: chalk.graph.v1.WindowAggregation aggregation = 6;
   */
  aggregation?: WindowAggregation;

  /**
   * @generated from field: repeated google.protobuf.Duration window_durations = 7;
   */
  windowDurations: Duration[] = [];

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode expression = 8;
   */
  expression?: LogicalExprNode;

  /**
   * @generated from field: chalk.arrow.v1.ScalarValue default_value = 9;
   */
  defaultValue?: ScalarValue;

  /**
   * @generated from field: repeated string tags = 10;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 11;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 12;
   */
  owner?: string;

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureValidation validations = 13;
   */
  validations: FeatureValidation[] = [];

  /**
   * @generated from field: string attribute_name = 14;
   */
  attributeName = "";

  constructor(data?: PartialMessage<GroupByFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.GroupByFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "internal_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "arrow_type", kind: "message", T: ArrowType },
    { no: 6, name: "aggregation", kind: "message", T: WindowAggregation },
    { no: 7, name: "window_durations", kind: "message", T: Duration, repeated: true },
    { no: 8, name: "expression", kind: "message", T: LogicalExprNode },
    { no: 9, name: "default_value", kind: "message", T: ScalarValue },
    { no: 10, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "validations", kind: "message", T: FeatureValidation, repeated: true },
    { no: 14, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupByFeatureType {
    return new GroupByFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupByFeatureType {
    return new GroupByFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupByFeatureType {
    return new GroupByFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: GroupByFeatureType | PlainMessage<GroupByFeatureType> | undefined, b: GroupByFeatureType | PlainMessage<GroupByFeatureType> | undefined): boolean {
    return proto3.util.equals(GroupByFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.ScalarFeatureType
 */
export class ScalarFeatureType extends Message<ScalarFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: bool is_autogenerated = 3;
   */
  isAutogenerated = false;

  /**
   * @generated from field: bool no_display = 4;
   */
  noDisplay = false;

  /**
   * @generated from field: bool is_primary = 5;
   */
  isPrimary = false;

  /**
   * @generated from field: bool is_nullable = 6;
   */
  isNullable = false;

  /**
   * @generated from field: optional uint64 internal_version = 7;
   */
  internalVersion?: bigint;

  /**
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   *
   * @generated from field: google.protobuf.Duration max_staleness_duration = 8;
   */
  maxStalenessDuration?: Duration;

  /**
   * @generated from field: google.protobuf.Duration offline_ttl_duration = 10;
   */
  offlineTtlDuration?: Duration;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 11;
   */
  arrowType?: ArrowType;

  /**
   * @generated from field: chalk.graph.v1.VersionInfo version = 12;
   */
  version?: VersionInfo;

  /**
   * @generated from field: chalk.graph.v1.WindowInfo window_info = 13;
   */
  windowInfo?: WindowInfo;

  /**
   * @generated from field: chalk.arrow.v1.ScalarValue default_value = 14;
   */
  defaultValue?: ScalarValue;

  /**
   * @generated from field: repeated string tags = 15;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 16;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 17;
   */
  owner?: string;

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode expression = 18;
   */
  expression?: LogicalExprNode;

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureValidation validations = 19;
   */
  validations: FeatureValidation[] = [];

  /**
   * @generated from field: chalk.graph.v1.FeatureReference last_for = 20;
   */
  lastFor?: FeatureReference;

  /**
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   *
   * @generated from field: optional bool etl_offline_to_online = 21;
   */
  etlOfflineToOnline?: boolean;

  /**
   * @generated from field: bool is_distance_pseudofeature = 22;
   */
  isDistancePseudofeature = false;

  /**
   * @generated from field: string attribute_name = 23;
   */
  attributeName = "";

  /**
   * Whether the user marked the feature as deprecated.
   *
   * @generated from field: bool is_deprecated = 24;
   */
  isDeprecated = false;

  /**
   * @generated from field: chalk.graph.v1.CacheStrategy cache_strategy = 25;
   */
  cacheStrategy = CacheStrategy.UNSPECIFIED;

  /**
   * optional because proto default is false, but chalk defaults to true
   *
   * @generated from field: optional bool store_online = 26;
   */
  storeOnline?: boolean;

  /**
   * optional because proto default is false, but chalk defaults to true
   *
   * @generated from field: optional bool store_offline = 27;
   */
  storeOffline?: boolean;

  constructor(data?: PartialMessage<ScalarFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.ScalarFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_autogenerated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "no_display", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "is_primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "is_nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "internal_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 8, name: "max_staleness_duration", kind: "message", T: Duration },
    { no: 10, name: "offline_ttl_duration", kind: "message", T: Duration },
    { no: 11, name: "arrow_type", kind: "message", T: ArrowType },
    { no: 12, name: "version", kind: "message", T: VersionInfo },
    { no: 13, name: "window_info", kind: "message", T: WindowInfo },
    { no: 14, name: "default_value", kind: "message", T: ScalarValue },
    { no: 15, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "expression", kind: "message", T: LogicalExprNode },
    { no: 19, name: "validations", kind: "message", T: FeatureValidation, repeated: true },
    { no: 20, name: "last_for", kind: "message", T: FeatureReference },
    { no: 21, name: "etl_offline_to_online", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 22, name: "is_distance_pseudofeature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "is_deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "cache_strategy", kind: "enum", T: proto3.getEnumType(CacheStrategy) },
    { no: 26, name: "store_online", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 27, name: "store_offline", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarFeatureType {
    return new ScalarFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarFeatureType {
    return new ScalarFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarFeatureType {
    return new ScalarFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: ScalarFeatureType | PlainMessage<ScalarFeatureType> | undefined, b: ScalarFeatureType | PlainMessage<ScalarFeatureType> | undefined): boolean {
    return proto3.util.equals(ScalarFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.HasOneFeatureType
 */
export class HasOneFeatureType extends Message<HasOneFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string foreign_namespace = 3;
   */
  foreignNamespace = "";

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode join = 4;
   */
  join?: LogicalExprNode;

  /**
   * @generated from field: bool is_nullable = 5;
   */
  isNullable = false;

  /**
   * @generated from field: bool is_autogenerated = 6;
   */
  isAutogenerated = false;

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 8;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 9;
   */
  owner?: string;

  /**
   * @generated from field: string attribute_name = 10;
   */
  attributeName = "";

  constructor(data?: PartialMessage<HasOneFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.HasOneFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "foreign_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "join", kind: "message", T: LogicalExprNode },
    { no: 5, name: "is_nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "is_autogenerated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasOneFeatureType {
    return new HasOneFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasOneFeatureType {
    return new HasOneFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasOneFeatureType {
    return new HasOneFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: HasOneFeatureType | PlainMessage<HasOneFeatureType> | undefined, b: HasOneFeatureType | PlainMessage<HasOneFeatureType> | undefined): boolean {
    return proto3.util.equals(HasOneFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.HasManyFeatureType
 */
export class HasManyFeatureType extends Message<HasManyFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string foreign_namespace = 3;
   */
  foreignNamespace = "";

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode join = 4;
   */
  join?: LogicalExprNode;

  /**
   * @generated from field: bool is_autogenerated = 5;
   */
  isAutogenerated = false;

  /**
   * @generated from field: google.protobuf.Duration max_staleness_duration = 6;
   */
  maxStalenessDuration?: Duration;

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 8;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 9;
   */
  owner?: string;

  /**
   * @generated from field: string attribute_name = 10;
   */
  attributeName = "";

  constructor(data?: PartialMessage<HasManyFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.HasManyFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "foreign_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "join", kind: "message", T: LogicalExprNode },
    { no: 5, name: "is_autogenerated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "max_staleness_duration", kind: "message", T: Duration },
    { no: 7, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasManyFeatureType {
    return new HasManyFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasManyFeatureType {
    return new HasManyFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasManyFeatureType {
    return new HasManyFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: HasManyFeatureType | PlainMessage<HasManyFeatureType> | undefined, b: HasManyFeatureType | PlainMessage<HasManyFeatureType> | undefined): boolean {
    return proto3.util.equals(HasManyFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureTimeFeatureType
 */
export class FeatureTimeFeatureType extends Message<FeatureTimeFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: bool is_autogenerated = 3;
   */
  isAutogenerated = false;

  /**
   * @generated from field: repeated string tags = 4;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 6;
   */
  owner?: string;

  /**
   * @generated from field: string attribute_name = 7;
   */
  attributeName = "";

  constructor(data?: PartialMessage<FeatureTimeFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureTimeFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_autogenerated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureTimeFeatureType {
    return new FeatureTimeFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureTimeFeatureType {
    return new FeatureTimeFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureTimeFeatureType {
    return new FeatureTimeFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureTimeFeatureType | PlainMessage<FeatureTimeFeatureType> | undefined, b: FeatureTimeFeatureType | PlainMessage<FeatureTimeFeatureType> | undefined): boolean {
    return proto3.util.equals(FeatureTimeFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.WindowedFeatureType
 */
export class WindowedFeatureType extends Message<WindowedFeatureType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: bool is_autogenerated = 3;
   */
  isAutogenerated = false;

  /**
   * @generated from field: repeated google.protobuf.Duration window_durations = 4;
   */
  windowDurations: Duration[] = [];

  /**
   * @generated from field: string attribute_name = 5;
   */
  attributeName = "";

  constructor(data?: PartialMessage<WindowedFeatureType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.WindowedFeatureType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_autogenerated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "window_durations", kind: "message", T: Duration, repeated: true },
    { no: 5, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WindowedFeatureType {
    return new WindowedFeatureType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WindowedFeatureType {
    return new WindowedFeatureType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WindowedFeatureType {
    return new WindowedFeatureType().fromJsonString(jsonString, options);
  }

  static equals(a: WindowedFeatureType | PlainMessage<WindowedFeatureType> | undefined, b: WindowedFeatureType | PlainMessage<WindowedFeatureType> | undefined): boolean {
    return proto3.util.equals(WindowedFeatureType, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.WindowAggregation
 */
export class WindowAggregation extends Message<WindowAggregation> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureReference group_by = 2;
   */
  groupBy: FeatureReference[] = [];

  /**
   * @generated from field: google.protobuf.Duration bucket_duration = 3;
   */
  bucketDuration?: Duration;

  /**
   * @generated from field: string aggregation = 4;
   */
  aggregation = "";

  /**
   * @generated from field: optional chalk.graph.v1.FeatureReference aggregate_on = 5;
   */
  aggregateOn?: FeatureReference;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 6;
   */
  arrowType?: ArrowType;

  /**
   * @generated from field: repeated chalk.expression.v1.LogicalExprNode filters = 7;
   */
  filters: LogicalExprNode[] = [];

  /**
   * The resolver to use for back-filling the materialized aggregate.
   * If not provided, the data will be back filled using the resolver
   * that would run for an offline query.
   *
   * @generated from field: optional string backfill_resolver = 8;
   */
  backfillResolver?: string;

  /**
   * The amount of time before the start of the previous backfill
   * to consider when running the backfill resolver. Set this parameter
   * to the be equal to the latest arriving data in the backfill window.
   *
   * @generated from field: optional google.protobuf.Duration backfill_lookback_duration = 9;
   */
  backfillLookbackDuration?: Duration;

  /**
   * The time at which to start back filling the materialized aggregate.
   * If not provided, the backfill consider the earliest available data returned
   * by the `backfill_resolver`.
   *
   * @generated from field: optional google.protobuf.Timestamp backfill_start_time = 10;
   */
  backfillStartTime?: Timestamp;

  /**
   * The resolver to use for continuous updates to the materialized aggregate.
   * If not provided, the data will be updated using the resolver that would run
   * for an online query.
   *
   * @generated from field: optional string continuous_resolver = 11;
   */
  continuousResolver?: string;

  /**
   * The period for which to use the continuous resolver, instead
   * of relying upon the last backfill. If not provided, and a continuous
   * resolver is provided, this will be set to backfill_lookback_duration.
   *
   * @generated from field: optional google.protobuf.Duration continuous_buffer_duration = 12;
   */
  continuousBufferDuration?: Duration;

  /**
   * A crontab or duration string to specify the schedule for back filling the
   * materialized aggregate.
   *
   * @generated from field: optional string backfill_schedule = 13;
   */
  backfillSchedule?: string;

  /**
   * The lower bound of the first bucket. All buckets are aligned to this time.
   *
   * @generated from field: google.protobuf.Timestamp bucket_start = 14;
   */
  bucketStart?: Timestamp;

  constructor(data?: PartialMessage<WindowAggregation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.WindowAggregation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_by", kind: "message", T: FeatureReference, repeated: true },
    { no: 3, name: "bucket_duration", kind: "message", T: Duration },
    { no: 4, name: "aggregation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "aggregate_on", kind: "message", T: FeatureReference, opt: true },
    { no: 6, name: "arrow_type", kind: "message", T: ArrowType },
    { no: 7, name: "filters", kind: "message", T: LogicalExprNode, repeated: true },
    { no: 8, name: "backfill_resolver", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "backfill_lookback_duration", kind: "message", T: Duration, opt: true },
    { no: 10, name: "backfill_start_time", kind: "message", T: Timestamp, opt: true },
    { no: 11, name: "continuous_resolver", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "continuous_buffer_duration", kind: "message", T: Duration, opt: true },
    { no: 13, name: "backfill_schedule", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "bucket_start", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WindowAggregation {
    return new WindowAggregation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WindowAggregation {
    return new WindowAggregation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WindowAggregation {
    return new WindowAggregation().fromJsonString(jsonString, options);
  }

  static equals(a: WindowAggregation | PlainMessage<WindowAggregation> | undefined, b: WindowAggregation | PlainMessage<WindowAggregation> | undefined): boolean {
    return proto3.util.equals(WindowAggregation, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.WindowInfo
 */
export class WindowInfo extends Message<WindowInfo> {
  /**
   * @generated from field: google.protobuf.Duration duration = 1;
   */
  duration?: Duration;

  /**
   * @generated from field: optional chalk.graph.v1.WindowAggregation aggregation = 2;
   */
  aggregation?: WindowAggregation;

  constructor(data?: PartialMessage<WindowInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.WindowInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "duration", kind: "message", T: Duration },
    { no: 2, name: "aggregation", kind: "message", T: WindowAggregation, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WindowInfo {
    return new WindowInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WindowInfo {
    return new WindowInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WindowInfo {
    return new WindowInfo().fromJsonString(jsonString, options);
  }

  static equals(a: WindowInfo | PlainMessage<WindowInfo> | undefined, b: WindowInfo | PlainMessage<WindowInfo> | undefined): boolean {
    return proto3.util.equals(WindowInfo, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureInput
 */
export class FeatureInput extends Message<FeatureInput> {
  /**
   * @generated from field: chalk.graph.v1.FeatureReference feature = 1;
   */
  feature?: FeatureReference;

  /**
   * @generated from field: chalk.arrow.v1.ScalarValue default_value = 2;
   */
  defaultValue?: ScalarValue;

  constructor(data?: PartialMessage<FeatureInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "message", T: FeatureReference },
    { no: 2, name: "default_value", kind: "message", T: ScalarValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureInput {
    return new FeatureInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureInput {
    return new FeatureInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureInput {
    return new FeatureInput().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureInput | PlainMessage<FeatureInput> | undefined, b: FeatureInput | PlainMessage<FeatureInput> | undefined): boolean {
    return proto3.util.equals(FeatureInput, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.ResolverInput
 */
export class ResolverInput extends Message<ResolverInput> {
  /**
   * @generated from oneof chalk.graph.v1.ResolverInput.annotation
   */
  annotation: {
    /**
     * @generated from field: chalk.graph.v1.FeatureInput feature = 1;
     */
    value: FeatureInput;
    case: "feature";
  } | {
    /**
     * @generated from field: chalk.graph.v1.DataFrameType df = 2;
     */
    value: DataFrameType;
    case: "df";
  } | {
    /**
     * @generated from field: chalk.graph.v1.ResolverState state = 3;
     */
    value: ResolverState;
    case: "state";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResolverInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.ResolverInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "message", T: FeatureInput, oneof: "annotation" },
    { no: 2, name: "df", kind: "message", T: DataFrameType, oneof: "annotation" },
    { no: 3, name: "state", kind: "message", T: ResolverState, oneof: "annotation" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolverInput {
    return new ResolverInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolverInput {
    return new ResolverInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolverInput {
    return new ResolverInput().fromJsonString(jsonString, options);
  }

  static equals(a: ResolverInput | PlainMessage<ResolverInput> | undefined, b: ResolverInput | PlainMessage<ResolverInput> | undefined): boolean {
    return proto3.util.equals(ResolverInput, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.ResolverOutput
 */
export class ResolverOutput extends Message<ResolverOutput> {
  /**
   * @generated from oneof chalk.graph.v1.ResolverOutput.annotation
   */
  annotation: {
    /**
     * @generated from field: chalk.graph.v1.FeatureReference feature = 1;
     */
    value: FeatureReference;
    case: "feature";
  } | {
    /**
     * @generated from field: chalk.graph.v1.DataFrameType df = 2;
     */
    value: DataFrameType;
    case: "df";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResolverOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.ResolverOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "message", T: FeatureReference, oneof: "annotation" },
    { no: 2, name: "df", kind: "message", T: DataFrameType, oneof: "annotation" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolverOutput {
    return new ResolverOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolverOutput {
    return new ResolverOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolverOutput {
    return new ResolverOutput().fromJsonString(jsonString, options);
  }

  static equals(a: ResolverOutput | PlainMessage<ResolverOutput> | undefined, b: ResolverOutput | PlainMessage<ResolverOutput> | undefined): boolean {
    return proto3.util.equals(ResolverOutput, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.Resolver
 */
export class Resolver extends Message<Resolver> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: chalk.graph.v1.ResolverKind kind = 2;
   */
  kind = ResolverKind.UNSPECIFIED;

  /**
   * @generated from field: repeated chalk.graph.v1.ResolverInput inputs = 3;
   */
  inputs: ResolverInput[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.ResolverOutput outputs = 4;
   */
  outputs: ResolverOutput[] = [];

  /**
   * @generated from field: bool is_generator = 5;
   */
  isGenerator = false;

  /**
   * data_sources is deprecated; see data_sources_v2
   *
   * @generated from field: repeated chalk.graph.v1.DatabaseSourceReference data_sources = 6 [deprecated = true];
   * @deprecated
   */
  dataSources: DatabaseSourceReference[] = [];

  /**
   * @generated from field: optional string machine_type = 7;
   */
  machineType?: string;

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string owner = 9;
   */
  owner?: string;

  /**
   * The docstring of the python function
   *
   * @generated from field: optional string doc = 10;
   */
  doc?: string;

  /**
   * @generated from field: repeated string environments = 11;
   */
  environments: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration timeout_duration = 12;
   */
  timeoutDuration?: Duration;

  /**
   * @generated from field: chalk.graph.v1.Schedule schedule = 13;
   */
  schedule?: Schedule;

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode when = 14;
   */
  when?: LogicalExprNode;

  /**
   * @generated from field: chalk.graph.v1.CronFilterWithFeatureArgs cron_filter = 15;
   */
  cronFilter?: CronFilterWithFeatureArgs;

  /**
   * @generated from field: chalk.graph.v1.FunctionReference function = 16;
   */
  function?: FunctionReference;

  /**
   * @generated from field: chalk.graph.v1.ResourceHint resource_hint = 17;
   */
  resourceHint = ResourceHint.UNSPECIFIED;

  /**
   * @generated from field: bool is_static = 18;
   */
  isStatic = false;

  /**
   * @generated from field: optional bool is_total = 19;
   */
  isTotal?: boolean;

  /**
   * @generated from field: repeated string unique_on = 20;
   */
  uniqueOn: string[] = [];

  /**
   * @generated from field: repeated string partitioned_by = 21;
   */
  partitionedBy: string[] = [];

  /**
   * @generated from field: repeated chalk.graph.v2.DatabaseSourceReference data_sources_v2 = 22;
   */
  dataSourcesV2: DatabaseSourceReference$1[] = [];

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode static_operation = 23;
   */
  staticOperation?: LogicalExprNode;

  /**
   * @generated from field: optional chalk.graph.v1.SQLResolverSettings sql_settings = 24;
   */
  sqlSettings?: SQLResolverSettings;

  constructor(data?: PartialMessage<Resolver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.Resolver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(ResolverKind) },
    { no: 3, name: "inputs", kind: "message", T: ResolverInput, repeated: true },
    { no: 4, name: "outputs", kind: "message", T: ResolverOutput, repeated: true },
    { no: 5, name: "is_generator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "data_sources", kind: "message", T: DatabaseSourceReference, repeated: true },
    { no: 7, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "environments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "timeout_duration", kind: "message", T: Duration },
    { no: 13, name: "schedule", kind: "message", T: Schedule },
    { no: 14, name: "when", kind: "message", T: LogicalExprNode },
    { no: 15, name: "cron_filter", kind: "message", T: CronFilterWithFeatureArgs },
    { no: 16, name: "function", kind: "message", T: FunctionReference },
    { no: 17, name: "resource_hint", kind: "enum", T: proto3.getEnumType(ResourceHint) },
    { no: 18, name: "is_static", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "is_total", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 20, name: "unique_on", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 21, name: "partitioned_by", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 22, name: "data_sources_v2", kind: "message", T: DatabaseSourceReference$1, repeated: true },
    { no: 23, name: "static_operation", kind: "message", T: LogicalExprNode },
    { no: 24, name: "sql_settings", kind: "message", T: SQLResolverSettings, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resolver {
    return new Resolver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resolver {
    return new Resolver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resolver {
    return new Resolver().fromJsonString(jsonString, options);
  }

  static equals(a: Resolver | PlainMessage<Resolver> | undefined, b: Resolver | PlainMessage<Resolver> | undefined): boolean {
    return proto3.util.equals(Resolver, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SinkResolver
 */
export class SinkResolver extends Message<SinkResolver> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: repeated chalk.graph.v1.ResolverInput inputs = 2;
   */
  inputs: ResolverInput[] = [];

  /**
   * @generated from field: optional uint64 buffer_size = 3;
   */
  bufferSize?: bigint;

  /**
   * @generated from field: google.protobuf.Duration debounce_duration = 4;
   */
  debounceDuration?: Duration;

  /**
   * @generated from field: google.protobuf.Duration max_delay_duration = 5;
   */
  maxDelayDuration?: Duration;

  /**
   * @generated from field: bool upsert = 6;
   */
  upsert = false;

  /**
   * @generated from oneof chalk.graph.v1.SinkResolver.integration
   */
  integration: {
    /**
     * stream_source is deprecated; see stream_source_v2
     *
     * @generated from field: chalk.graph.v1.StreamSourceReference stream_source = 7 [deprecated = true];
     * @deprecated
     */
    value: StreamSourceReference;
    case: "streamSource";
  } | {
    /**
     * database_source is deprecated; see database_source_v2
     *
     * @generated from field: chalk.graph.v1.DatabaseSourceReference database_source = 8 [deprecated = true];
     * @deprecated
     */
    value: DatabaseSourceReference;
    case: "databaseSource";
  } | {
    /**
     * @generated from field: chalk.graph.v2.StreamSourceReference stream_source_v2 = 15;
     */
    value: StreamSourceReference$1;
    case: "streamSourceV2";
  } | {
    /**
     * @generated from field: chalk.graph.v2.DatabaseSourceReference database_source_v2 = 16;
     */
    value: DatabaseSourceReference$1;
    case: "databaseSourceV2";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional string machine_type = 9;
   */
  machineType?: string;

  /**
   * @generated from field: optional string doc = 10;
   */
  doc?: string;

  /**
   * @generated from field: optional string owner = 11;
   */
  owner?: string;

  /**
   * @generated from field: repeated string environments = 12;
   */
  environments: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration timeout_duration = 13;
   */
  timeoutDuration?: Duration;

  /**
   * @generated from field: chalk.graph.v1.FunctionReference function = 14;
   */
  function?: FunctionReference;

  constructor(data?: PartialMessage<SinkResolver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SinkResolver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "inputs", kind: "message", T: ResolverInput, repeated: true },
    { no: 3, name: "buffer_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "debounce_duration", kind: "message", T: Duration },
    { no: 5, name: "max_delay_duration", kind: "message", T: Duration },
    { no: 6, name: "upsert", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "stream_source", kind: "message", T: StreamSourceReference, oneof: "integration" },
    { no: 8, name: "database_source", kind: "message", T: DatabaseSourceReference, oneof: "integration" },
    { no: 15, name: "stream_source_v2", kind: "message", T: StreamSourceReference$1, oneof: "integration" },
    { no: 16, name: "database_source_v2", kind: "message", T: DatabaseSourceReference$1, oneof: "integration" },
    { no: 9, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "environments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "timeout_duration", kind: "message", T: Duration },
    { no: 14, name: "function", kind: "message", T: FunctionReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinkResolver {
    return new SinkResolver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinkResolver {
    return new SinkResolver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinkResolver {
    return new SinkResolver().fromJsonString(jsonString, options);
  }

  static equals(a: SinkResolver | PlainMessage<SinkResolver> | undefined, b: SinkResolver | PlainMessage<SinkResolver> | undefined): boolean {
    return proto3.util.equals(SinkResolver, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.ParseInfo
 */
export class ParseInfo extends Message<ParseInfo> {
  /**
   * @generated from field: chalk.graph.v1.FunctionReference parse_function = 1;
   */
  parseFunction?: FunctionReference;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType parse_function_input_type = 2;
   */
  parseFunctionInputType?: ArrowType;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType parse_function_output_type = 3;
   */
  parseFunctionOutputType?: ArrowType;

  /**
   * @generated from field: bool is_parse_function_output_optional = 4;
   */
  isParseFunctionOutputOptional = false;

  constructor(data?: PartialMessage<ParseInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.ParseInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parse_function", kind: "message", T: FunctionReference },
    { no: 2, name: "parse_function_input_type", kind: "message", T: ArrowType },
    { no: 3, name: "parse_function_output_type", kind: "message", T: ArrowType },
    { no: 4, name: "is_parse_function_output_optional", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseInfo {
    return new ParseInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseInfo {
    return new ParseInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseInfo {
    return new ParseInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ParseInfo | PlainMessage<ParseInfo> | undefined, b: ParseInfo | PlainMessage<ParseInfo> | undefined): boolean {
    return proto3.util.equals(ParseInfo, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamResolver
 */
export class StreamResolver extends Message<StreamResolver> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: repeated chalk.graph.v1.StreamResolverParam params = 2;
   */
  params: StreamResolverParam[] = [];

  /**
   * @generated from field: repeated chalk.graph.v1.ResolverOutput outputs = 3;
   */
  outputs: ResolverOutput[] = [];

  /**
   * @generated from field: chalk.arrow.v1.ArrowType explicit_schema = 4;
   */
  explicitSchema?: ArrowType;

  /**
   * @generated from field: repeated chalk.graph.v1.StreamKey keys = 5;
   */
  keys: StreamKey[] = [];

  /**
   * @generated from field: chalk.graph.v1.StreamSourceReference source = 6 [deprecated = true];
   * @deprecated
   */
  source?: StreamSourceReference;

  /**
   * @generated from field: chalk.graph.v1.ParseInfo parse_info = 7;
   */
  parseInfo?: ParseInfo;

  /**
   * @generated from field: chalk.graph.v1.WindowMode mode = 8;
   */
  mode = WindowMode.UNSPECIFIED;

  /**
   * @generated from field: repeated string environments = 9;
   */
  environments: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration timeout_duration = 10;
   */
  timeoutDuration?: Duration;

  /**
   * @generated from field: optional string timestamp_attribute_name = 11;
   */
  timestampAttributeName?: string;

  /**
   * @generated from field: optional string owner = 12;
   */
  owner?: string;

  /**
   * @generated from field: optional string doc = 13;
   */
  doc?: string;

  /**
   * @generated from field: optional string machine_type = 14;
   */
  machineType?: string;

  /**
   * @generated from field: chalk.graph.v1.FunctionReference function = 15;
   */
  function?: FunctionReference;

  /**
   * @generated from field: chalk.graph.v2.StreamSourceReference source_v2 = 16;
   */
  sourceV2?: StreamSourceReference$1;

  constructor(data?: PartialMessage<StreamResolver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamResolver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: StreamResolverParam, repeated: true },
    { no: 3, name: "outputs", kind: "message", T: ResolverOutput, repeated: true },
    { no: 4, name: "explicit_schema", kind: "message", T: ArrowType },
    { no: 5, name: "keys", kind: "message", T: StreamKey, repeated: true },
    { no: 6, name: "source", kind: "message", T: StreamSourceReference },
    { no: 7, name: "parse_info", kind: "message", T: ParseInfo },
    { no: 8, name: "mode", kind: "enum", T: proto3.getEnumType(WindowMode) },
    { no: 9, name: "environments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "timeout_duration", kind: "message", T: Duration },
    { no: 11, name: "timestamp_attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "function", kind: "message", T: FunctionReference },
    { no: 16, name: "source_v2", kind: "message", T: StreamSourceReference$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResolver {
    return new StreamResolver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResolver {
    return new StreamResolver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResolver {
    return new StreamResolver().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResolver | PlainMessage<StreamResolver> | undefined, b: StreamResolver | PlainMessage<StreamResolver> | undefined): boolean {
    return proto3.util.equals(StreamResolver, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.ResolverState
 */
export class ResolverState extends Message<ResolverState> {
  /**
   * @generated from field: chalk.arrow.v1.ScalarValue initial = 1;
   */
  initial?: ScalarValue;

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 2;
   */
  arrowType?: ArrowType;

  constructor(data?: PartialMessage<ResolverState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.ResolverState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initial", kind: "message", T: ScalarValue },
    { no: 2, name: "arrow_type", kind: "message", T: ArrowType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolverState {
    return new ResolverState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolverState {
    return new ResolverState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolverState {
    return new ResolverState().fromJsonString(jsonString, options);
  }

  static equals(a: ResolverState | PlainMessage<ResolverState> | undefined, b: ResolverState | PlainMessage<ResolverState> | undefined): boolean {
    return proto3.util.equals(ResolverState, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamResolverParam
 */
export class StreamResolverParam extends Message<StreamResolverParam> {
  /**
   * @generated from oneof chalk.graph.v1.StreamResolverParam.type
   */
  type: {
    /**
     * @generated from field: chalk.graph.v1.StreamResolverParamMessage message = 1;
     */
    value: StreamResolverParamMessage;
    case: "message";
  } | {
    /**
     * @generated from field: chalk.graph.v1.StreamResolverParamMessageWindow message_window = 2;
     */
    value: StreamResolverParamMessageWindow;
    case: "messageWindow";
  } | {
    /**
     * @generated from field: chalk.graph.v1.ResolverState state = 3;
     */
    value: ResolverState;
    case: "state";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamResolverParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamResolverParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: StreamResolverParamMessage, oneof: "type" },
    { no: 2, name: "message_window", kind: "message", T: StreamResolverParamMessageWindow, oneof: "type" },
    { no: 3, name: "state", kind: "message", T: ResolverState, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResolverParam {
    return new StreamResolverParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResolverParam {
    return new StreamResolverParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResolverParam {
    return new StreamResolverParam().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResolverParam | PlainMessage<StreamResolverParam> | undefined, b: StreamResolverParam | PlainMessage<StreamResolverParam> | undefined): boolean {
    return proto3.util.equals(StreamResolverParam, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamResolverParamMessageWindow
 */
export class StreamResolverParamMessageWindow extends Message<StreamResolverParamMessageWindow> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 2;
   */
  arrowType?: ArrowType;

  constructor(data?: PartialMessage<StreamResolverParamMessageWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamResolverParamMessageWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arrow_type", kind: "message", T: ArrowType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResolverParamMessageWindow {
    return new StreamResolverParamMessageWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResolverParamMessageWindow {
    return new StreamResolverParamMessageWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResolverParamMessageWindow {
    return new StreamResolverParamMessageWindow().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResolverParamMessageWindow | PlainMessage<StreamResolverParamMessageWindow> | undefined, b: StreamResolverParamMessageWindow | PlainMessage<StreamResolverParamMessageWindow> | undefined): boolean {
    return proto3.util.equals(StreamResolverParamMessageWindow, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamResolverParamMessage
 */
export class StreamResolverParamMessage extends Message<StreamResolverParamMessage> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.arrow.v1.ArrowType arrow_type = 2;
   */
  arrowType?: ArrowType;

  constructor(data?: PartialMessage<StreamResolverParamMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamResolverParamMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arrow_type", kind: "message", T: ArrowType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResolverParamMessage {
    return new StreamResolverParamMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResolverParamMessage {
    return new StreamResolverParamMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResolverParamMessage {
    return new StreamResolverParamMessage().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResolverParamMessage | PlainMessage<StreamResolverParamMessage> | undefined, b: StreamResolverParamMessage | PlainMessage<StreamResolverParamMessage> | undefined): boolean {
    return proto3.util.equals(StreamResolverParamMessage, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionReference
 */
export class FunctionReference extends Message<FunctionReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string module = 2;
   */
  module = "";

  /**
   * @generated from field: string file_name = 3;
   */
  fileName = "";

  /**
   * @generated from field: string function_definition = 4;
   */
  functionDefinition = "";

  /**
   * @generated from field: optional int32 source_line = 5;
   */
  sourceLine?: number;

  /**
   * @generated from field: repeated chalk.graph.v1.FunctionReferenceCapturedGlobal captured_globals = 6;
   */
  capturedGlobals: FunctionReferenceCapturedGlobal[] = [];

  constructor(data?: PartialMessage<FunctionReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "function_definition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "source_line", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "captured_globals", kind: "message", T: FunctionReferenceCapturedGlobal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionReference {
    return new FunctionReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionReference {
    return new FunctionReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionReference {
    return new FunctionReference().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionReference | PlainMessage<FunctionReference> | undefined, b: FunctionReference | PlainMessage<FunctionReference> | undefined): boolean {
    return proto3.util.equals(FunctionReference, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionReferenceCapturedGlobal
 */
export class FunctionReferenceCapturedGlobal extends Message<FunctionReferenceCapturedGlobal> {
  /**
   * @generated from field: string global_name = 3;
   */
  globalName = "";

  /**
   * @generated from oneof chalk.graph.v1.FunctionReferenceCapturedGlobal.captured_global
   */
  capturedGlobal: {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedBuiltin builtin = 1;
     */
    value: FunctionGlobalCapturedBuiltin;
    case: "builtin";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedFeatureClass feature_class = 2;
     */
    value: FunctionGlobalCapturedFeatureClass;
    case: "featureClass";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedEnum enum = 4;
     */
    value: FunctionGlobalCapturedEnum;
    case: "enum";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedModule module = 5;
     */
    value: FunctionGlobalCapturedModule;
    case: "module";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedModuleMember module_member = 7;
     */
    value: FunctionGlobalCapturedModuleMember;
    case: "moduleMember";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedFunction function = 6;
     */
    value: FunctionGlobalCapturedFunction;
    case: "function";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedStruct struct = 8;
     */
    value: FunctionGlobalCapturedStruct;
    case: "struct";
  } | {
    /**
     * @generated from field: chalk.graph.v1.FunctionGlobalCapturedVariable variable = 10;
     */
    value: FunctionGlobalCapturedVariable;
    case: "variable";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional chalk.graph.v1.SourceFileReference source_reference = 9;
   */
  sourceReference?: SourceFileReference;

  constructor(data?: PartialMessage<FunctionReferenceCapturedGlobal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionReferenceCapturedGlobal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "global_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "builtin", kind: "message", T: FunctionGlobalCapturedBuiltin, oneof: "captured_global" },
    { no: 2, name: "feature_class", kind: "message", T: FunctionGlobalCapturedFeatureClass, oneof: "captured_global" },
    { no: 4, name: "enum", kind: "message", T: FunctionGlobalCapturedEnum, oneof: "captured_global" },
    { no: 5, name: "module", kind: "message", T: FunctionGlobalCapturedModule, oneof: "captured_global" },
    { no: 7, name: "module_member", kind: "message", T: FunctionGlobalCapturedModuleMember, oneof: "captured_global" },
    { no: 6, name: "function", kind: "message", T: FunctionGlobalCapturedFunction, oneof: "captured_global" },
    { no: 8, name: "struct", kind: "message", T: FunctionGlobalCapturedStruct, oneof: "captured_global" },
    { no: 10, name: "variable", kind: "message", T: FunctionGlobalCapturedVariable, oneof: "captured_global" },
    { no: 9, name: "source_reference", kind: "message", T: SourceFileReference, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionReferenceCapturedGlobal {
    return new FunctionReferenceCapturedGlobal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionReferenceCapturedGlobal {
    return new FunctionReferenceCapturedGlobal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionReferenceCapturedGlobal {
    return new FunctionReferenceCapturedGlobal().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionReferenceCapturedGlobal | PlainMessage<FunctionReferenceCapturedGlobal> | undefined, b: FunctionReferenceCapturedGlobal | PlainMessage<FunctionReferenceCapturedGlobal> | undefined): boolean {
    return proto3.util.equals(FunctionReferenceCapturedGlobal, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedBuiltin
 */
export class FunctionGlobalCapturedBuiltin extends Message<FunctionGlobalCapturedBuiltin> {
  /**
   * @generated from field: string builtin_name = 1;
   */
  builtinName = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedBuiltin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedBuiltin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builtin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedBuiltin {
    return new FunctionGlobalCapturedBuiltin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedBuiltin {
    return new FunctionGlobalCapturedBuiltin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedBuiltin {
    return new FunctionGlobalCapturedBuiltin().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedBuiltin | PlainMessage<FunctionGlobalCapturedBuiltin> | undefined, b: FunctionGlobalCapturedBuiltin | PlainMessage<FunctionGlobalCapturedBuiltin> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedBuiltin, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedVariable
 */
export class FunctionGlobalCapturedVariable extends Message<FunctionGlobalCapturedVariable> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedVariable {
    return new FunctionGlobalCapturedVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedVariable {
    return new FunctionGlobalCapturedVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedVariable {
    return new FunctionGlobalCapturedVariable().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedVariable | PlainMessage<FunctionGlobalCapturedVariable> | undefined, b: FunctionGlobalCapturedVariable | PlainMessage<FunctionGlobalCapturedVariable> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedVariable, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedStruct
 */
export class FunctionGlobalCapturedStruct extends Message<FunctionGlobalCapturedStruct> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: chalk.arrow.v1.ArrowType pa_dtype = 3;
   */
  paDtype?: ArrowType;

  constructor(data?: PartialMessage<FunctionGlobalCapturedStruct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedStruct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pa_dtype", kind: "message", T: ArrowType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedStruct {
    return new FunctionGlobalCapturedStruct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedStruct {
    return new FunctionGlobalCapturedStruct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedStruct {
    return new FunctionGlobalCapturedStruct().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedStruct | PlainMessage<FunctionGlobalCapturedStruct> | undefined, b: FunctionGlobalCapturedStruct | PlainMessage<FunctionGlobalCapturedStruct> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedStruct, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedEnum
 */
export class FunctionGlobalCapturedEnum extends Message<FunctionGlobalCapturedEnum> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> member_map = 3;
   */
  memberMap: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: repeated chalk.arrow.v1.ArrowType bases = 4;
   */
  bases: ArrowType[] = [];

  constructor(data?: PartialMessage<FunctionGlobalCapturedEnum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedEnum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "member_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 4, name: "bases", kind: "message", T: ArrowType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedEnum {
    return new FunctionGlobalCapturedEnum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedEnum {
    return new FunctionGlobalCapturedEnum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedEnum {
    return new FunctionGlobalCapturedEnum().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedEnum | PlainMessage<FunctionGlobalCapturedEnum> | undefined, b: FunctionGlobalCapturedEnum | PlainMessage<FunctionGlobalCapturedEnum> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedEnum, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedFeatureClass
 */
export class FunctionGlobalCapturedFeatureClass extends Message<FunctionGlobalCapturedFeatureClass> {
  /**
   * @generated from field: string feature_class_name = 1;
   */
  featureClassName = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedFeatureClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedFeatureClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_class_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedFeatureClass {
    return new FunctionGlobalCapturedFeatureClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedFeatureClass {
    return new FunctionGlobalCapturedFeatureClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedFeatureClass {
    return new FunctionGlobalCapturedFeatureClass().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedFeatureClass | PlainMessage<FunctionGlobalCapturedFeatureClass> | undefined, b: FunctionGlobalCapturedFeatureClass | PlainMessage<FunctionGlobalCapturedFeatureClass> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedFeatureClass, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedModule
 */
export class FunctionGlobalCapturedModule extends Message<FunctionGlobalCapturedModule> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedModule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedModule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedModule {
    return new FunctionGlobalCapturedModule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedModule {
    return new FunctionGlobalCapturedModule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedModule {
    return new FunctionGlobalCapturedModule().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedModule | PlainMessage<FunctionGlobalCapturedModule> | undefined, b: FunctionGlobalCapturedModule | PlainMessage<FunctionGlobalCapturedModule> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedModule, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedModuleMember
 */
export class FunctionGlobalCapturedModuleMember extends Message<FunctionGlobalCapturedModuleMember> {
  /**
   * Imported classes/functions, e.g. json.encoder.JSONEncoder
   *
   * name of the module, e.g. `json.encoder`
   *
   * @generated from field: string module_name = 1;
   */
  moduleName = "";

  /**
   * name of the class or function, e.g. `JSONEncoder``. Not present for modules.
   *
   * @generated from field: string qualname = 2;
   */
  qualname = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedModuleMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedModuleMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "qualname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedModuleMember {
    return new FunctionGlobalCapturedModuleMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedModuleMember {
    return new FunctionGlobalCapturedModuleMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedModuleMember {
    return new FunctionGlobalCapturedModuleMember().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedModuleMember | PlainMessage<FunctionGlobalCapturedModuleMember> | undefined, b: FunctionGlobalCapturedModuleMember | PlainMessage<FunctionGlobalCapturedModuleMember> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedModuleMember, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FunctionGlobalCapturedFunction
 */
export class FunctionGlobalCapturedFunction extends Message<FunctionGlobalCapturedFunction> {
  /**
   * @generated from field: string source = 1;
   */
  source = "";

  /**
   * @generated from field: repeated chalk.graph.v1.FunctionReferenceCapturedGlobal captured_globals = 2;
   */
  capturedGlobals: FunctionReferenceCapturedGlobal[] = [];

  /**
   * @generated from field: optional string module = 3;
   */
  module?: string;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<FunctionGlobalCapturedFunction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FunctionGlobalCapturedFunction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "captured_globals", kind: "message", T: FunctionReferenceCapturedGlobal, repeated: true },
    { no: 3, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionGlobalCapturedFunction {
    return new FunctionGlobalCapturedFunction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedFunction {
    return new FunctionGlobalCapturedFunction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionGlobalCapturedFunction {
    return new FunctionGlobalCapturedFunction().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionGlobalCapturedFunction | PlainMessage<FunctionGlobalCapturedFunction> | undefined, b: FunctionGlobalCapturedFunction | PlainMessage<FunctionGlobalCapturedFunction> | undefined): boolean {
    return proto3.util.equals(FunctionGlobalCapturedFunction, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SourceFileReference
 */
export class SourceFileReference extends Message<SourceFileReference> {
  /**
   * @generated from field: chalk.lsp.v1.Range range = 1;
   */
  range?: Range;

  /**
   * @generated from field: optional string code = 2;
   */
  code?: string;

  /**
   * @generated from field: string file_name = 3;
   */
  fileName = "";

  constructor(data?: PartialMessage<SourceFileReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SourceFileReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: Range },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceFileReference {
    return new SourceFileReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceFileReference {
    return new SourceFileReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceFileReference {
    return new SourceFileReference().fromJsonString(jsonString, options);
  }

  static equals(a: SourceFileReference | PlainMessage<SourceFileReference> | undefined, b: SourceFileReference | PlainMessage<SourceFileReference> | undefined): boolean {
    return proto3.util.equals(SourceFileReference, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamKey
 */
export class StreamKey extends Message<StreamKey> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: chalk.graph.v1.FeatureReference feature = 2;
   */
  feature?: FeatureReference;

  constructor(data?: PartialMessage<StreamKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feature", kind: "message", T: FeatureReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamKey {
    return new StreamKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamKey {
    return new StreamKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamKey {
    return new StreamKey().fromJsonString(jsonString, options);
  }

  static equals(a: StreamKey | PlainMessage<StreamKey> | undefined, b: StreamKey | PlainMessage<StreamKey> | undefined): boolean {
    return proto3.util.equals(StreamKey, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SQLResolverSettings
 */
export class SQLResolverSettings extends Message<SQLResolverSettings> {
  /**
   * @generated from field: chalk.graph.v1.Finalizer finalizer = 1;
   */
  finalizer = Finalizer.UNSPECIFIED;

  /**
   * @generated from field: optional chalk.graph.v1.IncrementalSettings incremental_settings = 2;
   */
  incrementalSettings?: IncrementalSettings;

  /**
   * @generated from field: map<string, string> fields_root_fqn = 3;
   */
  fieldsRootFqn: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SQLResolverSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SQLResolverSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "finalizer", kind: "enum", T: proto3.getEnumType(Finalizer) },
    { no: 2, name: "incremental_settings", kind: "message", T: IncrementalSettings, opt: true },
    { no: 3, name: "fields_root_fqn", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SQLResolverSettings {
    return new SQLResolverSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SQLResolverSettings {
    return new SQLResolverSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SQLResolverSettings {
    return new SQLResolverSettings().fromJsonString(jsonString, options);
  }

  static equals(a: SQLResolverSettings | PlainMessage<SQLResolverSettings> | undefined, b: SQLResolverSettings | PlainMessage<SQLResolverSettings> | undefined): boolean {
    return proto3.util.equals(SQLResolverSettings, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.IncrementalSettings
 */
export class IncrementalSettings extends Message<IncrementalSettings> {
  /**
   * @generated from field: chalk.graph.v1.IncrementalMode mode = 1;
   */
  mode = IncrementalMode.UNSPECIFIED;

  /**
   * @generated from field: optional google.protobuf.Duration lookback_period = 2;
   */
  lookbackPeriod?: Duration;

  /**
   * @generated from field: optional string incremental_column = 3;
   */
  incrementalColumn?: string;

  /**
   * @generated from field: chalk.graph.v1.IncrementalTimestampMode timestamp_mode = 4;
   */
  timestampMode = IncrementalTimestampMode.UNSPECIFIED;

  constructor(data?: PartialMessage<IncrementalSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.IncrementalSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(IncrementalMode) },
    { no: 2, name: "lookback_period", kind: "message", T: Duration, opt: true },
    { no: 3, name: "incremental_column", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "timestamp_mode", kind: "enum", T: proto3.getEnumType(IncrementalTimestampMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncrementalSettings {
    return new IncrementalSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncrementalSettings {
    return new IncrementalSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncrementalSettings {
    return new IncrementalSettings().fromJsonString(jsonString, options);
  }

  static equals(a: IncrementalSettings | PlainMessage<IncrementalSettings> | undefined, b: IncrementalSettings | PlainMessage<IncrementalSettings> | undefined): boolean {
    return proto3.util.equals(IncrementalSettings, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.CronFilterWithFeatureArgs
 */
export class CronFilterWithFeatureArgs extends Message<CronFilterWithFeatureArgs> {
  /**
   * @generated from field: chalk.graph.v1.FunctionReference filter = 1;
   */
  filter?: FunctionReference;

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureReference args = 2;
   */
  args: FeatureReference[] = [];

  constructor(data?: PartialMessage<CronFilterWithFeatureArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.CronFilterWithFeatureArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: FunctionReference },
    { no: 2, name: "args", kind: "message", T: FeatureReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronFilterWithFeatureArgs {
    return new CronFilterWithFeatureArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronFilterWithFeatureArgs {
    return new CronFilterWithFeatureArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronFilterWithFeatureArgs {
    return new CronFilterWithFeatureArgs().fromJsonString(jsonString, options);
  }

  static equals(a: CronFilterWithFeatureArgs | PlainMessage<CronFilterWithFeatureArgs> | undefined, b: CronFilterWithFeatureArgs | PlainMessage<CronFilterWithFeatureArgs> | undefined): boolean {
    return proto3.util.equals(CronFilterWithFeatureArgs, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * @generated from oneof chalk.graph.v1.Schedule.schedule
   */
  schedule: {
    /**
     * @generated from field: string crontab = 1;
     */
    value: string;
    case: "crontab";
  } | {
    /**
     * @generated from field: google.protobuf.Duration duration = 2;
     */
    value: Duration;
    case: "duration";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: chalk.graph.v1.FunctionReference filter = 3;
   */
  filter?: FunctionReference;

  /**
   * @generated from field: chalk.graph.v1.FunctionReference sample = 4;
   */
  sample?: FunctionReference;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "crontab", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "schedule" },
    { no: 2, name: "duration", kind: "message", T: Duration, oneof: "schedule" },
    { no: 3, name: "filter", kind: "message", T: FunctionReference },
    { no: 4, name: "sample", kind: "message", T: FunctionReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.FeatureValidation
 */
export class FeatureValidation extends Message<FeatureValidation> {
  /**
   * @generated from oneof chalk.graph.v1.FeatureValidation.validation
   */
  validation: {
    /**
     * Deprecated since they don't store the full type information (e.g. different numeric types)
     * Use the *_arrow fields (6-9) instead.
     *
     * @generated from field: float min = 1 [deprecated = true];
     * @deprecated
     */
    value: number;
    case: "min";
  } | {
    /**
     * @generated from field: float max = 2 [deprecated = true];
     * @deprecated
     */
    value: number;
    case: "max";
  } | {
    /**
     * @generated from field: uint32 min_length = 3 [deprecated = true];
     * @deprecated
     */
    value: number;
    case: "minLength";
  } | {
    /**
     * @generated from field: uint32 max_length = 4 [deprecated = true];
     * @deprecated
     */
    value: number;
    case: "maxLength";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarValue min_arrow = 6;
     */
    value: ScalarValue;
    case: "minArrow";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarValue max_arrow = 7;
     */
    value: ScalarValue;
    case: "maxArrow";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarValue min_length_arrow = 8;
     */
    value: ScalarValue;
    case: "minLengthArrow";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarValue max_length_arrow = 9;
     */
    value: ScalarValue;
    case: "maxLengthArrow";
  } | {
    /**
     * @generated from field: chalk.arrow.v1.ScalarValue contains = 10;
     */
    value: ScalarValue;
    case: "contains";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<FeatureValidation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.FeatureValidation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "validation" },
    { no: 2, name: "max", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "validation" },
    { no: 3, name: "min_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "validation" },
    { no: 4, name: "max_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "validation" },
    { no: 6, name: "min_arrow", kind: "message", T: ScalarValue, oneof: "validation" },
    { no: 7, name: "max_arrow", kind: "message", T: ScalarValue, oneof: "validation" },
    { no: 8, name: "min_length_arrow", kind: "message", T: ScalarValue, oneof: "validation" },
    { no: 9, name: "max_length_arrow", kind: "message", T: ScalarValue, oneof: "validation" },
    { no: 10, name: "contains", kind: "message", T: ScalarValue, oneof: "validation" },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureValidation {
    return new FeatureValidation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureValidation {
    return new FeatureValidation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureValidation {
    return new FeatureValidation().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureValidation | PlainMessage<FeatureValidation> | undefined, b: FeatureValidation | PlainMessage<FeatureValidation> | undefined): boolean {
    return proto3.util.equals(FeatureValidation, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.VersionInfo
 */
export class VersionInfo extends Message<VersionInfo> {
  /**
   * @generated from field: uint32 default = 1;
   */
  default = 0;

  /**
   * @generated from field: uint32 maximum = 2;
   */
  maximum = 0;

  constructor(data?: PartialMessage<VersionInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.VersionInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "maximum", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionInfo {
    return new VersionInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionInfo {
    return new VersionInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionInfo {
    return new VersionInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VersionInfo | PlainMessage<VersionInfo> | undefined, b: VersionInfo | PlainMessage<VersionInfo> | undefined): boolean {
    return proto3.util.equals(VersionInfo, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StrictValidation
 */
export class StrictValidation extends Message<StrictValidation> {
  /**
   * @generated from field: chalk.graph.v1.FeatureReference feature = 1;
   */
  feature?: FeatureReference;

  /**
   * @generated from field: repeated chalk.graph.v1.FeatureValidation validations = 2;
   */
  validations: FeatureValidation[] = [];

  constructor(data?: PartialMessage<StrictValidation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StrictValidation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature", kind: "message", T: FeatureReference },
    { no: 2, name: "validations", kind: "message", T: FeatureValidation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StrictValidation {
    return new StrictValidation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StrictValidation {
    return new StrictValidation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StrictValidation {
    return new StrictValidation().fromJsonString(jsonString, options);
  }

  static equals(a: StrictValidation | PlainMessage<StrictValidation> | undefined, b: StrictValidation | PlainMessage<StrictValidation> | undefined): boolean {
    return proto3.util.equals(StrictValidation, a, b);
  }
}

