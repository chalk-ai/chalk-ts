// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/offline_queries.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp, Value } from "@bufbuild/protobuf";
import { DatasetRevisionMeta } from "./datasets_pb";
import { PlanAggregateBackfillResponse } from "../../aggregate/v1/service_pb";

/**
 * @generated from enum chalk.server.v1.OfflineQueryStatus
 */
export enum OfflineQueryStatus {
  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_WORKING = 2;
   */
  WORKING = 2,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_COMPLETED = 4;
   */
  COMPLETED = 4,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_CANCELED = 5;
   */
  CANCELED = 5,

  /**
   * @generated from enum value: OFFLINE_QUERY_STATUS_QUEUED = 6;
   */
  QUEUED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(OfflineQueryStatus)
proto3.util.setEnumType(OfflineQueryStatus, "chalk.server.v1.OfflineQueryStatus", [
  { no: 0, name: "OFFLINE_QUERY_STATUS_UNSPECIFIED" },
  { no: 1, name: "OFFLINE_QUERY_STATUS_UNKNOWN" },
  { no: 2, name: "OFFLINE_QUERY_STATUS_WORKING" },
  { no: 3, name: "OFFLINE_QUERY_STATUS_FAILED" },
  { no: 4, name: "OFFLINE_QUERY_STATUS_COMPLETED" },
  { no: 5, name: "OFFLINE_QUERY_STATUS_CANCELED" },
  { no: 6, name: "OFFLINE_QUERY_STATUS_QUEUED" },
]);

/**
 * @generated from enum chalk.server.v1.OfflineQueryKind
 */
export enum OfflineQueryKind {
  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY = 2;
   */
  ASYNC_OFFLINE_QUERY = 2,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY = 3;
   */
  CRON_OFFLINE_QUERY = 3,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_OFFLINE_QUERY = 4;
   */
  OFFLINE_QUERY = 4,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_DATASET_INGESTION = 5;
   */
  DATASET_INGESTION = 5,

  /**
   * @generated from enum value: OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL = 6;
   */
  AGGREGATION_BACKFILL = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(OfflineQueryKind)
proto3.util.setEnumType(OfflineQueryKind, "chalk.server.v1.OfflineQueryKind", [
  { no: 0, name: "OFFLINE_QUERY_KIND_UNSPECIFIED" },
  { no: 1, name: "OFFLINE_QUERY_KIND_UNKNOWN" },
  { no: 2, name: "OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY" },
  { no: 3, name: "OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY" },
  { no: 4, name: "OFFLINE_QUERY_KIND_OFFLINE_QUERY" },
  { no: 5, name: "OFFLINE_QUERY_KIND_DATASET_INGESTION" },
  { no: 6, name: "OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL" },
]);

/**
 * @generated from message chalk.server.v1.OfflineQueryMeta
 */
export class OfflineQueryMeta extends Message<OfflineQueryMeta> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string operation_id = 2;
   */
  operationId = "";

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * @generated from field: string deployment_id = 4;
   */
  deploymentId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Value query_meta = 6;
   */
  queryMeta?: Value;

  /**
   * @generated from field: optional string query_plan_id = 7;
   */
  queryPlanId?: string;

  /**
   * @generated from field: optional string branch_name = 8;
   */
  branchName?: string;

  /**
   * @generated from field: optional string dataset_id = 9;
   */
  datasetId?: string;

  /**
   * @generated from field: optional string dataset_name = 10;
   */
  datasetName?: string;

  /**
   * @generated from field: optional bool has_errors = 11;
   */
  hasErrors?: boolean;

  /**
   * @generated from field: optional string agent_id = 12;
   */
  agentId?: string;

  /**
   * @generated from field: optional string trace_id = 13;
   */
  traceId?: string;

  /**
   * @generated from field: optional string correlation_id = 14;
   */
  correlationId?: string;

  /**
   * @generated from field: google.protobuf.Timestamp completed_at = 15;
   */
  completedAt?: Timestamp;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryStatus status = 16;
   */
  status?: OfflineQueryStatus;

  /**
   * @generated from field: bool has_plan_stages = 17;
   */
  hasPlanStages = false;

  /**
   * @generated from field: optional int32 total_computers = 18;
   */
  totalComputers?: number;

  /**
   * @generated from field: optional int32 num_completed_computers = 19;
   */
  numCompletedComputers?: number;

  /**
   * @generated from field: optional int32 total_partitions = 20;
   */
  totalPartitions?: number;

  /**
   * @generated from field: optional int32 num_completed_partitions = 21;
   */
  numCompletedPartitions?: number;

  /**
   * @generated from field: optional string recompute_features = 22;
   */
  recomputeFeatures?: string;

  /**
   * @generated from field: optional string spine_sql_query = 23;
   */
  spineSqlQuery?: string;

  /**
   * @generated from field: optional google.protobuf.Value filters = 24;
   */
  filters?: Value;

  /**
   * @generated from field: optional google.protobuf.Value planner_options = 25;
   */
  plannerOptions?: Value;

  /**
   * @generated from field: optional google.protobuf.Value invoker_options = 26;
   */
  invokerOptions?: Value;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryKind query_type = 27;
   */
  queryType?: OfflineQueryKind;

  /**
   * @generated from field: repeated string tags = 28;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated string required_resolver_tags = 29;
   */
  requiredResolverTags: string[] = [];

  /**
   * @generated from field: optional string aggregate_backfill_id = 30;
   */
  aggregateBackfillId?: string;

  /**
   * @generated from field: optional google.protobuf.Value output = 31;
   */
  output?: Value;

  /**
   * @generated from field: optional google.protobuf.Value required_output = 32;
   */
  requiredOutput?: Value;

  /**
   * @generated from field: optional string raw_body_filename = 33;
   */
  rawBodyFilename?: string;

  /**
   * @generated from field: optional chalk.server.v1.DatasetRevisionMeta dataset_revision = 34;
   */
  datasetRevision?: DatasetRevisionMeta;

  /**
   * @generated from field: repeated chalk.aggregate.v1.PlanAggregateBackfillResponse time_series = 35;
   */
  timeSeries: PlanAggregateBackfillResponse[] = [];

  /**
   * @generated from field: optional string evaluation_run_id = 36;
   */
  evaluationRunId?: string;

  constructor(data?: PartialMessage<OfflineQueryMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.OfflineQueryMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "query_meta", kind: "message", T: Value, opt: true },
    { no: 7, name: "query_plan_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "dataset_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "has_errors", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "agent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "correlation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "completed_at", kind: "message", T: Timestamp },
    { no: 16, name: "status", kind: "enum", T: proto3.getEnumType(OfflineQueryStatus), opt: true },
    { no: 17, name: "has_plan_stages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "total_computers", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 19, name: "num_completed_computers", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 20, name: "total_partitions", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 21, name: "num_completed_partitions", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 22, name: "recompute_features", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 23, name: "spine_sql_query", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 24, name: "filters", kind: "message", T: Value, opt: true },
    { no: 25, name: "planner_options", kind: "message", T: Value, opt: true },
    { no: 26, name: "invoker_options", kind: "message", T: Value, opt: true },
    { no: 27, name: "query_type", kind: "enum", T: proto3.getEnumType(OfflineQueryKind), opt: true },
    { no: 28, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 29, name: "required_resolver_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 30, name: "aggregate_backfill_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 31, name: "output", kind: "message", T: Value, opt: true },
    { no: 32, name: "required_output", kind: "message", T: Value, opt: true },
    { no: 33, name: "raw_body_filename", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 34, name: "dataset_revision", kind: "message", T: DatasetRevisionMeta, opt: true },
    { no: 35, name: "time_series", kind: "message", T: PlanAggregateBackfillResponse, repeated: true },
    { no: 36, name: "evaluation_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfflineQueryMeta {
    return new OfflineQueryMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfflineQueryMeta {
    return new OfflineQueryMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfflineQueryMeta {
    return new OfflineQueryMeta().fromJsonString(jsonString, options);
  }

  static equals(a: OfflineQueryMeta | PlainMessage<OfflineQueryMeta> | undefined, b: OfflineQueryMeta | PlainMessage<OfflineQueryMeta> | undefined): boolean {
    return proto3.util.equals(OfflineQueryMeta, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListOfflineQueriesRequest
 */
export class ListOfflineQueriesRequest extends Message<ListOfflineQueriesRequest> {
  /**
   * @generated from field: optional string cursor = 1;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  /**
   * @generated from field: optional string start_date = 3;
   */
  startDate?: string;

  /**
   * @generated from field: optional string end_date = 4;
   */
  endDate?: string;

  /**
   * @generated from field: optional string id_filter = 5;
   */
  idFilter?: string;

  /**
   * @generated from field: optional string agent_id_filter = 6;
   */
  agentIdFilter?: string;

  /**
   * @generated from field: optional string branch_filter = 7;
   */
  branchFilter?: string;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryKind kind_filter = 8;
   */
  kindFilter?: OfflineQueryKind;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryStatus status_filter = 9;
   */
  statusFilter?: OfflineQueryStatus;

  /**
   * @generated from field: optional string aggregation_backfill_id_filter = 10;
   */
  aggregationBackfillIdFilter?: string;

  /**
   * @generated from field: optional string evaluation_run_id_filter = 11;
   */
  evaluationRunIdFilter?: string;

  constructor(data?: PartialMessage<ListOfflineQueriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListOfflineQueriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "id_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "agent_id_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "branch_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "kind_filter", kind: "enum", T: proto3.getEnumType(OfflineQueryKind), opt: true },
    { no: 9, name: "status_filter", kind: "enum", T: proto3.getEnumType(OfflineQueryStatus), opt: true },
    { no: 10, name: "aggregation_backfill_id_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "evaluation_run_id_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOfflineQueriesRequest {
    return new ListOfflineQueriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOfflineQueriesRequest {
    return new ListOfflineQueriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOfflineQueriesRequest {
    return new ListOfflineQueriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOfflineQueriesRequest | PlainMessage<ListOfflineQueriesRequest> | undefined, b: ListOfflineQueriesRequest | PlainMessage<ListOfflineQueriesRequest> | undefined): boolean {
    return proto3.util.equals(ListOfflineQueriesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListOfflineQueriesResponse
 */
export class ListOfflineQueriesResponse extends Message<ListOfflineQueriesResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.OfflineQueryMeta offline_queries = 1;
   */
  offlineQueries: OfflineQueryMeta[] = [];

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  constructor(data?: PartialMessage<ListOfflineQueriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListOfflineQueriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offline_queries", kind: "message", T: OfflineQueryMeta, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOfflineQueriesResponse {
    return new ListOfflineQueriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOfflineQueriesResponse {
    return new ListOfflineQueriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOfflineQueriesResponse {
    return new ListOfflineQueriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOfflineQueriesResponse | PlainMessage<ListOfflineQueriesResponse> | undefined, b: ListOfflineQueriesResponse | PlainMessage<ListOfflineQueriesResponse> | undefined): boolean {
    return proto3.util.equals(ListOfflineQueriesResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetOfflineQueryRequest
 */
export class GetOfflineQueryRequest extends Message<GetOfflineQueryRequest> {
  /**
   * @generated from field: string offline_query_id = 1;
   */
  offlineQueryId = "";

  constructor(data?: PartialMessage<GetOfflineQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetOfflineQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offline_query_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOfflineQueryRequest {
    return new GetOfflineQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOfflineQueryRequest {
    return new GetOfflineQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOfflineQueryRequest {
    return new GetOfflineQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOfflineQueryRequest | PlainMessage<GetOfflineQueryRequest> | undefined, b: GetOfflineQueryRequest | PlainMessage<GetOfflineQueryRequest> | undefined): boolean {
    return proto3.util.equals(GetOfflineQueryRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetOfflineQueryResponse
 */
export class GetOfflineQueryResponse extends Message<GetOfflineQueryResponse> {
  /**
   * @generated from field: chalk.server.v1.OfflineQueryMeta offline_query = 1;
   */
  offlineQuery?: OfflineQueryMeta;

  constructor(data?: PartialMessage<GetOfflineQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetOfflineQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offline_query", kind: "message", T: OfflineQueryMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOfflineQueryResponse {
    return new GetOfflineQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOfflineQueryResponse {
    return new GetOfflineQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOfflineQueryResponse {
    return new GetOfflineQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOfflineQueryResponse | PlainMessage<GetOfflineQueryResponse> | undefined, b: GetOfflineQueryResponse | PlainMessage<GetOfflineQueryResponse> | undefined): boolean {
    return proto3.util.equals(GetOfflineQueryResponse, a, b);
  }
}

