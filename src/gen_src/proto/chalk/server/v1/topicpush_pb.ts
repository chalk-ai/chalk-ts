// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/topicpush.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Topic } from "./topic_pb";

/**
 * @generated from message chalk.server.v1.ScheduledJob
 */
export class ScheduledJob extends Message<ScheduledJob> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string payload = 3;
   */
  payload = "";

  /**
   * @generated from field: string schedule = 4;
   */
  schedule = "";

  /**
   * @generated from field: chalk.server.v1.Topic topic = 5;
   */
  topic?: Topic;

  /**
   * @generated from field: map<string, string> attributes = 6;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: optional string environment = 7;
   */
  environment?: string;

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<ScheduledJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScheduledJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "topic", kind: "message", T: Topic },
    { no: 6, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduledJob {
    return new ScheduledJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduledJob {
    return new ScheduledJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduledJob {
    return new ScheduledJob().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduledJob | PlainMessage<ScheduledJob> | undefined, b: ScheduledJob | PlainMessage<ScheduledJob> | undefined): boolean {
    return proto3.util.equals(ScheduledJob, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateJobRequest
 */
export class UpdateJobRequest extends Message<UpdateJobRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string payload = 3;
   */
  payload = "";

  /**
   * @generated from field: string schedule = 4;
   */
  schedule = "";

  /**
   * @generated from field: chalk.server.v1.Topic topic = 5;
   */
  topic?: Topic;

  /**
   * @generated from field: map<string, string> attributes = 6;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: optional string environment = 7;
   */
  environment?: string;

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<UpdateJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "topic", kind: "message", T: Topic },
    { no: 6, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateJobRequest {
    return new UpdateJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateJobRequest {
    return new UpdateJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateJobRequest {
    return new UpdateJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateJobRequest | PlainMessage<UpdateJobRequest> | undefined, b: UpdateJobRequest | PlainMessage<UpdateJobRequest> | undefined): boolean {
    return proto3.util.equals(UpdateJobRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateJobResponse
 */
export class UpdateJobResponse extends Message<UpdateJobResponse> {
  /**
   * @generated from field: chalk.server.v1.ScheduledJob job = 1;
   */
  job?: ScheduledJob;

  constructor(data?: PartialMessage<UpdateJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job", kind: "message", T: ScheduledJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateJobResponse {
    return new UpdateJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateJobResponse {
    return new UpdateJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateJobResponse {
    return new UpdateJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateJobResponse | PlainMessage<UpdateJobResponse> | undefined, b: UpdateJobResponse | PlainMessage<UpdateJobResponse> | undefined): boolean {
    return proto3.util.equals(UpdateJobResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListJobsRequest
 */
export class ListJobsRequest extends Message<ListJobsRequest> {
  constructor(data?: PartialMessage<ListJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListJobsRequest {
    return new ListJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListJobsRequest {
    return new ListJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListJobsRequest {
    return new ListJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListJobsRequest | PlainMessage<ListJobsRequest> | undefined, b: ListJobsRequest | PlainMessage<ListJobsRequest> | undefined): boolean {
    return proto3.util.equals(ListJobsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListJobsResponse
 */
export class ListJobsResponse extends Message<ListJobsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.ScheduledJob jobs = 1;
   */
  jobs: ScheduledJob[] = [];

  constructor(data?: PartialMessage<ListJobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListJobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobs", kind: "message", T: ScheduledJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListJobsResponse {
    return new ListJobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListJobsResponse {
    return new ListJobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListJobsResponse {
    return new ListJobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListJobsResponse | PlainMessage<ListJobsResponse> | undefined, b: ListJobsResponse | PlainMessage<ListJobsResponse> | undefined): boolean {
    return proto3.util.equals(ListJobsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateJobRequest
 */
export class CreateJobRequest extends Message<CreateJobRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string payload = 2;
   */
  payload = "";

  /**
   * @generated from field: string schedule = 3;
   */
  schedule = "";

  /**
   * @generated from field: chalk.server.v1.Topic topic = 4;
   */
  topic?: Topic;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: optional string environment = 7;
   */
  environment?: string;

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<CreateJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "topic", kind: "message", T: Topic },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateJobRequest {
    return new CreateJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateJobRequest {
    return new CreateJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateJobRequest {
    return new CreateJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateJobRequest | PlainMessage<CreateJobRequest> | undefined, b: CreateJobRequest | PlainMessage<CreateJobRequest> | undefined): boolean {
    return proto3.util.equals(CreateJobRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateJobResponse
 */
export class CreateJobResponse extends Message<CreateJobResponse> {
  /**
   * @generated from field: chalk.server.v1.ScheduledJob job = 1;
   */
  job?: ScheduledJob;

  constructor(data?: PartialMessage<CreateJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job", kind: "message", T: ScheduledJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateJobResponse {
    return new CreateJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateJobResponse {
    return new CreateJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateJobResponse {
    return new CreateJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateJobResponse | PlainMessage<CreateJobResponse> | undefined, b: CreateJobResponse | PlainMessage<CreateJobResponse> | undefined): boolean {
    return proto3.util.equals(CreateJobResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteJobRequest
 */
export class DeleteJobRequest extends Message<DeleteJobRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteJobRequest {
    return new DeleteJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteJobRequest {
    return new DeleteJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteJobRequest {
    return new DeleteJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteJobRequest | PlainMessage<DeleteJobRequest> | undefined, b: DeleteJobRequest | PlainMessage<DeleteJobRequest> | undefined): boolean {
    return proto3.util.equals(DeleteJobRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteJobResponse
 */
export class DeleteJobResponse extends Message<DeleteJobResponse> {
  constructor(data?: PartialMessage<DeleteJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteJobResponse {
    return new DeleteJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteJobResponse {
    return new DeleteJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteJobResponse {
    return new DeleteJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteJobResponse | PlainMessage<DeleteJobResponse> | undefined, b: DeleteJobResponse | PlainMessage<DeleteJobResponse> | undefined): boolean {
    return proto3.util.equals(DeleteJobResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetJobByNameRequest
 */
export class GetJobByNameRequest extends Message<GetJobByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetJobByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetJobByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobByNameRequest {
    return new GetJobByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobByNameRequest {
    return new GetJobByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobByNameRequest {
    return new GetJobByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobByNameRequest | PlainMessage<GetJobByNameRequest> | undefined, b: GetJobByNameRequest | PlainMessage<GetJobByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetJobByNameRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetJobByNameResponse
 */
export class GetJobByNameResponse extends Message<GetJobByNameResponse> {
  /**
   * @generated from field: chalk.server.v1.ScheduledJob job = 1;
   */
  job?: ScheduledJob;

  constructor(data?: PartialMessage<GetJobByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetJobByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job", kind: "message", T: ScheduledJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobByNameResponse {
    return new GetJobByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobByNameResponse {
    return new GetJobByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobByNameResponse {
    return new GetJobByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobByNameResponse | PlainMessage<GetJobByNameResponse> | undefined, b: GetJobByNameResponse | PlainMessage<GetJobByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetJobByNameResponse, a, b);
  }
}

