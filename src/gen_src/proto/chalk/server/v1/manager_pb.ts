// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/manager.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.GetClusterEnvironmentsRequest
 */
export class GetClusterEnvironmentsRequest extends Message<GetClusterEnvironmentsRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  constructor(data?: PartialMessage<GetClusterEnvironmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterEnvironmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterEnvironmentsRequest {
    return new GetClusterEnvironmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterEnvironmentsRequest {
    return new GetClusterEnvironmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterEnvironmentsRequest {
    return new GetClusterEnvironmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterEnvironmentsRequest | PlainMessage<GetClusterEnvironmentsRequest> | undefined, b: GetClusterEnvironmentsRequest | PlainMessage<GetClusterEnvironmentsRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterEnvironmentsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterEnvironmentsResponse
 */
export class GetClusterEnvironmentsResponse extends Message<GetClusterEnvironmentsResponse> {
  /**
   * @generated from field: repeated string environment_ids = 1;
   */
  environmentIds: string[] = [];

  constructor(data?: PartialMessage<GetClusterEnvironmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterEnvironmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterEnvironmentsResponse {
    return new GetClusterEnvironmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterEnvironmentsResponse {
    return new GetClusterEnvironmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterEnvironmentsResponse {
    return new GetClusterEnvironmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterEnvironmentsResponse | PlainMessage<GetClusterEnvironmentsResponse> | undefined, b: GetClusterEnvironmentsResponse | PlainMessage<GetClusterEnvironmentsResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterEnvironmentsResponse, a, b);
  }
}

