// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/bootstrap.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Project, Team, TeamInvite } from "./team_pb";
import { Environment } from "./environment_pb";

/**
 * @generated from message chalk.server.v1.BootstrapExtraSettingsEnvironment
 */
export class BootstrapExtraSettingsEnvironment extends Message<BootstrapExtraSettingsEnvironment> {
  /**
   * @generated from field: map<string, bool> settings = 1;
   */
  settings: { [key: string]: boolean } = {};

  constructor(data?: PartialMessage<BootstrapExtraSettingsEnvironment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BootstrapExtraSettingsEnvironment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapExtraSettingsEnvironment {
    return new BootstrapExtraSettingsEnvironment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapExtraSettingsEnvironment {
    return new BootstrapExtraSettingsEnvironment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapExtraSettingsEnvironment {
    return new BootstrapExtraSettingsEnvironment().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapExtraSettingsEnvironment | PlainMessage<BootstrapExtraSettingsEnvironment> | undefined, b: BootstrapExtraSettingsEnvironment | PlainMessage<BootstrapExtraSettingsEnvironment> | undefined): boolean {
    return proto3.util.equals(BootstrapExtraSettingsEnvironment, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BootstrapExtraSettings
 */
export class BootstrapExtraSettings extends Message<BootstrapExtraSettings> {
  /**
   * @generated from field: map<string, bool> global = 1;
   */
  global: { [key: string]: boolean } = {};

  /**
   * @generated from field: map<string, chalk.server.v1.BootstrapExtraSettingsEnvironment> environments = 2;
   */
  environments: { [key: string]: BootstrapExtraSettingsEnvironment } = {};

  constructor(data?: PartialMessage<BootstrapExtraSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BootstrapExtraSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "global", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 2, name: "environments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BootstrapExtraSettingsEnvironment} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapExtraSettings {
    return new BootstrapExtraSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapExtraSettings {
    return new BootstrapExtraSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapExtraSettings {
    return new BootstrapExtraSettings().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapExtraSettings | PlainMessage<BootstrapExtraSettings> | undefined, b: BootstrapExtraSettings | PlainMessage<BootstrapExtraSettings> | undefined): boolean {
    return proto3.util.equals(BootstrapExtraSettings, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ParsedBootstrapConfigs
 */
export class ParsedBootstrapConfigs extends Message<ParsedBootstrapConfigs> {
  /**
   * @generated from field: repeated chalk.server.v1.Team teams = 1;
   */
  teams: Team[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.Project projects = 2;
   */
  projects: Project[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.Environment environments = 3;
   */
  environments: Environment[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.TeamInvite team_invites = 4;
   */
  teamInvites: TeamInvite[] = [];

  /**
   * @generated from field: chalk.server.v1.BootstrapExtraSettings extra_settings = 5;
   */
  extraSettings?: BootstrapExtraSettings;

  /**
   * @generated from field: optional string global_pinned_base_image = 6;
   */
  globalPinnedBaseImage?: string;

  constructor(data?: PartialMessage<ParsedBootstrapConfigs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ParsedBootstrapConfigs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: Team, repeated: true },
    { no: 2, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 3, name: "environments", kind: "message", T: Environment, repeated: true },
    { no: 4, name: "team_invites", kind: "message", T: TeamInvite, repeated: true },
    { no: 5, name: "extra_settings", kind: "message", T: BootstrapExtraSettings },
    { no: 6, name: "global_pinned_base_image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParsedBootstrapConfigs {
    return new ParsedBootstrapConfigs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParsedBootstrapConfigs {
    return new ParsedBootstrapConfigs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParsedBootstrapConfigs {
    return new ParsedBootstrapConfigs().fromJsonString(jsonString, options);
  }

  static equals(a: ParsedBootstrapConfigs | PlainMessage<ParsedBootstrapConfigs> | undefined, b: ParsedBootstrapConfigs | PlainMessage<ParsedBootstrapConfigs> | undefined): boolean {
    return proto3.util.equals(ParsedBootstrapConfigs, a, b);
  }
}

