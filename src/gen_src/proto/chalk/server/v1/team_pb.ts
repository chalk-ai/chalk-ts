// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/team.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp, Value } from "@bufbuild/protobuf";
import { Environment } from "./environment_pb";
import { Agent, CustomClaim, ServiceTokenAgent } from "../../auth/v1/agent_pb";
import { DisplayAgent, DisplayServiceTokenAgent } from "../../auth/v1/displayagent_pb";
import { Permission } from "../../auth/v1/permissions_pb";
import { FeaturePermission, FeaturePermissions } from "../../auth/v1/featurepermission_pb";

/**
 * @generated from message chalk.server.v1.GetEnvRequest
 */
export class GetEnvRequest extends Message<GetEnvRequest> {
  constructor(data?: PartialMessage<GetEnvRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetEnvRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnvRequest {
    return new GetEnvRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnvRequest {
    return new GetEnvRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnvRequest {
    return new GetEnvRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnvRequest | PlainMessage<GetEnvRequest> | undefined, b: GetEnvRequest | PlainMessage<GetEnvRequest> | undefined): boolean {
    return proto3.util.equals(GetEnvRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetEnvResponse
 */
export class GetEnvResponse extends Message<GetEnvResponse> {
  /**
   * @generated from field: chalk.server.v1.Environment environment = 1;
   */
  environment?: Environment;

  constructor(data?: PartialMessage<GetEnvResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetEnvResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnvResponse {
    return new GetEnvResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnvResponse {
    return new GetEnvResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnvResponse {
    return new GetEnvResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnvResponse | PlainMessage<GetEnvResponse> | undefined, b: GetEnvResponse | PlainMessage<GetEnvResponse> | undefined): boolean {
    return proto3.util.equals(GetEnvResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetEnvironmentsRequest
 */
export class GetEnvironmentsRequest extends Message<GetEnvironmentsRequest> {
  /**
   * @generated from field: string project = 1;
   */
  project = "";

  constructor(data?: PartialMessage<GetEnvironmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetEnvironmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnvironmentsRequest {
    return new GetEnvironmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnvironmentsRequest {
    return new GetEnvironmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnvironmentsRequest {
    return new GetEnvironmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnvironmentsRequest | PlainMessage<GetEnvironmentsRequest> | undefined, b: GetEnvironmentsRequest | PlainMessage<GetEnvironmentsRequest> | undefined): boolean {
    return proto3.util.equals(GetEnvironmentsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetEnvironmentsResponse
 */
export class GetEnvironmentsResponse extends Message<GetEnvironmentsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.Environment environments = 2;
   */
  environments: Environment[] = [];

  constructor(data?: PartialMessage<GetEnvironmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetEnvironmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "environments", kind: "message", T: Environment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnvironmentsResponse {
    return new GetEnvironmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnvironmentsResponse {
    return new GetEnvironmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnvironmentsResponse {
    return new GetEnvironmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnvironmentsResponse | PlainMessage<GetEnvironmentsResponse> | undefined, b: GetEnvironmentsResponse | PlainMessage<GetEnvironmentsResponse> | undefined): boolean {
    return proto3.util.equals(GetEnvironmentsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAgentRequest
 */
export class GetAgentRequest extends Message<GetAgentRequest> {
  constructor(data?: PartialMessage<GetAgentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAgentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgentRequest {
    return new GetAgentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgentRequest {
    return new GetAgentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgentRequest {
    return new GetAgentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgentRequest | PlainMessage<GetAgentRequest> | undefined, b: GetAgentRequest | PlainMessage<GetAgentRequest> | undefined): boolean {
    return proto3.util.equals(GetAgentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAgentResponse
 */
export class GetAgentResponse extends Message<GetAgentResponse> {
  /**
   * @generated from field: chalk.auth.v1.Agent agent = 1;
   */
  agent?: Agent;

  constructor(data?: PartialMessage<GetAgentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAgentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: Agent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgentResponse {
    return new GetAgentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgentResponse {
    return new GetAgentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgentResponse {
    return new GetAgentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgentResponse | PlainMessage<GetAgentResponse> | undefined, b: GetAgentResponse | PlainMessage<GetAgentResponse> | undefined): boolean {
    return proto3.util.equals(GetAgentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDisplayAgentRequest
 */
export class GetDisplayAgentRequest extends Message<GetDisplayAgentRequest> {
  constructor(data?: PartialMessage<GetDisplayAgentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDisplayAgentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDisplayAgentRequest {
    return new GetDisplayAgentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDisplayAgentRequest {
    return new GetDisplayAgentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDisplayAgentRequest {
    return new GetDisplayAgentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDisplayAgentRequest | PlainMessage<GetDisplayAgentRequest> | undefined, b: GetDisplayAgentRequest | PlainMessage<GetDisplayAgentRequest> | undefined): boolean {
    return proto3.util.equals(GetDisplayAgentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDisplayAgentResponse
 */
export class GetDisplayAgentResponse extends Message<GetDisplayAgentResponse> {
  /**
   * @generated from field: chalk.auth.v1.DisplayAgent agent = 1;
   */
  agent?: DisplayAgent;

  constructor(data?: PartialMessage<GetDisplayAgentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDisplayAgentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: DisplayAgent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDisplayAgentResponse {
    return new GetDisplayAgentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDisplayAgentResponse {
    return new GetDisplayAgentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDisplayAgentResponse {
    return new GetDisplayAgentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDisplayAgentResponse | PlainMessage<GetDisplayAgentResponse> | undefined, b: GetDisplayAgentResponse | PlainMessage<GetDisplayAgentResponse> | undefined): boolean {
    return proto3.util.equals(GetDisplayAgentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Team
 */
export class Team extends Message<Team> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: optional string logo = 4;
   */
  logo?: string;

  /**
   * @generated from field: repeated chalk.server.v1.Project projects = 5;
   */
  projects: Project[] = [];

  /**
   * @generated from field: optional string scim_provider = 6;
   */
  scimProvider?: string;

  /**
   * TODO: really a structured object.
   *
   * google.protobuf.Timestamp created_at = 8;
   * google.protobuf.Timestamp updated_at = 9;
   *
   * @generated from field: map<string, google.protobuf.Value> spec_config_json = 7;
   */
  specConfigJson: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<Team>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Team";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 6, name: "scim_provider", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "spec_config_json", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Team {
    return new Team().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJsonString(jsonString, options);
  }

  static equals(a: Team | PlainMessage<Team> | undefined, b: Team | PlainMessage<Team> | undefined): boolean {
    return proto3.util.equals(Team, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string team_id = 2;
   */
  teamId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated chalk.server.v1.Environment environments = 4;
   */
  environments: Environment[] = [];

  /**
   * @generated from field: optional string git_repo = 5;
   */
  gitRepo?: string;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environments", kind: "message", T: Environment, repeated: true },
    { no: 5, name: "git_repo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateTeamRequest
 */
export class CreateTeamRequest extends Message<CreateTeamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  /**
   * @generated from field: optional string logo = 3;
   */
  logo?: string;

  constructor(data?: PartialMessage<CreateTeamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateTeamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTeamRequest {
    return new CreateTeamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTeamRequest {
    return new CreateTeamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTeamRequest {
    return new CreateTeamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTeamRequest | PlainMessage<CreateTeamRequest> | undefined, b: CreateTeamRequest | PlainMessage<CreateTeamRequest> | undefined): boolean {
    return proto3.util.equals(CreateTeamRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateTeamResponse
 */
export class CreateTeamResponse extends Message<CreateTeamResponse> {
  /**
   * @generated from field: chalk.server.v1.Team team = 1;
   */
  team?: Team;

  constructor(data?: PartialMessage<CreateTeamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateTeamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team", kind: "message", T: Team },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTeamResponse {
    return new CreateTeamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTeamResponse {
    return new CreateTeamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTeamResponse {
    return new CreateTeamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTeamResponse | PlainMessage<CreateTeamResponse> | undefined, b: CreateTeamResponse | PlainMessage<CreateTeamResponse> | undefined): boolean {
    return proto3.util.equals(CreateTeamResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: chalk.server.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined, b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateEnvironmentRequest
 */
export class CreateEnvironmentRequest extends Message<CreateEnvironmentRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   *  service_url,
   *  worker_url,
   *  branch_url,
   *  source_bundle_bucket,
   *  offline_store_secret
   *
   * @generated from field: bool is_default = 3;
   */
  isDefault = false;

  constructor(data?: PartialMessage<CreateEnvironmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateEnvironmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnvironmentRequest {
    return new CreateEnvironmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnvironmentRequest | PlainMessage<CreateEnvironmentRequest> | undefined, b: CreateEnvironmentRequest | PlainMessage<CreateEnvironmentRequest> | undefined): boolean {
    return proto3.util.equals(CreateEnvironmentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateEnvironmentResponse
 */
export class CreateEnvironmentResponse extends Message<CreateEnvironmentResponse> {
  /**
   * @generated from field: chalk.server.v1.Environment environment = 1;
   */
  environment?: Environment;

  constructor(data?: PartialMessage<CreateEnvironmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateEnvironmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnvironmentResponse {
    return new CreateEnvironmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnvironmentResponse | PlainMessage<CreateEnvironmentResponse> | undefined, b: CreateEnvironmentResponse | PlainMessage<CreateEnvironmentResponse> | undefined): boolean {
    return proto3.util.equals(CreateEnvironmentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateEnvironmentOperation
 */
export class UpdateEnvironmentOperation extends Message<UpdateEnvironmentOperation> {
  /**
   * @generated from field: optional string specs_config_json = 1;
   */
  specsConfigJson?: string;

  /**
   * @generated from field: map<string, string> additional_env_vars = 2;
   */
  additionalEnvVars: { [key: string]: string } = {};

  /**
   * @generated from field: optional string private_pip_repositories = 3;
   */
  privatePipRepositories?: string;

  constructor(data?: PartialMessage<UpdateEnvironmentOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateEnvironmentOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specs_config_json", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "additional_env_vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "private_pip_repositories", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnvironmentOperation {
    return new UpdateEnvironmentOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnvironmentOperation {
    return new UpdateEnvironmentOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnvironmentOperation {
    return new UpdateEnvironmentOperation().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnvironmentOperation | PlainMessage<UpdateEnvironmentOperation> | undefined, b: UpdateEnvironmentOperation | PlainMessage<UpdateEnvironmentOperation> | undefined): boolean {
    return proto3.util.equals(UpdateEnvironmentOperation, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateEnvironmentRequest
 */
export class UpdateEnvironmentRequest extends Message<UpdateEnvironmentRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: chalk.server.v1.UpdateEnvironmentOperation update = 2;
   */
  update?: UpdateEnvironmentOperation;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateEnvironmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateEnvironmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "update", kind: "message", T: UpdateEnvironmentOperation },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnvironmentRequest {
    return new UpdateEnvironmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnvironmentRequest {
    return new UpdateEnvironmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnvironmentRequest {
    return new UpdateEnvironmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnvironmentRequest | PlainMessage<UpdateEnvironmentRequest> | undefined, b: UpdateEnvironmentRequest | PlainMessage<UpdateEnvironmentRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEnvironmentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateEnvironmentResponse
 */
export class UpdateEnvironmentResponse extends Message<UpdateEnvironmentResponse> {
  /**
   * @generated from field: chalk.server.v1.Environment environment = 1;
   */
  environment?: Environment;

  constructor(data?: PartialMessage<UpdateEnvironmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateEnvironmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnvironmentResponse {
    return new UpdateEnvironmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnvironmentResponse {
    return new UpdateEnvironmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnvironmentResponse {
    return new UpdateEnvironmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnvironmentResponse | PlainMessage<UpdateEnvironmentResponse> | undefined, b: UpdateEnvironmentResponse | PlainMessage<UpdateEnvironmentResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEnvironmentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTeamRequest
 */
export class GetTeamRequest extends Message<GetTeamRequest> {
  constructor(data?: PartialMessage<GetTeamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTeamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined, b: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTeamResponse
 */
export class GetTeamResponse extends Message<GetTeamResponse> {
  /**
   * @generated from field: chalk.server.v1.Team team = 1;
   */
  team?: Team;

  constructor(data?: PartialMessage<GetTeamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTeamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team", kind: "message", T: Team },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamResponse | PlainMessage<GetTeamResponse> | undefined, b: GetTeamResponse | PlainMessage<GetTeamResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateServiceTokenRequest
 */
export class CreateServiceTokenRequest extends Message<CreateServiceTokenRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated chalk.auth.v1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  /**
   * @generated from field: repeated string custom_claims = 3 [deprecated = true];
   * @deprecated
   */
  customClaims: string[] = [];

  /**
   * @generated from field: repeated chalk.auth.v1.CustomClaim customer_claims = 4;
   */
  customerClaims: CustomClaim[] = [];

  /**
   * @generated from field: map<string, chalk.auth.v1.FeaturePermission> feature_tag_to_permission = 5;
   */
  featureTagToPermission: { [key: string]: FeaturePermission } = {};

  constructor(data?: PartialMessage<CreateServiceTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateServiceTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
    { no: 3, name: "custom_claims", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "customer_claims", kind: "message", T: CustomClaim, repeated: true },
    { no: 5, name: "feature_tag_to_permission", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(FeaturePermission)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceTokenRequest {
    return new CreateServiceTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceTokenRequest {
    return new CreateServiceTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceTokenRequest {
    return new CreateServiceTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceTokenRequest | PlainMessage<CreateServiceTokenRequest> | undefined, b: CreateServiceTokenRequest | PlainMessage<CreateServiceTokenRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceTokenRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateServiceTokenResponse
 */
export class CreateServiceTokenResponse extends Message<CreateServiceTokenResponse> {
  /**
   * @generated from field: chalk.auth.v1.ServiceTokenAgent agent = 1;
   */
  agent?: ServiceTokenAgent;

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret = "";

  constructor(data?: PartialMessage<CreateServiceTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateServiceTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: ServiceTokenAgent },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceTokenResponse {
    return new CreateServiceTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceTokenResponse {
    return new CreateServiceTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceTokenResponse {
    return new CreateServiceTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceTokenResponse | PlainMessage<CreateServiceTokenResponse> | undefined, b: CreateServiceTokenResponse | PlainMessage<CreateServiceTokenResponse> | undefined): boolean {
    return proto3.util.equals(CreateServiceTokenResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteServiceTokenRequest
 */
export class DeleteServiceTokenRequest extends Message<DeleteServiceTokenRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteServiceTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteServiceTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceTokenRequest {
    return new DeleteServiceTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceTokenRequest {
    return new DeleteServiceTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceTokenRequest {
    return new DeleteServiceTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceTokenRequest | PlainMessage<DeleteServiceTokenRequest> | undefined, b: DeleteServiceTokenRequest | PlainMessage<DeleteServiceTokenRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServiceTokenRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteServiceTokenResponse
 */
export class DeleteServiceTokenResponse extends Message<DeleteServiceTokenResponse> {
  constructor(data?: PartialMessage<DeleteServiceTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteServiceTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceTokenResponse {
    return new DeleteServiceTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceTokenResponse {
    return new DeleteServiceTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceTokenResponse {
    return new DeleteServiceTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceTokenResponse | PlainMessage<DeleteServiceTokenResponse> | undefined, b: DeleteServiceTokenResponse | PlainMessage<DeleteServiceTokenResponse> | undefined): boolean {
    return proto3.util.equals(DeleteServiceTokenResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PermissionDescription
 */
export class PermissionDescription extends Message<PermissionDescription> {
  /**
   * @generated from field: chalk.auth.v1.Permission id = 1;
   */
  id = Permission.UNSPECIFIED;

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: string group_description = 6;
   */
  groupDescription = "";

  constructor(data?: PartialMessage<PermissionDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PermissionDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "enum", T: proto3.getEnumType(Permission) },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "group_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionDescription {
    return new PermissionDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionDescription {
    return new PermissionDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionDescription {
    return new PermissionDescription().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionDescription | PlainMessage<PermissionDescription> | undefined, b: PermissionDescription | PlainMessage<PermissionDescription> | undefined): boolean {
    return proto3.util.equals(PermissionDescription, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.RoleDescription
 */
export class RoleDescription extends Message<RoleDescription> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated chalk.auth.v1.Permission permissions = 4;
   */
  permissions: Permission[] = [];

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions feature_permissions = 5;
   */
  featurePermissions?: FeaturePermissions;

  /**
   * @generated from field: bool is_default = 6;
   */
  isDefault = false;

  constructor(data?: PartialMessage<RoleDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.RoleDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
    { no: 5, name: "feature_permissions", kind: "message", T: FeaturePermissions },
    { no: 6, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleDescription {
    return new RoleDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleDescription {
    return new RoleDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleDescription {
    return new RoleDescription().fromJsonString(jsonString, options);
  }

  static equals(a: RoleDescription | PlainMessage<RoleDescription> | undefined, b: RoleDescription | PlainMessage<RoleDescription> | undefined): boolean {
    return proto3.util.equals(RoleDescription, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAvailablePermissionsRequest
 */
export class GetAvailablePermissionsRequest extends Message<GetAvailablePermissionsRequest> {
  constructor(data?: PartialMessage<GetAvailablePermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAvailablePermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailablePermissionsRequest {
    return new GetAvailablePermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailablePermissionsRequest {
    return new GetAvailablePermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailablePermissionsRequest {
    return new GetAvailablePermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailablePermissionsRequest | PlainMessage<GetAvailablePermissionsRequest> | undefined, b: GetAvailablePermissionsRequest | PlainMessage<GetAvailablePermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetAvailablePermissionsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAvailablePermissionsResponse
 */
export class GetAvailablePermissionsResponse extends Message<GetAvailablePermissionsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.PermissionDescription permissions = 1;
   */
  permissions: PermissionDescription[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.RoleDescription roles = 2;
   */
  roles: RoleDescription[] = [];

  /**
   * @generated from field: repeated chalk.auth.v1.Permission available_service_token_permissions = 3;
   */
  availableServiceTokenPermissions: Permission[] = [];

  constructor(data?: PartialMessage<GetAvailablePermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAvailablePermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: PermissionDescription, repeated: true },
    { no: 2, name: "roles", kind: "message", T: RoleDescription, repeated: true },
    { no: 3, name: "available_service_token_permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailablePermissionsResponse {
    return new GetAvailablePermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailablePermissionsResponse {
    return new GetAvailablePermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailablePermissionsResponse {
    return new GetAvailablePermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailablePermissionsResponse | PlainMessage<GetAvailablePermissionsResponse> | undefined, b: GetAvailablePermissionsResponse | PlainMessage<GetAvailablePermissionsResponse> | undefined): boolean {
    return proto3.util.equals(GetAvailablePermissionsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpsertFeaturePermissionsRequest
 */
export class UpsertFeaturePermissionsRequest extends Message<UpsertFeaturePermissionsRequest> {
  /**
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions permissions = 2;
   */
  permissions?: FeaturePermissions;

  constructor(data?: PartialMessage<UpsertFeaturePermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpsertFeaturePermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: FeaturePermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertFeaturePermissionsRequest {
    return new UpsertFeaturePermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertFeaturePermissionsRequest {
    return new UpsertFeaturePermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertFeaturePermissionsRequest {
    return new UpsertFeaturePermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertFeaturePermissionsRequest | PlainMessage<UpsertFeaturePermissionsRequest> | undefined, b: UpsertFeaturePermissionsRequest | PlainMessage<UpsertFeaturePermissionsRequest> | undefined): boolean {
    return proto3.util.equals(UpsertFeaturePermissionsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpsertFeaturePermissionsResponse
 */
export class UpsertFeaturePermissionsResponse extends Message<UpsertFeaturePermissionsResponse> {
  /**
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions permissions = 2;
   */
  permissions?: FeaturePermissions;

  constructor(data?: PartialMessage<UpsertFeaturePermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpsertFeaturePermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: FeaturePermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertFeaturePermissionsResponse {
    return new UpsertFeaturePermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertFeaturePermissionsResponse {
    return new UpsertFeaturePermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertFeaturePermissionsResponse {
    return new UpsertFeaturePermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertFeaturePermissionsResponse | PlainMessage<UpsertFeaturePermissionsResponse> | undefined, b: UpsertFeaturePermissionsResponse | PlainMessage<UpsertFeaturePermissionsResponse> | undefined): boolean {
    return proto3.util.equals(UpsertFeaturePermissionsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListServiceTokensRequest
 */
export class ListServiceTokensRequest extends Message<ListServiceTokensRequest> {
  constructor(data?: PartialMessage<ListServiceTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListServiceTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceTokensRequest {
    return new ListServiceTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceTokensRequest {
    return new ListServiceTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceTokensRequest {
    return new ListServiceTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceTokensRequest | PlainMessage<ListServiceTokensRequest> | undefined, b: ListServiceTokensRequest | PlainMessage<ListServiceTokensRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceTokensRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListServiceTokensResponse
 */
export class ListServiceTokensResponse extends Message<ListServiceTokensResponse> {
  /**
   * @generated from field: repeated chalk.auth.v1.DisplayServiceTokenAgent agents = 1;
   */
  agents: DisplayServiceTokenAgent[] = [];

  constructor(data?: PartialMessage<ListServiceTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListServiceTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agents", kind: "message", T: DisplayServiceTokenAgent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceTokensResponse {
    return new ListServiceTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceTokensResponse {
    return new ListServiceTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceTokensResponse {
    return new ListServiceTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceTokensResponse | PlainMessage<ListServiceTokensResponse> | undefined, b: ListServiceTokensResponse | PlainMessage<ListServiceTokensResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceTokensResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateServiceTokenRequest
 */
export class UpdateServiceTokenRequest extends Message<UpdateServiceTokenRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated chalk.auth.v1.Permission permissions = 3;
   */
  permissions: Permission[] = [];

  /**
   * @generated from field: repeated chalk.auth.v1.CustomClaim customer_claims = 4;
   */
  customerClaims: CustomClaim[] = [];

  /**
   * @generated from field: map<string, chalk.auth.v1.FeaturePermission> feature_tag_to_permission = 5;
   */
  featureTagToPermission: { [key: string]: FeaturePermission } = {};

  constructor(data?: PartialMessage<UpdateServiceTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateServiceTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
    { no: 4, name: "customer_claims", kind: "message", T: CustomClaim, repeated: true },
    { no: 5, name: "feature_tag_to_permission", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(FeaturePermission)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServiceTokenRequest {
    return new UpdateServiceTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServiceTokenRequest {
    return new UpdateServiceTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServiceTokenRequest {
    return new UpdateServiceTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServiceTokenRequest | PlainMessage<UpdateServiceTokenRequest> | undefined, b: UpdateServiceTokenRequest | PlainMessage<UpdateServiceTokenRequest> | undefined): boolean {
    return proto3.util.equals(UpdateServiceTokenRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateServiceTokenResponse
 */
export class UpdateServiceTokenResponse extends Message<UpdateServiceTokenResponse> {
  /**
   * @generated from field: chalk.auth.v1.DisplayServiceTokenAgent agent = 1;
   */
  agent?: DisplayServiceTokenAgent;

  constructor(data?: PartialMessage<UpdateServiceTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateServiceTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: DisplayServiceTokenAgent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServiceTokenResponse {
    return new UpdateServiceTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServiceTokenResponse {
    return new UpdateServiceTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServiceTokenResponse {
    return new UpdateServiceTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServiceTokenResponse | PlainMessage<UpdateServiceTokenResponse> | undefined, b: UpdateServiceTokenResponse | PlainMessage<UpdateServiceTokenResponse> | undefined): boolean {
    return proto3.util.equals(UpdateServiceTokenResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateScimGroupSettingsRequest
 */
export class UpdateScimGroupSettingsRequest extends Message<UpdateScimGroupSettingsRequest> {
  /**
   * @generated from field: repeated string query_tags = 1;
   */
  queryTags: string[] = [];

  /**
   * @generated from field: string group = 2;
   */
  group = "";

  constructor(data?: PartialMessage<UpdateScimGroupSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateScimGroupSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateScimGroupSettingsRequest {
    return new UpdateScimGroupSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateScimGroupSettingsRequest {
    return new UpdateScimGroupSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateScimGroupSettingsRequest {
    return new UpdateScimGroupSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateScimGroupSettingsRequest | PlainMessage<UpdateScimGroupSettingsRequest> | undefined, b: UpdateScimGroupSettingsRequest | PlainMessage<UpdateScimGroupSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateScimGroupSettingsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateScimGroupSettingsResponse
 */
export class UpdateScimGroupSettingsResponse extends Message<UpdateScimGroupSettingsResponse> {
  /**
   * @generated from field: repeated string query_tags = 1;
   */
  queryTags: string[] = [];

  constructor(data?: PartialMessage<UpdateScimGroupSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateScimGroupSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateScimGroupSettingsResponse {
    return new UpdateScimGroupSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateScimGroupSettingsResponse {
    return new UpdateScimGroupSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateScimGroupSettingsResponse {
    return new UpdateScimGroupSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateScimGroupSettingsResponse | PlainMessage<UpdateScimGroupSettingsResponse> | undefined, b: UpdateScimGroupSettingsResponse | PlainMessage<UpdateScimGroupSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateScimGroupSettingsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.InviteTeamMemberRequest
 */
export class InviteTeamMemberRequest extends Message<InviteTeamMemberRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: optional string role_id = 2;
   */
  roleId?: string;

  constructor(data?: PartialMessage<InviteTeamMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.InviteTeamMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteTeamMemberRequest {
    return new InviteTeamMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteTeamMemberRequest {
    return new InviteTeamMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteTeamMemberRequest {
    return new InviteTeamMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteTeamMemberRequest | PlainMessage<InviteTeamMemberRequest> | undefined, b: InviteTeamMemberRequest | PlainMessage<InviteTeamMemberRequest> | undefined): boolean {
    return proto3.util.equals(InviteTeamMemberRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.InviteTeamMemberResponse
 */
export class InviteTeamMemberResponse extends Message<InviteTeamMemberResponse> {
  constructor(data?: PartialMessage<InviteTeamMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.InviteTeamMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteTeamMemberResponse {
    return new InviteTeamMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteTeamMemberResponse {
    return new InviteTeamMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteTeamMemberResponse {
    return new InviteTeamMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteTeamMemberResponse | PlainMessage<InviteTeamMemberResponse> | undefined, b: InviteTeamMemberResponse | PlainMessage<InviteTeamMemberResponse> | undefined): boolean {
    return proto3.util.equals(InviteTeamMemberResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ExpireTeamInviteRequest
 */
export class ExpireTeamInviteRequest extends Message<ExpireTeamInviteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ExpireTeamInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ExpireTeamInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpireTeamInviteRequest {
    return new ExpireTeamInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpireTeamInviteRequest {
    return new ExpireTeamInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpireTeamInviteRequest {
    return new ExpireTeamInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpireTeamInviteRequest | PlainMessage<ExpireTeamInviteRequest> | undefined, b: ExpireTeamInviteRequest | PlainMessage<ExpireTeamInviteRequest> | undefined): boolean {
    return proto3.util.equals(ExpireTeamInviteRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ExpireTeamInviteResponse
 */
export class ExpireTeamInviteResponse extends Message<ExpireTeamInviteResponse> {
  constructor(data?: PartialMessage<ExpireTeamInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ExpireTeamInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpireTeamInviteResponse {
    return new ExpireTeamInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpireTeamInviteResponse {
    return new ExpireTeamInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpireTeamInviteResponse {
    return new ExpireTeamInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExpireTeamInviteResponse | PlainMessage<ExpireTeamInviteResponse> | undefined, b: ExpireTeamInviteResponse | PlainMessage<ExpireTeamInviteResponse> | undefined): boolean {
    return proto3.util.equals(ExpireTeamInviteResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TeamInvite
 */
export class TeamInvite extends Message<TeamInvite> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string team = 3;
   */
  team = "";

  /**
   * @generated from field: optional string role = 4;
   */
  role?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<TeamInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TeamInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamInvite {
    return new TeamInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamInvite {
    return new TeamInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamInvite {
    return new TeamInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TeamInvite | PlainMessage<TeamInvite> | undefined, b: TeamInvite | PlainMessage<TeamInvite> | undefined): boolean {
    return proto3.util.equals(TeamInvite, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListTeamInvitesRequest
 */
export class ListTeamInvitesRequest extends Message<ListTeamInvitesRequest> {
  constructor(data?: PartialMessage<ListTeamInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListTeamInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTeamInvitesRequest {
    return new ListTeamInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTeamInvitesRequest {
    return new ListTeamInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTeamInvitesRequest {
    return new ListTeamInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTeamInvitesRequest | PlainMessage<ListTeamInvitesRequest> | undefined, b: ListTeamInvitesRequest | PlainMessage<ListTeamInvitesRequest> | undefined): boolean {
    return proto3.util.equals(ListTeamInvitesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListTeamInvitesResponse
 */
export class ListTeamInvitesResponse extends Message<ListTeamInvitesResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.TeamInvite invites = 1;
   */
  invites: TeamInvite[] = [];

  constructor(data?: PartialMessage<ListTeamInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListTeamInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: TeamInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTeamInvitesResponse {
    return new ListTeamInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTeamInvitesResponse {
    return new ListTeamInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTeamInvitesResponse {
    return new ListTeamInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTeamInvitesResponse | PlainMessage<ListTeamInvitesResponse> | undefined, b: ListTeamInvitesResponse | PlainMessage<ListTeamInvitesResponse> | undefined): boolean {
    return proto3.util.equals(ListTeamInvitesResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ScimGroup
 */
export class ScimGroup extends Message<ScimGroup> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display = 2;
   */
  display = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: repeated string members = 4;
   */
  members: string[] = [];

  constructor(data?: PartialMessage<ScimGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScimGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScimGroup {
    return new ScimGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScimGroup {
    return new ScimGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScimGroup {
    return new ScimGroup().fromJsonString(jsonString, options);
  }

  static equals(a: ScimGroup | PlainMessage<ScimGroup> | undefined, b: ScimGroup | PlainMessage<ScimGroup> | undefined): boolean {
    return proto3.util.equals(ScimGroup, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ScimGroupRoleAssignment
 */
export class ScimGroupRoleAssignment extends Message<ScimGroupRoleAssignment> {
  /**
   * @generated from field: string group_id = 1;
   */
  groupId = "";

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  /**
   * @generated from field: repeated string query_tags = 5;
   */
  queryTags: string[] = [];

  constructor(data?: PartialMessage<ScimGroupRoleAssignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScimGroupRoleAssignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "query_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScimGroupRoleAssignment {
    return new ScimGroupRoleAssignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScimGroupRoleAssignment {
    return new ScimGroupRoleAssignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScimGroupRoleAssignment {
    return new ScimGroupRoleAssignment().fromJsonString(jsonString, options);
  }

  static equals(a: ScimGroupRoleAssignment | PlainMessage<ScimGroupRoleAssignment> | undefined, b: ScimGroupRoleAssignment | PlainMessage<ScimGroupRoleAssignment> | undefined): boolean {
    return proto3.util.equals(ScimGroupRoleAssignment, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UserRoleAssignment
 */
export class UserRoleAssignment extends Message<UserRoleAssignment> {
  /**
   * @generated from field: string role_id = 1;
   */
  roleId = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<UserRoleAssignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UserRoleAssignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRoleAssignment {
    return new UserRoleAssignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRoleAssignment {
    return new UserRoleAssignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRoleAssignment {
    return new UserRoleAssignment().fromJsonString(jsonString, options);
  }

  static equals(a: UserRoleAssignment | PlainMessage<UserRoleAssignment> | undefined, b: UserRoleAssignment | PlainMessage<UserRoleAssignment> | undefined): boolean {
    return proto3.util.equals(UserRoleAssignment, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UserPermissions
 */
export class UserPermissions extends Message<UserPermissions> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: repeated chalk.server.v1.UserRoleAssignment user_roles = 3;
   */
  userRoles: UserRoleAssignment[] = [];

  /**
   * @generated from field: repeated chalk.auth.v1.Permission user_permissions = 4;
   */
  userPermissions: Permission[] = [];

  constructor(data?: PartialMessage<UserPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UserPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_roles", kind: "message", T: UserRoleAssignment, repeated: true },
    { no: 4, name: "user_permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPermissions {
    return new UserPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPermissions {
    return new UserPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPermissions {
    return new UserPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: UserPermissions | PlainMessage<UserPermissions> | undefined, b: UserPermissions | PlainMessage<UserPermissions> | undefined): boolean {
    return proto3.util.equals(UserPermissions, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * @generated from field: optional string image = 4;
   */
  image?: string;

  /**
   * @generated from field: optional string team_id = 5;
   */
  teamId?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp deactivated_at = 6;
   */
  deactivatedAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "deactivated_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvironmentPermissions
 */
export class EnvironmentPermissions extends Message<EnvironmentPermissions> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * @generated from field: repeated chalk.server.v1.ScimGroupRoleAssignment scim_roles = 2;
   */
  scimRoles: ScimGroupRoleAssignment[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.UserPermissions user_permissions = 3;
   */
  userPermissions: UserPermissions[] = [];

  constructor(data?: PartialMessage<EnvironmentPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvironmentPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scim_roles", kind: "message", T: ScimGroupRoleAssignment, repeated: true },
    { no: 3, name: "user_permissions", kind: "message", T: UserPermissions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentPermissions | PlainMessage<EnvironmentPermissions> | undefined, b: EnvironmentPermissions | PlainMessage<EnvironmentPermissions> | undefined): boolean {
    return proto3.util.equals(EnvironmentPermissions, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTeamPermissionsRequest
 */
export class GetTeamPermissionsRequest extends Message<GetTeamPermissionsRequest> {
  constructor(data?: PartialMessage<GetTeamPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTeamPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamPermissionsRequest {
    return new GetTeamPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamPermissionsRequest {
    return new GetTeamPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamPermissionsRequest {
    return new GetTeamPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamPermissionsRequest | PlainMessage<GetTeamPermissionsRequest> | undefined, b: GetTeamPermissionsRequest | PlainMessage<GetTeamPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamPermissionsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTeamPermissionsResponse
 */
export class GetTeamPermissionsResponse extends Message<GetTeamPermissionsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.RoleDescription roles = 1;
   */
  roles: RoleDescription[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.ScimGroup scim_groups = 2;
   */
  scimGroups: ScimGroup[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.EnvironmentPermissions environment_permissions = 3;
   */
  environmentPermissions: EnvironmentPermissions[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.User team_members = 4;
   */
  teamMembers: User[] = [];

  constructor(data?: PartialMessage<GetTeamPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTeamPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: RoleDescription, repeated: true },
    { no: 2, name: "scim_groups", kind: "message", T: ScimGroup, repeated: true },
    { no: 3, name: "environment_permissions", kind: "message", T: EnvironmentPermissions, repeated: true },
    { no: 4, name: "team_members", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamPermissionsResponse {
    return new GetTeamPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamPermissionsResponse {
    return new GetTeamPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamPermissionsResponse {
    return new GetTeamPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamPermissionsResponse | PlainMessage<GetTeamPermissionsResponse> | undefined, b: GetTeamPermissionsResponse | PlainMessage<GetTeamPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamPermissionsResponse, a, b);
  }
}

