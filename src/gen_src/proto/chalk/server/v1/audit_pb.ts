// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/audit.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp, Value } from "@bufbuild/protobuf";
import { Agent } from "../../auth/v1/agent_pb";
import { Code } from "../../../google/rpc/code_pb";

/**
 * @generated from message chalk.server.v1.AuditLog
 */
export class AuditLog extends Message<AuditLog> {
  /**
   * The agent who made the request.
   *
   * @generated from field: chalk.auth.v1.Agent agent = 1;
   */
  agent?: Agent;

  /**
   * A description of the request, taken from the service endpoint
   *
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * The service endpoint that was called
   *
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * The time the request was made.
   *
   * @generated from field: google.protobuf.Timestamp at = 4;
   */
  at?: Timestamp;

  /**
   * The trace ID of the request, if available.
   *
   * @generated from field: optional uint64 trace_id = 5;
   */
  traceId?: bigint;

  /**
   * The status of the request.
   *
   * @generated from field: optional google.rpc.Code code = 6;
   */
  code?: Code;

  /**
   * The serialized request
   *
   * @generated from field: map<string, google.protobuf.Value> request = 7;
   */
  request: { [key: string]: Value } = {};

  /**
   * The serialized response
   *
   * @generated from field: map<string, google.protobuf.Value> response = 8;
   */
  response: { [key: string]: Value } = {};

  /**
   * The IP address of the client
   *
   * @generated from field: optional string ip = 9;
   */
  ip?: string;

  constructor(data?: PartialMessage<AuditLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AuditLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: Agent },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "at", kind: "message", T: Timestamp },
    { no: 5, name: "trace_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "code", kind: "enum", T: proto3.getEnumType(Code), opt: true },
    { no: 7, name: "request", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 8, name: "response", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 9, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLog {
    return new AuditLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLog | PlainMessage<AuditLog> | undefined, b: AuditLog | PlainMessage<AuditLog> | undefined): boolean {
    return proto3.util.equals(AuditLog, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAuditLogsRequest
 */
export class GetAuditLogsRequest extends Message<GetAuditLogsRequest> {
  constructor(data?: PartialMessage<GetAuditLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAuditLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditLogsRequest {
    return new GetAuditLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditLogsRequest | PlainMessage<GetAuditLogsRequest> | undefined, b: GetAuditLogsRequest | PlainMessage<GetAuditLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetAuditLogsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAuditLogsResponse
 */
export class GetAuditLogsResponse extends Message<GetAuditLogsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.AuditLog logs = 1;
   */
  logs: AuditLog[] = [];

  constructor(data?: PartialMessage<GetAuditLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAuditLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: AuditLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditLogsResponse {
    return new GetAuditLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditLogsResponse | PlainMessage<GetAuditLogsResponse> | undefined, b: GetAuditLogsResponse | PlainMessage<GetAuditLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetAuditLogsResponse, a, b);
  }
}

