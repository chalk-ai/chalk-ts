// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/pod_request.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart_pb";

/**
 * @generated from enum chalk.server.v1.PodRequestGrouping
 */
export enum PodRequestGrouping {
  /**
   * @generated from enum value: POD_REQUEST_GROUPING_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: POD_REQUEST_GROUPING_NAMESPACE = 1;
   */
  NAMESPACE = 1,

  /**
   * @generated from enum value: POD_REQUEST_GROUPING_CLUSTER = 2;
   */
  CLUSTER = 2,

  /**
   * @generated from enum value: POD_REQUEST_GROUPING_ENVIRONMENT = 3;
   */
  ENVIRONMENT = 3,

  /**
   * @generated from enum value: POD_REQUEST_GROUPING_SERVICE = 4;
   */
  SERVICE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(PodRequestGrouping)
proto3.util.setEnumType(PodRequestGrouping, "chalk.server.v1.PodRequestGrouping", [
  { no: 0, name: "POD_REQUEST_GROUPING_UNSPECIFIED" },
  { no: 1, name: "POD_REQUEST_GROUPING_NAMESPACE" },
  { no: 2, name: "POD_REQUEST_GROUPING_CLUSTER" },
  { no: 3, name: "POD_REQUEST_GROUPING_ENVIRONMENT" },
  { no: 4, name: "POD_REQUEST_GROUPING_SERVICE" },
]);

/**
 * @generated from enum chalk.server.v1.PodRequestResourceType
 */
export enum PodRequestResourceType {
  /**
   * @generated from enum value: POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: POD_REQUEST_RESOURCE_TYPE_CPU = 1;
   */
  CPU = 1,

  /**
   * @generated from enum value: POD_REQUEST_RESOURCE_TYPE_MEMORY = 2;
   */
  MEMORY = 2,

  /**
   * @generated from enum value: POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE = 3;
   */
  EPHEMERAL_STORAGE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PodRequestResourceType)
proto3.util.setEnumType(PodRequestResourceType, "chalk.server.v1.PodRequestResourceType", [
  { no: 0, name: "POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED" },
  { no: 1, name: "POD_REQUEST_RESOURCE_TYPE_CPU" },
  { no: 2, name: "POD_REQUEST_RESOURCE_TYPE_MEMORY" },
  { no: 3, name: "POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE" },
]);

/**
 * @generated from message chalk.server.v1.GetPodRequestChartsRequest
 */
export class GetPodRequestChartsRequest extends Message<GetPodRequestChartsRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_timestamp_inclusive = 1;
   */
  startTimestampInclusive?: Timestamp;

  /**
   * If not provided, will assume current time is the ending time
   *
   * @generated from field: optional google.protobuf.Timestamp end_timestamp_exclusive = 2;
   */
  endTimestampExclusive?: Timestamp;

  /**
   * The bucket width to use. Minimum 1 hour in current implementation.
   *
   * @generated from field: google.protobuf.Duration window_period = 3;
   */
  windowPeriod?: Duration;

  /**
   * If set, return one series per group member (one series per environment, for example)
   *
   * @generated from field: optional chalk.server.v1.PodRequestGrouping grouping = 4;
   */
  grouping?: PodRequestGrouping;

  /**
   * The types of resources to fetch. If empty, fetches all types of resources
   *
   * @generated from field: repeated chalk.server.v1.PodRequestResourceType resource_types = 5;
   */
  resourceTypes: PodRequestResourceType[] = [];

  constructor(data?: PartialMessage<GetPodRequestChartsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPodRequestChartsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_timestamp_inclusive", kind: "message", T: Timestamp },
    { no: 2, name: "end_timestamp_exclusive", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "window_period", kind: "message", T: Duration },
    { no: 4, name: "grouping", kind: "enum", T: proto3.getEnumType(PodRequestGrouping), opt: true },
    { no: 5, name: "resource_types", kind: "enum", T: proto3.getEnumType(PodRequestResourceType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPodRequestChartsRequest {
    return new GetPodRequestChartsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPodRequestChartsRequest {
    return new GetPodRequestChartsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPodRequestChartsRequest {
    return new GetPodRequestChartsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPodRequestChartsRequest | PlainMessage<GetPodRequestChartsRequest> | undefined, b: GetPodRequestChartsRequest | PlainMessage<GetPodRequestChartsRequest> | undefined): boolean {
    return proto3.util.equals(GetPodRequestChartsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetPodRequestChartsResponse
 */
export class GetPodRequestChartsResponse extends Message<GetPodRequestChartsResponse> {
  /**
   * Return one chart per resource type, as it does not make sense to graph different resource types on the
   * same chart (even though our graph libraries do allow this, they have different units and orders of magnitude)
   *
   * @generated from field: repeated chalk.chart.v1.DenseTimeSeriesChart charts = 1;
   */
  charts: DenseTimeSeriesChart[] = [];

  constructor(data?: PartialMessage<GetPodRequestChartsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPodRequestChartsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "charts", kind: "message", T: DenseTimeSeriesChart, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPodRequestChartsResponse {
    return new GetPodRequestChartsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPodRequestChartsResponse {
    return new GetPodRequestChartsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPodRequestChartsResponse {
    return new GetPodRequestChartsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPodRequestChartsResponse | PlainMessage<GetPodRequestChartsResponse> | undefined, b: GetPodRequestChartsResponse | PlainMessage<GetPodRequestChartsResponse> | undefined): boolean {
    return proto3.util.equals(GetPodRequestChartsResponse, a, b);
  }
}

