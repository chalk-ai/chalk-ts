// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/deploy.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { Graph } from "../../graph/v1/graph_pb";
import { ChalkError } from "../../common/v1/chalk_error_pb";
import { Export } from "../../artifacts/v1/export_pb";
import { Deployment, InstanceSizing } from "./deployment_pb";

/**
 * @generated from message chalk.server.v1.DeployBranchRequest
 */
export class DeployBranchRequest extends Message<DeployBranchRequest> {
  /**
   * @generated from field: string branch_name = 1;
   */
  branchName = "";

  /**
   * @generated from field: bool reset_branch = 2;
   */
  resetBranch = false;

  /**
   * @generated from field: bytes archive = 3;
   */
  archive = new Uint8Array(0);

  /**
   * @generated from field: bool is_hot_deploy = 4;
   */
  isHotDeploy = false;

  constructor(data?: PartialMessage<DeployBranchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeployBranchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reset_branch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "archive", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "is_hot_deploy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployBranchRequest {
    return new DeployBranchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployBranchRequest {
    return new DeployBranchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployBranchRequest {
    return new DeployBranchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployBranchRequest | PlainMessage<DeployBranchRequest> | undefined, b: DeployBranchRequest | PlainMessage<DeployBranchRequest> | undefined): boolean {
    return proto3.util.equals(DeployBranchRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeployBranchResponse
 */
export class DeployBranchResponse extends Message<DeployBranchResponse> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: optional chalk.graph.v1.Graph graph = 2 [deprecated = true];
   * @deprecated
   */
  graph?: Graph;

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError deployment_errors = 3;
   */
  deploymentErrors: ChalkError[] = [];

  /**
   * @generated from field: optional chalk.artifacts.v1.Export export = 4;
   */
  export?: Export;

  constructor(data?: PartialMessage<DeployBranchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeployBranchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph", kind: "message", T: Graph, opt: true },
    { no: 3, name: "deployment_errors", kind: "message", T: ChalkError, repeated: true },
    { no: 4, name: "export", kind: "message", T: Export, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployBranchResponse {
    return new DeployBranchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployBranchResponse {
    return new DeployBranchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployBranchResponse {
    return new DeployBranchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployBranchResponse | PlainMessage<DeployBranchResponse> | undefined, b: DeployBranchResponse | PlainMessage<DeployBranchResponse> | undefined): boolean {
    return proto3.util.equals(DeployBranchResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateBranchFromSourceDeploymentRequest
 */
export class CreateBranchFromSourceDeploymentRequest extends Message<CreateBranchFromSourceDeploymentRequest> {
  /**
   * @generated from field: string branch_name = 1;
   */
  branchName = "";

  /**
   * @generated from oneof chalk.server.v1.CreateBranchFromSourceDeploymentRequest.source
   */
  source: {
    /**
     * @generated from field: string source_branch_name = 2;
     */
    value: string;
    case: "sourceBranchName";
  } | {
    /**
     * @generated from field: string source_deployment_id = 3;
     */
    value: string;
    case: "sourceDeploymentId";
  } | {
    /**
     * @generated from field: google.protobuf.Empty current_mainline_deployment = 4;
     */
    value: Empty;
    case: "currentMainlineDeployment";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateBranchFromSourceDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateBranchFromSourceDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 3, name: "source_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 4, name: "current_mainline_deployment", kind: "message", T: Empty, oneof: "source" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBranchFromSourceDeploymentRequest {
    return new CreateBranchFromSourceDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBranchFromSourceDeploymentRequest {
    return new CreateBranchFromSourceDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBranchFromSourceDeploymentRequest {
    return new CreateBranchFromSourceDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBranchFromSourceDeploymentRequest | PlainMessage<CreateBranchFromSourceDeploymentRequest> | undefined, b: CreateBranchFromSourceDeploymentRequest | PlainMessage<CreateBranchFromSourceDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(CreateBranchFromSourceDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateBranchFromSourceDeploymentResponse
 */
export class CreateBranchFromSourceDeploymentResponse extends Message<CreateBranchFromSourceDeploymentResponse> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError deployment_errors = 2;
   */
  deploymentErrors: ChalkError[] = [];

  /**
   * @generated from field: optional chalk.artifacts.v1.Export export = 3;
   */
  export?: Export;

  /**
   * @generated from field: bool branch_already_exists = 4;
   */
  branchAlreadyExists = false;

  constructor(data?: PartialMessage<CreateBranchFromSourceDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateBranchFromSourceDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_errors", kind: "message", T: ChalkError, repeated: true },
    { no: 3, name: "export", kind: "message", T: Export, opt: true },
    { no: 4, name: "branch_already_exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBranchFromSourceDeploymentResponse {
    return new CreateBranchFromSourceDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBranchFromSourceDeploymentResponse {
    return new CreateBranchFromSourceDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBranchFromSourceDeploymentResponse {
    return new CreateBranchFromSourceDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBranchFromSourceDeploymentResponse | PlainMessage<CreateBranchFromSourceDeploymentResponse> | undefined, b: CreateBranchFromSourceDeploymentResponse | PlainMessage<CreateBranchFromSourceDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(CreateBranchFromSourceDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined, b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: chalk.server.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "message", T: Deployment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined, b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDeploymentsRequest
 */
export class ListDeploymentsRequest extends Message<ListDeploymentsRequest> {
  /**
   * @generated from field: optional string cursor = 1;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  /**
   * @generated from field: optional bool include_branch = 3;
   */
  includeBranch?: boolean;

  /**
   * @generated from field: optional string branch_name = 4;
   */
  branchName?: string;

  constructor(data?: PartialMessage<ListDeploymentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDeploymentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "include_branch", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDeploymentsRequest {
    return new ListDeploymentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDeploymentsRequest {
    return new ListDeploymentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDeploymentsRequest {
    return new ListDeploymentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDeploymentsRequest | PlainMessage<ListDeploymentsRequest> | undefined, b: ListDeploymentsRequest | PlainMessage<ListDeploymentsRequest> | undefined): boolean {
    return proto3.util.equals(ListDeploymentsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDeploymentsResponse
 */
export class ListDeploymentsResponse extends Message<ListDeploymentsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.Deployment deployments = 1;
   */
  deployments: Deployment[] = [];

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  constructor(data?: PartialMessage<ListDeploymentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDeploymentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployments", kind: "message", T: Deployment, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDeploymentsResponse {
    return new ListDeploymentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDeploymentsResponse {
    return new ListDeploymentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDeploymentsResponse {
    return new ListDeploymentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDeploymentsResponse | PlainMessage<ListDeploymentsResponse> | undefined, b: ListDeploymentsResponse | PlainMessage<ListDeploymentsResponse> | undefined): boolean {
    return proto3.util.equals(ListDeploymentsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SuspendDeploymentRequest
 */
export class SuspendDeploymentRequest extends Message<SuspendDeploymentRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<SuspendDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SuspendDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuspendDeploymentRequest {
    return new SuspendDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuspendDeploymentRequest {
    return new SuspendDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuspendDeploymentRequest {
    return new SuspendDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuspendDeploymentRequest | PlainMessage<SuspendDeploymentRequest> | undefined, b: SuspendDeploymentRequest | PlainMessage<SuspendDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(SuspendDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SuspendDeploymentResponse
 */
export class SuspendDeploymentResponse extends Message<SuspendDeploymentResponse> {
  /**
   * @generated from field: chalk.server.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  constructor(data?: PartialMessage<SuspendDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SuspendDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "message", T: Deployment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuspendDeploymentResponse {
    return new SuspendDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuspendDeploymentResponse {
    return new SuspendDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuspendDeploymentResponse {
    return new SuspendDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuspendDeploymentResponse | PlainMessage<SuspendDeploymentResponse> | undefined, b: SuspendDeploymentResponse | PlainMessage<SuspendDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(SuspendDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ScaleDeploymentRequest
 */
export class ScaleDeploymentRequest extends Message<ScaleDeploymentRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: chalk.server.v1.InstanceSizing sizing = 2;
   */
  sizing?: InstanceSizing;

  constructor(data?: PartialMessage<ScaleDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScaleDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sizing", kind: "message", T: InstanceSizing },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScaleDeploymentRequest {
    return new ScaleDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScaleDeploymentRequest {
    return new ScaleDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScaleDeploymentRequest {
    return new ScaleDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScaleDeploymentRequest | PlainMessage<ScaleDeploymentRequest> | undefined, b: ScaleDeploymentRequest | PlainMessage<ScaleDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(ScaleDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ScaleDeploymentResponse
 */
export class ScaleDeploymentResponse extends Message<ScaleDeploymentResponse> {
  /**
   * @generated from field: chalk.server.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  constructor(data?: PartialMessage<ScaleDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScaleDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "message", T: Deployment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScaleDeploymentResponse {
    return new ScaleDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScaleDeploymentResponse {
    return new ScaleDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScaleDeploymentResponse {
    return new ScaleDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ScaleDeploymentResponse | PlainMessage<ScaleDeploymentResponse> | undefined, b: ScaleDeploymentResponse | PlainMessage<ScaleDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(ScaleDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TagDeploymentRequest
 */
export class TagDeploymentRequest extends Message<TagDeploymentRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: string tag = 2;
   */
  tag = "";

  constructor(data?: PartialMessage<TagDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TagDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDeploymentRequest {
    return new TagDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDeploymentRequest {
    return new TagDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDeploymentRequest {
    return new TagDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TagDeploymentRequest | PlainMessage<TagDeploymentRequest> | undefined, b: TagDeploymentRequest | PlainMessage<TagDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(TagDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TagDeploymentResponse
 */
export class TagDeploymentResponse extends Message<TagDeploymentResponse> {
  /**
   * @generated from field: chalk.server.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  /**
   * @generated from field: optional string untagged_deployment_id = 2;
   */
  untaggedDeploymentId?: string;

  constructor(data?: PartialMessage<TagDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TagDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "message", T: Deployment },
    { no: 2, name: "untagged_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDeploymentResponse {
    return new TagDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDeploymentResponse {
    return new TagDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDeploymentResponse {
    return new TagDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TagDeploymentResponse | PlainMessage<TagDeploymentResponse> | undefined, b: TagDeploymentResponse | PlainMessage<TagDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(TagDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetActiveDeploymentsRequest
 */
export class GetActiveDeploymentsRequest extends Message<GetActiveDeploymentsRequest> {
  constructor(data?: PartialMessage<GetActiveDeploymentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetActiveDeploymentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveDeploymentsRequest {
    return new GetActiveDeploymentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveDeploymentsRequest {
    return new GetActiveDeploymentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveDeploymentsRequest {
    return new GetActiveDeploymentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActiveDeploymentsRequest | PlainMessage<GetActiveDeploymentsRequest> | undefined, b: GetActiveDeploymentsRequest | PlainMessage<GetActiveDeploymentsRequest> | undefined): boolean {
    return proto3.util.equals(GetActiveDeploymentsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetActiveDeploymentsResponse
 */
export class GetActiveDeploymentsResponse extends Message<GetActiveDeploymentsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.Deployment deployments = 1;
   */
  deployments: Deployment[] = [];

  constructor(data?: PartialMessage<GetActiveDeploymentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetActiveDeploymentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployments", kind: "message", T: Deployment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveDeploymentsResponse {
    return new GetActiveDeploymentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveDeploymentsResponse {
    return new GetActiveDeploymentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveDeploymentsResponse {
    return new GetActiveDeploymentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActiveDeploymentsResponse | PlainMessage<GetActiveDeploymentsResponse> | undefined, b: GetActiveDeploymentsResponse | PlainMessage<GetActiveDeploymentsResponse> | undefined): boolean {
    return proto3.util.equals(GetActiveDeploymentsResponse, a, b);
  }
}

