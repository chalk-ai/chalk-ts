// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/link.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.server.v1.LinkSessionStatus
 */
export enum LinkSessionStatus {
  /**
   * @generated from enum value: LINK_SESSION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LINK_SESSION_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: LINK_SESSION_STATUS_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * @generated from enum value: LINK_SESSION_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: LINK_SESSION_STATUS_NOT_FOUND = 4;
   */
  NOT_FOUND = 4,

  /**
   * @generated from enum value: LINK_SESSION_STATUS_FORBIDDEN = 5;
   */
  FORBIDDEN = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(LinkSessionStatus)
proto3.util.setEnumType(LinkSessionStatus, "chalk.server.v1.LinkSessionStatus", [
  { no: 0, name: "LINK_SESSION_STATUS_UNSPECIFIED" },
  { no: 1, name: "LINK_SESSION_STATUS_PENDING" },
  { no: 2, name: "LINK_SESSION_STATUS_SUCCESS" },
  { no: 3, name: "LINK_SESSION_STATUS_FAILED" },
  { no: 4, name: "LINK_SESSION_STATUS_NOT_FOUND" },
  { no: 5, name: "LINK_SESSION_STATUS_FORBIDDEN" },
]);

/**
 * @generated from message chalk.server.v1.LinkToken
 */
export class LinkToken extends Message<LinkToken> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret = "";

  /**
   * @generated from field: string api_server = 4;
   */
  apiServer = "";

  /**
   * @generated from field: optional string active_environment = 5;
   */
  activeEnvironment?: string;

  /**
   * @generated from field: google.protobuf.Timestamp valid_until = 6;
   */
  validUntil?: Timestamp;

  constructor(data?: PartialMessage<LinkToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.LinkToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "api_server", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "active_environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "valid_until", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkToken {
    return new LinkToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkToken {
    return new LinkToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkToken {
    return new LinkToken().fromJsonString(jsonString, options);
  }

  static equals(a: LinkToken | PlainMessage<LinkToken> | undefined, b: LinkToken | PlainMessage<LinkToken> | undefined): boolean {
    return proto3.util.equals(LinkToken, a, b);
  }
}

/**
 * GET LINK
 *
 * @generated from message chalk.server.v1.GetLinkSessionRequest
 */
export class GetLinkSessionRequest extends Message<GetLinkSessionRequest> {
  /**
   * @generated from field: string link_code = 1;
   */
  linkCode = "";

  /**
   * @generated from field: string project_name = 2;
   */
  projectName = "";

  constructor(data?: PartialMessage<GetLinkSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetLinkSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLinkSessionRequest {
    return new GetLinkSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLinkSessionRequest {
    return new GetLinkSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLinkSessionRequest {
    return new GetLinkSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLinkSessionRequest | PlainMessage<GetLinkSessionRequest> | undefined, b: GetLinkSessionRequest | PlainMessage<GetLinkSessionRequest> | undefined): boolean {
    return proto3.util.equals(GetLinkSessionRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetLinkSessionResponse
 */
export class GetLinkSessionResponse extends Message<GetLinkSessionResponse> {
  /**
   * @generated from field: chalk.server.v1.LinkSessionStatus status = 1;
   */
  status = LinkSessionStatus.UNSPECIFIED;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: optional chalk.server.v1.LinkToken token = 3;
   */
  token?: LinkToken;

  /**
   * @generated from field: string session_id = 4;
   */
  sessionId = "";

  constructor(data?: PartialMessage<GetLinkSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetLinkSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(LinkSessionStatus) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token", kind: "message", T: LinkToken, opt: true },
    { no: 4, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLinkSessionResponse {
    return new GetLinkSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLinkSessionResponse {
    return new GetLinkSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLinkSessionResponse {
    return new GetLinkSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLinkSessionResponse | PlainMessage<GetLinkSessionResponse> | undefined, b: GetLinkSessionResponse | PlainMessage<GetLinkSessionResponse> | undefined): boolean {
    return proto3.util.equals(GetLinkSessionResponse, a, b);
  }
}

/**
 * CREATE LINK
 *
 * @generated from message chalk.server.v1.CreateLinkSessionRequest
 */
export class CreateLinkSessionRequest extends Message<CreateLinkSessionRequest> {
  constructor(data?: PartialMessage<CreateLinkSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateLinkSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLinkSessionRequest {
    return new CreateLinkSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLinkSessionRequest {
    return new CreateLinkSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLinkSessionRequest {
    return new CreateLinkSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLinkSessionRequest | PlainMessage<CreateLinkSessionRequest> | undefined, b: CreateLinkSessionRequest | PlainMessage<CreateLinkSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateLinkSessionRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateLinkSessionResponse
 */
export class CreateLinkSessionResponse extends Message<CreateLinkSessionResponse> {
  /**
   * @generated from field: string link_code = 1;
   */
  linkCode = "";

  /**
   * @generated from field: string auth_link = 2;
   */
  authLink = "";

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 3;
   */
  expiresAt?: Timestamp;

  /**
   * @generated from field: string session_id = 4;
   */
  sessionId = "";

  constructor(data?: PartialMessage<CreateLinkSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateLinkSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_at", kind: "message", T: Timestamp },
    { no: 4, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLinkSessionResponse {
    return new CreateLinkSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLinkSessionResponse {
    return new CreateLinkSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLinkSessionResponse {
    return new CreateLinkSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLinkSessionResponse | PlainMessage<CreateLinkSessionResponse> | undefined, b: CreateLinkSessionResponse | PlainMessage<CreateLinkSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateLinkSessionResponse, a, b);
  }
}

