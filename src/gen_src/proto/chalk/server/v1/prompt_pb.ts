// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/prompt.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64, Timestamp, Value } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.PromptTemplate
 */
export class PromptTemplate extends Message<PromptTemplate> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<PromptTemplate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PromptTemplate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromptTemplate {
    return new PromptTemplate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromptTemplate {
    return new PromptTemplate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromptTemplate {
    return new PromptTemplate().fromJsonString(jsonString, options);
  }

  static equals(a: PromptTemplate | PlainMessage<PromptTemplate> | undefined, b: PromptTemplate | PlainMessage<PromptTemplate> | undefined): boolean {
    return proto3.util.equals(PromptTemplate, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ProviderConfig
 */
export class ProviderConfig extends Message<ProviderConfig> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * @generated from field: string model_name = 2;
   */
  modelName = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> parameters = 3;
   */
  parameters: { [key: string]: Value } = {};

  /**
   * @generated from field: optional string structured_output = 4;
   */
  structuredOutput?: string;

  constructor(data?: PartialMessage<ProviderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ProviderConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 4, name: "structured_output", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderConfig {
    return new ProviderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderConfig {
    return new ProviderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderConfig {
    return new ProviderConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderConfig | PlainMessage<ProviderConfig> | undefined, b: ProviderConfig | PlainMessage<ProviderConfig> | undefined): boolean {
    return proto3.util.equals(ProviderConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PromptVariant
 */
export class PromptVariant extends Message<PromptVariant> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string deployment_id = 3;
   */
  deploymentId = "";

  /**
   * @generated from field: optional string named_prompt_id = 4;
   */
  namedPromptId?: string;

  /**
   * @generated from field: optional string evaluation_run_id = 5;
   */
  evaluationRunId?: string;

  /**
   * @generated from field: optional string commit_hash = 6;
   */
  commitHash?: string;

  /**
   * @generated from field: repeated chalk.server.v1.PromptTemplate templates = 7;
   */
  templates: PromptTemplate[] = [];

  /**
   * @generated from field: repeated string variables = 8;
   */
  variables: string[] = [];

  /**
   * @generated from field: chalk.server.v1.ProviderConfig provider_config = 9;
   */
  providerConfig?: ProviderConfig;

  /**
   * @generated from field: optional string variant_hash = 10;
   */
  variantHash?: string;

  /**
   * @generated from field: optional string created_by = 11;
   */
  createdBy?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 12;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<PromptVariant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PromptVariant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "evaluation_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "templates", kind: "message", T: PromptTemplate, repeated: true },
    { no: 8, name: "variables", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "provider_config", kind: "message", T: ProviderConfig },
    { no: 10, name: "variant_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromptVariant {
    return new PromptVariant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromptVariant {
    return new PromptVariant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromptVariant {
    return new PromptVariant().fromJsonString(jsonString, options);
  }

  static equals(a: PromptVariant | PlainMessage<PromptVariant> | undefined, b: PromptVariant | PlainMessage<PromptVariant> | undefined): boolean {
    return proto3.util.equals(PromptVariant, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.NamedPrompt
 */
export class NamedPrompt extends Message<NamedPrompt> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string deployment_id = 3;
   */
  deploymentId = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string created_by = 7;
   */
  createdBy?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp archived_at = 10;
   */
  archivedAt?: Timestamp;

  /**
   * @generated from field: optional chalk.server.v1.PromptVariant latest_prompt_variant = 11;
   */
  latestPromptVariant?: PromptVariant;

  constructor(data?: PartialMessage<NamedPrompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.NamedPrompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp, opt: true },
    { no: 10, name: "archived_at", kind: "message", T: Timestamp, opt: true },
    { no: 11, name: "latest_prompt_variant", kind: "message", T: PromptVariant, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedPrompt {
    return new NamedPrompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedPrompt {
    return new NamedPrompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedPrompt {
    return new NamedPrompt().fromJsonString(jsonString, options);
  }

  static equals(a: NamedPrompt | PlainMessage<NamedPrompt> | undefined, b: NamedPrompt | PlainMessage<NamedPrompt> | undefined): boolean {
    return proto3.util.equals(NamedPrompt, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PromptEvaluationRun
 */
export class PromptEvaluationRun extends Message<PromptEvaluationRun> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string deployment_id = 3;
   */
  deploymentId = "";

  /**
   * @generated from field: string branch_name = 4;
   */
  branchName = "";

  /**
   * @generated from field: string dataset_id = 5;
   */
  datasetId = "";

  /**
   * @generated from field: string dataset_revision_id = 6;
   */
  datasetRevisionId = "";

  /**
   * @generated from field: optional string reference_output = 7;
   */
  referenceOutput?: string;

  /**
   * @generated from field: repeated string evaluators = 8;
   */
  evaluators: string[] = [];

  /**
   * @generated from field: repeated string offline_query_ids = 9;
   */
  offlineQueryIds: string[] = [];

  /**
   * @generated from field: repeated string related_named_prompt_ids = 10;
   */
  relatedNamedPromptIds: string[] = [];

  /**
   * @generated from field: repeated string related_evaluation_ids = 11;
   */
  relatedEvaluationIds: string[] = [];

  /**
   * @generated from field: map<string, google.protobuf.Value> aggregate_metrics = 12;
   */
  aggregateMetrics: { [key: string]: Value } = {};

  /**
   * @generated from field: map<string, google.protobuf.Value> meta_data = 13;
   */
  metaData: { [key: string]: Value } = {};

  /**
   * @generated from field: optional string created_by = 14;
   */
  createdBy?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 15;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional string dataset_name = 16;
   */
  datasetName?: string;

  /**
   * @generated from field: repeated string related_named_prompt_names = 17;
   */
  relatedNamedPromptNames: string[] = [];

  /**
   * @generated from field: repeated chalk.server.v1.PromptVariant prompt_variants = 18;
   */
  promptVariants: PromptVariant[] = [];

  constructor(data?: PartialMessage<PromptEvaluationRun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PromptEvaluationRun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "dataset_revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "reference_output", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "evaluators", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "offline_query_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "related_named_prompt_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "related_evaluation_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "aggregate_metrics", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 13, name: "meta_data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 14, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "created_at", kind: "message", T: Timestamp },
    { no: 16, name: "dataset_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "related_named_prompt_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "prompt_variants", kind: "message", T: PromptVariant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromptEvaluationRun {
    return new PromptEvaluationRun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromptEvaluationRun {
    return new PromptEvaluationRun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromptEvaluationRun {
    return new PromptEvaluationRun().fromJsonString(jsonString, options);
  }

  static equals(a: PromptEvaluationRun | PlainMessage<PromptEvaluationRun> | undefined, b: PromptEvaluationRun | PlainMessage<PromptEvaluationRun> | undefined): boolean {
    return proto3.util.equals(PromptEvaluationRun, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListNamedPromptsRequest
 */
export class ListNamedPromptsRequest extends Message<ListNamedPromptsRequest> {
  /**
   * @generated from field: optional string cursor = 1;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  constructor(data?: PartialMessage<ListNamedPromptsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListNamedPromptsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamedPromptsRequest {
    return new ListNamedPromptsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamedPromptsRequest {
    return new ListNamedPromptsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamedPromptsRequest {
    return new ListNamedPromptsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamedPromptsRequest | PlainMessage<ListNamedPromptsRequest> | undefined, b: ListNamedPromptsRequest | PlainMessage<ListNamedPromptsRequest> | undefined): boolean {
    return proto3.util.equals(ListNamedPromptsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListNamedPromptsResponse
 */
export class ListNamedPromptsResponse extends Message<ListNamedPromptsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.NamedPrompt named_prompts = 1;
   */
  namedPrompts: NamedPrompt[] = [];

  /**
   * @generated from field: optional string next_cursor = 2;
   */
  nextCursor?: string;

  constructor(data?: PartialMessage<ListNamedPromptsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListNamedPromptsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompts", kind: "message", T: NamedPrompt, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamedPromptsResponse {
    return new ListNamedPromptsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamedPromptsResponse {
    return new ListNamedPromptsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamedPromptsResponse {
    return new ListNamedPromptsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamedPromptsResponse | PlainMessage<ListNamedPromptsResponse> | undefined, b: ListNamedPromptsResponse | PlainMessage<ListNamedPromptsResponse> | undefined): boolean {
    return proto3.util.equals(ListNamedPromptsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNamedPromptRequest
 */
export class GetNamedPromptRequest extends Message<GetNamedPromptRequest> {
  /**
   * @generated from field: string named_prompt_id = 1;
   */
  namedPromptId = "";

  constructor(data?: PartialMessage<GetNamedPromptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNamedPromptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamedPromptRequest {
    return new GetNamedPromptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamedPromptRequest {
    return new GetNamedPromptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamedPromptRequest {
    return new GetNamedPromptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamedPromptRequest | PlainMessage<GetNamedPromptRequest> | undefined, b: GetNamedPromptRequest | PlainMessage<GetNamedPromptRequest> | undefined): boolean {
    return proto3.util.equals(GetNamedPromptRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNamedPromptResponse
 */
export class GetNamedPromptResponse extends Message<GetNamedPromptResponse> {
  /**
   * @generated from field: optional chalk.server.v1.NamedPrompt named_prompt = 1;
   */
  namedPrompt?: NamedPrompt;

  constructor(data?: PartialMessage<GetNamedPromptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNamedPromptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt", kind: "message", T: NamedPrompt, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamedPromptResponse {
    return new GetNamedPromptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamedPromptResponse {
    return new GetNamedPromptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamedPromptResponse {
    return new GetNamedPromptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamedPromptResponse | PlainMessage<GetNamedPromptResponse> | undefined, b: GetNamedPromptResponse | PlainMessage<GetNamedPromptResponse> | undefined): boolean {
    return proto3.util.equals(GetNamedPromptResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PromptVariantOperation
 */
export class PromptVariantOperation extends Message<PromptVariantOperation> {
  /**
   * @generated from field: repeated chalk.server.v1.PromptTemplate templates = 1;
   */
  templates: PromptTemplate[] = [];

  /**
   * @generated from field: chalk.server.v1.ProviderConfig provider_config = 2;
   */
  providerConfig?: ProviderConfig;

  constructor(data?: PartialMessage<PromptVariantOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PromptVariantOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templates", kind: "message", T: PromptTemplate, repeated: true },
    { no: 2, name: "provider_config", kind: "message", T: ProviderConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromptVariantOperation {
    return new PromptVariantOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromptVariantOperation {
    return new PromptVariantOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromptVariantOperation {
    return new PromptVariantOperation().fromJsonString(jsonString, options);
  }

  static equals(a: PromptVariantOperation | PlainMessage<PromptVariantOperation> | undefined, b: PromptVariantOperation | PlainMessage<PromptVariantOperation> | undefined): boolean {
    return proto3.util.equals(PromptVariantOperation, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateNamedPromptRequest
 */
export class CreateNamedPromptRequest extends Message<CreateNamedPromptRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated string tags = 3;
   */
  tags: string[] = [];

  /**
   * @generated from field: chalk.server.v1.PromptVariantOperation prompt_variant = 4;
   */
  promptVariant?: PromptVariantOperation;

  constructor(data?: PartialMessage<CreateNamedPromptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateNamedPromptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "prompt_variant", kind: "message", T: PromptVariantOperation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamedPromptRequest {
    return new CreateNamedPromptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamedPromptRequest {
    return new CreateNamedPromptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamedPromptRequest {
    return new CreateNamedPromptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamedPromptRequest | PlainMessage<CreateNamedPromptRequest> | undefined, b: CreateNamedPromptRequest | PlainMessage<CreateNamedPromptRequest> | undefined): boolean {
    return proto3.util.equals(CreateNamedPromptRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateNamedPromptResponse
 */
export class CreateNamedPromptResponse extends Message<CreateNamedPromptResponse> {
  /**
   * @generated from field: chalk.server.v1.NamedPrompt named_prompt = 1;
   */
  namedPrompt?: NamedPrompt;

  constructor(data?: PartialMessage<CreateNamedPromptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateNamedPromptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt", kind: "message", T: NamedPrompt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamedPromptResponse {
    return new CreateNamedPromptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamedPromptResponse {
    return new CreateNamedPromptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamedPromptResponse {
    return new CreateNamedPromptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamedPromptResponse | PlainMessage<CreateNamedPromptResponse> | undefined, b: CreateNamedPromptResponse | PlainMessage<CreateNamedPromptResponse> | undefined): boolean {
    return proto3.util.equals(CreateNamedPromptResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateNamedPromptOperation
 */
export class UpdateNamedPromptOperation extends Message<UpdateNamedPromptOperation> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated string tags = 3;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional chalk.server.v1.PromptVariantOperation prompt_variant = 4;
   */
  promptVariant?: PromptVariantOperation;

  /**
   * @generated from field: optional google.protobuf.Timestamp archived_at = 5;
   */
  archivedAt?: Timestamp;

  constructor(data?: PartialMessage<UpdateNamedPromptOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateNamedPromptOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "prompt_variant", kind: "message", T: PromptVariantOperation, opt: true },
    { no: 5, name: "archived_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNamedPromptOperation {
    return new UpdateNamedPromptOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNamedPromptOperation {
    return new UpdateNamedPromptOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNamedPromptOperation {
    return new UpdateNamedPromptOperation().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNamedPromptOperation | PlainMessage<UpdateNamedPromptOperation> | undefined, b: UpdateNamedPromptOperation | PlainMessage<UpdateNamedPromptOperation> | undefined): boolean {
    return proto3.util.equals(UpdateNamedPromptOperation, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateNamedPromptRequest
 */
export class UpdateNamedPromptRequest extends Message<UpdateNamedPromptRequest> {
  /**
   * @generated from field: string named_prompt_id = 1;
   */
  namedPromptId = "";

  /**
   * @generated from field: chalk.server.v1.UpdateNamedPromptOperation update = 2;
   */
  update?: UpdateNamedPromptOperation;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateNamedPromptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateNamedPromptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "update", kind: "message", T: UpdateNamedPromptOperation },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNamedPromptRequest {
    return new UpdateNamedPromptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNamedPromptRequest {
    return new UpdateNamedPromptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNamedPromptRequest {
    return new UpdateNamedPromptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNamedPromptRequest | PlainMessage<UpdateNamedPromptRequest> | undefined, b: UpdateNamedPromptRequest | PlainMessage<UpdateNamedPromptRequest> | undefined): boolean {
    return proto3.util.equals(UpdateNamedPromptRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateNamedPromptResponse
 */
export class UpdateNamedPromptResponse extends Message<UpdateNamedPromptResponse> {
  /**
   * @generated from field: chalk.server.v1.NamedPrompt named_prompt = 1;
   */
  namedPrompt?: NamedPrompt;

  constructor(data?: PartialMessage<UpdateNamedPromptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateNamedPromptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt", kind: "message", T: NamedPrompt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNamedPromptResponse {
    return new UpdateNamedPromptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNamedPromptResponse {
    return new UpdateNamedPromptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNamedPromptResponse {
    return new UpdateNamedPromptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNamedPromptResponse | PlainMessage<UpdateNamedPromptResponse> | undefined, b: UpdateNamedPromptResponse | PlainMessage<UpdateNamedPromptResponse> | undefined): boolean {
    return proto3.util.equals(UpdateNamedPromptResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListPromptVariantsRequest
 */
export class ListPromptVariantsRequest extends Message<ListPromptVariantsRequest> {
  /**
   * @generated from field: optional string named_prompt_id = 1;
   */
  namedPromptId?: string;

  /**
   * @generated from field: optional string evaluation_run_id = 2;
   */
  evaluationRunId?: string;

  /**
   * @generated from field: optional string cursor = 3;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 4;
   */
  limit?: number;

  constructor(data?: PartialMessage<ListPromptVariantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListPromptVariantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "evaluation_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPromptVariantsRequest {
    return new ListPromptVariantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPromptVariantsRequest {
    return new ListPromptVariantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPromptVariantsRequest {
    return new ListPromptVariantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPromptVariantsRequest | PlainMessage<ListPromptVariantsRequest> | undefined, b: ListPromptVariantsRequest | PlainMessage<ListPromptVariantsRequest> | undefined): boolean {
    return proto3.util.equals(ListPromptVariantsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListPromptVariantsResponse
 */
export class ListPromptVariantsResponse extends Message<ListPromptVariantsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.PromptVariant prompt_variants = 1;
   */
  promptVariants: PromptVariant[] = [];

  /**
   * @generated from field: optional string next_cursor = 2;
   */
  nextCursor?: string;

  constructor(data?: PartialMessage<ListPromptVariantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListPromptVariantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt_variants", kind: "message", T: PromptVariant, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPromptVariantsResponse {
    return new ListPromptVariantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPromptVariantsResponse {
    return new ListPromptVariantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPromptVariantsResponse {
    return new ListPromptVariantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPromptVariantsResponse | PlainMessage<ListPromptVariantsResponse> | undefined, b: ListPromptVariantsResponse | PlainMessage<ListPromptVariantsResponse> | undefined): boolean {
    return proto3.util.equals(ListPromptVariantsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListPromptEvaluationRunsRequest
 */
export class ListPromptEvaluationRunsRequest extends Message<ListPromptEvaluationRunsRequest> {
  /**
   * @generated from field: optional string cursor = 1;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  /**
   * @generated from field: optional string named_prompt_id = 3;
   */
  namedPromptId?: string;

  constructor(data?: PartialMessage<ListPromptEvaluationRunsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListPromptEvaluationRunsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPromptEvaluationRunsRequest {
    return new ListPromptEvaluationRunsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPromptEvaluationRunsRequest {
    return new ListPromptEvaluationRunsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPromptEvaluationRunsRequest {
    return new ListPromptEvaluationRunsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPromptEvaluationRunsRequest | PlainMessage<ListPromptEvaluationRunsRequest> | undefined, b: ListPromptEvaluationRunsRequest | PlainMessage<ListPromptEvaluationRunsRequest> | undefined): boolean {
    return proto3.util.equals(ListPromptEvaluationRunsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListPromptEvaluationRunsResponse
 */
export class ListPromptEvaluationRunsResponse extends Message<ListPromptEvaluationRunsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.PromptEvaluationRun evaluation_runs = 1;
   */
  evaluationRuns: PromptEvaluationRun[] = [];

  /**
   * @generated from field: optional string next_cursor = 2;
   */
  nextCursor?: string;

  constructor(data?: PartialMessage<ListPromptEvaluationRunsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListPromptEvaluationRunsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evaluation_runs", kind: "message", T: PromptEvaluationRun, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPromptEvaluationRunsResponse {
    return new ListPromptEvaluationRunsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPromptEvaluationRunsResponse {
    return new ListPromptEvaluationRunsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPromptEvaluationRunsResponse {
    return new ListPromptEvaluationRunsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPromptEvaluationRunsResponse | PlainMessage<ListPromptEvaluationRunsResponse> | undefined, b: ListPromptEvaluationRunsResponse | PlainMessage<ListPromptEvaluationRunsResponse> | undefined): boolean {
    return proto3.util.equals(ListPromptEvaluationRunsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetPromptEvaluationRunRequest
 */
export class GetPromptEvaluationRunRequest extends Message<GetPromptEvaluationRunRequest> {
  /**
   * @generated from oneof chalk.server.v1.GetPromptEvaluationRunRequest.query
   */
  query: {
    /**
     * @generated from field: string evaluation_run_id = 1;
     */
    value: string;
    case: "evaluationRunId";
  } | {
    /**
     * @generated from field: chalk.server.v1.GetPromptEvaluationRunRequest.PrefillOptions prefill_options = 2;
     */
    value: GetPromptEvaluationRunRequest_PrefillOptions;
    case: "prefillOptions";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetPromptEvaluationRunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPromptEvaluationRunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evaluation_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query" },
    { no: 2, name: "prefill_options", kind: "message", T: GetPromptEvaluationRunRequest_PrefillOptions, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptEvaluationRunRequest {
    return new GetPromptEvaluationRunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunRequest {
    return new GetPromptEvaluationRunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunRequest {
    return new GetPromptEvaluationRunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPromptEvaluationRunRequest | PlainMessage<GetPromptEvaluationRunRequest> | undefined, b: GetPromptEvaluationRunRequest | PlainMessage<GetPromptEvaluationRunRequest> | undefined): boolean {
    return proto3.util.equals(GetPromptEvaluationRunRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetPromptEvaluationRunRequest.PrefillOptions
 */
export class GetPromptEvaluationRunRequest_PrefillOptions extends Message<GetPromptEvaluationRunRequest_PrefillOptions> {
  /**
   * @generated from field: optional string named_prompt_id = 1;
   */
  namedPromptId?: string;

  /**
   * @generated from field: optional string evaluation_run_id = 2;
   */
  evaluationRunId?: string;

  constructor(data?: PartialMessage<GetPromptEvaluationRunRequest_PrefillOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPromptEvaluationRunRequest.PrefillOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_prompt_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "evaluation_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptEvaluationRunRequest_PrefillOptions {
    return new GetPromptEvaluationRunRequest_PrefillOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunRequest_PrefillOptions {
    return new GetPromptEvaluationRunRequest_PrefillOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunRequest_PrefillOptions {
    return new GetPromptEvaluationRunRequest_PrefillOptions().fromJsonString(jsonString, options);
  }

  static equals(a: GetPromptEvaluationRunRequest_PrefillOptions | PlainMessage<GetPromptEvaluationRunRequest_PrefillOptions> | undefined, b: GetPromptEvaluationRunRequest_PrefillOptions | PlainMessage<GetPromptEvaluationRunRequest_PrefillOptions> | undefined): boolean {
    return proto3.util.equals(GetPromptEvaluationRunRequest_PrefillOptions, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetPromptEvaluationRunResponse
 */
export class GetPromptEvaluationRunResponse extends Message<GetPromptEvaluationRunResponse> {
  /**
   * @generated from field: optional chalk.server.v1.PromptEvaluationRun evaluation_run = 1;
   */
  evaluationRun?: PromptEvaluationRun;

  constructor(data?: PartialMessage<GetPromptEvaluationRunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPromptEvaluationRunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evaluation_run", kind: "message", T: PromptEvaluationRun, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptEvaluationRunResponse {
    return new GetPromptEvaluationRunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunResponse {
    return new GetPromptEvaluationRunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptEvaluationRunResponse {
    return new GetPromptEvaluationRunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPromptEvaluationRunResponse | PlainMessage<GetPromptEvaluationRunResponse> | undefined, b: GetPromptEvaluationRunResponse | PlainMessage<GetPromptEvaluationRunResponse> | undefined): boolean {
    return proto3.util.equals(GetPromptEvaluationRunResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreatePromptEvaluationRunRequest
 */
export class CreatePromptEvaluationRunRequest extends Message<CreatePromptEvaluationRunRequest> {
  /**
   * @generated from field: string branch_name = 1;
   */
  branchName = "";

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * @generated from field: string dataset_revision_id = 3;
   */
  datasetRevisionId = "";

  /**
   * @generated from field: optional string reference_output = 4;
   */
  referenceOutput?: string;

  /**
   * @generated from field: repeated string evaluators = 5;
   */
  evaluators: string[] = [];

  /**
   * @generated from field: repeated string related_named_prompt_ids = 6;
   */
  relatedNamedPromptIds: string[] = [];

  /**
   * @generated from field: repeated string related_evaluation_ids = 7;
   */
  relatedEvaluationIds: string[] = [];

  /**
   * @generated from field: map<string, google.protobuf.Value> meta_data = 8;
   */
  metaData: { [key: string]: Value } = {};

  /**
   * @generated from field: repeated chalk.server.v1.PromptVariantOperation prompt_variants = 9;
   */
  promptVariants: PromptVariantOperation[] = [];

  constructor(data?: PartialMessage<CreatePromptEvaluationRunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreatePromptEvaluationRunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reference_output", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "evaluators", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "related_named_prompt_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "related_evaluation_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "meta_data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 9, name: "prompt_variants", kind: "message", T: PromptVariantOperation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePromptEvaluationRunRequest {
    return new CreatePromptEvaluationRunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePromptEvaluationRunRequest {
    return new CreatePromptEvaluationRunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePromptEvaluationRunRequest {
    return new CreatePromptEvaluationRunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePromptEvaluationRunRequest | PlainMessage<CreatePromptEvaluationRunRequest> | undefined, b: CreatePromptEvaluationRunRequest | PlainMessage<CreatePromptEvaluationRunRequest> | undefined): boolean {
    return proto3.util.equals(CreatePromptEvaluationRunRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreatePromptEvaluationRunResponse
 */
export class CreatePromptEvaluationRunResponse extends Message<CreatePromptEvaluationRunResponse> {
  /**
   * @generated from field: chalk.server.v1.PromptEvaluationRun evaluation_run = 1;
   */
  evaluationRun?: PromptEvaluationRun;

  constructor(data?: PartialMessage<CreatePromptEvaluationRunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreatePromptEvaluationRunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evaluation_run", kind: "message", T: PromptEvaluationRun },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePromptEvaluationRunResponse {
    return new CreatePromptEvaluationRunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePromptEvaluationRunResponse {
    return new CreatePromptEvaluationRunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePromptEvaluationRunResponse {
    return new CreatePromptEvaluationRunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePromptEvaluationRunResponse | PlainMessage<CreatePromptEvaluationRunResponse> | undefined, b: CreatePromptEvaluationRunResponse | PlainMessage<CreatePromptEvaluationRunResponse> | undefined): boolean {
    return proto3.util.equals(CreatePromptEvaluationRunResponse, a, b);
  }
}

