// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/kube.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChalkKubernetesEvent } from "../../kubernetes/v1/events_pb";
import { ChalkKubernetesPersistentVolume } from "../../kubernetes/v1/persistentvolume_pb";

/**
 * @generated from message chalk.server.v1.GetPodStackTraceDumpRequest
 */
export class GetPodStackTraceDumpRequest extends Message<GetPodStackTraceDumpRequest> {
  /**
   * If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
   *
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: string pod_name = 2;
   */
  podName = "";

  /**
   * Optional specification of the container to use
   * Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
   *
   * @generated from field: optional string container_name = 3;
   */
  containerName?: string;

  /**
   * Different ways to identify the process, either by ID or by process name if ID is not convenient
   *
   * @generated from oneof chalk.server.v1.GetPodStackTraceDumpRequest.process_filter
   */
  processFilter: {
    /**
     * @generated from field: int32 process_id = 4;
     */
    value: number;
    case: "processId";
  } | {
    /**
     * @generated from field: string process_name = 5;
     */
    value: string;
    case: "processName";
  } | {
    /**
     * Infers the process id/name based on the pod/container/other contextual information
     *
     * @generated from field: bool auto_detect_process = 6;
     */
    value: boolean;
    case: "autoDetectProcess";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetPodStackTraceDumpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPodStackTraceDumpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pod_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "process_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "process_filter" },
    { no: 5, name: "process_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "process_filter" },
    { no: 6, name: "auto_detect_process", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "process_filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPodStackTraceDumpRequest {
    return new GetPodStackTraceDumpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPodStackTraceDumpRequest {
    return new GetPodStackTraceDumpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPodStackTraceDumpRequest {
    return new GetPodStackTraceDumpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPodStackTraceDumpRequest | PlainMessage<GetPodStackTraceDumpRequest> | undefined, b: GetPodStackTraceDumpRequest | PlainMessage<GetPodStackTraceDumpRequest> | undefined): boolean {
    return proto3.util.equals(GetPodStackTraceDumpRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetPodStackTraceDumpResponse
 */
export class GetPodStackTraceDumpResponse extends Message<GetPodStackTraceDumpResponse> {
  /**
   * @generated from field: string stack_trace = 1;
   */
  stackTrace = "";

  constructor(data?: PartialMessage<GetPodStackTraceDumpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetPodStackTraceDumpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stack_trace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPodStackTraceDumpResponse {
    return new GetPodStackTraceDumpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPodStackTraceDumpResponse {
    return new GetPodStackTraceDumpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPodStackTraceDumpResponse {
    return new GetPodStackTraceDumpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPodStackTraceDumpResponse | PlainMessage<GetPodStackTraceDumpResponse> | undefined, b: GetPodStackTraceDumpResponse | PlainMessage<GetPodStackTraceDumpResponse> | undefined): boolean {
    return proto3.util.equals(GetPodStackTraceDumpResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKubernetesEventsRequest
 */
export class GetKubernetesEventsRequest extends Message<GetKubernetesEventsRequest> {
  /**
   * defaults to the environment's kube cluster name
   *
   * @generated from field: optional string cluster_name = 1;
   */
  clusterName?: string;

  /**
   * defaults to the environment's kube namespace
   *
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  /**
   * @generated from field: optional string label_selector = 3;
   */
  labelSelector?: string;

  /**
   * @generated from field: optional string field_selector = 4;
   */
  fieldSelector?: string;

  constructor(data?: PartialMessage<GetKubernetesEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKubernetesEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "field_selector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKubernetesEventsRequest {
    return new GetKubernetesEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKubernetesEventsRequest {
    return new GetKubernetesEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKubernetesEventsRequest {
    return new GetKubernetesEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKubernetesEventsRequest | PlainMessage<GetKubernetesEventsRequest> | undefined, b: GetKubernetesEventsRequest | PlainMessage<GetKubernetesEventsRequest> | undefined): boolean {
    return proto3.util.equals(GetKubernetesEventsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKubernetesEventsResponse
 */
export class GetKubernetesEventsResponse extends Message<GetKubernetesEventsResponse> {
  /**
   * @generated from field: repeated chalk.kubernetes.v1.ChalkKubernetesEvent events = 1;
   */
  events: ChalkKubernetesEvent[] = [];

  constructor(data?: PartialMessage<GetKubernetesEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKubernetesEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: ChalkKubernetesEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKubernetesEventsResponse {
    return new GetKubernetesEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKubernetesEventsResponse {
    return new GetKubernetesEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKubernetesEventsResponse {
    return new GetKubernetesEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKubernetesEventsResponse | PlainMessage<GetKubernetesEventsResponse> | undefined, b: GetKubernetesEventsResponse | PlainMessage<GetKubernetesEventsResponse> | undefined): boolean {
    return proto3.util.equals(GetKubernetesEventsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKubernetesPersistentVolumesRequest
 */
export class GetKubernetesPersistentVolumesRequest extends Message<GetKubernetesPersistentVolumesRequest> {
  constructor(data?: PartialMessage<GetKubernetesPersistentVolumesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKubernetesPersistentVolumesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKubernetesPersistentVolumesRequest {
    return new GetKubernetesPersistentVolumesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKubernetesPersistentVolumesRequest {
    return new GetKubernetesPersistentVolumesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKubernetesPersistentVolumesRequest {
    return new GetKubernetesPersistentVolumesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKubernetesPersistentVolumesRequest | PlainMessage<GetKubernetesPersistentVolumesRequest> | undefined, b: GetKubernetesPersistentVolumesRequest | PlainMessage<GetKubernetesPersistentVolumesRequest> | undefined): boolean {
    return proto3.util.equals(GetKubernetesPersistentVolumesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKubernetesPersistentVolumesResponse
 */
export class GetKubernetesPersistentVolumesResponse extends Message<GetKubernetesPersistentVolumesResponse> {
  /**
   * @generated from field: repeated chalk.kubernetes.v1.ChalkKubernetesPersistentVolume volumes = 1;
   */
  volumes: ChalkKubernetesPersistentVolume[] = [];

  constructor(data?: PartialMessage<GetKubernetesPersistentVolumesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKubernetesPersistentVolumesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "volumes", kind: "message", T: ChalkKubernetesPersistentVolume, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKubernetesPersistentVolumesResponse {
    return new GetKubernetesPersistentVolumesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKubernetesPersistentVolumesResponse {
    return new GetKubernetesPersistentVolumesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKubernetesPersistentVolumesResponse {
    return new GetKubernetesPersistentVolumesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKubernetesPersistentVolumesResponse | PlainMessage<GetKubernetesPersistentVolumesResponse> | undefined, b: GetKubernetesPersistentVolumesResponse | PlainMessage<GetKubernetesPersistentVolumesResponse> | undefined): boolean {
    return proto3.util.equals(GetKubernetesPersistentVolumesResponse, a, b);
  }
}

