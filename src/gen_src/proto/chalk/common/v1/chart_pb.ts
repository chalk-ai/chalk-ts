// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/chart.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.common.v1.Series
 * @deprecated
 */
export class Series extends Message<Series> {
  /**
   * @generated from field: repeated double points = 1;
   */
  points: number[] = [];

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string units = 3;
   */
  units = "";

  constructor(data?: PartialMessage<Series>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.Series";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "units", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Series {
    return new Series().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJsonString(jsonString, options);
  }

  static equals(a: Series | PlainMessage<Series> | undefined, b: Series | PlainMessage<Series> | undefined): boolean {
    return proto3.util.equals(Series, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.Chart
 * @deprecated
 */
export class Chart extends Message<Chart> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated chalk.common.v1.Series series = 2;
   */
  series: Series[] = [];

  /**
   * @generated from field: repeated int64 x_timestamp_ms = 4;
   */
  xTimestampMs: bigint[] = [];

  constructor(data?: PartialMessage<Chart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.Chart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: Series, repeated: true },
    { no: 4, name: "x_timestamp_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chart {
    return new Chart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJsonString(jsonString, options);
  }

  static equals(a: Chart | PlainMessage<Chart> | undefined, b: Chart | PlainMessage<Chart> | undefined): boolean {
    return proto3.util.equals(Chart, a, b);
  }
}

