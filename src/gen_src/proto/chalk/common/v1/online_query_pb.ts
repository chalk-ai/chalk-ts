// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/online_query.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp, Value } from "@bufbuild/protobuf";
import { LogicalExprNode } from "../../expression/v1/expression_pb";
import { ChalkError } from "./chalk_error_pb";

/**
 * @generated from enum chalk.common.v1.FeatherBodyType
 */
export enum FeatherBodyType {
  /**
   * @generated from enum value: FEATHER_BODY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATHER_BODY_TYPE_TABLE = 1;
   */
  TABLE = 1,

  /**
   * @generated from enum value: FEATHER_BODY_TYPE_RECORD_BATCHES = 2;
   */
  RECORD_BATCHES = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatherBodyType)
proto3.util.setEnumType(FeatherBodyType, "chalk.common.v1.FeatherBodyType", [
  { no: 0, name: "FEATHER_BODY_TYPE_UNSPECIFIED" },
  { no: 1, name: "FEATHER_BODY_TYPE_TABLE" },
  { no: 2, name: "FEATHER_BODY_TYPE_RECORD_BATCHES" },
]);

/**
 * @generated from message chalk.common.v1.OnlineQueryRequest
 */
export class OnlineQueryRequest extends Message<OnlineQueryRequest> {
  /**
   * @generated from field: map<string, google.protobuf.Value> inputs = 1;
   */
  inputs: { [key: string]: Value } = {};

  /**
   * @generated from field: repeated chalk.common.v1.OutputExpr outputs = 2;
   */
  outputs: OutputExpr[] = [];

  /**
   * @generated from field: optional google.protobuf.Timestamp now = 3;
   */
  now?: Timestamp;

  /**
   * @generated from field: map<string, string> staleness = 4;
   */
  staleness: { [key: string]: string } = {};

  /**
   * @generated from field: chalk.common.v1.OnlineQueryContext context = 5;
   */
  context?: OnlineQueryContext;

  /**
   * @generated from field: chalk.common.v1.OnlineQueryResponseOptions response_options = 6;
   */
  responseOptions?: OnlineQueryResponseOptions;

  constructor(data?: PartialMessage<OnlineQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "outputs", kind: "message", T: OutputExpr, repeated: true },
    { no: 3, name: "now", kind: "message", T: Timestamp, opt: true },
    { no: 4, name: "staleness", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "context", kind: "message", T: OnlineQueryContext },
    { no: 6, name: "response_options", kind: "message", T: OnlineQueryResponseOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryRequest {
    return new OnlineQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryRequest {
    return new OnlineQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryRequest {
    return new OnlineQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryRequest | PlainMessage<OnlineQueryRequest> | undefined, b: OnlineQueryRequest | PlainMessage<OnlineQueryRequest> | undefined): boolean {
    return proto3.util.equals(OnlineQueryRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryBulkRequest
 */
export class OnlineQueryBulkRequest extends Message<OnlineQueryBulkRequest> {
  /**
   * @generated from field: bytes inputs_feather = 1;
   */
  inputsFeather = new Uint8Array(0);

  /**
   * @generated from field: repeated chalk.common.v1.OutputExpr outputs = 2;
   */
  outputs: OutputExpr[] = [];

  /**
   * @generated from field: repeated google.protobuf.Timestamp now = 3;
   */
  now: Timestamp[] = [];

  /**
   * @generated from field: map<string, string> staleness = 4;
   */
  staleness: { [key: string]: string } = {};

  /**
   * @generated from field: chalk.common.v1.OnlineQueryContext context = 5;
   */
  context?: OnlineQueryContext;

  /**
   * @generated from field: chalk.common.v1.OnlineQueryResponseOptions response_options = 6;
   */
  responseOptions?: OnlineQueryResponseOptions;

  /**
   * @generated from field: chalk.common.v1.FeatherBodyType body_type = 7;
   */
  bodyType = FeatherBodyType.UNSPECIFIED;

  constructor(data?: PartialMessage<OnlineQueryBulkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryBulkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs_feather", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "outputs", kind: "message", T: OutputExpr, repeated: true },
    { no: 3, name: "now", kind: "message", T: Timestamp, repeated: true },
    { no: 4, name: "staleness", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "context", kind: "message", T: OnlineQueryContext },
    { no: 6, name: "response_options", kind: "message", T: OnlineQueryResponseOptions },
    { no: 7, name: "body_type", kind: "enum", T: proto3.getEnumType(FeatherBodyType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryBulkRequest {
    return new OnlineQueryBulkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryBulkRequest {
    return new OnlineQueryBulkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryBulkRequest {
    return new OnlineQueryBulkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryBulkRequest | PlainMessage<OnlineQueryBulkRequest> | undefined, b: OnlineQueryBulkRequest | PlainMessage<OnlineQueryBulkRequest> | undefined): boolean {
    return proto3.util.equals(OnlineQueryBulkRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GenericSingleQuery
 */
export class GenericSingleQuery extends Message<GenericSingleQuery> {
  /**
   * @generated from oneof chalk.common.v1.GenericSingleQuery.query
   */
  query: {
    /**
     * @generated from field: chalk.common.v1.OnlineQueryRequest single_request = 1;
     */
    value: OnlineQueryRequest;
    case: "singleRequest";
  } | {
    /**
     * @generated from field: chalk.common.v1.OnlineQueryBulkRequest bulk_request = 2;
     */
    value: OnlineQueryBulkRequest;
    case: "bulkRequest";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GenericSingleQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GenericSingleQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "single_request", kind: "message", T: OnlineQueryRequest, oneof: "query" },
    { no: 2, name: "bulk_request", kind: "message", T: OnlineQueryBulkRequest, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericSingleQuery {
    return new GenericSingleQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericSingleQuery {
    return new GenericSingleQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericSingleQuery {
    return new GenericSingleQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GenericSingleQuery | PlainMessage<GenericSingleQuery> | undefined, b: GenericSingleQuery | PlainMessage<GenericSingleQuery> | undefined): boolean {
    return proto3.util.equals(GenericSingleQuery, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryMultiRequest
 */
export class OnlineQueryMultiRequest extends Message<OnlineQueryMultiRequest> {
  /**
   * @generated from field: repeated chalk.common.v1.GenericSingleQuery queries = 1;
   */
  queries: GenericSingleQuery[] = [];

  constructor(data?: PartialMessage<OnlineQueryMultiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryMultiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: GenericSingleQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryMultiRequest {
    return new OnlineQueryMultiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryMultiRequest {
    return new OnlineQueryMultiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryMultiRequest {
    return new OnlineQueryMultiRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryMultiRequest | PlainMessage<OnlineQueryMultiRequest> | undefined, b: OnlineQueryMultiRequest | PlainMessage<OnlineQueryMultiRequest> | undefined): boolean {
    return proto3.util.equals(OnlineQueryMultiRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.FeatureExpression
 */
export class FeatureExpression extends Message<FeatureExpression> {
  /**
   * @generated from field: string output_column_name = 1;
   */
  outputColumnName = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * @generated from field: chalk.expression.v1.LogicalExprNode expr = 2;
   */
  expr?: LogicalExprNode;

  constructor(data?: PartialMessage<FeatureExpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.FeatureExpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expr", kind: "message", T: LogicalExprNode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureExpression {
    return new FeatureExpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureExpression {
    return new FeatureExpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureExpression {
    return new FeatureExpression().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureExpression | PlainMessage<FeatureExpression> | undefined, b: FeatureExpression | PlainMessage<FeatureExpression> | undefined): boolean {
    return proto3.util.equals(FeatureExpression, a, b);
  }
}

/**
 * Represent an online query output. Currently these are just single feature FQNs.
 * In the future these could be expressions like `User.card.transactions[_.amount < 100]`
 *
 * @generated from message chalk.common.v1.OutputExpr
 */
export class OutputExpr extends Message<OutputExpr> {
  /**
   * @generated from oneof chalk.common.v1.OutputExpr.expr
   */
  expr: {
    /**
     * @generated from field: string feature_fqn = 1;
     */
    value: string;
    case: "featureFqn";
  } | {
    /**
     * @generated from field: chalk.common.v1.FeatureExpression feature_expression = 2;
     */
    value: FeatureExpression;
    case: "featureExpression";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OutputExpr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OutputExpr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "expr" },
    { no: 2, name: "feature_expression", kind: "message", T: FeatureExpression, oneof: "expr" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputExpr {
    return new OutputExpr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputExpr {
    return new OutputExpr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputExpr {
    return new OutputExpr().fromJsonString(jsonString, options);
  }

  static equals(a: OutputExpr | PlainMessage<OutputExpr> | undefined, b: OutputExpr | PlainMessage<OutputExpr> | undefined): boolean {
    return proto3.util.equals(OutputExpr, a, b);
  }
}

/**
 * Roughly speaking data in here should affect the query hash key / the query plan
 *
 * @generated from message chalk.common.v1.OnlineQueryContext
 */
export class OnlineQueryContext extends Message<OnlineQueryContext> {
  /**
   * environment id is set in the header. This field is not set anymore
   *
   * @generated from field: string environment = 1 [deprecated = true];
   * @deprecated
   */
  environment = "";

  /**
   * @generated from field: repeated string tags = 2;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated string required_resolver_tags = 3;
   */
  requiredResolverTags: string[] = [];

  /**
   * deployment id is set in the header. This field is not set anymore
   *
   * @generated from field: optional string deployment_id = 4 [deprecated = true];
   * @deprecated
   */
  deploymentId?: string;

  /**
   * branch_id is set in the header. This field is not set anymore
   *
   * @generated from field: optional string branch_id = 5 [deprecated = true];
   * @deprecated
   */
  branchId?: string;

  /**
   * @generated from field: optional string correlation_id = 6;
   */
  correlationId?: string;

  /**
   * @generated from field: optional string query_name = 7;
   */
  queryName?: string;

  /**
   * @generated from field: optional string query_name_version = 8;
   */
  queryNameVersion?: string;

  /**
   * Arbitrary flags for the query such as store_plan_stages
   * If a flag because consistently used it should be moved into an actual field.
   *
   * @generated from field: map<string, google.protobuf.Value> options = 9;
   */
  options: { [key: string]: Value } = {};

  /**
   * Value metrics will be tagged by the output of the given features
   *
   * @generated from field: repeated chalk.common.v1.OutputExpr value_metrics_tag_by_features = 10;
   */
  valueMetricsTagByFeatures: OutputExpr[] = [];

  /**
   * Query context is a dictionary of JSON-serializable values that can be used in resolvers
   *
   * @generated from field: map<string, google.protobuf.Value> query_context = 11;
   */
  queryContext: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<OnlineQueryContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "required_resolver_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "branch_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "correlation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "query_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "query_name_version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "options", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 10, name: "value_metrics_tag_by_features", kind: "message", T: OutputExpr, repeated: true },
    { no: 11, name: "query_context", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryContext {
    return new OnlineQueryContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryContext {
    return new OnlineQueryContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryContext {
    return new OnlineQueryContext().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryContext | PlainMessage<OnlineQueryContext> | undefined, b: OnlineQueryContext | PlainMessage<OnlineQueryContext> | undefined): boolean {
    return proto3.util.equals(OnlineQueryContext, a, b);
  }
}

/**
 * Options re: how we construct the response, shouldn't affect the query hash
 *
 * @generated from message chalk.common.v1.OnlineQueryResponseOptions
 */
export class OnlineQueryResponseOptions extends Message<OnlineQueryResponseOptions> {
  /**
   * @generated from field: bool include_meta = 1;
   */
  includeMeta = false;

  /**
   * @generated from field: chalk.common.v1.ExplainOptions explain = 2;
   */
  explain?: ExplainOptions;

  /**
   * @generated from field: chalk.common.v1.FeatureEncodingOptions encoding_options = 3;
   */
  encodingOptions?: FeatureEncodingOptions;

  /**
   * Customer-provided metadata that gets returned in the response
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<OnlineQueryResponseOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryResponseOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_meta", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "explain", kind: "message", T: ExplainOptions },
    { no: 3, name: "encoding_options", kind: "message", T: FeatureEncodingOptions },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryResponseOptions {
    return new OnlineQueryResponseOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryResponseOptions {
    return new OnlineQueryResponseOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryResponseOptions {
    return new OnlineQueryResponseOptions().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryResponseOptions | PlainMessage<OnlineQueryResponseOptions> | undefined, b: OnlineQueryResponseOptions | PlainMessage<OnlineQueryResponseOptions> | undefined): boolean {
    return proto3.util.equals(OnlineQueryResponseOptions, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.ExplainOptions
 */
export class ExplainOptions extends Message<ExplainOptions> {
  constructor(data?: PartialMessage<ExplainOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.ExplainOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExplainOptions {
    return new ExplainOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExplainOptions {
    return new ExplainOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExplainOptions {
    return new ExplainOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ExplainOptions | PlainMessage<ExplainOptions> | undefined, b: ExplainOptions | PlainMessage<ExplainOptions> | undefined): boolean {
    return proto3.util.equals(ExplainOptions, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.FeatureEncodingOptions
 */
export class FeatureEncodingOptions extends Message<FeatureEncodingOptions> {
  /**
   * @generated from field: bool encode_structs_as_objects = 1;
   */
  encodeStructsAsObjects = false;

  constructor(data?: PartialMessage<FeatureEncodingOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.FeatureEncodingOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encode_structs_as_objects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureEncodingOptions {
    return new FeatureEncodingOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureEncodingOptions {
    return new FeatureEncodingOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureEncodingOptions {
    return new FeatureEncodingOptions().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureEncodingOptions | PlainMessage<FeatureEncodingOptions> | undefined, b: FeatureEncodingOptions | PlainMessage<FeatureEncodingOptions> | undefined): boolean {
    return proto3.util.equals(FeatureEncodingOptions, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryResponse
 */
export class OnlineQueryResponse extends Message<OnlineQueryResponse> {
  /**
   * @generated from field: chalk.common.v1.OnlineQueryResult data = 1;
   */
  data?: OnlineQueryResult;

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 2;
   */
  errors: ChalkError[] = [];

  /**
   * @generated from field: chalk.common.v1.OnlineQueryMetadata response_meta = 3;
   */
  responseMeta?: OnlineQueryMetadata;

  constructor(data?: PartialMessage<OnlineQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: OnlineQueryResult },
    { no: 2, name: "errors", kind: "message", T: ChalkError, repeated: true },
    { no: 3, name: "response_meta", kind: "message", T: OnlineQueryMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryResponse {
    return new OnlineQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryResponse {
    return new OnlineQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryResponse {
    return new OnlineQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryResponse | PlainMessage<OnlineQueryResponse> | undefined, b: OnlineQueryResponse | PlainMessage<OnlineQueryResponse> | undefined): boolean {
    return proto3.util.equals(OnlineQueryResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryBulkResponse
 */
export class OnlineQueryBulkResponse extends Message<OnlineQueryBulkResponse> {
  /**
   * @generated from field: bytes scalars_data = 1;
   */
  scalarsData = new Uint8Array(0);

  /**
   * @generated from field: map<string, bytes> groups_data = 2;
   */
  groupsData: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 3;
   */
  errors: ChalkError[] = [];

  /**
   * @generated from field: chalk.common.v1.OnlineQueryMetadata response_meta = 4;
   */
  responseMeta?: OnlineQueryMetadata;

  constructor(data?: PartialMessage<OnlineQueryBulkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryBulkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scalars_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "groups_data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "errors", kind: "message", T: ChalkError, repeated: true },
    { no: 4, name: "response_meta", kind: "message", T: OnlineQueryMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryBulkResponse {
    return new OnlineQueryBulkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryBulkResponse {
    return new OnlineQueryBulkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryBulkResponse {
    return new OnlineQueryBulkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryBulkResponse | PlainMessage<OnlineQueryBulkResponse> | undefined, b: OnlineQueryBulkResponse | PlainMessage<OnlineQueryBulkResponse> | undefined): boolean {
    return proto3.util.equals(OnlineQueryBulkResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GenericSingleResponse
 */
export class GenericSingleResponse extends Message<GenericSingleResponse> {
  /**
   * @generated from oneof chalk.common.v1.GenericSingleResponse.query
   */
  query: {
    /**
     * @generated from field: chalk.common.v1.OnlineQueryResponse single_response = 1;
     */
    value: OnlineQueryResponse;
    case: "singleResponse";
  } | {
    /**
     * @generated from field: chalk.common.v1.OnlineQueryBulkResponse bulk_response = 2;
     */
    value: OnlineQueryBulkResponse;
    case: "bulkResponse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GenericSingleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GenericSingleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "single_response", kind: "message", T: OnlineQueryResponse, oneof: "query" },
    { no: 2, name: "bulk_response", kind: "message", T: OnlineQueryBulkResponse, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericSingleResponse {
    return new GenericSingleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericSingleResponse {
    return new GenericSingleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericSingleResponse {
    return new GenericSingleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenericSingleResponse | PlainMessage<GenericSingleResponse> | undefined, b: GenericSingleResponse | PlainMessage<GenericSingleResponse> | undefined): boolean {
    return proto3.util.equals(GenericSingleResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryMultiResponse
 */
export class OnlineQueryMultiResponse extends Message<OnlineQueryMultiResponse> {
  /**
   * @generated from field: repeated chalk.common.v1.GenericSingleResponse responses = 1;
   */
  responses: GenericSingleResponse[] = [];

  /**
   * Internal errors not tied to a specific request. Most errors should be stored in the individual response objects.
   *
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 2;
   */
  errors: ChalkError[] = [];

  constructor(data?: PartialMessage<OnlineQueryMultiResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryMultiResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responses", kind: "message", T: GenericSingleResponse, repeated: true },
    { no: 2, name: "errors", kind: "message", T: ChalkError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryMultiResponse {
    return new OnlineQueryMultiResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryMultiResponse {
    return new OnlineQueryMultiResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryMultiResponse {
    return new OnlineQueryMultiResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryMultiResponse | PlainMessage<OnlineQueryMultiResponse> | undefined, b: OnlineQueryMultiResponse | PlainMessage<OnlineQueryMultiResponse> | undefined): boolean {
    return proto3.util.equals(OnlineQueryMultiResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryResult
 */
export class OnlineQueryResult extends Message<OnlineQueryResult> {
  /**
   * @generated from field: repeated chalk.common.v1.FeatureResult results = 1;
   */
  results: FeatureResult[] = [];

  constructor(data?: PartialMessage<OnlineQueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: FeatureResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryResult {
    return new OnlineQueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryResult {
    return new OnlineQueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryResult {
    return new OnlineQueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryResult | PlainMessage<OnlineQueryResult> | undefined, b: OnlineQueryResult | PlainMessage<OnlineQueryResult> | undefined): boolean {
    return proto3.util.equals(OnlineQueryResult, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.FeatureResult
 */
export class FeatureResult extends Message<FeatureResult> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * @generated from field: google.protobuf.Value pkey = 6;
   */
  pkey?: Value;

  /**
   * @generated from field: google.protobuf.Value value = 2;
   */
  value?: Value;

  /**
   * @generated from field: optional chalk.common.v1.ChalkError error = 3;
   */
  error?: ChalkError;

  /**
   * @generated from field: optional google.protobuf.Timestamp ts = 4;
   */
  ts?: Timestamp;

  /**
   * @generated from field: optional chalk.common.v1.FeatureMeta meta = 5;
   */
  meta?: FeatureMeta;

  constructor(data?: PartialMessage<FeatureResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.FeatureResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pkey", kind: "message", T: Value },
    { no: 2, name: "value", kind: "message", T: Value },
    { no: 3, name: "error", kind: "message", T: ChalkError, opt: true },
    { no: 4, name: "ts", kind: "message", T: Timestamp, opt: true },
    { no: 5, name: "meta", kind: "message", T: FeatureMeta, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureResult {
    return new FeatureResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureResult {
    return new FeatureResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureResult {
    return new FeatureResult().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureResult | PlainMessage<FeatureResult> | undefined, b: FeatureResult | PlainMessage<FeatureResult> | undefined): boolean {
    return proto3.util.equals(FeatureResult, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.FeatureMeta
 */
export class FeatureMeta extends Message<FeatureMeta> {
  /**
   * @generated from field: string chosen_resolver_fqn = 1;
   */
  chosenResolverFqn = "";

  /**
   * @generated from field: bool cache_hit = 2;
   */
  cacheHit = false;

  /**
   * @generated from field: string primitive_type = 3;
   */
  primitiveType = "";

  /**
   * @generated from field: int64 version = 4;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<FeatureMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.FeatureMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chosen_resolver_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cache_hit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "primitive_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureMeta {
    return new FeatureMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureMeta {
    return new FeatureMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureMeta {
    return new FeatureMeta().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureMeta | PlainMessage<FeatureMeta> | undefined, b: FeatureMeta | PlainMessage<FeatureMeta> | undefined): boolean {
    return proto3.util.equals(FeatureMeta, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.OnlineQueryMetadata
 */
export class OnlineQueryMetadata extends Message<OnlineQueryMetadata> {
  /**
   * @generated from field: google.protobuf.Duration execution_duration = 1;
   */
  executionDuration?: Duration;

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * @generated from field: string environment_name = 4;
   */
  environmentName = "";

  /**
   * @generated from field: string query_id = 5;
   */
  queryId = "";

  /**
   * @generated from field: google.protobuf.Timestamp query_timestamp = 6;
   */
  queryTimestamp?: Timestamp;

  /**
   * @generated from field: string query_hash = 7;
   */
  queryHash = "";

  /**
   * @generated from field: chalk.common.v1.QueryExplainInfo explain_output = 8;
   */
  explainOutput?: QueryExplainInfo;

  /**
   * Same customer-provided metadata that was provided in the request.
   *
   * @generated from field: map<string, string> metadata = 9;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, google.protobuf.Value> additional_metadata = 10;
   */
  additionalMetadata: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<OnlineQueryMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.OnlineQueryMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_duration", kind: "message", T: Duration },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "query_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "query_timestamp", kind: "message", T: Timestamp },
    { no: 7, name: "query_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "explain_output", kind: "message", T: QueryExplainInfo },
    { no: 9, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "additional_metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnlineQueryMetadata {
    return new OnlineQueryMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnlineQueryMetadata {
    return new OnlineQueryMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnlineQueryMetadata {
    return new OnlineQueryMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OnlineQueryMetadata | PlainMessage<OnlineQueryMetadata> | undefined, b: OnlineQueryMetadata | PlainMessage<OnlineQueryMetadata> | undefined): boolean {
    return proto3.util.equals(OnlineQueryMetadata, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.QueryExplainInfo
 */
export class QueryExplainInfo extends Message<QueryExplainInfo> {
  /**
   * Unstructured string representation of the plan
   *
   * @generated from field: optional string plan_string = 1;
   */
  planString?: string;

  constructor(data?: PartialMessage<QueryExplainInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.QueryExplainInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExplainInfo {
    return new QueryExplainInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExplainInfo {
    return new QueryExplainInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExplainInfo {
    return new QueryExplainInfo().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExplainInfo | PlainMessage<QueryExplainInfo> | undefined, b: QueryExplainInfo | PlainMessage<QueryExplainInfo> | undefined): boolean {
    return proto3.util.equals(QueryExplainInfo, a, b);
  }
}

/**
 * UPLOAD FEATURES
 *
 * @generated from message chalk.common.v1.UploadFeaturesBulkRequest
 */
export class UploadFeaturesBulkRequest extends Message<UploadFeaturesBulkRequest> {
  /**
   * @generated from field: bytes inputs_feather = 1;
   */
  inputsFeather = new Uint8Array(0);

  /**
   * @generated from field: chalk.common.v1.FeatherBodyType body_type = 7;
   */
  bodyType = FeatherBodyType.UNSPECIFIED;

  constructor(data?: PartialMessage<UploadFeaturesBulkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.UploadFeaturesBulkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs_feather", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "body_type", kind: "enum", T: proto3.getEnumType(FeatherBodyType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFeaturesBulkRequest {
    return new UploadFeaturesBulkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFeaturesBulkRequest {
    return new UploadFeaturesBulkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFeaturesBulkRequest {
    return new UploadFeaturesBulkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFeaturesBulkRequest | PlainMessage<UploadFeaturesBulkRequest> | undefined, b: UploadFeaturesBulkRequest | PlainMessage<UploadFeaturesBulkRequest> | undefined): boolean {
    return proto3.util.equals(UploadFeaturesBulkRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.UploadFeaturesBulkResponse
 */
export class UploadFeaturesBulkResponse extends Message<UploadFeaturesBulkResponse> {
  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 1;
   */
  errors: ChalkError[] = [];

  constructor(data?: PartialMessage<UploadFeaturesBulkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.UploadFeaturesBulkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ChalkError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFeaturesBulkResponse {
    return new UploadFeaturesBulkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFeaturesBulkResponse {
    return new UploadFeaturesBulkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFeaturesBulkResponse {
    return new UploadFeaturesBulkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFeaturesBulkResponse | PlainMessage<UploadFeaturesBulkResponse> | undefined, b: UploadFeaturesBulkResponse | PlainMessage<UploadFeaturesBulkResponse> | undefined): boolean {
    return proto3.util.equals(UploadFeaturesBulkResponse, a, b);
  }
}

