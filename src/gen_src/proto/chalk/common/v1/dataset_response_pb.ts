// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/dataset_response.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { QueryStatus } from "./query_status_pb";
import { ChalkError } from "./chalk_error_pb";

/**
 * @generated from message chalk.common.v1.DatasetSampleFilter
 */
export class DatasetSampleFilter extends Message<DatasetSampleFilter> {
  /**
   * @generated from field: optional google.protobuf.Timestamp lower_bound = 1;
   */
  lowerBound?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp upper_bound = 2;
   */
  upperBound?: Timestamp;

  /**
   * @generated from field: optional int32 max_samples = 3;
   */
  maxSamples?: number;

  constructor(data?: PartialMessage<DatasetSampleFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.DatasetSampleFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lower_bound", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "upper_bound", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "max_samples", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetSampleFilter {
    return new DatasetSampleFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetSampleFilter {
    return new DatasetSampleFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetSampleFilter {
    return new DatasetSampleFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetSampleFilter | PlainMessage<DatasetSampleFilter> | undefined, b: DatasetSampleFilter | PlainMessage<DatasetSampleFilter> | undefined): boolean {
    return proto3.util.equals(DatasetSampleFilter, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.DatasetFilter
 */
export class DatasetFilter extends Message<DatasetFilter> {
  /**
   * @generated from field: chalk.common.v1.DatasetSampleFilter sample_filters = 1;
   */
  sampleFilters?: DatasetSampleFilter;

  /**
   * @generated from field: optional float max_cache_age_secs = 2;
   */
  maxCacheAgeSecs?: number;

  constructor(data?: PartialMessage<DatasetFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.DatasetFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sample_filters", kind: "message", T: DatasetSampleFilter },
    { no: 2, name: "max_cache_age_secs", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetFilter {
    return new DatasetFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetFilter {
    return new DatasetFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetFilter {
    return new DatasetFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetFilter | PlainMessage<DatasetFilter> | undefined, b: DatasetFilter | PlainMessage<DatasetFilter> | undefined): boolean {
    return proto3.util.equals(DatasetFilter, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.DatasetRevisionResponse
 */
export class DatasetRevisionResponse extends Message<DatasetRevisionResponse> {
  /**
   * @generated from field: optional string dataset_name = 1;
   */
  datasetName?: string;

  /**
   * @generated from field: optional string dataset_id = 2;
   */
  datasetId?: string;

  /**
   * @generated from field: optional string environment_id = 3;
   */
  environmentId?: string;

  /**
   * @generated from field: optional string revision_id = 4;
   */
  revisionId?: string;

  /**
   * @generated from field: string creator_id = 5;
   */
  creatorId = "";

  /**
   * @generated from field: repeated string outputs = 6;
   */
  outputs: string[] = [];

  /**
   * @generated from field: optional string givens_uri = 7;
   */
  givensUri?: string;

  /**
   * @generated from field: chalk.common.v1.QueryStatus status = 8;
   */
  status = QueryStatus.UNSPECIFIED;

  /**
   * @generated from field: chalk.common.v1.DatasetFilter filters = 9;
   */
  filters?: DatasetFilter;

  /**
   * @generated from field: int32 num_partitions = 10;
   */
  numPartitions = 0;

  /**
   * @generated from field: optional int32 num_bytes = 11;
   */
  numBytes?: number;

  /**
   * @generated from field: string output_uris = 12;
   */
  outputUris = "";

  /**
   * @generated from field: int32 output_version = 13;
   */
  outputVersion = 0;

  /**
   * @generated from field: optional string branch = 14;
   */
  branch?: string;

  /**
   * @generated from field: optional string dashboard_url = 15;
   */
  dashboardUrl?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp created_at = 101;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp started_at = 102;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp terminated_at = 103;
   */
  terminatedAt?: Timestamp;

  constructor(data?: PartialMessage<DatasetRevisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.DatasetRevisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "creator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "outputs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "givens_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "status", kind: "enum", T: proto3.getEnumType(QueryStatus) },
    { no: 9, name: "filters", kind: "message", T: DatasetFilter },
    { no: 10, name: "num_partitions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "num_bytes", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 12, name: "output_uris", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "output_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "dashboard_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 101, name: "created_at", kind: "message", T: Timestamp, opt: true },
    { no: 102, name: "started_at", kind: "message", T: Timestamp, opt: true },
    { no: 103, name: "terminated_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetRevisionResponse {
    return new DatasetRevisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetRevisionResponse {
    return new DatasetRevisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetRevisionResponse {
    return new DatasetRevisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetRevisionResponse | PlainMessage<DatasetRevisionResponse> | undefined, b: DatasetRevisionResponse | PlainMessage<DatasetRevisionResponse> | undefined): boolean {
    return proto3.util.equals(DatasetRevisionResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.DatasetResponse
 */
export class DatasetResponse extends Message<DatasetResponse> {
  /**
   * Whether the export job is finished (it runs asynchronously)
   *
   * @generated from field: bool is_finished = 1;
   */
  isFinished = false;

  /**
   * Version number representing the format of the data. The client uses this version number
   * to properly decode and load the query results into DataFrames.
   *
   * @generated from field: int32 version = 2;
   */
  version = 0;

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * @generated from field: string dataset_id = 4;
   */
  datasetId = "";

  /**
   * @generated from field: string dataset_name = 5;
   */
  datasetName = "";

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 101;
   */
  errors: ChalkError[] = [];

  /**
   * @generated from field: repeated chalk.common.v1.DatasetRevisionResponse revisions = 102;
   */
  revisions: DatasetRevisionResponse[] = [];

  constructor(data?: PartialMessage<DatasetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.DatasetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "dataset_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "errors", kind: "message", T: ChalkError, repeated: true },
    { no: 102, name: "revisions", kind: "message", T: DatasetRevisionResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetResponse {
    return new DatasetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetResponse {
    return new DatasetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetResponse {
    return new DatasetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetResponse | PlainMessage<DatasetResponse> | undefined, b: DatasetResponse | PlainMessage<DatasetResponse> | undefined): boolean {
    return proto3.util.equals(DatasetResponse, a, b);
  }
}

