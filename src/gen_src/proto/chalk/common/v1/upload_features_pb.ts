// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/upload_features.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChalkError } from "./chalk_error_pb";

/**
 * @generated from message chalk.common.v1.UploadFeaturesRequest
 */
export class UploadFeaturesRequest extends Message<UploadFeaturesRequest> {
  /**
   * @generated from field: bytes inputs_table = 1;
   */
  inputsTable = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadFeaturesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.UploadFeaturesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs_table", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFeaturesRequest {
    return new UploadFeaturesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFeaturesRequest {
    return new UploadFeaturesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFeaturesRequest {
    return new UploadFeaturesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFeaturesRequest | PlainMessage<UploadFeaturesRequest> | undefined, b: UploadFeaturesRequest | PlainMessage<UploadFeaturesRequest> | undefined): boolean {
    return proto3.util.equals(UploadFeaturesRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.UploadFeaturesResponse
 */
export class UploadFeaturesResponse extends Message<UploadFeaturesResponse> {
  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 1;
   */
  errors: ChalkError[] = [];

  /**
   * @generated from field: string operation_id = 2;
   */
  operationId = "";

  constructor(data?: PartialMessage<UploadFeaturesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.UploadFeaturesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ChalkError, repeated: true },
    { no: 2, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFeaturesResponse {
    return new UploadFeaturesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFeaturesResponse {
    return new UploadFeaturesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFeaturesResponse {
    return new UploadFeaturesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFeaturesResponse | PlainMessage<UploadFeaturesResponse> | undefined, b: UploadFeaturesResponse | PlainMessage<UploadFeaturesResponse> | undefined): boolean {
    return proto3.util.equals(UploadFeaturesResponse, a, b);
  }
}

