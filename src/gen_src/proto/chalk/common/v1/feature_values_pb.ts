// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/feature_values.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Chart } from "./chart_pb";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart_pb";

/**
 * @generated from enum chalk.common.v1.FeatureValueAggregation
 * @deprecated
 */
export enum FeatureValueAggregation {
  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES = 1;
   */
  UNIQUE_VALUES = 1,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS = 2;
   */
  TOTAL_OBSERVATIONS = 2,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE = 3;
   */
  NULL_PERCENTAGE = 3,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_MAX_VALUE = 4;
   */
  MAX_VALUE = 4,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_MIN_VALUE = 5;
   */
  MIN_VALUE = 5,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_AVERAGE = 6;
   */
  AVERAGE = 6,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS = 7;
   */
  UNIQUE_PKEYS = 7,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_P95 = 8;
   */
  P95 = 8,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_P75 = 9;
   */
  P75 = 9,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_P50 = 10;
   */
  P50 = 10,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_P25 = 11;
   */
  P25 = 11,

  /**
   * @generated from enum value: FEATURE_VALUE_AGGREGATION_P05 = 12;
   */
  P05 = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureValueAggregation)
proto3.util.setEnumType(FeatureValueAggregation, "chalk.common.v1.FeatureValueAggregation", [
  { no: 0, name: "FEATURE_VALUE_AGGREGATION_UNSPECIFIED" },
  { no: 1, name: "FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES" },
  { no: 2, name: "FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS" },
  { no: 3, name: "FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE" },
  { no: 4, name: "FEATURE_VALUE_AGGREGATION_MAX_VALUE" },
  { no: 5, name: "FEATURE_VALUE_AGGREGATION_MIN_VALUE" },
  { no: 6, name: "FEATURE_VALUE_AGGREGATION_AVERAGE" },
  { no: 7, name: "FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS" },
  { no: 8, name: "FEATURE_VALUE_AGGREGATION_P95" },
  { no: 9, name: "FEATURE_VALUE_AGGREGATION_P75" },
  { no: 10, name: "FEATURE_VALUE_AGGREGATION_P50" },
  { no: 11, name: "FEATURE_VALUE_AGGREGATION_P25" },
  { no: 12, name: "FEATURE_VALUE_AGGREGATION_P05" },
]);

/**
 * @generated from message chalk.common.v1.GetFeatureValuesChartRequest
 * @deprecated
 */
export class GetFeatureValuesChartRequest extends Message<GetFeatureValuesChartRequest> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: repeated chalk.common.v1.FeatureValueAggregation aggregate_by = 2;
   */
  aggregateBy: FeatureValueAggregation[] = [];

  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket aligned with end_ms will be of size total_window % window_period
   *
   * @generated from field: optional string window_period = 3;
   */
  windowPeriod?: string;

  /**
   * @generated from field: int64 start_ms = 4;
   */
  startMs = protoInt64.zero;

  /**
   * If not provided, will assume current time is the ending time
   *
   * @generated from field: optional int64 end_ms = 5;
   */
  endMs?: bigint;

  constructor(data?: PartialMessage<GetFeatureValuesChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregate_by", kind: "enum", T: proto3.getEnumType(FeatureValueAggregation), repeated: true },
    { no: 3, name: "window_period", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "start_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "end_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesChartRequest {
    return new GetFeatureValuesChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesChartRequest {
    return new GetFeatureValuesChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesChartRequest {
    return new GetFeatureValuesChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesChartRequest | PlainMessage<GetFeatureValuesChartRequest> | undefined, b: GetFeatureValuesChartRequest | PlainMessage<GetFeatureValuesChartRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesChartRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GetFeatureValuesChartResponse
 * @deprecated
 */
export class GetFeatureValuesChartResponse extends Message<GetFeatureValuesChartResponse> {
  /**
   * @generated from field: chalk.common.v1.Chart chart = 1;
   */
  chart?: Chart;

  constructor(data?: PartialMessage<GetFeatureValuesChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "message", T: Chart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesChartResponse {
    return new GetFeatureValuesChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesChartResponse {
    return new GetFeatureValuesChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesChartResponse {
    return new GetFeatureValuesChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesChartResponse | PlainMessage<GetFeatureValuesChartResponse> | undefined, b: GetFeatureValuesChartResponse | PlainMessage<GetFeatureValuesChartResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesChartResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest
 * @deprecated
 */
export class GetFeatureValuesTimeSeriesChartRequest extends Message<GetFeatureValuesTimeSeriesChartRequest> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: repeated chalk.common.v1.FeatureValueAggregation aggregate_by = 2;
   */
  aggregateBy: FeatureValueAggregation[] = [];

  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
   * For JSON format, this is a string `${duration_in_seconds}s`
   *
   * @generated from field: optional google.protobuf.Duration window_period = 3;
   */
  windowPeriod?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp start_timestamp_inclusive = 4;
   */
  startTimestampInclusive?: Timestamp;

  /**
   * If not provided, will assume current time is the ending time
   *
   * @generated from field: optional google.protobuf.Timestamp end_timestamp_exclusive = 5;
   */
  endTimestampExclusive?: Timestamp;

  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregate_by", kind: "enum", T: proto3.getEnumType(FeatureValueAggregation), repeated: true },
    { no: 3, name: "window_period", kind: "message", T: Duration, opt: true },
    { no: 4, name: "start_timestamp_inclusive", kind: "message", T: Timestamp },
    { no: 5, name: "end_timestamp_exclusive", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartRequest | PlainMessage<GetFeatureValuesTimeSeriesChartRequest> | undefined, b: GetFeatureValuesTimeSeriesChartRequest | PlainMessage<GetFeatureValuesTimeSeriesChartRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartRequest, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GetFeatureValuesTimeSeriesChartResponse
 * @deprecated
 */
export class GetFeatureValuesTimeSeriesChartResponse extends Message<GetFeatureValuesTimeSeriesChartResponse> {
  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesTimeSeriesChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartResponse | PlainMessage<GetFeatureValuesTimeSeriesChartResponse> | undefined, b: GetFeatureValuesTimeSeriesChartResponse | PlainMessage<GetFeatureValuesTimeSeriesChartResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartResponse, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request
 * @deprecated
 */
export class GetFeatureValuesTimeSeriesChartV2Request extends Message<GetFeatureValuesTimeSeriesChartV2Request> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: repeated chalk.common.v1.FeatureValueAggregation aggregate_by = 2;
   */
  aggregateBy: FeatureValueAggregation[] = [];

  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
   * For JSON format, this is a string `${duration_in_seconds}s`
   *
   * @generated from field: optional google.protobuf.Duration window_period = 3;
   */
  windowPeriod?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp start_timestamp_inclusive = 4;
   */
  startTimestampInclusive?: Timestamp;

  /**
   * If not provided, will assume current time is the ending time
   *
   * @generated from field: optional google.protobuf.Timestamp end_timestamp_exclusive = 5;
   */
  endTimestampExclusive?: Timestamp;

  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartV2Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregate_by", kind: "enum", T: proto3.getEnumType(FeatureValueAggregation), repeated: true },
    { no: 3, name: "window_period", kind: "message", T: Duration, opt: true },
    { no: 4, name: "start_timestamp_inclusive", kind: "message", T: Timestamp },
    { no: 5, name: "end_timestamp_exclusive", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartV2Request {
    return new GetFeatureValuesTimeSeriesChartV2Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartV2Request {
    return new GetFeatureValuesTimeSeriesChartV2Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartV2Request {
    return new GetFeatureValuesTimeSeriesChartV2Request().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartV2Request | PlainMessage<GetFeatureValuesTimeSeriesChartV2Request> | undefined, b: GetFeatureValuesTimeSeriesChartV2Request | PlainMessage<GetFeatureValuesTimeSeriesChartV2Request> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartV2Request, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response
 * @deprecated
 */
export class GetFeatureValuesTimeSeriesChartV2Response extends Message<GetFeatureValuesTimeSeriesChartV2Response> {
  /**
   * @generated from field: chalk.chart.v1.DenseTimeSeriesChart chart = 1;
   */
  chart?: DenseTimeSeriesChart;

  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartV2Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "message", T: DenseTimeSeriesChart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartV2Response {
    return new GetFeatureValuesTimeSeriesChartV2Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartV2Response {
    return new GetFeatureValuesTimeSeriesChartV2Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartV2Response {
    return new GetFeatureValuesTimeSeriesChartV2Response().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartV2Response | PlainMessage<GetFeatureValuesTimeSeriesChartV2Response> | undefined, b: GetFeatureValuesTimeSeriesChartV2Response | PlainMessage<GetFeatureValuesTimeSeriesChartV2Response> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartV2Response, a, b);
  }
}

