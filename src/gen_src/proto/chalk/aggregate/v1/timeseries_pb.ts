// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/aggregate/v1/timeseries.proto (package chalk.aggregate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.aggregate.v1.AggregateTimeSeriesRule
 */
export class AggregateTimeSeriesRule extends Message<AggregateTimeSeriesRule> {
  /**
   * @generated from field: string aggregation = 1;
   */
  aggregation = "";

  /**
   * @generated from field: google.protobuf.Duration bucket_duration = 2;
   */
  bucketDuration?: Duration;

  /**
   * The features which depend on this rule.
   *
   * @generated from field: repeated string dependent_features = 3;
   */
  dependentFeatures: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration retention = 4;
   */
  retention?: Duration;

  /**
   * @generated from field: string datetime_feature = 5;
   */
  datetimeFeature = "";

  constructor(data?: PartialMessage<AggregateTimeSeriesRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.aggregate.v1.AggregateTimeSeriesRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bucket_duration", kind: "message", T: Duration },
    { no: 3, name: "dependent_features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "retention", kind: "message", T: Duration },
    { no: 5, name: "datetime_feature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregateTimeSeriesRule {
    return new AggregateTimeSeriesRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregateTimeSeriesRule {
    return new AggregateTimeSeriesRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregateTimeSeriesRule {
    return new AggregateTimeSeriesRule().fromJsonString(jsonString, options);
  }

  static equals(a: AggregateTimeSeriesRule | PlainMessage<AggregateTimeSeriesRule> | undefined, b: AggregateTimeSeriesRule | PlainMessage<AggregateTimeSeriesRule> | undefined): boolean {
    return proto3.util.equals(AggregateTimeSeriesRule, a, b);
  }
}

/**
 * @generated from message chalk.aggregate.v1.AggregateTimeSeries
 */
export class AggregateTimeSeries extends Message<AggregateTimeSeries> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string aggregate_on = 2;
   */
  aggregateOn = "";

  /**
   * @generated from field: repeated string group_by = 3;
   */
  groupBy: string[] = [];

  /**
   * @generated from field: repeated chalk.aggregate.v1.AggregateTimeSeriesRule rules = 5;
   */
  rules: AggregateTimeSeriesRule[] = [];

  /**
   * @generated from field: string filters_description = 6;
   */
  filtersDescription = "";

  /**
   * @generated from field: string bucket_feature = 7;
   */
  bucketFeature = "";

  constructor(data?: PartialMessage<AggregateTimeSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.aggregate.v1.AggregateTimeSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregate_on", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_by", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "rules", kind: "message", T: AggregateTimeSeriesRule, repeated: true },
    { no: 6, name: "filters_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "bucket_feature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregateTimeSeries {
    return new AggregateTimeSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregateTimeSeries {
    return new AggregateTimeSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregateTimeSeries {
    return new AggregateTimeSeries().fromJsonString(jsonString, options);
  }

  static equals(a: AggregateTimeSeries | PlainMessage<AggregateTimeSeries> | undefined, b: AggregateTimeSeries | PlainMessage<AggregateTimeSeries> | undefined): boolean {
    return proto3.util.equals(AggregateTimeSeries, a, b);
  }
}

