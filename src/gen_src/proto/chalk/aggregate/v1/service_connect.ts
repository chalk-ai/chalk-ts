// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file chalk/aggregate/v1/service.proto (package chalk.aggregate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetActiveCronAggregateBackfillsRequest, GetActiveCronAggregateBackfillsResponse, GetAggregateBackfillJobRequest, GetAggregateBackfillJobResponse, GetAggregateBackfillJobsRequest, GetAggregateBackfillJobsResponse, GetAggregatesRequest, GetAggregatesResponse, GetCronAggregateBackfillRequest, GetCronAggregateBackfillResponse, PlanAggregateBackfillRequest, PlanAggregateBackfillResponse } from "./service_pb";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service chalk.aggregate.v1.AggregateService
 */
export const AggregateService = {
  typeName: "chalk.aggregate.v1.AggregateService",
  methods: {
    /**
     * PlanAggregateBackfill determines the estimated resources needed to backfill
     * an aggregate.
     *
     * This method is a duplicate of the PlanAggregateBackfill method
     * in the query_server.proto file. We should remove the query_server.proto method
     * and move that request to this service instead.
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     *
     * @generated from rpc chalk.aggregate.v1.AggregateService.PlanAggregateBackfill
     */
    planAggregateBackfill: {
      name: "PlanAggregateBackfill",
      I: PlanAggregateBackfillRequest,
      O: PlanAggregateBackfillResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * This method is a duplicate of the PlanAggregateBackfill method
     * in the query_server.proto file. We should remove the query_server.proto method
     * and move that request to this service instead.
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     *
     * @generated from rpc chalk.aggregate.v1.AggregateService.GetAggregates
     */
    getAggregates: {
      name: "GetAggregates",
      I: GetAggregatesRequest,
      O: GetAggregatesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.aggregate.v1.AggregateService.GetAggregateBackfillJobs
     */
    getAggregateBackfillJobs: {
      name: "GetAggregateBackfillJobs",
      I: GetAggregateBackfillJobsRequest,
      O: GetAggregateBackfillJobsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.aggregate.v1.AggregateService.GetAggregateBackfillJob
     */
    getAggregateBackfillJob: {
      name: "GetAggregateBackfillJob",
      I: GetAggregateBackfillJobRequest,
      O: GetAggregateBackfillJobResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.aggregate.v1.AggregateService.GetCronAggregateBackfill
     */
    getCronAggregateBackfill: {
      name: "GetCronAggregateBackfill",
      I: GetCronAggregateBackfillRequest,
      O: GetCronAggregateBackfillResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.aggregate.v1.AggregateService.GetActiveCronAggregateBackfills
     */
    getActiveCronAggregateBackfills: {
      name: "GetActiveCronAggregateBackfills",
      I: GetActiveCronAggregateBackfillsRequest,
      O: GetActiveCronAggregateBackfillsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
} as const;

