// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/engine/v2/feature_values_chart.proto (package chalk.engine.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart_pb";

/**
 * @generated from enum chalk.engine.v2.FeatureValueBaseWindowFunction
 */
export enum FeatureValueBaseWindowFunction {
  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES = 1;
   */
  UNIQUE_VALUES = 1,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS = 2;
   */
  TOTAL_OBSERVATIONS = 2,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE = 3;
   */
  NULL_PERCENTAGE = 3,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE = 4;
   */
  MAX_VALUE = 4,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE = 5;
   */
  MIN_VALUE = 5,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE = 6;
   */
  AVERAGE = 6,

  /**
   * @generated from enum value: FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS = 7;
   */
  UNIQUE_PKEYS = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureValueBaseWindowFunction)
proto3.util.setEnumType(FeatureValueBaseWindowFunction, "chalk.engine.v2.FeatureValueBaseWindowFunction", [
  { no: 0, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED" },
  { no: 1, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES" },
  { no: 2, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS" },
  { no: 3, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE" },
  { no: 4, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE" },
  { no: 5, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE" },
  { no: 6, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE" },
  { no: 7, name: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS" },
]);

/**
 * @generated from enum chalk.engine.v2.FeatureValueGroupBy
 */
export enum FeatureValueGroupBy {
  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Approximately ordered by cardinality / specificity
   *
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE = 1;
   */
  CATEGORICAL_VALUE = 1,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_PRIMARY_KEY = 2;
   */
  PRIMARY_KEY = 2,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID = 3;
   */
  DEPLOYMENT_ID = 3,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_RESOLVER = 4;
   */
  RESOLVER = 4,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_OPERATION_KIND = 5;
   */
  OPERATION_KIND = 5,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_OPERATION_ID = 6;
   */
  OPERATION_ID = 6,

  /**
   * @generated from enum value: FEATURE_VALUE_GROUP_BY_FEATURE_VERSION = 7;
   */
  FEATURE_VERSION = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureValueGroupBy)
proto3.util.setEnumType(FeatureValueGroupBy, "chalk.engine.v2.FeatureValueGroupBy", [
  { no: 0, name: "FEATURE_VALUE_GROUP_BY_UNSPECIFIED" },
  { no: 1, name: "FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE" },
  { no: 2, name: "FEATURE_VALUE_GROUP_BY_PRIMARY_KEY" },
  { no: 3, name: "FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID" },
  { no: 4, name: "FEATURE_VALUE_GROUP_BY_RESOLVER" },
  { no: 5, name: "FEATURE_VALUE_GROUP_BY_OPERATION_KIND" },
  { no: 6, name: "FEATURE_VALUE_GROUP_BY_OPERATION_ID" },
  { no: 7, name: "FEATURE_VALUE_GROUP_BY_FEATURE_VERSION" },
]);

/**
 * @generated from enum chalk.engine.v2.FeatureValueTimeSeries
 */
export enum FeatureValueTimeSeries {
  /**
   * @generated from enum value: FEATURE_VALUE_TIME_SERIES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_VALUE_TIME_SERIES_INSERTED_AT = 1;
   */
  INSERTED_AT = 1,

  /**
   * @generated from enum value: FEATURE_VALUE_TIME_SERIES_OBSERVED_AT = 2;
   */
  OBSERVED_AT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureValueTimeSeries)
proto3.util.setEnumType(FeatureValueTimeSeries, "chalk.engine.v2.FeatureValueTimeSeries", [
  { no: 0, name: "FEATURE_VALUE_TIME_SERIES_UNSPECIFIED" },
  { no: 1, name: "FEATURE_VALUE_TIME_SERIES_INSERTED_AT" },
  { no: 2, name: "FEATURE_VALUE_TIME_SERIES_OBSERVED_AT" },
]);

/**
 * @generated from message chalk.engine.v2.FeatureValuePercentileWindowFunction
 */
export class FeatureValuePercentileWindowFunction extends Message<FeatureValuePercentileWindowFunction> {
  /**
   * Must be a value between 0 and 100.
   *
   * @generated from field: double percentile = 1;
   */
  percentile = 0;

  constructor(data?: PartialMessage<FeatureValuePercentileWindowFunction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.FeatureValuePercentileWindowFunction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "percentile", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureValuePercentileWindowFunction {
    return new FeatureValuePercentileWindowFunction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureValuePercentileWindowFunction {
    return new FeatureValuePercentileWindowFunction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureValuePercentileWindowFunction {
    return new FeatureValuePercentileWindowFunction().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureValuePercentileWindowFunction | PlainMessage<FeatureValuePercentileWindowFunction> | undefined, b: FeatureValuePercentileWindowFunction | PlainMessage<FeatureValuePercentileWindowFunction> | undefined): boolean {
    return proto3.util.equals(FeatureValuePercentileWindowFunction, a, b);
  }
}

/**
 * @generated from message chalk.engine.v2.FeatureValueSeries
 */
export class FeatureValueSeries extends Message<FeatureValueSeries> {
  /**
   * @generated from field: string feature_fqn = 1;
   */
  featureFqn = "";

  /**
   * If the user passes in a series title, uses that. Otherwise, will compose a title based on the fqn and the function used
   *
   * @generated from field: optional string series_title = 2;
   */
  seriesTitle?: string;

  /**
   * @generated from oneof chalk.engine.v2.FeatureValueSeries.window_function
   */
  windowFunction: {
    /**
     * @generated from field: chalk.engine.v2.FeatureValueBaseWindowFunction base_window_function = 3;
     */
    value: FeatureValueBaseWindowFunction;
    case: "baseWindowFunction";
  } | {
    /**
     * @generated from field: chalk.engine.v2.FeatureValuePercentileWindowFunction percentile_window_function = 4;
     */
    value: FeatureValuePercentileWindowFunction;
    case: "percentileWindowFunction";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FeatureValueSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.FeatureValueSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series_title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "base_window_function", kind: "enum", T: proto3.getEnumType(FeatureValueBaseWindowFunction), oneof: "window_function" },
    { no: 4, name: "percentile_window_function", kind: "message", T: FeatureValuePercentileWindowFunction, oneof: "window_function" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureValueSeries {
    return new FeatureValueSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureValueSeries {
    return new FeatureValueSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureValueSeries {
    return new FeatureValueSeries().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureValueSeries | PlainMessage<FeatureValueSeries> | undefined, b: FeatureValueSeries | PlainMessage<FeatureValueSeries> | undefined): boolean {
    return proto3.util.equals(FeatureValueSeries, a, b);
  }
}

/**
 * @generated from message chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest
 */
export class GetFeatureValuesTimeSeriesChartRequest extends Message<GetFeatureValuesTimeSeriesChartRequest> {
  /**
   * @generated from field: optional string title = 1;
   */
  title?: string;

  /**
   * @generated from field: repeated chalk.engine.v2.FeatureValueSeries series = 2;
   */
  series: FeatureValueSeries[] = [];

  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
   * For JSON format, this is a string `${duration_in_seconds}s`
   *
   * @generated from field: google.protobuf.Duration window_period = 3;
   */
  windowPeriod?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp start_timestamp_inclusive = 4;
   */
  startTimestampInclusive?: Timestamp;

  /**
   * If not provided, will assume current time is the ending time
   *
   * @generated from field: optional google.protobuf.Timestamp end_timestamp_exclusive = 5;
   */
  endTimestampExclusive?: Timestamp;

  /**
   * The dimension to use as the time series axis. Defaults to inserted_at if not specified
   *
   * @generated from field: optional chalk.engine.v2.FeatureValueTimeSeries time_series = 6;
   */
  timeSeries?: FeatureValueTimeSeries;

  /**
   * The group bys to apply to this chart. Multiple group bys may produce high #'s of axes.
   *
   * @generated from field: repeated chalk.engine.v2.FeatureValueGroupBy group_by = 7;
   */
  groupBy: FeatureValueGroupBy[] = [];

  /**
   * The maximum number of series produced by the group by.
   * Important because some group bys are high cardinality (ex. value)
   *
   * @generated from field: optional int32 group_by_series_limit = 8;
   */
  groupBySeriesLimit?: number;

  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "series", kind: "message", T: FeatureValueSeries, repeated: true },
    { no: 3, name: "window_period", kind: "message", T: Duration },
    { no: 4, name: "start_timestamp_inclusive", kind: "message", T: Timestamp },
    { no: 5, name: "end_timestamp_exclusive", kind: "message", T: Timestamp, opt: true },
    { no: 6, name: "time_series", kind: "enum", T: proto3.getEnumType(FeatureValueTimeSeries), opt: true },
    { no: 7, name: "group_by", kind: "enum", T: proto3.getEnumType(FeatureValueGroupBy), repeated: true },
    { no: 8, name: "group_by_series_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartRequest {
    return new GetFeatureValuesTimeSeriesChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartRequest | PlainMessage<GetFeatureValuesTimeSeriesChartRequest> | undefined, b: GetFeatureValuesTimeSeriesChartRequest | PlainMessage<GetFeatureValuesTimeSeriesChartRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartRequest, a, b);
  }
}

/**
 * @generated from message chalk.engine.v2.GetFeatureValuesTimeSeriesChartResponse
 */
export class GetFeatureValuesTimeSeriesChartResponse extends Message<GetFeatureValuesTimeSeriesChartResponse> {
  /**
   * @generated from field: chalk.chart.v1.DenseTimeSeriesChart chart = 1;
   */
  chart?: DenseTimeSeriesChart;

  constructor(data?: PartialMessage<GetFeatureValuesTimeSeriesChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.GetFeatureValuesTimeSeriesChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "message", T: DenseTimeSeriesChart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesTimeSeriesChartResponse {
    return new GetFeatureValuesTimeSeriesChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesTimeSeriesChartResponse | PlainMessage<GetFeatureValuesTimeSeriesChartResponse> | undefined, b: GetFeatureValuesTimeSeriesChartResponse | PlainMessage<GetFeatureValuesTimeSeriesChartResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesTimeSeriesChartResponse, a, b);
  }
}

