// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/auth/v1/agent.proto (package chalk.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Permission } from "./permissions_pb";
import { FeaturePermissions } from "./featurepermission_pb";

/**
 * @generated from message chalk.auth.v1.EnvironmentPermissions
 */
export class EnvironmentPermissions extends Message<EnvironmentPermissions> {
  /**
   * @generated from field: repeated chalk.auth.v1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions feature_permissions = 3;
   */
  featurePermissions?: FeaturePermissions;

  /**
   * @generated from field: repeated chalk.auth.v1.CustomClaim customer_claims = 4;
   */
  customerClaims: CustomClaim[] = [];

  constructor(data?: PartialMessage<EnvironmentPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.EnvironmentPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
    { no: 3, name: "feature_permissions", kind: "message", T: FeaturePermissions },
    { no: 4, name: "customer_claims", kind: "message", T: CustomClaim, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentPermissions {
    return new EnvironmentPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentPermissions | PlainMessage<EnvironmentPermissions> | undefined, b: EnvironmentPermissions | PlainMessage<EnvironmentPermissions> | undefined): boolean {
    return proto3.util.equals(EnvironmentPermissions, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.UserAgent
 */
export class UserAgent extends Message<UserAgent> {
  /**
   * @generated from field: string client_id = 1 [deprecated = true];
   * @deprecated
   */
  clientId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: map<string, chalk.auth.v1.EnvironmentPermissions> permissions_by_environment = 4;
   */
  permissionsByEnvironment: { [key: string]: EnvironmentPermissions } = {};

  /**
   * @generated from field: bool impersonated = 5;
   */
  impersonated = false;

  constructor(data?: PartialMessage<UserAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.UserAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "permissions_by_environment", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EnvironmentPermissions} },
    { no: 5, name: "impersonated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAgent {
    return new UserAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAgent {
    return new UserAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAgent {
    return new UserAgent().fromJsonString(jsonString, options);
  }

  static equals(a: UserAgent | PlainMessage<UserAgent> | undefined, b: UserAgent | PlainMessage<UserAgent> | undefined): boolean {
    return proto3.util.equals(UserAgent, a, b);
  }
}

/**
 * CustomClaim is used to encode customer permissions.
 * The keys used are:
 * - `query_tags`: The tags of features that the user is allowed to query.
 *
 * @generated from message chalk.auth.v1.CustomClaim
 */
export class CustomClaim extends Message<CustomClaim> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<CustomClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.CustomClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomClaim {
    return new CustomClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomClaim {
    return new CustomClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomClaim {
    return new CustomClaim().fromJsonString(jsonString, options);
  }

  static equals(a: CustomClaim | PlainMessage<CustomClaim> | undefined, b: CustomClaim | PlainMessage<CustomClaim> | undefined): boolean {
    return proto3.util.equals(CustomClaim, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.ServiceTokenAgent
 */
export class ServiceTokenAgent extends Message<ServiceTokenAgent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: string environment = 4;
   */
  environment = "";

  /**
   * @generated from field: repeated chalk.auth.v1.Permission permissions = 5;
   */
  permissions: Permission[] = [];

  /**
   * @generated from field: repeated string custom_claims = 6 [deprecated = true];
   * @deprecated
   */
  customClaims: string[] = [];

  /**
   * @generated from field: repeated chalk.auth.v1.CustomClaim customer_claims = 7;
   */
  customerClaims: CustomClaim[] = [];

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions feature_permissions = 8;
   */
  featurePermissions?: FeaturePermissions;

  constructor(data?: PartialMessage<ServiceTokenAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.ServiceTokenAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
    { no: 6, name: "custom_claims", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "customer_claims", kind: "message", T: CustomClaim, repeated: true },
    { no: 8, name: "feature_permissions", kind: "message", T: FeaturePermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceTokenAgent {
    return new ServiceTokenAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceTokenAgent {
    return new ServiceTokenAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceTokenAgent {
    return new ServiceTokenAgent().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceTokenAgent | PlainMessage<ServiceTokenAgent> | undefined, b: ServiceTokenAgent | PlainMessage<ServiceTokenAgent> | undefined): boolean {
    return proto3.util.equals(ServiceTokenAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.EngineAgent
 */
export class EngineAgent extends Message<EngineAgent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string team_id = 2;
   */
  teamId = "";

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * @generated from field: bool impersonated = 5;
   */
  impersonated = false;

  constructor(data?: PartialMessage<EngineAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.EngineAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "impersonated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EngineAgent {
    return new EngineAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EngineAgent {
    return new EngineAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EngineAgent {
    return new EngineAgent().fromJsonString(jsonString, options);
  }

  static equals(a: EngineAgent | PlainMessage<EngineAgent> | undefined, b: EngineAgent | PlainMessage<EngineAgent> | undefined): boolean {
    return proto3.util.equals(EngineAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.MetadataServiceAgent
 */
export class MetadataServiceAgent extends Message<MetadataServiceAgent> {
  constructor(data?: PartialMessage<MetadataServiceAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.MetadataServiceAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataServiceAgent {
    return new MetadataServiceAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataServiceAgent {
    return new MetadataServiceAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataServiceAgent {
    return new MetadataServiceAgent().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataServiceAgent | PlainMessage<MetadataServiceAgent> | undefined, b: MetadataServiceAgent | PlainMessage<MetadataServiceAgent> | undefined): boolean {
    return proto3.util.equals(MetadataServiceAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.TenantAgent
 */
export class TenantAgent extends Message<TenantAgent> {
  constructor(data?: PartialMessage<TenantAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.TenantAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantAgent {
    return new TenantAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantAgent {
    return new TenantAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantAgent {
    return new TenantAgent().fromJsonString(jsonString, options);
  }

  static equals(a: TenantAgent | PlainMessage<TenantAgent> | undefined, b: TenantAgent | PlainMessage<TenantAgent> | undefined): boolean {
    return proto3.util.equals(TenantAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.Agent
 */
export class Agent extends Message<Agent> {
  /**
   * @generated from oneof chalk.auth.v1.Agent.agent
   */
  agent: {
    /**
     * @generated from field: chalk.auth.v1.UserAgent user_agent = 1;
     */
    value: UserAgent;
    case: "userAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.ServiceTokenAgent service_token_agent = 2;
     */
    value: ServiceTokenAgent;
    case: "serviceTokenAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.EngineAgent engine_agent = 3;
     */
    value: EngineAgent;
    case: "engineAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.TenantAgent tenant_agent = 4;
     */
    value: TenantAgent;
    case: "tenantAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.MetadataServiceAgent metadata_service_agent = 5;
     */
    value: MetadataServiceAgent;
    case: "metadataServiceAgent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_agent", kind: "message", T: UserAgent, oneof: "agent" },
    { no: 2, name: "service_token_agent", kind: "message", T: ServiceTokenAgent, oneof: "agent" },
    { no: 3, name: "engine_agent", kind: "message", T: EngineAgent, oneof: "agent" },
    { no: 4, name: "tenant_agent", kind: "message", T: TenantAgent, oneof: "agent" },
    { no: 5, name: "metadata_service_agent", kind: "message", T: MetadataServiceAgent, oneof: "agent" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agent {
    return new Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJsonString(jsonString, options);
  }

  static equals(a: Agent | PlainMessage<Agent> | undefined, b: Agent | PlainMessage<Agent> | undefined): boolean {
    return proto3.util.equals(Agent, a, b);
  }
}

