// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/lsp/v1/lsp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.lsp.v1";

export enum DiagnosticSeverity {
  DIAGNOSTIC_SEVERITY_UNSPECIFIED = 0,
  DIAGNOSTIC_SEVERITY_ERROR = 1,
  DIAGNOSTIC_SEVERITY_WARNING = 2,
  DIAGNOSTIC_SEVERITY_INFORMATION = 3,
  DIAGNOSTIC_SEVERITY_HINT = 4,
  UNRECOGNIZED = -1,
}

export function diagnosticSeverityFromJSON(object: any): DiagnosticSeverity {
  switch (object) {
    case 0:
    case "DIAGNOSTIC_SEVERITY_UNSPECIFIED":
      return DiagnosticSeverity.DIAGNOSTIC_SEVERITY_UNSPECIFIED;
    case 1:
    case "DIAGNOSTIC_SEVERITY_ERROR":
      return DiagnosticSeverity.DIAGNOSTIC_SEVERITY_ERROR;
    case 2:
    case "DIAGNOSTIC_SEVERITY_WARNING":
      return DiagnosticSeverity.DIAGNOSTIC_SEVERITY_WARNING;
    case 3:
    case "DIAGNOSTIC_SEVERITY_INFORMATION":
      return DiagnosticSeverity.DIAGNOSTIC_SEVERITY_INFORMATION;
    case 4:
    case "DIAGNOSTIC_SEVERITY_HINT":
      return DiagnosticSeverity.DIAGNOSTIC_SEVERITY_HINT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DiagnosticSeverity.UNRECOGNIZED;
  }
}

export function diagnosticSeverityToJSON(object: DiagnosticSeverity): string {
  switch (object) {
    case DiagnosticSeverity.DIAGNOSTIC_SEVERITY_UNSPECIFIED:
      return "DIAGNOSTIC_SEVERITY_UNSPECIFIED";
    case DiagnosticSeverity.DIAGNOSTIC_SEVERITY_ERROR:
      return "DIAGNOSTIC_SEVERITY_ERROR";
    case DiagnosticSeverity.DIAGNOSTIC_SEVERITY_WARNING:
      return "DIAGNOSTIC_SEVERITY_WARNING";
    case DiagnosticSeverity.DIAGNOSTIC_SEVERITY_INFORMATION:
      return "DIAGNOSTIC_SEVERITY_INFORMATION";
    case DiagnosticSeverity.DIAGNOSTIC_SEVERITY_HINT:
      return "DIAGNOSTIC_SEVERITY_HINT";
    case DiagnosticSeverity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LSP {
  diagnostics: PublishDiagnosticsParams[];
  actions: CodeAction[];
}

export interface PublishDiagnosticsParams {
  uri: string;
  diagnostics: Diagnostic[];
}

export interface Diagnostic {
  range: Range | undefined;
  message: string;
  severity: DiagnosticSeverity;
  code?: string | undefined;
  codeDescription: CodeDescription | undefined;
  relatedInformation: DiagnosticRelatedInformation[];
}

export interface Range {
  start: Position | undefined;
  end: Position | undefined;
}

export interface Position {
  line?: number | undefined;
  character?: number | undefined;
}

export interface CodeAction {
  title: string;
  diagnostics: Diagnostic[];
  edit: WorkspaceEdit | undefined;
}

export interface WorkspaceEdit {
  documentChanges: TextDocumentEdit[];
}

export interface TextDocumentEdit {
  textDocument: TextDocumentIdentifier | undefined;
  edits: TextEdit[];
}

export interface TextDocumentIdentifier {
  uri: string;
}

export interface TextEdit {
  range: Range | undefined;
  newText: string;
}

export interface CodeDescription {
  href: string;
}

export interface DiagnosticRelatedInformation {
  location: Location | undefined;
  message: string;
}

export interface Location {
  uri: string;
  range: Range | undefined;
}

function createBaseLSP(): LSP {
  return { diagnostics: [], actions: [] };
}

export const LSP: MessageFns<LSP> = {
  encode(message: LSP, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.diagnostics) {
      PublishDiagnosticsParams.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.actions) {
      CodeAction.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LSP {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLSP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.diagnostics.push(PublishDiagnosticsParams.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actions.push(CodeAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LSP {
    return {
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => PublishDiagnosticsParams.fromJSON(e))
        : [],
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => CodeAction.fromJSON(e)) : [],
    };
  },

  toJSON(message: LSP): unknown {
    const obj: any = {};
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => PublishDiagnosticsParams.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => CodeAction.toJSON(e));
    }
    return obj;
  },
};

function createBasePublishDiagnosticsParams(): PublishDiagnosticsParams {
  return { uri: "", diagnostics: [] };
}

export const PublishDiagnosticsParams: MessageFns<PublishDiagnosticsParams> = {
  encode(message: PublishDiagnosticsParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    for (const v of message.diagnostics) {
      Diagnostic.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishDiagnosticsParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishDiagnosticsParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diagnostics.push(Diagnostic.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishDiagnosticsParams {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => Diagnostic.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PublishDiagnosticsParams): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => Diagnostic.toJSON(e));
    }
    return obj;
  },
};

function createBaseDiagnostic(): Diagnostic {
  return {
    range: undefined,
    message: "",
    severity: 0,
    code: undefined,
    codeDescription: undefined,
    relatedInformation: [],
  };
}

export const Diagnostic: MessageFns<Diagnostic> = {
  encode(message: Diagnostic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.range !== undefined) {
      Range.encode(message.range, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.severity !== 0) {
      writer.uint32(24).int32(message.severity);
    }
    if (message.code !== undefined) {
      writer.uint32(34).string(message.code);
    }
    if (message.codeDescription !== undefined) {
      CodeDescription.encode(message.codeDescription, writer.uint32(42).fork()).join();
    }
    for (const v of message.relatedInformation) {
      DiagnosticRelatedInformation.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Diagnostic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiagnostic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.range = Range.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.codeDescription = CodeDescription.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.relatedInformation.push(DiagnosticRelatedInformation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Diagnostic {
    return {
      range: isSet(object.range) ? Range.fromJSON(object.range) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      severity: isSet(object.severity) ? diagnosticSeverityFromJSON(object.severity) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      codeDescription: isSet(object.codeDescription) ? CodeDescription.fromJSON(object.codeDescription) : undefined,
      relatedInformation: globalThis.Array.isArray(object?.relatedInformation)
        ? object.relatedInformation.map((e: any) => DiagnosticRelatedInformation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Diagnostic): unknown {
    const obj: any = {};
    if (message.range !== undefined) {
      obj.range = Range.toJSON(message.range);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.severity !== 0) {
      obj.severity = diagnosticSeverityToJSON(message.severity);
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.codeDescription !== undefined) {
      obj.codeDescription = CodeDescription.toJSON(message.codeDescription);
    }
    if (message.relatedInformation?.length) {
      obj.relatedInformation = message.relatedInformation.map((e) => DiagnosticRelatedInformation.toJSON(e));
    }
    return obj;
  },
};

function createBaseRange(): Range {
  return { start: undefined, end: undefined };
}

export const Range: MessageFns<Range> = {
  encode(message: Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      Position.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      Position.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.start = Position.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.end = Position.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Range {
    return {
      start: isSet(object.start) ? Position.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? Position.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: Range): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = Position.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = Position.toJSON(message.end);
    }
    return obj;
  },
};

function createBasePosition(): Position {
  return { line: undefined, character: undefined };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.line !== undefined) {
      writer.uint32(8).int32(message.line);
    }
    if (message.character !== undefined) {
      writer.uint32(16).int32(message.character);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.line = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.character = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      line: isSet(object.line) ? globalThis.Number(object.line) : undefined,
      character: isSet(object.character) ? globalThis.Number(object.character) : undefined,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.line !== undefined) {
      obj.line = Math.round(message.line);
    }
    if (message.character !== undefined) {
      obj.character = Math.round(message.character);
    }
    return obj;
  },
};

function createBaseCodeAction(): CodeAction {
  return { title: "", diagnostics: [], edit: undefined };
}

export const CodeAction: MessageFns<CodeAction> = {
  encode(message: CodeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.diagnostics) {
      Diagnostic.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.edit !== undefined) {
      WorkspaceEdit.encode(message.edit, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diagnostics.push(Diagnostic.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edit = WorkspaceEdit.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeAction {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => Diagnostic.fromJSON(e))
        : [],
      edit: isSet(object.edit) ? WorkspaceEdit.fromJSON(object.edit) : undefined,
    };
  },

  toJSON(message: CodeAction): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => Diagnostic.toJSON(e));
    }
    if (message.edit !== undefined) {
      obj.edit = WorkspaceEdit.toJSON(message.edit);
    }
    return obj;
  },
};

function createBaseWorkspaceEdit(): WorkspaceEdit {
  return { documentChanges: [] };
}

export const WorkspaceEdit: MessageFns<WorkspaceEdit> = {
  encode(message: WorkspaceEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documentChanges) {
      TextDocumentEdit.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.documentChanges.push(TextDocumentEdit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkspaceEdit {
    return {
      documentChanges: globalThis.Array.isArray(object?.documentChanges)
        ? object.documentChanges.map((e: any) => TextDocumentEdit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkspaceEdit): unknown {
    const obj: any = {};
    if (message.documentChanges?.length) {
      obj.documentChanges = message.documentChanges.map((e) => TextDocumentEdit.toJSON(e));
    }
    return obj;
  },
};

function createBaseTextDocumentEdit(): TextDocumentEdit {
  return { textDocument: undefined, edits: [] };
}

export const TextDocumentEdit: MessageFns<TextDocumentEdit> = {
  encode(message: TextDocumentEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textDocument !== undefined) {
      TextDocumentIdentifier.encode(message.textDocument, writer.uint32(10).fork()).join();
    }
    for (const v of message.edits) {
      TextEdit.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextDocumentEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextDocumentEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.textDocument = TextDocumentIdentifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.edits.push(TextEdit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextDocumentEdit {
    return {
      textDocument: isSet(object.textDocument) ? TextDocumentIdentifier.fromJSON(object.textDocument) : undefined,
      edits: globalThis.Array.isArray(object?.edits) ? object.edits.map((e: any) => TextEdit.fromJSON(e)) : [],
    };
  },

  toJSON(message: TextDocumentEdit): unknown {
    const obj: any = {};
    if (message.textDocument !== undefined) {
      obj.textDocument = TextDocumentIdentifier.toJSON(message.textDocument);
    }
    if (message.edits?.length) {
      obj.edits = message.edits.map((e) => TextEdit.toJSON(e));
    }
    return obj;
  },
};

function createBaseTextDocumentIdentifier(): TextDocumentIdentifier {
  return { uri: "" };
}

export const TextDocumentIdentifier: MessageFns<TextDocumentIdentifier> = {
  encode(message: TextDocumentIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextDocumentIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextDocumentIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextDocumentIdentifier {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: TextDocumentIdentifier): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },
};

function createBaseTextEdit(): TextEdit {
  return { range: undefined, newText: "" };
}

export const TextEdit: MessageFns<TextEdit> = {
  encode(message: TextEdit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.range !== undefined) {
      Range.encode(message.range, writer.uint32(10).fork()).join();
    }
    if (message.newText !== "") {
      writer.uint32(18).string(message.newText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextEdit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.range = Range.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextEdit {
    return {
      range: isSet(object.range) ? Range.fromJSON(object.range) : undefined,
      newText: isSet(object.newText) ? globalThis.String(object.newText) : "",
    };
  },

  toJSON(message: TextEdit): unknown {
    const obj: any = {};
    if (message.range !== undefined) {
      obj.range = Range.toJSON(message.range);
    }
    if (message.newText !== "") {
      obj.newText = message.newText;
    }
    return obj;
  },
};

function createBaseCodeDescription(): CodeDescription {
  return { href: "" };
}

export const CodeDescription: MessageFns<CodeDescription> = {
  encode(message: CodeDescription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.href !== "") {
      writer.uint32(10).string(message.href);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeDescription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.href = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeDescription {
    return { href: isSet(object.href) ? globalThis.String(object.href) : "" };
  },

  toJSON(message: CodeDescription): unknown {
    const obj: any = {};
    if (message.href !== "") {
      obj.href = message.href;
    }
    return obj;
  },
};

function createBaseDiagnosticRelatedInformation(): DiagnosticRelatedInformation {
  return { location: undefined, message: "" };
}

export const DiagnosticRelatedInformation: MessageFns<DiagnosticRelatedInformation> = {
  encode(message: DiagnosticRelatedInformation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiagnosticRelatedInformation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiagnosticRelatedInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiagnosticRelatedInformation {
    return {
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: DiagnosticRelatedInformation): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseLocation(): Location {
  return { uri: "", range: undefined };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.range !== undefined) {
      Range.encode(message.range, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.range = Range.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      range: isSet(object.range) ? Range.fromJSON(object.range) : undefined,
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.range !== undefined) {
      obj.range = Range.toJSON(message.range);
    }
    return obj;
  },
};

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
