// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/common/v1/upload_features.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ChalkError } from "./chalk_error.pb";

export const protobufPackage = "chalk.common.v1";

export interface UploadFeaturesRequest {
  inputsTable: Uint8Array;
}

export interface UploadFeaturesResponse {
  errors: ChalkError[];
  operationId: string;
}

function createBaseUploadFeaturesRequest(): UploadFeaturesRequest {
  return { inputsTable: new Uint8Array(0) };
}

export const UploadFeaturesRequest: MessageFns<UploadFeaturesRequest> = {
  encode(message: UploadFeaturesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputsTable.length !== 0) {
      writer.uint32(10).bytes(message.inputsTable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFeaturesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFeaturesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inputsTable = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFeaturesRequest {
    return { inputsTable: isSet(object.inputsTable) ? bytesFromBase64(object.inputsTable) : new Uint8Array(0) };
  },

  toJSON(message: UploadFeaturesRequest): unknown {
    const obj: any = {};
    if (message.inputsTable.length !== 0) {
      obj.inputsTable = base64FromBytes(message.inputsTable);
    }
    return obj;
  },
};

function createBaseUploadFeaturesResponse(): UploadFeaturesResponse {
  return { errors: [], operationId: "" };
}

export const UploadFeaturesResponse: MessageFns<UploadFeaturesResponse> = {
  encode(message: UploadFeaturesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.operationId !== "") {
      writer.uint32(18).string(message.operationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFeaturesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFeaturesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFeaturesResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
    };
  },

  toJSON(message: UploadFeaturesResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    return obj;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
