// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/common/v1/online_query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration.pb";
import { Value } from "../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";
import { LogicalExprNode } from "../../expression/v1/expression.pb";
import { OverlayGraph } from "../../graph/v1/graph.pb";
import { ChalkError } from "./chalk_error.pb";

export const protobufPackage = "chalk.common.v1";

export enum FeatherBodyType {
  FEATHER_BODY_TYPE_UNSPECIFIED = 0,
  FEATHER_BODY_TYPE_TABLE = 1,
  FEATHER_BODY_TYPE_RECORD_BATCHES = 2,
  UNRECOGNIZED = -1,
}

export function featherBodyTypeFromJSON(object: any): FeatherBodyType {
  switch (object) {
    case 0:
    case "FEATHER_BODY_TYPE_UNSPECIFIED":
      return FeatherBodyType.FEATHER_BODY_TYPE_UNSPECIFIED;
    case 1:
    case "FEATHER_BODY_TYPE_TABLE":
      return FeatherBodyType.FEATHER_BODY_TYPE_TABLE;
    case 2:
    case "FEATHER_BODY_TYPE_RECORD_BATCHES":
      return FeatherBodyType.FEATHER_BODY_TYPE_RECORD_BATCHES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatherBodyType.UNRECOGNIZED;
  }
}

export function featherBodyTypeToJSON(object: FeatherBodyType): string {
  switch (object) {
    case FeatherBodyType.FEATHER_BODY_TYPE_UNSPECIFIED:
      return "FEATHER_BODY_TYPE_UNSPECIFIED";
    case FeatherBodyType.FEATHER_BODY_TYPE_TABLE:
      return "FEATHER_BODY_TYPE_TABLE";
    case FeatherBodyType.FEATHER_BODY_TYPE_RECORD_BATCHES:
      return "FEATHER_BODY_TYPE_RECORD_BATCHES";
    case FeatherBodyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface OnlineQueryRequest {
  inputs: { [key: string]: any | undefined };
  outputs: OutputExpr[];
  now?: Date | undefined;
  staleness: { [key: string]: string };
  context: OnlineQueryContext | undefined;
  responseOptions: OnlineQueryResponseOptions | undefined;
}

export interface OnlineQueryRequest_InputsEntry {
  key: string;
  value: any | undefined;
}

export interface OnlineQueryRequest_StalenessEntry {
  key: string;
  value: string;
}

export interface OnlineQueryBulkRequest {
  inputsFeather: Uint8Array;
  outputs: OutputExpr[];
  now: Date[];
  staleness: { [key: string]: string };
  context: OnlineQueryContext | undefined;
  responseOptions: OnlineQueryResponseOptions | undefined;
  bodyType: FeatherBodyType;
}

export interface OnlineQueryBulkRequest_StalenessEntry {
  key: string;
  value: string;
}

export interface GenericSingleQuery {
  singleRequest?: OnlineQueryRequest | undefined;
  bulkRequest?: OnlineQueryBulkRequest | undefined;
}

export interface OnlineQueryMultiRequest {
  queries: GenericSingleQuery[];
}

export interface FeatureExpression {
  outputColumnName: string;
  namespace: string;
  expr: LogicalExprNode | undefined;
}

/**
 * Represent an online query output. Currently these are just single feature FQNs.
 * In the future these could be expressions like `User.card.transactions[_.amount < 100]`
 */
export interface OutputExpr {
  featureFqn?: string | undefined;
  featureExpression?: FeatureExpression | undefined;
}

/** Roughly speaking data in here should affect the query hash key / the query plan */
export interface OnlineQueryContext {
  /**
   * environment id is set in the header. This field is not set anymore
   *
   * @deprecated
   */
  environment: string;
  tags: string[];
  requiredResolverTags: string[];
  /**
   * deployment id is set in the header. This field is not set anymore
   *
   * @deprecated
   */
  deploymentId?:
    | string
    | undefined;
  /**
   * branch_id is set in the header. This field is not set anymore
   *
   * @deprecated
   */
  branchId?: string | undefined;
  correlationId?: string | undefined;
  queryName?: string | undefined;
  queryNameVersion?:
    | string
    | undefined;
  /**
   * Arbitrary flags for the query such as store_plan_stages
   * If a flag because consistently used it should be moved into an actual field.
   */
  options: { [key: string]: any | undefined };
  /** Value metrics will be tagged by the output of the given features */
  valueMetricsTagByFeatures: OutputExpr[];
  /** Query context is a dictionary of JSON-serializable values that can be used in resolvers (see https://docs.chalk.ai/api-docs#ChalkContext) */
  queryContext: { [key: string]: any | undefined };
  /** Additional features and resolvers to be used to plan this specific query */
  overlayGraph?: OverlayGraph | undefined;
}

export interface OnlineQueryContext_OptionsEntry {
  key: string;
  value: any | undefined;
}

export interface OnlineQueryContext_QueryContextEntry {
  key: string;
  value: any | undefined;
}

/** Options re: how we construct the response, shouldn't affect the query hash */
export interface OnlineQueryResponseOptions {
  includeMeta: boolean;
  explain: ExplainOptions | undefined;
  encodingOptions:
    | FeatureEncodingOptions
    | undefined;
  /** Customer-provided metadata that gets returned in the response */
  metadata: { [key: string]: string };
}

export interface OnlineQueryResponseOptions_MetadataEntry {
  key: string;
  value: string;
}

export interface ExplainOptions {
}

export interface FeatureEncodingOptions {
  encodeStructsAsObjects: boolean;
}

export interface OnlineQueryResponse {
  data: OnlineQueryResult | undefined;
  errors: ChalkError[];
  responseMeta: OnlineQueryMetadata | undefined;
}

export interface OnlineQueryBulkResponse {
  scalarsData: Uint8Array;
  groupsData: { [key: string]: Uint8Array };
  errors: ChalkError[];
  responseMeta: OnlineQueryMetadata | undefined;
}

export interface OnlineQueryBulkResponse_GroupsDataEntry {
  key: string;
  value: Uint8Array;
}

export interface GenericSingleResponse {
  singleResponse?: OnlineQueryResponse | undefined;
  bulkResponse?: OnlineQueryBulkResponse | undefined;
}

export interface OnlineQueryMultiResponse {
  responses: GenericSingleResponse[];
  /** Internal errors not tied to a specific request. Most errors should be stored in the individual response objects. */
  errors: ChalkError[];
}

export interface OnlineQueryResult {
  results: FeatureResult[];
}

export interface FeatureResult {
  field: string;
  pkey: any | undefined;
  value: any | undefined;
  error?: ChalkError | undefined;
  ts?: Date | undefined;
  meta?: FeatureMeta | undefined;
}

export interface FeatureMeta {
  chosenResolverFqn: string;
  cacheHit: boolean;
  primitiveType: string;
  version: number;
}

export interface OnlineQueryMetadata {
  executionDuration: Duration | undefined;
  deploymentId: string;
  environmentId: string;
  environmentName: string;
  queryId: string;
  queryTimestamp: Date | undefined;
  queryHash: string;
  explainOutput:
    | QueryExplainInfo
    | undefined;
  /** Same customer-provided metadata that was provided in the request. */
  metadata: { [key: string]: string };
  additionalMetadata: { [key: string]: any | undefined };
}

export interface OnlineQueryMetadata_MetadataEntry {
  key: string;
  value: string;
}

export interface OnlineQueryMetadata_AdditionalMetadataEntry {
  key: string;
  value: any | undefined;
}

export interface QueryExplainInfo {
  /** Unstructured string representation of the plan */
  planString?: string | undefined;
}

/** UPLOAD FEATURES */
export interface UploadFeaturesBulkRequest {
  inputsFeather: Uint8Array;
  bodyType: FeatherBodyType;
}

export interface UploadFeaturesBulkResponse {
  errors: ChalkError[];
}

function createBaseOnlineQueryRequest(): OnlineQueryRequest {
  return { inputs: {}, outputs: [], now: undefined, staleness: {}, context: undefined, responseOptions: undefined };
}

export const OnlineQueryRequest: MessageFns<OnlineQueryRequest> = {
  encode(message: OnlineQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.inputs).forEach(([key, value]) => {
      if (value !== undefined) {
        OnlineQueryRequest_InputsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    for (const v of message.outputs) {
      OutputExpr.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.now !== undefined) {
      Timestamp.encode(toTimestamp(message.now), writer.uint32(26).fork()).join();
    }
    Object.entries(message.staleness).forEach(([key, value]) => {
      OnlineQueryRequest_StalenessEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.context !== undefined) {
      OnlineQueryContext.encode(message.context, writer.uint32(42).fork()).join();
    }
    if (message.responseOptions !== undefined) {
      OnlineQueryResponseOptions.encode(message.responseOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = OnlineQueryRequest_InputsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.inputs[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outputs.push(OutputExpr.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.now = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = OnlineQueryRequest_StalenessEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.staleness[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context = OnlineQueryContext.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.responseOptions = OnlineQueryResponseOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryRequest {
    return {
      inputs: isObject(object.inputs)
        ? Object.entries(object.inputs).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      outputs: globalThis.Array.isArray(object?.outputs) ? object.outputs.map((e: any) => OutputExpr.fromJSON(e)) : [],
      now: isSet(object.now) ? fromJsonTimestamp(object.now) : undefined,
      staleness: isObject(object.staleness)
        ? Object.entries(object.staleness).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      context: isSet(object.context) ? OnlineQueryContext.fromJSON(object.context) : undefined,
      responseOptions: isSet(object.responseOptions)
        ? OnlineQueryResponseOptions.fromJSON(object.responseOptions)
        : undefined,
    };
  },

  toJSON(message: OnlineQueryRequest): unknown {
    const obj: any = {};
    if (message.inputs) {
      const entries = Object.entries(message.inputs);
      if (entries.length > 0) {
        obj.inputs = {};
        entries.forEach(([k, v]) => {
          obj.inputs[k] = v;
        });
      }
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => OutputExpr.toJSON(e));
    }
    if (message.now !== undefined) {
      obj.now = message.now.toISOString();
    }
    if (message.staleness) {
      const entries = Object.entries(message.staleness);
      if (entries.length > 0) {
        obj.staleness = {};
        entries.forEach(([k, v]) => {
          obj.staleness[k] = v;
        });
      }
    }
    if (message.context !== undefined) {
      obj.context = OnlineQueryContext.toJSON(message.context);
    }
    if (message.responseOptions !== undefined) {
      obj.responseOptions = OnlineQueryResponseOptions.toJSON(message.responseOptions);
    }
    return obj;
  },
};

function createBaseOnlineQueryRequest_InputsEntry(): OnlineQueryRequest_InputsEntry {
  return { key: "", value: undefined };
}

export const OnlineQueryRequest_InputsEntry: MessageFns<OnlineQueryRequest_InputsEntry> = {
  encode(message: OnlineQueryRequest_InputsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryRequest_InputsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryRequest_InputsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryRequest_InputsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: OnlineQueryRequest_InputsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseOnlineQueryRequest_StalenessEntry(): OnlineQueryRequest_StalenessEntry {
  return { key: "", value: "" };
}

export const OnlineQueryRequest_StalenessEntry: MessageFns<OnlineQueryRequest_StalenessEntry> = {
  encode(message: OnlineQueryRequest_StalenessEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryRequest_StalenessEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryRequest_StalenessEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryRequest_StalenessEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OnlineQueryRequest_StalenessEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseOnlineQueryBulkRequest(): OnlineQueryBulkRequest {
  return {
    inputsFeather: new Uint8Array(0),
    outputs: [],
    now: [],
    staleness: {},
    context: undefined,
    responseOptions: undefined,
    bodyType: 0,
  };
}

export const OnlineQueryBulkRequest: MessageFns<OnlineQueryBulkRequest> = {
  encode(message: OnlineQueryBulkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputsFeather.length !== 0) {
      writer.uint32(10).bytes(message.inputsFeather);
    }
    for (const v of message.outputs) {
      OutputExpr.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.now) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(26).fork()).join();
    }
    Object.entries(message.staleness).forEach(([key, value]) => {
      OnlineQueryBulkRequest_StalenessEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.context !== undefined) {
      OnlineQueryContext.encode(message.context, writer.uint32(42).fork()).join();
    }
    if (message.responseOptions !== undefined) {
      OnlineQueryResponseOptions.encode(message.responseOptions, writer.uint32(50).fork()).join();
    }
    if (message.bodyType !== 0) {
      writer.uint32(56).int32(message.bodyType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryBulkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryBulkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inputsFeather = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outputs.push(OutputExpr.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.now.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = OnlineQueryBulkRequest_StalenessEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.staleness[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context = OnlineQueryContext.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.responseOptions = OnlineQueryResponseOptions.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bodyType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryBulkRequest {
    return {
      inputsFeather: isSet(object.inputsFeather) ? bytesFromBase64(object.inputsFeather) : new Uint8Array(0),
      outputs: globalThis.Array.isArray(object?.outputs) ? object.outputs.map((e: any) => OutputExpr.fromJSON(e)) : [],
      now: globalThis.Array.isArray(object?.now) ? object.now.map((e: any) => fromJsonTimestamp(e)) : [],
      staleness: isObject(object.staleness)
        ? Object.entries(object.staleness).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      context: isSet(object.context) ? OnlineQueryContext.fromJSON(object.context) : undefined,
      responseOptions: isSet(object.responseOptions)
        ? OnlineQueryResponseOptions.fromJSON(object.responseOptions)
        : undefined,
      bodyType: isSet(object.bodyType) ? featherBodyTypeFromJSON(object.bodyType) : 0,
    };
  },

  toJSON(message: OnlineQueryBulkRequest): unknown {
    const obj: any = {};
    if (message.inputsFeather.length !== 0) {
      obj.inputsFeather = base64FromBytes(message.inputsFeather);
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => OutputExpr.toJSON(e));
    }
    if (message.now?.length) {
      obj.now = message.now.map((e) => e.toISOString());
    }
    if (message.staleness) {
      const entries = Object.entries(message.staleness);
      if (entries.length > 0) {
        obj.staleness = {};
        entries.forEach(([k, v]) => {
          obj.staleness[k] = v;
        });
      }
    }
    if (message.context !== undefined) {
      obj.context = OnlineQueryContext.toJSON(message.context);
    }
    if (message.responseOptions !== undefined) {
      obj.responseOptions = OnlineQueryResponseOptions.toJSON(message.responseOptions);
    }
    if (message.bodyType !== 0) {
      obj.bodyType = featherBodyTypeToJSON(message.bodyType);
    }
    return obj;
  },
};

function createBaseOnlineQueryBulkRequest_StalenessEntry(): OnlineQueryBulkRequest_StalenessEntry {
  return { key: "", value: "" };
}

export const OnlineQueryBulkRequest_StalenessEntry: MessageFns<OnlineQueryBulkRequest_StalenessEntry> = {
  encode(message: OnlineQueryBulkRequest_StalenessEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryBulkRequest_StalenessEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryBulkRequest_StalenessEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryBulkRequest_StalenessEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OnlineQueryBulkRequest_StalenessEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseGenericSingleQuery(): GenericSingleQuery {
  return { singleRequest: undefined, bulkRequest: undefined };
}

export const GenericSingleQuery: MessageFns<GenericSingleQuery> = {
  encode(message: GenericSingleQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.singleRequest !== undefined) {
      OnlineQueryRequest.encode(message.singleRequest, writer.uint32(10).fork()).join();
    }
    if (message.bulkRequest !== undefined) {
      OnlineQueryBulkRequest.encode(message.bulkRequest, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericSingleQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericSingleQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.singleRequest = OnlineQueryRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bulkRequest = OnlineQueryBulkRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericSingleQuery {
    return {
      singleRequest: isSet(object.singleRequest) ? OnlineQueryRequest.fromJSON(object.singleRequest) : undefined,
      bulkRequest: isSet(object.bulkRequest) ? OnlineQueryBulkRequest.fromJSON(object.bulkRequest) : undefined,
    };
  },

  toJSON(message: GenericSingleQuery): unknown {
    const obj: any = {};
    if (message.singleRequest !== undefined) {
      obj.singleRequest = OnlineQueryRequest.toJSON(message.singleRequest);
    }
    if (message.bulkRequest !== undefined) {
      obj.bulkRequest = OnlineQueryBulkRequest.toJSON(message.bulkRequest);
    }
    return obj;
  },
};

function createBaseOnlineQueryMultiRequest(): OnlineQueryMultiRequest {
  return { queries: [] };
}

export const OnlineQueryMultiRequest: MessageFns<OnlineQueryMultiRequest> = {
  encode(message: OnlineQueryMultiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.queries) {
      GenericSingleQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryMultiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryMultiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queries.push(GenericSingleQuery.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryMultiRequest {
    return {
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => GenericSingleQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OnlineQueryMultiRequest): unknown {
    const obj: any = {};
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => GenericSingleQuery.toJSON(e));
    }
    return obj;
  },
};

function createBaseFeatureExpression(): FeatureExpression {
  return { outputColumnName: "", namespace: "", expr: undefined };
}

export const FeatureExpression: MessageFns<FeatureExpression> = {
  encode(message: FeatureExpression, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputColumnName !== "") {
      writer.uint32(10).string(message.outputColumnName);
    }
    if (message.namespace !== "") {
      writer.uint32(26).string(message.namespace);
    }
    if (message.expr !== undefined) {
      LogicalExprNode.encode(message.expr, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureExpression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureExpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputColumnName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expr = LogicalExprNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureExpression {
    return {
      outputColumnName: isSet(object.outputColumnName) ? globalThis.String(object.outputColumnName) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      expr: isSet(object.expr) ? LogicalExprNode.fromJSON(object.expr) : undefined,
    };
  },

  toJSON(message: FeatureExpression): unknown {
    const obj: any = {};
    if (message.outputColumnName !== "") {
      obj.outputColumnName = message.outputColumnName;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.expr !== undefined) {
      obj.expr = LogicalExprNode.toJSON(message.expr);
    }
    return obj;
  },
};

function createBaseOutputExpr(): OutputExpr {
  return { featureFqn: undefined, featureExpression: undefined };
}

export const OutputExpr: MessageFns<OutputExpr> = {
  encode(message: OutputExpr, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureFqn !== undefined) {
      writer.uint32(10).string(message.featureFqn);
    }
    if (message.featureExpression !== undefined) {
      FeatureExpression.encode(message.featureExpression, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputExpr {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputExpr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.featureFqn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.featureExpression = FeatureExpression.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputExpr {
    return {
      featureFqn: isSet(object.featureFqn) ? globalThis.String(object.featureFqn) : undefined,
      featureExpression: isSet(object.featureExpression)
        ? FeatureExpression.fromJSON(object.featureExpression)
        : undefined,
    };
  },

  toJSON(message: OutputExpr): unknown {
    const obj: any = {};
    if (message.featureFqn !== undefined) {
      obj.featureFqn = message.featureFqn;
    }
    if (message.featureExpression !== undefined) {
      obj.featureExpression = FeatureExpression.toJSON(message.featureExpression);
    }
    return obj;
  },
};

function createBaseOnlineQueryContext(): OnlineQueryContext {
  return {
    environment: "",
    tags: [],
    requiredResolverTags: [],
    deploymentId: undefined,
    branchId: undefined,
    correlationId: undefined,
    queryName: undefined,
    queryNameVersion: undefined,
    options: {},
    valueMetricsTagByFeatures: [],
    queryContext: {},
    overlayGraph: undefined,
  };
}

export const OnlineQueryContext: MessageFns<OnlineQueryContext> = {
  encode(message: OnlineQueryContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== "") {
      writer.uint32(10).string(message.environment);
    }
    for (const v of message.tags) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.requiredResolverTags) {
      writer.uint32(26).string(v!);
    }
    if (message.deploymentId !== undefined) {
      writer.uint32(34).string(message.deploymentId);
    }
    if (message.branchId !== undefined) {
      writer.uint32(42).string(message.branchId);
    }
    if (message.correlationId !== undefined) {
      writer.uint32(50).string(message.correlationId);
    }
    if (message.queryName !== undefined) {
      writer.uint32(58).string(message.queryName);
    }
    if (message.queryNameVersion !== undefined) {
      writer.uint32(66).string(message.queryNameVersion);
    }
    Object.entries(message.options).forEach(([key, value]) => {
      if (value !== undefined) {
        OnlineQueryContext_OptionsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
      }
    });
    for (const v of message.valueMetricsTagByFeatures) {
      OutputExpr.encode(v!, writer.uint32(82).fork()).join();
    }
    Object.entries(message.queryContext).forEach(([key, value]) => {
      if (value !== undefined) {
        OnlineQueryContext_QueryContextEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
      }
    });
    if (message.overlayGraph !== undefined) {
      OverlayGraph.encode(message.overlayGraph, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requiredResolverTags.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.branchId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.queryName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.queryNameVersion = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = OnlineQueryContext_OptionsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.options[entry9.key] = entry9.value;
          }
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.valueMetricsTagByFeatures.push(OutputExpr.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          const entry11 = OnlineQueryContext_QueryContextEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.queryContext[entry11.key] = entry11.value;
          }
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.overlayGraph = OverlayGraph.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryContext {
    return {
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      requiredResolverTags: globalThis.Array.isArray(object?.requiredResolverTags)
        ? object.requiredResolverTags.map((e: any) => globalThis.String(e))
        : [],
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : undefined,
      branchId: isSet(object.branchId) ? globalThis.String(object.branchId) : undefined,
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : undefined,
      queryName: isSet(object.queryName) ? globalThis.String(object.queryName) : undefined,
      queryNameVersion: isSet(object.queryNameVersion) ? globalThis.String(object.queryNameVersion) : undefined,
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      valueMetricsTagByFeatures: globalThis.Array.isArray(object?.valueMetricsTagByFeatures)
        ? object.valueMetricsTagByFeatures.map((e: any) => OutputExpr.fromJSON(e))
        : [],
      queryContext: isObject(object.queryContext)
        ? Object.entries(object.queryContext).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      overlayGraph: isSet(object.overlayGraph) ? OverlayGraph.fromJSON(object.overlayGraph) : undefined,
    };
  },

  toJSON(message: OnlineQueryContext): unknown {
    const obj: any = {};
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.requiredResolverTags?.length) {
      obj.requiredResolverTags = message.requiredResolverTags;
    }
    if (message.deploymentId !== undefined) {
      obj.deploymentId = message.deploymentId;
    }
    if (message.branchId !== undefined) {
      obj.branchId = message.branchId;
    }
    if (message.correlationId !== undefined) {
      obj.correlationId = message.correlationId;
    }
    if (message.queryName !== undefined) {
      obj.queryName = message.queryName;
    }
    if (message.queryNameVersion !== undefined) {
      obj.queryNameVersion = message.queryNameVersion;
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = v;
        });
      }
    }
    if (message.valueMetricsTagByFeatures?.length) {
      obj.valueMetricsTagByFeatures = message.valueMetricsTagByFeatures.map((e) => OutputExpr.toJSON(e));
    }
    if (message.queryContext) {
      const entries = Object.entries(message.queryContext);
      if (entries.length > 0) {
        obj.queryContext = {};
        entries.forEach(([k, v]) => {
          obj.queryContext[k] = v;
        });
      }
    }
    if (message.overlayGraph !== undefined) {
      obj.overlayGraph = OverlayGraph.toJSON(message.overlayGraph);
    }
    return obj;
  },
};

function createBaseOnlineQueryContext_OptionsEntry(): OnlineQueryContext_OptionsEntry {
  return { key: "", value: undefined };
}

export const OnlineQueryContext_OptionsEntry: MessageFns<OnlineQueryContext_OptionsEntry> = {
  encode(message: OnlineQueryContext_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryContext_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryContext_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryContext_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: OnlineQueryContext_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseOnlineQueryContext_QueryContextEntry(): OnlineQueryContext_QueryContextEntry {
  return { key: "", value: undefined };
}

export const OnlineQueryContext_QueryContextEntry: MessageFns<OnlineQueryContext_QueryContextEntry> = {
  encode(message: OnlineQueryContext_QueryContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryContext_QueryContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryContext_QueryContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryContext_QueryContextEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: OnlineQueryContext_QueryContextEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseOnlineQueryResponseOptions(): OnlineQueryResponseOptions {
  return { includeMeta: false, explain: undefined, encodingOptions: undefined, metadata: {} };
}

export const OnlineQueryResponseOptions: MessageFns<OnlineQueryResponseOptions> = {
  encode(message: OnlineQueryResponseOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.includeMeta !== false) {
      writer.uint32(8).bool(message.includeMeta);
    }
    if (message.explain !== undefined) {
      ExplainOptions.encode(message.explain, writer.uint32(18).fork()).join();
    }
    if (message.encodingOptions !== undefined) {
      FeatureEncodingOptions.encode(message.encodingOptions, writer.uint32(26).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      OnlineQueryResponseOptions_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryResponseOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryResponseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.includeMeta = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.explain = ExplainOptions.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encodingOptions = FeatureEncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = OnlineQueryResponseOptions_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryResponseOptions {
    return {
      includeMeta: isSet(object.includeMeta) ? globalThis.Boolean(object.includeMeta) : false,
      explain: isSet(object.explain) ? ExplainOptions.fromJSON(object.explain) : undefined,
      encodingOptions: isSet(object.encodingOptions)
        ? FeatureEncodingOptions.fromJSON(object.encodingOptions)
        : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: OnlineQueryResponseOptions): unknown {
    const obj: any = {};
    if (message.includeMeta !== false) {
      obj.includeMeta = message.includeMeta;
    }
    if (message.explain !== undefined) {
      obj.explain = ExplainOptions.toJSON(message.explain);
    }
    if (message.encodingOptions !== undefined) {
      obj.encodingOptions = FeatureEncodingOptions.toJSON(message.encodingOptions);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseOnlineQueryResponseOptions_MetadataEntry(): OnlineQueryResponseOptions_MetadataEntry {
  return { key: "", value: "" };
}

export const OnlineQueryResponseOptions_MetadataEntry: MessageFns<OnlineQueryResponseOptions_MetadataEntry> = {
  encode(message: OnlineQueryResponseOptions_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryResponseOptions_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryResponseOptions_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryResponseOptions_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OnlineQueryResponseOptions_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseExplainOptions(): ExplainOptions {
  return {};
}

export const ExplainOptions: MessageFns<ExplainOptions> = {
  encode(_: ExplainOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplainOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplainOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExplainOptions {
    return {};
  },

  toJSON(_: ExplainOptions): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseFeatureEncodingOptions(): FeatureEncodingOptions {
  return { encodeStructsAsObjects: false };
}

export const FeatureEncodingOptions: MessageFns<FeatureEncodingOptions> = {
  encode(message: FeatureEncodingOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encodeStructsAsObjects !== false) {
      writer.uint32(8).bool(message.encodeStructsAsObjects);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureEncodingOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureEncodingOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.encodeStructsAsObjects = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureEncodingOptions {
    return {
      encodeStructsAsObjects: isSet(object.encodeStructsAsObjects)
        ? globalThis.Boolean(object.encodeStructsAsObjects)
        : false,
    };
  },

  toJSON(message: FeatureEncodingOptions): unknown {
    const obj: any = {};
    if (message.encodeStructsAsObjects !== false) {
      obj.encodeStructsAsObjects = message.encodeStructsAsObjects;
    }
    return obj;
  },
};

function createBaseOnlineQueryResponse(): OnlineQueryResponse {
  return { data: undefined, errors: [], responseMeta: undefined };
}

export const OnlineQueryResponse: MessageFns<OnlineQueryResponse> = {
  encode(message: OnlineQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      OnlineQueryResult.encode(message.data, writer.uint32(10).fork()).join();
    }
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.responseMeta !== undefined) {
      OnlineQueryMetadata.encode(message.responseMeta, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = OnlineQueryResult.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.responseMeta = OnlineQueryMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryResponse {
    return {
      data: isSet(object.data) ? OnlineQueryResult.fromJSON(object.data) : undefined,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
      responseMeta: isSet(object.responseMeta) ? OnlineQueryMetadata.fromJSON(object.responseMeta) : undefined,
    };
  },

  toJSON(message: OnlineQueryResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = OnlineQueryResult.toJSON(message.data);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    if (message.responseMeta !== undefined) {
      obj.responseMeta = OnlineQueryMetadata.toJSON(message.responseMeta);
    }
    return obj;
  },
};

function createBaseOnlineQueryBulkResponse(): OnlineQueryBulkResponse {
  return { scalarsData: new Uint8Array(0), groupsData: {}, errors: [], responseMeta: undefined };
}

export const OnlineQueryBulkResponse: MessageFns<OnlineQueryBulkResponse> = {
  encode(message: OnlineQueryBulkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scalarsData.length !== 0) {
      writer.uint32(10).bytes(message.scalarsData);
    }
    Object.entries(message.groupsData).forEach(([key, value]) => {
      OnlineQueryBulkResponse_GroupsDataEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.responseMeta !== undefined) {
      OnlineQueryMetadata.encode(message.responseMeta, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryBulkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryBulkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scalarsData = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = OnlineQueryBulkResponse_GroupsDataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.groupsData[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.responseMeta = OnlineQueryMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryBulkResponse {
    return {
      scalarsData: isSet(object.scalarsData) ? bytesFromBase64(object.scalarsData) : new Uint8Array(0),
      groupsData: isObject(object.groupsData)
        ? Object.entries(object.groupsData).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
      responseMeta: isSet(object.responseMeta) ? OnlineQueryMetadata.fromJSON(object.responseMeta) : undefined,
    };
  },

  toJSON(message: OnlineQueryBulkResponse): unknown {
    const obj: any = {};
    if (message.scalarsData.length !== 0) {
      obj.scalarsData = base64FromBytes(message.scalarsData);
    }
    if (message.groupsData) {
      const entries = Object.entries(message.groupsData);
      if (entries.length > 0) {
        obj.groupsData = {};
        entries.forEach(([k, v]) => {
          obj.groupsData[k] = base64FromBytes(v);
        });
      }
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    if (message.responseMeta !== undefined) {
      obj.responseMeta = OnlineQueryMetadata.toJSON(message.responseMeta);
    }
    return obj;
  },
};

function createBaseOnlineQueryBulkResponse_GroupsDataEntry(): OnlineQueryBulkResponse_GroupsDataEntry {
  return { key: "", value: new Uint8Array(0) };
}

export const OnlineQueryBulkResponse_GroupsDataEntry: MessageFns<OnlineQueryBulkResponse_GroupsDataEntry> = {
  encode(message: OnlineQueryBulkResponse_GroupsDataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryBulkResponse_GroupsDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryBulkResponse_GroupsDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryBulkResponse_GroupsDataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: OnlineQueryBulkResponse_GroupsDataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },
};

function createBaseGenericSingleResponse(): GenericSingleResponse {
  return { singleResponse: undefined, bulkResponse: undefined };
}

export const GenericSingleResponse: MessageFns<GenericSingleResponse> = {
  encode(message: GenericSingleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.singleResponse !== undefined) {
      OnlineQueryResponse.encode(message.singleResponse, writer.uint32(10).fork()).join();
    }
    if (message.bulkResponse !== undefined) {
      OnlineQueryBulkResponse.encode(message.bulkResponse, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericSingleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericSingleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.singleResponse = OnlineQueryResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bulkResponse = OnlineQueryBulkResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericSingleResponse {
    return {
      singleResponse: isSet(object.singleResponse) ? OnlineQueryResponse.fromJSON(object.singleResponse) : undefined,
      bulkResponse: isSet(object.bulkResponse) ? OnlineQueryBulkResponse.fromJSON(object.bulkResponse) : undefined,
    };
  },

  toJSON(message: GenericSingleResponse): unknown {
    const obj: any = {};
    if (message.singleResponse !== undefined) {
      obj.singleResponse = OnlineQueryResponse.toJSON(message.singleResponse);
    }
    if (message.bulkResponse !== undefined) {
      obj.bulkResponse = OnlineQueryBulkResponse.toJSON(message.bulkResponse);
    }
    return obj;
  },
};

function createBaseOnlineQueryMultiResponse(): OnlineQueryMultiResponse {
  return { responses: [], errors: [] };
}

export const OnlineQueryMultiResponse: MessageFns<OnlineQueryMultiResponse> = {
  encode(message: OnlineQueryMultiResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.responses) {
      GenericSingleResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryMultiResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryMultiResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.responses.push(GenericSingleResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryMultiResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => GenericSingleResponse.fromJSON(e))
        : [],
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
    };
  },

  toJSON(message: OnlineQueryMultiResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) => GenericSingleResponse.toJSON(e));
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    return obj;
  },
};

function createBaseOnlineQueryResult(): OnlineQueryResult {
  return { results: [] };
}

export const OnlineQueryResult: MessageFns<OnlineQueryResult> = {
  encode(message: OnlineQueryResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      FeatureResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(FeatureResult.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryResult {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => FeatureResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OnlineQueryResult): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => FeatureResult.toJSON(e));
    }
    return obj;
  },
};

function createBaseFeatureResult(): FeatureResult {
  return { field: "", pkey: undefined, value: undefined, error: undefined, ts: undefined, meta: undefined };
}

export const FeatureResult: MessageFns<FeatureResult> = {
  encode(message: FeatureResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.pkey !== undefined) {
      Value.encode(Value.wrap(message.pkey), writer.uint32(50).fork()).join();
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ChalkError.encode(message.error, writer.uint32(26).fork()).join();
    }
    if (message.ts !== undefined) {
      Timestamp.encode(toTimestamp(message.ts), writer.uint32(34).fork()).join();
    }
    if (message.meta !== undefined) {
      FeatureMeta.encode(message.meta, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pkey = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ChalkError.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.meta = FeatureMeta.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureResult {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      pkey: isSet(object?.pkey) ? object.pkey : undefined,
      value: isSet(object?.value) ? object.value : undefined,
      error: isSet(object.error) ? ChalkError.fromJSON(object.error) : undefined,
      ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
      meta: isSet(object.meta) ? FeatureMeta.fromJSON(object.meta) : undefined,
    };
  },

  toJSON(message: FeatureResult): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.pkey !== undefined) {
      obj.pkey = message.pkey;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.error !== undefined) {
      obj.error = ChalkError.toJSON(message.error);
    }
    if (message.ts !== undefined) {
      obj.ts = message.ts.toISOString();
    }
    if (message.meta !== undefined) {
      obj.meta = FeatureMeta.toJSON(message.meta);
    }
    return obj;
  },
};

function createBaseFeatureMeta(): FeatureMeta {
  return { chosenResolverFqn: "", cacheHit: false, primitiveType: "", version: 0 };
}

export const FeatureMeta: MessageFns<FeatureMeta> = {
  encode(message: FeatureMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chosenResolverFqn !== "") {
      writer.uint32(10).string(message.chosenResolverFqn);
    }
    if (message.cacheHit !== false) {
      writer.uint32(16).bool(message.cacheHit);
    }
    if (message.primitiveType !== "") {
      writer.uint32(26).string(message.primitiveType);
    }
    if (message.version !== 0) {
      writer.uint32(32).int64(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chosenResolverFqn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cacheHit = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.primitiveType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMeta {
    return {
      chosenResolverFqn: isSet(object.chosenResolverFqn) ? globalThis.String(object.chosenResolverFqn) : "",
      cacheHit: isSet(object.cacheHit) ? globalThis.Boolean(object.cacheHit) : false,
      primitiveType: isSet(object.primitiveType) ? globalThis.String(object.primitiveType) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: FeatureMeta): unknown {
    const obj: any = {};
    if (message.chosenResolverFqn !== "") {
      obj.chosenResolverFqn = message.chosenResolverFqn;
    }
    if (message.cacheHit !== false) {
      obj.cacheHit = message.cacheHit;
    }
    if (message.primitiveType !== "") {
      obj.primitiveType = message.primitiveType;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
};

function createBaseOnlineQueryMetadata(): OnlineQueryMetadata {
  return {
    executionDuration: undefined,
    deploymentId: "",
    environmentId: "",
    environmentName: "",
    queryId: "",
    queryTimestamp: undefined,
    queryHash: "",
    explainOutput: undefined,
    metadata: {},
    additionalMetadata: {},
  };
}

export const OnlineQueryMetadata: MessageFns<OnlineQueryMetadata> = {
  encode(message: OnlineQueryMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executionDuration !== undefined) {
      Duration.encode(message.executionDuration, writer.uint32(10).fork()).join();
    }
    if (message.deploymentId !== "") {
      writer.uint32(18).string(message.deploymentId);
    }
    if (message.environmentId !== "") {
      writer.uint32(26).string(message.environmentId);
    }
    if (message.environmentName !== "") {
      writer.uint32(34).string(message.environmentName);
    }
    if (message.queryId !== "") {
      writer.uint32(42).string(message.queryId);
    }
    if (message.queryTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.queryTimestamp), writer.uint32(50).fork()).join();
    }
    if (message.queryHash !== "") {
      writer.uint32(58).string(message.queryHash);
    }
    if (message.explainOutput !== undefined) {
      QueryExplainInfo.encode(message.explainOutput, writer.uint32(66).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      OnlineQueryMetadata_MetadataEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    Object.entries(message.additionalMetadata).forEach(([key, value]) => {
      if (value !== undefined) {
        OnlineQueryMetadata_AdditionalMetadataEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.executionDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.environmentName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.queryId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.queryTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.queryHash = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.explainOutput = QueryExplainInfo.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = OnlineQueryMetadata_MetadataEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.metadata[entry9.key] = entry9.value;
          }
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = OnlineQueryMetadata_AdditionalMetadataEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.additionalMetadata[entry10.key] = entry10.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryMetadata {
    return {
      executionDuration: isSet(object.executionDuration) ? Duration.fromJSON(object.executionDuration) : undefined,
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      environmentName: isSet(object.environmentName) ? globalThis.String(object.environmentName) : "",
      queryId: isSet(object.queryId) ? globalThis.String(object.queryId) : "",
      queryTimestamp: isSet(object.queryTimestamp) ? fromJsonTimestamp(object.queryTimestamp) : undefined,
      queryHash: isSet(object.queryHash) ? globalThis.String(object.queryHash) : "",
      explainOutput: isSet(object.explainOutput) ? QueryExplainInfo.fromJSON(object.explainOutput) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      additionalMetadata: isObject(object.additionalMetadata)
        ? Object.entries(object.additionalMetadata).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: OnlineQueryMetadata): unknown {
    const obj: any = {};
    if (message.executionDuration !== undefined) {
      obj.executionDuration = Duration.toJSON(message.executionDuration);
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.environmentName !== "") {
      obj.environmentName = message.environmentName;
    }
    if (message.queryId !== "") {
      obj.queryId = message.queryId;
    }
    if (message.queryTimestamp !== undefined) {
      obj.queryTimestamp = message.queryTimestamp.toISOString();
    }
    if (message.queryHash !== "") {
      obj.queryHash = message.queryHash;
    }
    if (message.explainOutput !== undefined) {
      obj.explainOutput = QueryExplainInfo.toJSON(message.explainOutput);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.additionalMetadata) {
      const entries = Object.entries(message.additionalMetadata);
      if (entries.length > 0) {
        obj.additionalMetadata = {};
        entries.forEach(([k, v]) => {
          obj.additionalMetadata[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseOnlineQueryMetadata_MetadataEntry(): OnlineQueryMetadata_MetadataEntry {
  return { key: "", value: "" };
}

export const OnlineQueryMetadata_MetadataEntry: MessageFns<OnlineQueryMetadata_MetadataEntry> = {
  encode(message: OnlineQueryMetadata_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryMetadata_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryMetadata_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryMetadata_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OnlineQueryMetadata_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseOnlineQueryMetadata_AdditionalMetadataEntry(): OnlineQueryMetadata_AdditionalMetadataEntry {
  return { key: "", value: undefined };
}

export const OnlineQueryMetadata_AdditionalMetadataEntry: MessageFns<OnlineQueryMetadata_AdditionalMetadataEntry> = {
  encode(
    message: OnlineQueryMetadata_AdditionalMetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineQueryMetadata_AdditionalMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineQueryMetadata_AdditionalMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineQueryMetadata_AdditionalMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: OnlineQueryMetadata_AdditionalMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseQueryExplainInfo(): QueryExplainInfo {
  return { planString: undefined };
}

export const QueryExplainInfo: MessageFns<QueryExplainInfo> = {
  encode(message: QueryExplainInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planString !== undefined) {
      writer.uint32(10).string(message.planString);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryExplainInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExplainInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.planString = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryExplainInfo {
    return { planString: isSet(object.planString) ? globalThis.String(object.planString) : undefined };
  },

  toJSON(message: QueryExplainInfo): unknown {
    const obj: any = {};
    if (message.planString !== undefined) {
      obj.planString = message.planString;
    }
    return obj;
  },
};

function createBaseUploadFeaturesBulkRequest(): UploadFeaturesBulkRequest {
  return { inputsFeather: new Uint8Array(0), bodyType: 0 };
}

export const UploadFeaturesBulkRequest: MessageFns<UploadFeaturesBulkRequest> = {
  encode(message: UploadFeaturesBulkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputsFeather.length !== 0) {
      writer.uint32(10).bytes(message.inputsFeather);
    }
    if (message.bodyType !== 0) {
      writer.uint32(56).int32(message.bodyType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFeaturesBulkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFeaturesBulkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inputsFeather = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bodyType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFeaturesBulkRequest {
    return {
      inputsFeather: isSet(object.inputsFeather) ? bytesFromBase64(object.inputsFeather) : new Uint8Array(0),
      bodyType: isSet(object.bodyType) ? featherBodyTypeFromJSON(object.bodyType) : 0,
    };
  },

  toJSON(message: UploadFeaturesBulkRequest): unknown {
    const obj: any = {};
    if (message.inputsFeather.length !== 0) {
      obj.inputsFeather = base64FromBytes(message.inputsFeather);
    }
    if (message.bodyType !== 0) {
      obj.bodyType = featherBodyTypeToJSON(message.bodyType);
    }
    return obj;
  },
};

function createBaseUploadFeaturesBulkResponse(): UploadFeaturesBulkResponse {
  return { errors: [] };
}

export const UploadFeaturesBulkResponse: MessageFns<UploadFeaturesBulkResponse> = {
  encode(message: UploadFeaturesBulkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFeaturesBulkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFeaturesBulkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFeaturesBulkResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
    };
  },

  toJSON(message: UploadFeaturesBulkResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    return obj;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
