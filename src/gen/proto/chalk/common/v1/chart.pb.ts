// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/common/v1/chart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.common.v1";

/** @deprecated */
export interface Series {
  points: number[];
  label: string;
  units: string;
}

/** @deprecated */
export interface Chart {
  title: string;
  series: Series[];
  xTimestampMs: number[];
}

function createBaseSeries(): Series {
  return { points: [], label: "", units: "" };
}

export const Series: MessageFns<Series> = {
  encode(message: Series, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.points) {
      writer.double(v);
    }
    writer.join();
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.units !== "") {
      writer.uint32(26).string(message.units);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Series {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 9) {
            message.points.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.points.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Series {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => globalThis.Number(e)) : [],
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
    };
  },

  toJSON(message: Series): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    return obj;
  },
};

function createBaseChart(): Chart {
  return { title: "", series: [], xTimestampMs: [] };
}

export const Chart: MessageFns<Chart> = {
  encode(message: Chart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      Series.encode(v!, writer.uint32(18).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.xTimestampMs) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Chart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(Series.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.xTimestampMs.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.xTimestampMs.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chart {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      series: globalThis.Array.isArray(object?.series) ? object.series.map((e: any) => Series.fromJSON(e)) : [],
      xTimestampMs: globalThis.Array.isArray(object?.xTimestampMs)
        ? object.xTimestampMs.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: Chart): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => Series.toJSON(e));
    }
    if (message.xTimestampMs?.length) {
      obj.xTimestampMs = message.xTimestampMs.map((e) => Math.round(e));
    }
    return obj;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
