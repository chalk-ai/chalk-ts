// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v2/feature_values_chart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart";

export const protobufPackage = "chalk.engine.v2";

export enum FeatureValueBaseWindowFunction {
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED = 0,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES = 1,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS = 2,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE = 3,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE = 4,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE = 5,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE = 6,
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS = 7,
  UNRECOGNIZED = -1,
}

export function featureValueBaseWindowFunctionFromJSON(object: any): FeatureValueBaseWindowFunction {
  switch (object) {
    case 0:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED;
    case 1:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES;
    case 2:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS;
    case 3:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE;
    case 4:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE;
    case 5:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE;
    case 6:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE;
    case 7:
    case "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS":
      return FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureValueBaseWindowFunction.UNRECOGNIZED;
  }
}

export function featureValueBaseWindowFunctionToJSON(object: FeatureValueBaseWindowFunction): string {
  switch (object) {
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE";
    case FeatureValueBaseWindowFunction.FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS:
      return "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS";
    case FeatureValueBaseWindowFunction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureValueGroupBy {
  FEATURE_VALUE_GROUP_BY_UNSPECIFIED = 0,
  /** FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE - Approximately ordered by cardinality / specificity */
  FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE = 1,
  FEATURE_VALUE_GROUP_BY_PRIMARY_KEY = 2,
  FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID = 3,
  FEATURE_VALUE_GROUP_BY_RESOLVER = 4,
  FEATURE_VALUE_GROUP_BY_OPERATION_KIND = 5,
  FEATURE_VALUE_GROUP_BY_OPERATION_ID = 6,
  FEATURE_VALUE_GROUP_BY_FEATURE_VERSION = 7,
  UNRECOGNIZED = -1,
}

export function featureValueGroupByFromJSON(object: any): FeatureValueGroupBy {
  switch (object) {
    case 0:
    case "FEATURE_VALUE_GROUP_BY_UNSPECIFIED":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_UNSPECIFIED;
    case 1:
    case "FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE;
    case 2:
    case "FEATURE_VALUE_GROUP_BY_PRIMARY_KEY":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_PRIMARY_KEY;
    case 3:
    case "FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID;
    case 4:
    case "FEATURE_VALUE_GROUP_BY_RESOLVER":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_RESOLVER;
    case 5:
    case "FEATURE_VALUE_GROUP_BY_OPERATION_KIND":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_OPERATION_KIND;
    case 6:
    case "FEATURE_VALUE_GROUP_BY_OPERATION_ID":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_OPERATION_ID;
    case 7:
    case "FEATURE_VALUE_GROUP_BY_FEATURE_VERSION":
      return FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_FEATURE_VERSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureValueGroupBy.UNRECOGNIZED;
  }
}

export function featureValueGroupByToJSON(object: FeatureValueGroupBy): string {
  switch (object) {
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_UNSPECIFIED:
      return "FEATURE_VALUE_GROUP_BY_UNSPECIFIED";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE:
      return "FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_PRIMARY_KEY:
      return "FEATURE_VALUE_GROUP_BY_PRIMARY_KEY";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID:
      return "FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_RESOLVER:
      return "FEATURE_VALUE_GROUP_BY_RESOLVER";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_OPERATION_KIND:
      return "FEATURE_VALUE_GROUP_BY_OPERATION_KIND";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_OPERATION_ID:
      return "FEATURE_VALUE_GROUP_BY_OPERATION_ID";
    case FeatureValueGroupBy.FEATURE_VALUE_GROUP_BY_FEATURE_VERSION:
      return "FEATURE_VALUE_GROUP_BY_FEATURE_VERSION";
    case FeatureValueGroupBy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeatureValueTimeSeries {
  FEATURE_VALUE_TIME_SERIES_UNSPECIFIED = 0,
  FEATURE_VALUE_TIME_SERIES_INSERTED_AT = 1,
  FEATURE_VALUE_TIME_SERIES_OBSERVED_AT = 2,
  UNRECOGNIZED = -1,
}

export function featureValueTimeSeriesFromJSON(object: any): FeatureValueTimeSeries {
  switch (object) {
    case 0:
    case "FEATURE_VALUE_TIME_SERIES_UNSPECIFIED":
      return FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_UNSPECIFIED;
    case 1:
    case "FEATURE_VALUE_TIME_SERIES_INSERTED_AT":
      return FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_INSERTED_AT;
    case 2:
    case "FEATURE_VALUE_TIME_SERIES_OBSERVED_AT":
      return FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_OBSERVED_AT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureValueTimeSeries.UNRECOGNIZED;
  }
}

export function featureValueTimeSeriesToJSON(object: FeatureValueTimeSeries): string {
  switch (object) {
    case FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_UNSPECIFIED:
      return "FEATURE_VALUE_TIME_SERIES_UNSPECIFIED";
    case FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_INSERTED_AT:
      return "FEATURE_VALUE_TIME_SERIES_INSERTED_AT";
    case FeatureValueTimeSeries.FEATURE_VALUE_TIME_SERIES_OBSERVED_AT:
      return "FEATURE_VALUE_TIME_SERIES_OBSERVED_AT";
    case FeatureValueTimeSeries.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeatureValuePercentileWindowFunction {
  /** Must be a value between 0 and 100. */
  percentile: number;
}

export interface FeatureValueSeries {
  featureFqn: string;
  /** If the user passes in a series title, uses that. Otherwise, will compose a title based on the fqn and the function used */
  seriesTitle?: string | undefined;
  baseWindowFunction?: FeatureValueBaseWindowFunction | undefined;
  percentileWindowFunction?: FeatureValuePercentileWindowFunction | undefined;
}

export interface GetFeatureValuesTimeSeriesChartRequest {
  title?: string | undefined;
  series: FeatureValueSeries[];
  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
   * For JSON format, this is a string `${duration_in_seconds}s`
   */
  windowPeriod: Duration | undefined;
  startTimestampInclusive:
    | Date
    | undefined;
  /** If not provided, will assume current time is the ending time */
  endTimestampExclusive?:
    | Date
    | undefined;
  /** The dimension to use as the time series axis. Defaults to inserted_at if not specified */
  timeSeries?:
    | FeatureValueTimeSeries
    | undefined;
  /** The group bys to apply to this chart. Multiple group bys may produce high #'s of axes. */
  groupBy: FeatureValueGroupBy[];
  /**
   * The maximum number of series produced by the group by.
   * Important because some group bys are high cardinality (ex. value)
   */
  groupBySeriesLimit?: number | undefined;
}

export interface GetFeatureValuesTimeSeriesChartResponse {
  chart: DenseTimeSeriesChart | undefined;
}

function createBaseFeatureValuePercentileWindowFunction(): FeatureValuePercentileWindowFunction {
  return { percentile: 0 };
}

export const FeatureValuePercentileWindowFunction: MessageFns<FeatureValuePercentileWindowFunction> = {
  encode(message: FeatureValuePercentileWindowFunction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percentile !== 0) {
      writer.uint32(9).double(message.percentile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValuePercentileWindowFunction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValuePercentileWindowFunction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.percentile = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValuePercentileWindowFunction {
    return { percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0 };
  },

  toJSON(message: FeatureValuePercentileWindowFunction): unknown {
    const obj: any = {};
    if (message.percentile !== 0) {
      obj.percentile = message.percentile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureValuePercentileWindowFunction>, I>>(
    base?: I,
  ): FeatureValuePercentileWindowFunction {
    return FeatureValuePercentileWindowFunction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureValuePercentileWindowFunction>, I>>(
    object: I,
  ): FeatureValuePercentileWindowFunction {
    const message = createBaseFeatureValuePercentileWindowFunction();
    message.percentile = object.percentile ?? 0;
    return message;
  },
};

function createBaseFeatureValueSeries(): FeatureValueSeries {
  return { featureFqn: "", seriesTitle: undefined, baseWindowFunction: undefined, percentileWindowFunction: undefined };
}

export const FeatureValueSeries: MessageFns<FeatureValueSeries> = {
  encode(message: FeatureValueSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureFqn !== "") {
      writer.uint32(10).string(message.featureFqn);
    }
    if (message.seriesTitle !== undefined) {
      writer.uint32(18).string(message.seriesTitle);
    }
    if (message.baseWindowFunction !== undefined) {
      writer.uint32(24).int32(message.baseWindowFunction);
    }
    if (message.percentileWindowFunction !== undefined) {
      FeatureValuePercentileWindowFunction.encode(message.percentileWindowFunction, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValueSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValueSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.featureFqn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seriesTitle = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.baseWindowFunction = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.percentileWindowFunction = FeatureValuePercentileWindowFunction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValueSeries {
    return {
      featureFqn: isSet(object.featureFqn) ? globalThis.String(object.featureFqn) : "",
      seriesTitle: isSet(object.seriesTitle) ? globalThis.String(object.seriesTitle) : undefined,
      baseWindowFunction: isSet(object.baseWindowFunction)
        ? featureValueBaseWindowFunctionFromJSON(object.baseWindowFunction)
        : undefined,
      percentileWindowFunction: isSet(object.percentileWindowFunction)
        ? FeatureValuePercentileWindowFunction.fromJSON(object.percentileWindowFunction)
        : undefined,
    };
  },

  toJSON(message: FeatureValueSeries): unknown {
    const obj: any = {};
    if (message.featureFqn !== "") {
      obj.featureFqn = message.featureFqn;
    }
    if (message.seriesTitle !== undefined) {
      obj.seriesTitle = message.seriesTitle;
    }
    if (message.baseWindowFunction !== undefined) {
      obj.baseWindowFunction = featureValueBaseWindowFunctionToJSON(message.baseWindowFunction);
    }
    if (message.percentileWindowFunction !== undefined) {
      obj.percentileWindowFunction = FeatureValuePercentileWindowFunction.toJSON(message.percentileWindowFunction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureValueSeries>, I>>(base?: I): FeatureValueSeries {
    return FeatureValueSeries.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureValueSeries>, I>>(object: I): FeatureValueSeries {
    const message = createBaseFeatureValueSeries();
    message.featureFqn = object.featureFqn ?? "";
    message.seriesTitle = object.seriesTitle ?? undefined;
    message.baseWindowFunction = object.baseWindowFunction ?? undefined;
    message.percentileWindowFunction =
      (object.percentileWindowFunction !== undefined && object.percentileWindowFunction !== null)
        ? FeatureValuePercentileWindowFunction.fromPartial(object.percentileWindowFunction)
        : undefined;
    return message;
  },
};

function createBaseGetFeatureValuesTimeSeriesChartRequest(): GetFeatureValuesTimeSeriesChartRequest {
  return {
    title: undefined,
    series: [],
    windowPeriod: undefined,
    startTimestampInclusive: undefined,
    endTimestampExclusive: undefined,
    timeSeries: undefined,
    groupBy: [],
    groupBySeriesLimit: undefined,
  };
}

export const GetFeatureValuesTimeSeriesChartRequest: MessageFns<GetFeatureValuesTimeSeriesChartRequest> = {
  encode(message: GetFeatureValuesTimeSeriesChartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      FeatureValueSeries.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(26).fork()).join();
    }
    if (message.startTimestampInclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.startTimestampInclusive), writer.uint32(34).fork()).join();
    }
    if (message.endTimestampExclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.endTimestampExclusive), writer.uint32(42).fork()).join();
    }
    if (message.timeSeries !== undefined) {
      writer.uint32(48).int32(message.timeSeries);
    }
    writer.uint32(58).fork();
    for (const v of message.groupBy) {
      writer.int32(v);
    }
    writer.join();
    if (message.groupBySeriesLimit !== undefined) {
      writer.uint32(64).int32(message.groupBySeriesLimit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureValuesTimeSeriesChartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureValuesTimeSeriesChartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(FeatureValueSeries.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startTimestampInclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endTimestampExclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timeSeries = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.groupBy.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.groupBy.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.groupBySeriesLimit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureValuesTimeSeriesChartRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      series: globalThis.Array.isArray(object?.series)
        ? object.series.map((e: any) => FeatureValueSeries.fromJSON(e))
        : [],
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
      startTimestampInclusive: isSet(object.startTimestampInclusive)
        ? fromJsonTimestamp(object.startTimestampInclusive)
        : undefined,
      endTimestampExclusive: isSet(object.endTimestampExclusive)
        ? fromJsonTimestamp(object.endTimestampExclusive)
        : undefined,
      timeSeries: isSet(object.timeSeries) ? featureValueTimeSeriesFromJSON(object.timeSeries) : undefined,
      groupBy: globalThis.Array.isArray(object?.groupBy)
        ? object.groupBy.map((e: any) => featureValueGroupByFromJSON(e))
        : [],
      groupBySeriesLimit: isSet(object.groupBySeriesLimit) ? globalThis.Number(object.groupBySeriesLimit) : undefined,
    };
  },

  toJSON(message: GetFeatureValuesTimeSeriesChartRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => FeatureValueSeries.toJSON(e));
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    if (message.startTimestampInclusive !== undefined) {
      obj.startTimestampInclusive = message.startTimestampInclusive.toISOString();
    }
    if (message.endTimestampExclusive !== undefined) {
      obj.endTimestampExclusive = message.endTimestampExclusive.toISOString();
    }
    if (message.timeSeries !== undefined) {
      obj.timeSeries = featureValueTimeSeriesToJSON(message.timeSeries);
    }
    if (message.groupBy?.length) {
      obj.groupBy = message.groupBy.map((e) => featureValueGroupByToJSON(e));
    }
    if (message.groupBySeriesLimit !== undefined) {
      obj.groupBySeriesLimit = Math.round(message.groupBySeriesLimit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeatureValuesTimeSeriesChartRequest>, I>>(
    base?: I,
  ): GetFeatureValuesTimeSeriesChartRequest {
    return GetFeatureValuesTimeSeriesChartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeatureValuesTimeSeriesChartRequest>, I>>(
    object: I,
  ): GetFeatureValuesTimeSeriesChartRequest {
    const message = createBaseGetFeatureValuesTimeSeriesChartRequest();
    message.title = object.title ?? undefined;
    message.series = object.series?.map((e) => FeatureValueSeries.fromPartial(e)) || [];
    message.windowPeriod = (object.windowPeriod !== undefined && object.windowPeriod !== null)
      ? Duration.fromPartial(object.windowPeriod)
      : undefined;
    message.startTimestampInclusive = object.startTimestampInclusive ?? undefined;
    message.endTimestampExclusive = object.endTimestampExclusive ?? undefined;
    message.timeSeries = object.timeSeries ?? undefined;
    message.groupBy = object.groupBy?.map((e) => e) || [];
    message.groupBySeriesLimit = object.groupBySeriesLimit ?? undefined;
    return message;
  },
};

function createBaseGetFeatureValuesTimeSeriesChartResponse(): GetFeatureValuesTimeSeriesChartResponse {
  return { chart: undefined };
}

export const GetFeatureValuesTimeSeriesChartResponse: MessageFns<GetFeatureValuesTimeSeriesChartResponse> = {
  encode(message: GetFeatureValuesTimeSeriesChartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chart !== undefined) {
      DenseTimeSeriesChart.encode(message.chart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureValuesTimeSeriesChartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureValuesTimeSeriesChartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chart = DenseTimeSeriesChart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureValuesTimeSeriesChartResponse {
    return { chart: isSet(object.chart) ? DenseTimeSeriesChart.fromJSON(object.chart) : undefined };
  },

  toJSON(message: GetFeatureValuesTimeSeriesChartResponse): unknown {
    const obj: any = {};
    if (message.chart !== undefined) {
      obj.chart = DenseTimeSeriesChart.toJSON(message.chart);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeatureValuesTimeSeriesChartResponse>, I>>(
    base?: I,
  ): GetFeatureValuesTimeSeriesChartResponse {
    return GetFeatureValuesTimeSeriesChartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeatureValuesTimeSeriesChartResponse>, I>>(
    object: I,
  ): GetFeatureValuesTimeSeriesChartResponse {
    const message = createBaseGetFeatureValuesTimeSeriesChartResponse();
    message.chart = (object.chart !== undefined && object.chart !== null)
      ? DenseTimeSeriesChart.fromPartial(object.chart)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
