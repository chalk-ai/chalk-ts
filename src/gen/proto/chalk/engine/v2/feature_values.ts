// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v2/feature_values.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { ScalarValue } from "../../arrow/v1/arrow";
import { OperationKind, operationKindFromJSON, operationKindToJSON } from "../../common/v1/operation_kind";

export const protobufPackage = "chalk.engine.v2";

export enum FeatureValuesTimestampType {
  FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED = 0,
  FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT = 1,
  FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT = 2,
  UNRECOGNIZED = -1,
}

export function featureValuesTimestampTypeFromJSON(object: any): FeatureValuesTimestampType {
  switch (object) {
    case 0:
    case "FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED":
      return FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED;
    case 1:
    case "FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT":
      return FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT;
    case 2:
    case "FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT":
      return FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureValuesTimestampType.UNRECOGNIZED;
  }
}

export function featureValuesTimestampTypeToJSON(object: FeatureValuesTimestampType): string {
  switch (object) {
    case FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED:
      return "FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED";
    case FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT:
      return "FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT";
    case FeatureValuesTimestampType.FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT:
      return "FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT";
    case FeatureValuesTimestampType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeatureValueFilters {
  resolverFqn: string[];
  deploymentId: string[];
  operationId: string[];
  operationKind: OperationKind[];
  primaryKey: ScalarValue[];
}

/**
 * Internal protobuf representing a next page token. Contains the operation id and the query timestamp for the last row
 * in the previous batch. Results are sorted query timestamp, then by operation id, then observation id lexicographically,
 * so this is all we need to know where the next page begins
 */
export interface GetFeatureValuesPageToken {
  timestampHwm: Date | undefined;
  operationIdHwm: string;
  observationIdHwm: string;
}

export interface GetFeatureValuesRequest {
  featureFqn: string;
  /**
   * Along which time dimension to query features by.
   * Time ranges can either be specified along inserted_at or observed_at
   * Optional. If unspecified, default to inserted_at
   */
  timestampType: FeatureValuesTimestampType;
  lowerBoundInclusive: Date | undefined;
  upperBoundExclusive:
    | Date
    | undefined;
  /** optional filters that can be specified to filter down feature rows returned */
  filters:
    | FeatureValueFilters
    | undefined;
  /** The (maximum) page size for results. If zero, then the server picks. */
  pageSize: number;
  /**
   * When dealing with paginated responses, the next token can be provided to get the next page of responses
   * The query parameters above must be exactly the same when using a next token
   * This is opaque to the clients, but in practice, it is an encoding of the GetFeatureValuesPageToken
   * if unspecified, retrieve the zeroth page.
   */
  pageToken: string;
}

export interface GetFeatureValuesResponse {
  /** If non-empty, call this endpoint again, with this next token to get the next page of responses. */
  nextPageToken: string;
  /** The number of results returned */
  totalSize: number;
  parquet?: Uint8Array | undefined;
}

function createBaseFeatureValueFilters(): FeatureValueFilters {
  return { resolverFqn: [], deploymentId: [], operationId: [], operationKind: [], primaryKey: [] };
}

export const FeatureValueFilters: MessageFns<FeatureValueFilters> = {
  encode(message: FeatureValueFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resolverFqn) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.deploymentId) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.operationId) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.operationKind) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.primaryKey) {
      ScalarValue.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValueFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValueFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resolverFqn.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deploymentId.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operationId.push(reader.string());
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.operationKind.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operationKind.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.primaryKey.push(ScalarValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValueFilters {
    return {
      resolverFqn: globalThis.Array.isArray(object?.resolverFqn)
        ? object.resolverFqn.map((e: any) => globalThis.String(e))
        : [],
      deploymentId: globalThis.Array.isArray(object?.deploymentId)
        ? object.deploymentId.map((e: any) => globalThis.String(e))
        : [],
      operationId: globalThis.Array.isArray(object?.operationId)
        ? object.operationId.map((e: any) => globalThis.String(e))
        : [],
      operationKind: globalThis.Array.isArray(object?.operationKind)
        ? object.operationKind.map((e: any) => operationKindFromJSON(e))
        : [],
      primaryKey: globalThis.Array.isArray(object?.primaryKey)
        ? object.primaryKey.map((e: any) => ScalarValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FeatureValueFilters): unknown {
    const obj: any = {};
    if (message.resolverFqn?.length) {
      obj.resolverFqn = message.resolverFqn;
    }
    if (message.deploymentId?.length) {
      obj.deploymentId = message.deploymentId;
    }
    if (message.operationId?.length) {
      obj.operationId = message.operationId;
    }
    if (message.operationKind?.length) {
      obj.operationKind = message.operationKind.map((e) => operationKindToJSON(e));
    }
    if (message.primaryKey?.length) {
      obj.primaryKey = message.primaryKey.map((e) => ScalarValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureValueFilters>, I>>(base?: I): FeatureValueFilters {
    return FeatureValueFilters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureValueFilters>, I>>(object: I): FeatureValueFilters {
    const message = createBaseFeatureValueFilters();
    message.resolverFqn = object.resolverFqn?.map((e) => e) || [];
    message.deploymentId = object.deploymentId?.map((e) => e) || [];
    message.operationId = object.operationId?.map((e) => e) || [];
    message.operationKind = object.operationKind?.map((e) => e) || [];
    message.primaryKey = object.primaryKey?.map((e) => ScalarValue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetFeatureValuesPageToken(): GetFeatureValuesPageToken {
  return { timestampHwm: undefined, operationIdHwm: "", observationIdHwm: "" };
}

export const GetFeatureValuesPageToken: MessageFns<GetFeatureValuesPageToken> = {
  encode(message: GetFeatureValuesPageToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestampHwm !== undefined) {
      Timestamp.encode(toTimestamp(message.timestampHwm), writer.uint32(10).fork()).join();
    }
    if (message.operationIdHwm !== "") {
      writer.uint32(18).string(message.operationIdHwm);
    }
    if (message.observationIdHwm !== "") {
      writer.uint32(26).string(message.observationIdHwm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureValuesPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureValuesPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestampHwm = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operationIdHwm = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.observationIdHwm = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureValuesPageToken {
    return {
      timestampHwm: isSet(object.timestampHwm) ? fromJsonTimestamp(object.timestampHwm) : undefined,
      operationIdHwm: isSet(object.operationIdHwm) ? globalThis.String(object.operationIdHwm) : "",
      observationIdHwm: isSet(object.observationIdHwm) ? globalThis.String(object.observationIdHwm) : "",
    };
  },

  toJSON(message: GetFeatureValuesPageToken): unknown {
    const obj: any = {};
    if (message.timestampHwm !== undefined) {
      obj.timestampHwm = message.timestampHwm.toISOString();
    }
    if (message.operationIdHwm !== "") {
      obj.operationIdHwm = message.operationIdHwm;
    }
    if (message.observationIdHwm !== "") {
      obj.observationIdHwm = message.observationIdHwm;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeatureValuesPageToken>, I>>(base?: I): GetFeatureValuesPageToken {
    return GetFeatureValuesPageToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeatureValuesPageToken>, I>>(object: I): GetFeatureValuesPageToken {
    const message = createBaseGetFeatureValuesPageToken();
    message.timestampHwm = object.timestampHwm ?? undefined;
    message.operationIdHwm = object.operationIdHwm ?? "";
    message.observationIdHwm = object.observationIdHwm ?? "";
    return message;
  },
};

function createBaseGetFeatureValuesRequest(): GetFeatureValuesRequest {
  return {
    featureFqn: "",
    timestampType: 0,
    lowerBoundInclusive: undefined,
    upperBoundExclusive: undefined,
    filters: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const GetFeatureValuesRequest: MessageFns<GetFeatureValuesRequest> = {
  encode(message: GetFeatureValuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureFqn !== "") {
      writer.uint32(10).string(message.featureFqn);
    }
    if (message.timestampType !== 0) {
      writer.uint32(16).int32(message.timestampType);
    }
    if (message.lowerBoundInclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.lowerBoundInclusive), writer.uint32(26).fork()).join();
    }
    if (message.upperBoundExclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.upperBoundExclusive), writer.uint32(34).fork()).join();
    }
    if (message.filters !== undefined) {
      FeatureValueFilters.encode(message.filters, writer.uint32(42).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(48).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureValuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.featureFqn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestampType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lowerBoundInclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.upperBoundExclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.filters = FeatureValueFilters.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureValuesRequest {
    return {
      featureFqn: isSet(object.featureFqn) ? globalThis.String(object.featureFqn) : "",
      timestampType: isSet(object.timestampType) ? featureValuesTimestampTypeFromJSON(object.timestampType) : 0,
      lowerBoundInclusive: isSet(object.lowerBoundInclusive)
        ? fromJsonTimestamp(object.lowerBoundInclusive)
        : undefined,
      upperBoundExclusive: isSet(object.upperBoundExclusive)
        ? fromJsonTimestamp(object.upperBoundExclusive)
        : undefined,
      filters: isSet(object.filters) ? FeatureValueFilters.fromJSON(object.filters) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetFeatureValuesRequest): unknown {
    const obj: any = {};
    if (message.featureFqn !== "") {
      obj.featureFqn = message.featureFqn;
    }
    if (message.timestampType !== 0) {
      obj.timestampType = featureValuesTimestampTypeToJSON(message.timestampType);
    }
    if (message.lowerBoundInclusive !== undefined) {
      obj.lowerBoundInclusive = message.lowerBoundInclusive.toISOString();
    }
    if (message.upperBoundExclusive !== undefined) {
      obj.upperBoundExclusive = message.upperBoundExclusive.toISOString();
    }
    if (message.filters !== undefined) {
      obj.filters = FeatureValueFilters.toJSON(message.filters);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeatureValuesRequest>, I>>(base?: I): GetFeatureValuesRequest {
    return GetFeatureValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeatureValuesRequest>, I>>(object: I): GetFeatureValuesRequest {
    const message = createBaseGetFeatureValuesRequest();
    message.featureFqn = object.featureFqn ?? "";
    message.timestampType = object.timestampType ?? 0;
    message.lowerBoundInclusive = object.lowerBoundInclusive ?? undefined;
    message.upperBoundExclusive = object.upperBoundExclusive ?? undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? FeatureValueFilters.fromPartial(object.filters)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGetFeatureValuesResponse(): GetFeatureValuesResponse {
  return { nextPageToken: "", totalSize: 0, parquet: undefined };
}

export const GetFeatureValuesResponse: MessageFns<GetFeatureValuesResponse> = {
  encode(message: GetFeatureValuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextPageToken !== "") {
      writer.uint32(10).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(16).int32(message.totalSize);
    }
    if (message.parquet !== undefined) {
      writer.uint32(26).bytes(message.parquet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureValuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parquet = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureValuesResponse {
    return {
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
      parquet: isSet(object.parquet) ? bytesFromBase64(object.parquet) : undefined,
    };
  },

  toJSON(message: GetFeatureValuesResponse): unknown {
    const obj: any = {};
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    if (message.parquet !== undefined) {
      obj.parquet = base64FromBytes(message.parquet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeatureValuesResponse>, I>>(base?: I): GetFeatureValuesResponse {
    return GetFeatureValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeatureValuesResponse>, I>>(object: I): GetFeatureValuesResponse {
    const message = createBaseGetFeatureValuesResponse();
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    message.parquet = object.parquet ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
