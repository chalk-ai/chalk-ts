// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v2/query_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { OperationKind, operationKindFromJSON, operationKindToJSON } from "../../common/v1/operation_kind";
import { QueryStatus, queryStatusFromJSON, queryStatusToJSON } from "../../common/v1/query_status";

export const protobufPackage = "chalk.engine.v2";

export interface VersionedQueryName {
  queryName: string;
  queryNameVersion?: string | undefined;
}

export interface QueryLogFilters {
  /**
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   */
  operationId: string[];
  operationKind: OperationKind[];
  queryName: VersionedQueryName[];
  agentId: string[];
  branchName: string[];
  correlationId: string[];
  traceId: string[];
  queryPlanId: string[];
  deploymentId: string[];
  queryStatus: QueryStatus[];
  metaQueryHash: string[];
}

/**
 * Internal protobuf representing a next page token. Contains the operation id and the query timestamp for the last row
 * in the previous batch. Results are sorted query timestamp then by operation id lexicographically, so this is all we
 * need to know where the next page begins
 */
export interface GetQueryLogEntriesPageToken {
  operationIdHwm: string;
  queryTimestampHwm: Date | undefined;
}

export interface GetQueryLogEntriesRequest {
  /**
   * The query log table is partitioned / sorted by timestamp, so we must provide these
   * for the queries to be efficient, even if we are querying for a single operation id
   */
  queryTimestampLowerBoundInclusive:
    | Date
    | undefined;
  /** If the upper bound is omitted, then the lower bound will be used as an "equality" filter */
  queryTimestampUpperBoundExclusive?:
    | Date
    | undefined;
  /** Any filters for searching the query log. See the QueryLogFilters message above */
  filters:
    | QueryLogFilters
    | undefined;
  /** The (maximum) page size. If zero, the server gets to choose. */
  pageSize: number;
  /**
   * When dealing with paginated responses, the next token can be provided to get the next page of responses
   * The query parameters above must be exactly the same when using a next token
   * This is opaque to the clients, but in practice, it is an encoding of the GetQueryLogEntriesPageToken
   */
  pageToken: string;
}

/** This is a proto representation of the SQL QueryLogModel. */
export interface QueryLogEntry {
  operationId: string;
  environmentId: string;
  deploymentId: string;
  operationKind: OperationKind;
  queryTimestamp: Date | undefined;
  executionStartedAt: Date | undefined;
  executionFinishedAt: Date | undefined;
  queryStatus: QueryStatus;
  queryName: string;
  queryNameVersion: string;
  agentId: string;
  branchName: string;
  correlationId: string;
  traceId: string;
  queryPlanId: string;
  valueTables: string[];
  metaQueryHash: string;
}

export interface GetQueryLogEntriesResponse {
  entries: QueryLogEntry[];
  /** If the next_page_token is non-empty, then there may be more rows, even if the entries are empty. */
  nextPageToken: string;
}

function createBaseVersionedQueryName(): VersionedQueryName {
  return { queryName: "", queryNameVersion: undefined };
}

export const VersionedQueryName: MessageFns<VersionedQueryName> = {
  encode(message: VersionedQueryName, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryName !== "") {
      writer.uint32(10).string(message.queryName);
    }
    if (message.queryNameVersion !== undefined) {
      writer.uint32(18).string(message.queryNameVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionedQueryName {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionedQueryName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queryName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.queryNameVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionedQueryName {
    return {
      queryName: isSet(object.queryName) ? globalThis.String(object.queryName) : "",
      queryNameVersion: isSet(object.queryNameVersion) ? globalThis.String(object.queryNameVersion) : undefined,
    };
  },

  toJSON(message: VersionedQueryName): unknown {
    const obj: any = {};
    if (message.queryName !== "") {
      obj.queryName = message.queryName;
    }
    if (message.queryNameVersion !== undefined) {
      obj.queryNameVersion = message.queryNameVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionedQueryName>, I>>(base?: I): VersionedQueryName {
    return VersionedQueryName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionedQueryName>, I>>(object: I): VersionedQueryName {
    const message = createBaseVersionedQueryName();
    message.queryName = object.queryName ?? "";
    message.queryNameVersion = object.queryNameVersion ?? undefined;
    return message;
  },
};

function createBaseQueryLogFilters(): QueryLogFilters {
  return {
    operationId: [],
    operationKind: [],
    queryName: [],
    agentId: [],
    branchName: [],
    correlationId: [],
    traceId: [],
    queryPlanId: [],
    deploymentId: [],
    queryStatus: [],
    metaQueryHash: [],
  };
}

export const QueryLogFilters: MessageFns<QueryLogFilters> = {
  encode(message: QueryLogFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operationId) {
      writer.uint32(10).string(v!);
    }
    writer.uint32(18).fork();
    for (const v of message.operationKind) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.queryName) {
      VersionedQueryName.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.agentId) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.branchName) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.correlationId) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.traceId) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.queryPlanId) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.deploymentId) {
      writer.uint32(82).string(v!);
    }
    writer.uint32(90).fork();
    for (const v of message.queryStatus) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.metaQueryHash) {
      writer.uint32(98).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLogFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLogFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId.push(reader.string());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.operationKind.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operationKind.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.queryName.push(VersionedQueryName.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.agentId.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.branchName.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.correlationId.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.traceId.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.queryPlanId.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deploymentId.push(reader.string());
          continue;
        }
        case 11: {
          if (tag === 88) {
            message.queryStatus.push(reader.int32() as any);

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.queryStatus.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metaQueryHash.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLogFilters {
    return {
      operationId: globalThis.Array.isArray(object?.operationId)
        ? object.operationId.map((e: any) => globalThis.String(e))
        : [],
      operationKind: globalThis.Array.isArray(object?.operationKind)
        ? object.operationKind.map((e: any) => operationKindFromJSON(e))
        : [],
      queryName: globalThis.Array.isArray(object?.queryName)
        ? object.queryName.map((e: any) => VersionedQueryName.fromJSON(e))
        : [],
      agentId: globalThis.Array.isArray(object?.agentId) ? object.agentId.map((e: any) => globalThis.String(e)) : [],
      branchName: globalThis.Array.isArray(object?.branchName)
        ? object.branchName.map((e: any) => globalThis.String(e))
        : [],
      correlationId: globalThis.Array.isArray(object?.correlationId)
        ? object.correlationId.map((e: any) => globalThis.String(e))
        : [],
      traceId: globalThis.Array.isArray(object?.traceId)
        ? object.traceId.map((e: any) => globalThis.String(e))
        : [],
      queryPlanId: globalThis.Array.isArray(object?.queryPlanId)
        ? object.queryPlanId.map((e: any) => globalThis.String(e))
        : [],
      deploymentId: globalThis.Array.isArray(object?.deploymentId)
        ? object.deploymentId.map((e: any) => globalThis.String(e))
        : [],
      queryStatus: globalThis.Array.isArray(object?.queryStatus)
        ? object.queryStatus.map((e: any) => queryStatusFromJSON(e))
        : [],
      metaQueryHash: globalThis.Array.isArray(object?.metaQueryHash)
        ? object.metaQueryHash.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryLogFilters): unknown {
    const obj: any = {};
    if (message.operationId?.length) {
      obj.operationId = message.operationId;
    }
    if (message.operationKind?.length) {
      obj.operationKind = message.operationKind.map((e) => operationKindToJSON(e));
    }
    if (message.queryName?.length) {
      obj.queryName = message.queryName.map((e) => VersionedQueryName.toJSON(e));
    }
    if (message.agentId?.length) {
      obj.agentId = message.agentId;
    }
    if (message.branchName?.length) {
      obj.branchName = message.branchName;
    }
    if (message.correlationId?.length) {
      obj.correlationId = message.correlationId;
    }
    if (message.traceId?.length) {
      obj.traceId = message.traceId;
    }
    if (message.queryPlanId?.length) {
      obj.queryPlanId = message.queryPlanId;
    }
    if (message.deploymentId?.length) {
      obj.deploymentId = message.deploymentId;
    }
    if (message.queryStatus?.length) {
      obj.queryStatus = message.queryStatus.map((e) => queryStatusToJSON(e));
    }
    if (message.metaQueryHash?.length) {
      obj.metaQueryHash = message.metaQueryHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLogFilters>, I>>(base?: I): QueryLogFilters {
    return QueryLogFilters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLogFilters>, I>>(object: I): QueryLogFilters {
    const message = createBaseQueryLogFilters();
    message.operationId = object.operationId?.map((e) => e) || [];
    message.operationKind = object.operationKind?.map((e) => e) || [];
    message.queryName = object.queryName?.map((e) => VersionedQueryName.fromPartial(e)) || [];
    message.agentId = object.agentId?.map((e) => e) || [];
    message.branchName = object.branchName?.map((e) => e) || [];
    message.correlationId = object.correlationId?.map((e) => e) || [];
    message.traceId = object.traceId?.map((e) => e) || [];
    message.queryPlanId = object.queryPlanId?.map((e) => e) || [];
    message.deploymentId = object.deploymentId?.map((e) => e) || [];
    message.queryStatus = object.queryStatus?.map((e) => e) || [];
    message.metaQueryHash = object.metaQueryHash?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetQueryLogEntriesPageToken(): GetQueryLogEntriesPageToken {
  return { operationIdHwm: "", queryTimestampHwm: undefined };
}

export const GetQueryLogEntriesPageToken: MessageFns<GetQueryLogEntriesPageToken> = {
  encode(message: GetQueryLogEntriesPageToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationIdHwm !== "") {
      writer.uint32(10).string(message.operationIdHwm);
    }
    if (message.queryTimestampHwm !== undefined) {
      Timestamp.encode(toTimestamp(message.queryTimestampHwm), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryLogEntriesPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryLogEntriesPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationIdHwm = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.queryTimestampHwm = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryLogEntriesPageToken {
    return {
      operationIdHwm: isSet(object.operationIdHwm) ? globalThis.String(object.operationIdHwm) : "",
      queryTimestampHwm: isSet(object.queryTimestampHwm) ? fromJsonTimestamp(object.queryTimestampHwm) : undefined,
    };
  },

  toJSON(message: GetQueryLogEntriesPageToken): unknown {
    const obj: any = {};
    if (message.operationIdHwm !== "") {
      obj.operationIdHwm = message.operationIdHwm;
    }
    if (message.queryTimestampHwm !== undefined) {
      obj.queryTimestampHwm = message.queryTimestampHwm.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetQueryLogEntriesPageToken>, I>>(base?: I): GetQueryLogEntriesPageToken {
    return GetQueryLogEntriesPageToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetQueryLogEntriesPageToken>, I>>(object: I): GetQueryLogEntriesPageToken {
    const message = createBaseGetQueryLogEntriesPageToken();
    message.operationIdHwm = object.operationIdHwm ?? "";
    message.queryTimestampHwm = object.queryTimestampHwm ?? undefined;
    return message;
  },
};

function createBaseGetQueryLogEntriesRequest(): GetQueryLogEntriesRequest {
  return {
    queryTimestampLowerBoundInclusive: undefined,
    queryTimestampUpperBoundExclusive: undefined,
    filters: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const GetQueryLogEntriesRequest: MessageFns<GetQueryLogEntriesRequest> = {
  encode(message: GetQueryLogEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryTimestampLowerBoundInclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.queryTimestampLowerBoundInclusive), writer.uint32(10).fork()).join();
    }
    if (message.queryTimestampUpperBoundExclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.queryTimestampUpperBoundExclusive), writer.uint32(18).fork()).join();
    }
    if (message.filters !== undefined) {
      QueryLogFilters.encode(message.filters, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryLogEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryLogEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queryTimestampLowerBoundInclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.queryTimestampUpperBoundExclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters = QueryLogFilters.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryLogEntriesRequest {
    return {
      queryTimestampLowerBoundInclusive: isSet(object.queryTimestampLowerBoundInclusive)
        ? fromJsonTimestamp(object.queryTimestampLowerBoundInclusive)
        : undefined,
      queryTimestampUpperBoundExclusive: isSet(object.queryTimestampUpperBoundExclusive)
        ? fromJsonTimestamp(object.queryTimestampUpperBoundExclusive)
        : undefined,
      filters: isSet(object.filters) ? QueryLogFilters.fromJSON(object.filters) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetQueryLogEntriesRequest): unknown {
    const obj: any = {};
    if (message.queryTimestampLowerBoundInclusive !== undefined) {
      obj.queryTimestampLowerBoundInclusive = message.queryTimestampLowerBoundInclusive.toISOString();
    }
    if (message.queryTimestampUpperBoundExclusive !== undefined) {
      obj.queryTimestampUpperBoundExclusive = message.queryTimestampUpperBoundExclusive.toISOString();
    }
    if (message.filters !== undefined) {
      obj.filters = QueryLogFilters.toJSON(message.filters);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetQueryLogEntriesRequest>, I>>(base?: I): GetQueryLogEntriesRequest {
    return GetQueryLogEntriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetQueryLogEntriesRequest>, I>>(object: I): GetQueryLogEntriesRequest {
    const message = createBaseGetQueryLogEntriesRequest();
    message.queryTimestampLowerBoundInclusive = object.queryTimestampLowerBoundInclusive ?? undefined;
    message.queryTimestampUpperBoundExclusive = object.queryTimestampUpperBoundExclusive ?? undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? QueryLogFilters.fromPartial(object.filters)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseQueryLogEntry(): QueryLogEntry {
  return {
    operationId: "",
    environmentId: "",
    deploymentId: "",
    operationKind: 0,
    queryTimestamp: undefined,
    executionStartedAt: undefined,
    executionFinishedAt: undefined,
    queryStatus: 0,
    queryName: "",
    queryNameVersion: "",
    agentId: "",
    branchName: "",
    correlationId: "",
    traceId: "",
    queryPlanId: "",
    valueTables: [],
    metaQueryHash: "",
  };
}

export const QueryLogEntry: MessageFns<QueryLogEntry> = {
  encode(message: QueryLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.environmentId !== "") {
      writer.uint32(18).string(message.environmentId);
    }
    if (message.deploymentId !== "") {
      writer.uint32(26).string(message.deploymentId);
    }
    if (message.operationKind !== 0) {
      writer.uint32(32).int32(message.operationKind);
    }
    if (message.queryTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.queryTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.executionStartedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.executionStartedAt), writer.uint32(50).fork()).join();
    }
    if (message.executionFinishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.executionFinishedAt), writer.uint32(58).fork()).join();
    }
    if (message.queryStatus !== 0) {
      writer.uint32(64).int32(message.queryStatus);
    }
    if (message.queryName !== "") {
      writer.uint32(74).string(message.queryName);
    }
    if (message.queryNameVersion !== "") {
      writer.uint32(82).string(message.queryNameVersion);
    }
    if (message.agentId !== "") {
      writer.uint32(90).string(message.agentId);
    }
    if (message.branchName !== "") {
      writer.uint32(98).string(message.branchName);
    }
    if (message.correlationId !== "") {
      writer.uint32(106).string(message.correlationId);
    }
    if (message.traceId !== "") {
      writer.uint32(114).string(message.traceId);
    }
    if (message.queryPlanId !== "") {
      writer.uint32(122).string(message.queryPlanId);
    }
    for (const v of message.valueTables) {
      writer.uint32(130).string(v!);
    }
    if (message.metaQueryHash !== "") {
      writer.uint32(138).string(message.metaQueryHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.operationKind = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.queryTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.executionStartedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.executionFinishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.queryStatus = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.queryName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.queryNameVersion = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.agentId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.branchName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.traceId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.queryPlanId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.valueTables.push(reader.string());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metaQueryHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLogEntry {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      operationKind: isSet(object.operationKind) ? operationKindFromJSON(object.operationKind) : 0,
      queryTimestamp: isSet(object.queryTimestamp) ? fromJsonTimestamp(object.queryTimestamp) : undefined,
      executionStartedAt: isSet(object.executionStartedAt) ? fromJsonTimestamp(object.executionStartedAt) : undefined,
      executionFinishedAt: isSet(object.executionFinishedAt)
        ? fromJsonTimestamp(object.executionFinishedAt)
        : undefined,
      queryStatus: isSet(object.queryStatus) ? queryStatusFromJSON(object.queryStatus) : 0,
      queryName: isSet(object.queryName) ? globalThis.String(object.queryName) : "",
      queryNameVersion: isSet(object.queryNameVersion) ? globalThis.String(object.queryNameVersion) : "",
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
      branchName: isSet(object.branchName) ? globalThis.String(object.branchName) : "",
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
      queryPlanId: isSet(object.queryPlanId) ? globalThis.String(object.queryPlanId) : "",
      valueTables: globalThis.Array.isArray(object?.valueTables)
        ? object.valueTables.map((e: any) => globalThis.String(e))
        : [],
      metaQueryHash: isSet(object.metaQueryHash) ? globalThis.String(object.metaQueryHash) : "",
    };
  },

  toJSON(message: QueryLogEntry): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.operationKind !== 0) {
      obj.operationKind = operationKindToJSON(message.operationKind);
    }
    if (message.queryTimestamp !== undefined) {
      obj.queryTimestamp = message.queryTimestamp.toISOString();
    }
    if (message.executionStartedAt !== undefined) {
      obj.executionStartedAt = message.executionStartedAt.toISOString();
    }
    if (message.executionFinishedAt !== undefined) {
      obj.executionFinishedAt = message.executionFinishedAt.toISOString();
    }
    if (message.queryStatus !== 0) {
      obj.queryStatus = queryStatusToJSON(message.queryStatus);
    }
    if (message.queryName !== "") {
      obj.queryName = message.queryName;
    }
    if (message.queryNameVersion !== "") {
      obj.queryNameVersion = message.queryNameVersion;
    }
    if (message.agentId !== "") {
      obj.agentId = message.agentId;
    }
    if (message.branchName !== "") {
      obj.branchName = message.branchName;
    }
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    if (message.queryPlanId !== "") {
      obj.queryPlanId = message.queryPlanId;
    }
    if (message.valueTables?.length) {
      obj.valueTables = message.valueTables;
    }
    if (message.metaQueryHash !== "") {
      obj.metaQueryHash = message.metaQueryHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLogEntry>, I>>(base?: I): QueryLogEntry {
    return QueryLogEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLogEntry>, I>>(object: I): QueryLogEntry {
    const message = createBaseQueryLogEntry();
    message.operationId = object.operationId ?? "";
    message.environmentId = object.environmentId ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.operationKind = object.operationKind ?? 0;
    message.queryTimestamp = object.queryTimestamp ?? undefined;
    message.executionStartedAt = object.executionStartedAt ?? undefined;
    message.executionFinishedAt = object.executionFinishedAt ?? undefined;
    message.queryStatus = object.queryStatus ?? 0;
    message.queryName = object.queryName ?? "";
    message.queryNameVersion = object.queryNameVersion ?? "";
    message.agentId = object.agentId ?? "";
    message.branchName = object.branchName ?? "";
    message.correlationId = object.correlationId ?? "";
    message.traceId = object.traceId ?? "";
    message.queryPlanId = object.queryPlanId ?? "";
    message.valueTables = object.valueTables?.map((e) => e) || [];
    message.metaQueryHash = object.metaQueryHash ?? "";
    return message;
  },
};

function createBaseGetQueryLogEntriesResponse(): GetQueryLogEntriesResponse {
  return { entries: [], nextPageToken: "" };
}

export const GetQueryLogEntriesResponse: MessageFns<GetQueryLogEntriesResponse> = {
  encode(message: GetQueryLogEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      QueryLogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryLogEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryLogEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(QueryLogEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryLogEntriesResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => QueryLogEntry.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: GetQueryLogEntriesResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => QueryLogEntry.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetQueryLogEntriesResponse>, I>>(base?: I): GetQueryLogEntriesResponse {
    return GetQueryLogEntriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetQueryLogEntriesResponse>, I>>(object: I): GetQueryLogEntriesResponse {
    const message = createBaseGetQueryLogEntriesResponse();
    message.entries = object.entries?.map((e) => QueryLogEntry.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
