// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v2/offline_store_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { GetFeatureValuesRequest, GetFeatureValuesResponse } from "./feature_values.pb";
import {
  GetFeatureValuesTimeSeriesChartRequest,
  GetFeatureValuesTimeSeriesChartResponse,
} from "./feature_values_chart.pb";
import { GetQueryLogEntriesRequest, GetQueryLogEntriesResponse } from "./query_log.pb";
import { GetQueryValuesRequest, GetQueryValuesResponse } from "./query_values.pb";

export const protobufPackage = "chalk.engine.v2";

export interface OfflineStoreServiceDummy {
}

function createBaseOfflineStoreServiceDummy(): OfflineStoreServiceDummy {
  return {};
}

export const OfflineStoreServiceDummy: MessageFns<OfflineStoreServiceDummy> = {
  encode(_: OfflineStoreServiceDummy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineStoreServiceDummy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineStoreServiceDummy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OfflineStoreServiceDummy {
    return {};
  },

  toJSON(_: OfflineStoreServiceDummy): unknown {
    const obj: any = {};
    return obj;
  },
};

/**
 * This service exposes endpoints for dealing with the offline store. It should never depend on the python graph.
 * v2 introduces two breaking changes:
 * Uses messages from engine.v2 instead of common.v1 (common is not meant for engine-specific messages)
 * Removes certain endpoints added and had to be immediately deprecated due to deprecation
 */
export type OfflineStoreServiceService = typeof OfflineStoreServiceService;
export const OfflineStoreServiceService = {
  getQueryLogEntries: {
    path: "/chalk.engine.v2.OfflineStoreService/GetQueryLogEntries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetQueryLogEntriesRequest) =>
      Buffer.from(GetQueryLogEntriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetQueryLogEntriesRequest.decode(value),
    responseSerialize: (value: GetQueryLogEntriesResponse) =>
      Buffer.from(GetQueryLogEntriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetQueryLogEntriesResponse.decode(value),
  },
  getQueryValues: {
    path: "/chalk.engine.v2.OfflineStoreService/GetQueryValues",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetQueryValuesRequest) => Buffer.from(GetQueryValuesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetQueryValuesRequest.decode(value),
    responseSerialize: (value: GetQueryValuesResponse) => Buffer.from(GetQueryValuesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetQueryValuesResponse.decode(value),
  },
  getFeatureValuesTimeSeriesChart: {
    path: "/chalk.engine.v2.OfflineStoreService/GetFeatureValuesTimeSeriesChart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFeatureValuesTimeSeriesChartRequest) =>
      Buffer.from(GetFeatureValuesTimeSeriesChartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFeatureValuesTimeSeriesChartRequest.decode(value),
    responseSerialize: (value: GetFeatureValuesTimeSeriesChartResponse) =>
      Buffer.from(GetFeatureValuesTimeSeriesChartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFeatureValuesTimeSeriesChartResponse.decode(value),
  },
  getFeatureValues: {
    path: "/chalk.engine.v2.OfflineStoreService/GetFeatureValues",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFeatureValuesRequest) => Buffer.from(GetFeatureValuesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFeatureValuesRequest.decode(value),
    responseSerialize: (value: GetFeatureValuesResponse) =>
      Buffer.from(GetFeatureValuesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFeatureValuesResponse.decode(value),
  },
} as const;

export interface OfflineStoreServiceServer extends UntypedServiceImplementation {
  getQueryLogEntries: handleUnaryCall<GetQueryLogEntriesRequest, GetQueryLogEntriesResponse>;
  getQueryValues: handleUnaryCall<GetQueryValuesRequest, GetQueryValuesResponse>;
  getFeatureValuesTimeSeriesChart: handleUnaryCall<
    GetFeatureValuesTimeSeriesChartRequest,
    GetFeatureValuesTimeSeriesChartResponse
  >;
  getFeatureValues: handleUnaryCall<GetFeatureValuesRequest, GetFeatureValuesResponse>;
}

export interface OfflineStoreServiceClient extends Client {
  getQueryLogEntries(
    request: GetQueryLogEntriesRequest,
    callback: (error: ServiceError | null, response: GetQueryLogEntriesResponse) => void,
  ): ClientUnaryCall;
  getQueryLogEntries(
    request: GetQueryLogEntriesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetQueryLogEntriesResponse) => void,
  ): ClientUnaryCall;
  getQueryLogEntries(
    request: GetQueryLogEntriesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetQueryLogEntriesResponse) => void,
  ): ClientUnaryCall;
  getQueryValues(
    request: GetQueryValuesRequest,
    callback: (error: ServiceError | null, response: GetQueryValuesResponse) => void,
  ): ClientUnaryCall;
  getQueryValues(
    request: GetQueryValuesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetQueryValuesResponse) => void,
  ): ClientUnaryCall;
  getQueryValues(
    request: GetQueryValuesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetQueryValuesResponse) => void,
  ): ClientUnaryCall;
  getFeatureValuesTimeSeriesChart(
    request: GetFeatureValuesTimeSeriesChartRequest,
    callback: (error: ServiceError | null, response: GetFeatureValuesTimeSeriesChartResponse) => void,
  ): ClientUnaryCall;
  getFeatureValuesTimeSeriesChart(
    request: GetFeatureValuesTimeSeriesChartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFeatureValuesTimeSeriesChartResponse) => void,
  ): ClientUnaryCall;
  getFeatureValuesTimeSeriesChart(
    request: GetFeatureValuesTimeSeriesChartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFeatureValuesTimeSeriesChartResponse) => void,
  ): ClientUnaryCall;
  getFeatureValues(
    request: GetFeatureValuesRequest,
    callback: (error: ServiceError | null, response: GetFeatureValuesResponse) => void,
  ): ClientUnaryCall;
  getFeatureValues(
    request: GetFeatureValuesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFeatureValuesResponse) => void,
  ): ClientUnaryCall;
  getFeatureValues(
    request: GetFeatureValuesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFeatureValuesResponse) => void,
  ): ClientUnaryCall;
}

export const OfflineStoreServiceClient = makeGenericClientConstructor(
  OfflineStoreServiceService,
  "chalk.engine.v2.OfflineStoreService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OfflineStoreServiceClient;
  service: typeof OfflineStoreServiceService;
  serviceName: string;
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
