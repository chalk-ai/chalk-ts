// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v1/bloom_filter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.engine.v1";

export interface BloomFilter {
  environment: string;
  namespace: string;
  /** number of items actually inserted into this bloom filter */
  numEntries: number;
  /** Expected max number of entries, used to calculate size w.r.t error rate */
  numExpectedEntries: number;
  numHashes: number;
  sizeBytes: number;
  data: Uint8Array;
}

function createBaseBloomFilter(): BloomFilter {
  return {
    environment: "",
    namespace: "",
    numEntries: 0,
    numExpectedEntries: 0,
    numHashes: 0,
    sizeBytes: 0,
    data: new Uint8Array(0),
  };
}

export const BloomFilter: MessageFns<BloomFilter> = {
  encode(message: BloomFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== "") {
      writer.uint32(10).string(message.environment);
    }
    if (message.namespace !== "") {
      writer.uint32(18).string(message.namespace);
    }
    if (message.numEntries !== 0) {
      writer.uint32(24).uint64(message.numEntries);
    }
    if (message.numExpectedEntries !== 0) {
      writer.uint32(32).uint64(message.numExpectedEntries);
    }
    if (message.numHashes !== 0) {
      writer.uint32(40).uint64(message.numHashes);
    }
    if (message.sizeBytes !== 0) {
      writer.uint32(48).uint64(message.sizeBytes);
    }
    if (message.data.length !== 0) {
      writer.uint32(58).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BloomFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBloomFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numEntries = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numExpectedEntries = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numHashes = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sizeBytes = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BloomFilter {
    return {
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      numEntries: isSet(object.numEntries) ? globalThis.Number(object.numEntries) : 0,
      numExpectedEntries: isSet(object.numExpectedEntries) ? globalThis.Number(object.numExpectedEntries) : 0,
      numHashes: isSet(object.numHashes) ? globalThis.Number(object.numHashes) : 0,
      sizeBytes: isSet(object.sizeBytes) ? globalThis.Number(object.sizeBytes) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: BloomFilter): unknown {
    const obj: any = {};
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.numEntries !== 0) {
      obj.numEntries = Math.round(message.numEntries);
    }
    if (message.numExpectedEntries !== 0) {
      obj.numExpectedEntries = Math.round(message.numExpectedEntries);
    }
    if (message.numHashes !== 0) {
      obj.numHashes = Math.round(message.numHashes);
    }
    if (message.sizeBytes !== 0) {
      obj.sizeBytes = Math.round(message.sizeBytes);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BloomFilter>, I>>(base?: I): BloomFilter {
    return BloomFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BloomFilter>, I>>(object: I): BloomFilter {
    const message = createBaseBloomFilter();
    message.environment = object.environment ?? "";
    message.namespace = object.namespace ?? "";
    message.numEntries = object.numEntries ?? 0;
    message.numExpectedEntries = object.numExpectedEntries ?? 0;
    message.numHashes = object.numHashes ?? 0;
    message.sizeBytes = object.sizeBytes ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
