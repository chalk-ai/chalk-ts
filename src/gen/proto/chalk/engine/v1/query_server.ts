// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/engine/v1/query_server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  GetAggregatesRequest,
  GetAggregatesResponse,
  PlanAggregateBackfillRequest,
  PlanAggregateBackfillResponse,
} from "../../aggregate/v1/service";
import {
  OnlineQueryBulkRequest,
  OnlineQueryBulkResponse,
  OnlineQueryMultiRequest,
  OnlineQueryMultiResponse,
  OnlineQueryRequest,
  OnlineQueryResponse,
  UploadFeaturesBulkRequest,
  UploadFeaturesBulkResponse,
} from "../../common/v1/online_query";
import { UploadFeaturesRequest, UploadFeaturesResponse } from "../../common/v1/upload_features";

export const protobufPackage = "chalk.engine.v1";

export interface PingRequest {
  num: number;
}

export interface PingResponse {
  num: number;
}

function createBasePingRequest(): PingRequest {
  return { num: 0 };
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(message: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num !== 0) {
      writer.uint32(8).int32(message.num);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.num = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingRequest {
    return { num: isSet(object.num) ? globalThis.Number(object.num) : 0 };
  },

  toJSON(message: PingRequest): unknown {
    const obj: any = {};
    if (message.num !== 0) {
      obj.num = Math.round(message.num);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(object: I): PingRequest {
    const message = createBasePingRequest();
    message.num = object.num ?? 0;
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { num: 0 };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num !== 0) {
      writer.uint32(8).int32(message.num);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.num = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { num: isSet(object.num) ? globalThis.Number(object.num) : 0 };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.num !== 0) {
      obj.num = Math.round(message.num);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.num = object.num ?? 0;
    return message;
  },
};

export type QueryServiceService = typeof QueryServiceService;
export const QueryServiceService = {
  ping: {
    path: "/chalk.engine.v1.QueryService/Ping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PingRequest) => Buffer.from(PingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PingRequest.decode(value),
    responseSerialize: (value: PingResponse) => Buffer.from(PingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PingResponse.decode(value),
  },
  onlineQuery: {
    path: "/chalk.engine.v1.QueryService/OnlineQuery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OnlineQueryRequest) => Buffer.from(OnlineQueryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OnlineQueryRequest.decode(value),
    responseSerialize: (value: OnlineQueryResponse) => Buffer.from(OnlineQueryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OnlineQueryResponse.decode(value),
  },
  onlineQueryBulk: {
    path: "/chalk.engine.v1.QueryService/OnlineQueryBulk",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OnlineQueryBulkRequest) => Buffer.from(OnlineQueryBulkRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OnlineQueryBulkRequest.decode(value),
    responseSerialize: (value: OnlineQueryBulkResponse) => Buffer.from(OnlineQueryBulkResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OnlineQueryBulkResponse.decode(value),
  },
  onlineQueryMulti: {
    path: "/chalk.engine.v1.QueryService/OnlineQueryMulti",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OnlineQueryMultiRequest) => Buffer.from(OnlineQueryMultiRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OnlineQueryMultiRequest.decode(value),
    responseSerialize: (value: OnlineQueryMultiResponse) =>
      Buffer.from(OnlineQueryMultiResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OnlineQueryMultiResponse.decode(value),
  },
  uploadFeaturesBulk: {
    path: "/chalk.engine.v1.QueryService/UploadFeaturesBulk",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UploadFeaturesBulkRequest) =>
      Buffer.from(UploadFeaturesBulkRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UploadFeaturesBulkRequest.decode(value),
    responseSerialize: (value: UploadFeaturesBulkResponse) =>
      Buffer.from(UploadFeaturesBulkResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UploadFeaturesBulkResponse.decode(value),
  },
  uploadFeatures: {
    path: "/chalk.engine.v1.QueryService/UploadFeatures",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UploadFeaturesRequest) => Buffer.from(UploadFeaturesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UploadFeaturesRequest.decode(value),
    responseSerialize: (value: UploadFeaturesResponse) => Buffer.from(UploadFeaturesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UploadFeaturesResponse.decode(value),
  },
  /**
   * PlanAggregateBackfill determines the estimated resources needed to backfill
   * an aggregate.
   *
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  planAggregateBackfill: {
    path: "/chalk.engine.v1.QueryService/PlanAggregateBackfill",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PlanAggregateBackfillRequest) =>
      Buffer.from(PlanAggregateBackfillRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PlanAggregateBackfillRequest.decode(value),
    responseSerialize: (value: PlanAggregateBackfillResponse) =>
      Buffer.from(PlanAggregateBackfillResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PlanAggregateBackfillResponse.decode(value),
  },
  /**
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  getAggregates: {
    path: "/chalk.engine.v1.QueryService/GetAggregates",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAggregatesRequest) => Buffer.from(GetAggregatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAggregatesRequest.decode(value),
    responseSerialize: (value: GetAggregatesResponse) => Buffer.from(GetAggregatesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAggregatesResponse.decode(value),
  },
} as const;

export interface QueryServiceServer extends UntypedServiceImplementation {
  ping: handleUnaryCall<PingRequest, PingResponse>;
  onlineQuery: handleUnaryCall<OnlineQueryRequest, OnlineQueryResponse>;
  onlineQueryBulk: handleUnaryCall<OnlineQueryBulkRequest, OnlineQueryBulkResponse>;
  onlineQueryMulti: handleUnaryCall<OnlineQueryMultiRequest, OnlineQueryMultiResponse>;
  uploadFeaturesBulk: handleUnaryCall<UploadFeaturesBulkRequest, UploadFeaturesBulkResponse>;
  uploadFeatures: handleUnaryCall<UploadFeaturesRequest, UploadFeaturesResponse>;
  /**
   * PlanAggregateBackfill determines the estimated resources needed to backfill
   * an aggregate.
   *
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  planAggregateBackfill: handleUnaryCall<PlanAggregateBackfillRequest, PlanAggregateBackfillResponse>;
  /**
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  getAggregates: handleUnaryCall<GetAggregatesRequest, GetAggregatesResponse>;
}

export interface QueryServiceClient extends Client {
  ping(request: PingRequest, callback: (error: ServiceError | null, response: PingResponse) => void): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
  onlineQuery(
    request: OnlineQueryRequest,
    callback: (error: ServiceError | null, response: OnlineQueryResponse) => void,
  ): ClientUnaryCall;
  onlineQuery(
    request: OnlineQueryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OnlineQueryResponse) => void,
  ): ClientUnaryCall;
  onlineQuery(
    request: OnlineQueryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OnlineQueryResponse) => void,
  ): ClientUnaryCall;
  onlineQueryBulk(
    request: OnlineQueryBulkRequest,
    callback: (error: ServiceError | null, response: OnlineQueryBulkResponse) => void,
  ): ClientUnaryCall;
  onlineQueryBulk(
    request: OnlineQueryBulkRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OnlineQueryBulkResponse) => void,
  ): ClientUnaryCall;
  onlineQueryBulk(
    request: OnlineQueryBulkRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OnlineQueryBulkResponse) => void,
  ): ClientUnaryCall;
  onlineQueryMulti(
    request: OnlineQueryMultiRequest,
    callback: (error: ServiceError | null, response: OnlineQueryMultiResponse) => void,
  ): ClientUnaryCall;
  onlineQueryMulti(
    request: OnlineQueryMultiRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OnlineQueryMultiResponse) => void,
  ): ClientUnaryCall;
  onlineQueryMulti(
    request: OnlineQueryMultiRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OnlineQueryMultiResponse) => void,
  ): ClientUnaryCall;
  uploadFeaturesBulk(
    request: UploadFeaturesBulkRequest,
    callback: (error: ServiceError | null, response: UploadFeaturesBulkResponse) => void,
  ): ClientUnaryCall;
  uploadFeaturesBulk(
    request: UploadFeaturesBulkRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UploadFeaturesBulkResponse) => void,
  ): ClientUnaryCall;
  uploadFeaturesBulk(
    request: UploadFeaturesBulkRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UploadFeaturesBulkResponse) => void,
  ): ClientUnaryCall;
  uploadFeatures(
    request: UploadFeaturesRequest,
    callback: (error: ServiceError | null, response: UploadFeaturesResponse) => void,
  ): ClientUnaryCall;
  uploadFeatures(
    request: UploadFeaturesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UploadFeaturesResponse) => void,
  ): ClientUnaryCall;
  uploadFeatures(
    request: UploadFeaturesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UploadFeaturesResponse) => void,
  ): ClientUnaryCall;
  /**
   * PlanAggregateBackfill determines the estimated resources needed to backfill
   * an aggregate.
   *
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  planAggregateBackfill(
    request: PlanAggregateBackfillRequest,
    callback: (error: ServiceError | null, response: PlanAggregateBackfillResponse) => void,
  ): ClientUnaryCall;
  planAggregateBackfill(
    request: PlanAggregateBackfillRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PlanAggregateBackfillResponse) => void,
  ): ClientUnaryCall;
  planAggregateBackfill(
    request: PlanAggregateBackfillRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PlanAggregateBackfillResponse) => void,
  ): ClientUnaryCall;
  /**
   * This method is a duplicate of the PlanAggregateBackfill method
   * in the query_server.proto file. We should remove the query_server.proto method
   * and move that request to this service instead.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   */
  getAggregates(
    request: GetAggregatesRequest,
    callback: (error: ServiceError | null, response: GetAggregatesResponse) => void,
  ): ClientUnaryCall;
  getAggregates(
    request: GetAggregatesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAggregatesResponse) => void,
  ): ClientUnaryCall;
  getAggregates(
    request: GetAggregatesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAggregatesResponse) => void,
  ): ClientUnaryCall;
}

export const QueryServiceClient = makeGenericClientConstructor(
  QueryServiceService,
  "chalk.engine.v1.QueryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryServiceClient;
  service: typeof QueryServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
