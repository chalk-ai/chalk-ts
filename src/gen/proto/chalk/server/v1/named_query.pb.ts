// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/named_query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { NamedQuery } from "../../graph/v1/graph.pb";

export const protobufPackage = "chalk.server.v1";

export interface GetAllNamedQueriesRequest {
  deploymentId: string;
}

export interface GetNamedQueryByNameRequest {
  name: string;
}

export interface GetNamedQueryByNameResponse {
  namedQueries: NamedQuery[];
}

export interface GetAllNamedQueriesResponse {
  namedQueries: NamedQuery[];
}

export interface GetAllNamedQueriesActiveDeploymentRequest {
}

export interface GetAllNamedQueriesActiveDeploymentResponse {
  namedQueries: NamedQuery[];
}

function createBaseGetAllNamedQueriesRequest(): GetAllNamedQueriesRequest {
  return { deploymentId: "" };
}

export const GetAllNamedQueriesRequest: MessageFns<GetAllNamedQueriesRequest> = {
  encode(message: GetAllNamedQueriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deploymentId !== "") {
      writer.uint32(10).string(message.deploymentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNamedQueriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNamedQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllNamedQueriesRequest {
    return { deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "" };
  },

  toJSON(message: GetAllNamedQueriesRequest): unknown {
    const obj: any = {};
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    return obj;
  },
};

function createBaseGetNamedQueryByNameRequest(): GetNamedQueryByNameRequest {
  return { name: "" };
}

export const GetNamedQueryByNameRequest: MessageFns<GetNamedQueryByNameRequest> = {
  encode(message: GetNamedQueryByNameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNamedQueryByNameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNamedQueryByNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNamedQueryByNameRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNamedQueryByNameRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },
};

function createBaseGetNamedQueryByNameResponse(): GetNamedQueryByNameResponse {
  return { namedQueries: [] };
}

export const GetNamedQueryByNameResponse: MessageFns<GetNamedQueryByNameResponse> = {
  encode(message: GetNamedQueryByNameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namedQueries) {
      NamedQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNamedQueryByNameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNamedQueryByNameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namedQueries.push(NamedQuery.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNamedQueryByNameResponse {
    return {
      namedQueries: globalThis.Array.isArray(object?.namedQueries)
        ? object.namedQueries.map((e: any) => NamedQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetNamedQueryByNameResponse): unknown {
    const obj: any = {};
    if (message.namedQueries?.length) {
      obj.namedQueries = message.namedQueries.map((e) => NamedQuery.toJSON(e));
    }
    return obj;
  },
};

function createBaseGetAllNamedQueriesResponse(): GetAllNamedQueriesResponse {
  return { namedQueries: [] };
}

export const GetAllNamedQueriesResponse: MessageFns<GetAllNamedQueriesResponse> = {
  encode(message: GetAllNamedQueriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namedQueries) {
      NamedQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNamedQueriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNamedQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namedQueries.push(NamedQuery.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllNamedQueriesResponse {
    return {
      namedQueries: globalThis.Array.isArray(object?.namedQueries)
        ? object.namedQueries.map((e: any) => NamedQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllNamedQueriesResponse): unknown {
    const obj: any = {};
    if (message.namedQueries?.length) {
      obj.namedQueries = message.namedQueries.map((e) => NamedQuery.toJSON(e));
    }
    return obj;
  },
};

function createBaseGetAllNamedQueriesActiveDeploymentRequest(): GetAllNamedQueriesActiveDeploymentRequest {
  return {};
}

export const GetAllNamedQueriesActiveDeploymentRequest: MessageFns<GetAllNamedQueriesActiveDeploymentRequest> = {
  encode(_: GetAllNamedQueriesActiveDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNamedQueriesActiveDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNamedQueriesActiveDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllNamedQueriesActiveDeploymentRequest {
    return {};
  },

  toJSON(_: GetAllNamedQueriesActiveDeploymentRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseGetAllNamedQueriesActiveDeploymentResponse(): GetAllNamedQueriesActiveDeploymentResponse {
  return { namedQueries: [] };
}

export const GetAllNamedQueriesActiveDeploymentResponse: MessageFns<GetAllNamedQueriesActiveDeploymentResponse> = {
  encode(message: GetAllNamedQueriesActiveDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namedQueries) {
      NamedQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNamedQueriesActiveDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNamedQueriesActiveDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namedQueries.push(NamedQuery.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllNamedQueriesActiveDeploymentResponse {
    return {
      namedQueries: globalThis.Array.isArray(object?.namedQueries)
        ? object.namedQueries.map((e: any) => NamedQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllNamedQueriesActiveDeploymentResponse): unknown {
    const obj: any = {};
    if (message.namedQueries?.length) {
      obj.namedQueries = message.namedQueries.map((e) => NamedQuery.toJSON(e));
    }
    return obj;
  },
};

export type NamedQueryServiceService = typeof NamedQueryServiceService;
export const NamedQueryServiceService = {
  getAllNamedQueries: {
    path: "/chalk.server.v1.NamedQueryService/GetAllNamedQueries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllNamedQueriesRequest) =>
      Buffer.from(GetAllNamedQueriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllNamedQueriesRequest.decode(value),
    responseSerialize: (value: GetAllNamedQueriesResponse) =>
      Buffer.from(GetAllNamedQueriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllNamedQueriesResponse.decode(value),
  },
  getAllNamedQueriesActiveDeployment: {
    path: "/chalk.server.v1.NamedQueryService/GetAllNamedQueriesActiveDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllNamedQueriesActiveDeploymentRequest) =>
      Buffer.from(GetAllNamedQueriesActiveDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllNamedQueriesActiveDeploymentRequest.decode(value),
    responseSerialize: (value: GetAllNamedQueriesActiveDeploymentResponse) =>
      Buffer.from(GetAllNamedQueriesActiveDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllNamedQueriesActiveDeploymentResponse.decode(value),
  },
  getNamedQueryByName: {
    path: "/chalk.server.v1.NamedQueryService/GetNamedQueryByName",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetNamedQueryByNameRequest) =>
      Buffer.from(GetNamedQueryByNameRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetNamedQueryByNameRequest.decode(value),
    responseSerialize: (value: GetNamedQueryByNameResponse) =>
      Buffer.from(GetNamedQueryByNameResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetNamedQueryByNameResponse.decode(value),
  },
} as const;

export interface NamedQueryServiceServer extends UntypedServiceImplementation {
  getAllNamedQueries: handleUnaryCall<GetAllNamedQueriesRequest, GetAllNamedQueriesResponse>;
  getAllNamedQueriesActiveDeployment: handleUnaryCall<
    GetAllNamedQueriesActiveDeploymentRequest,
    GetAllNamedQueriesActiveDeploymentResponse
  >;
  getNamedQueryByName: handleUnaryCall<GetNamedQueryByNameRequest, GetNamedQueryByNameResponse>;
}

export interface NamedQueryServiceClient extends Client {
  getAllNamedQueries(
    request: GetAllNamedQueriesRequest,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesResponse) => void,
  ): ClientUnaryCall;
  getAllNamedQueries(
    request: GetAllNamedQueriesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesResponse) => void,
  ): ClientUnaryCall;
  getAllNamedQueries(
    request: GetAllNamedQueriesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesResponse) => void,
  ): ClientUnaryCall;
  getAllNamedQueriesActiveDeployment(
    request: GetAllNamedQueriesActiveDeploymentRequest,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesActiveDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAllNamedQueriesActiveDeployment(
    request: GetAllNamedQueriesActiveDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesActiveDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAllNamedQueriesActiveDeployment(
    request: GetAllNamedQueriesActiveDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllNamedQueriesActiveDeploymentResponse) => void,
  ): ClientUnaryCall;
  getNamedQueryByName(
    request: GetNamedQueryByNameRequest,
    callback: (error: ServiceError | null, response: GetNamedQueryByNameResponse) => void,
  ): ClientUnaryCall;
  getNamedQueryByName(
    request: GetNamedQueryByNameRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetNamedQueryByNameResponse) => void,
  ): ClientUnaryCall;
  getNamedQueryByName(
    request: GetNamedQueryByNameRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetNamedQueryByNameResponse) => void,
  ): ClientUnaryCall;
}

export const NamedQueryServiceClient = makeGenericClientConstructor(
  NamedQueryServiceService,
  "chalk.server.v1.NamedQueryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NamedQueryServiceClient;
  service: typeof NamedQueryServiceService;
  serviceName: string;
};

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
