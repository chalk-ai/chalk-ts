// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/chart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Duration } from "../../../google/protobuf/duration.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";
import {
  Chart as Chart1,
  ChartLinkKind,
  chartLinkKindFromJSON,
  chartLinkKindToJSON,
  MetricConfig,
} from "../../artifacts/v1/chart.pb";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart.pb";

export const protobufPackage = "chalk.server.v1";

export interface Series {
  points: number[];
  label: string;
  units: string;
}

export interface Chart {
  title: string;
  series: Series[];
  xTimestampMs: number[];
}

/** @deprecated */
export interface Point {
  /** wrapped in a Point to allow for optional (empty space in time series) */
  value?: number | undefined;
}

/** @deprecated */
export interface TimeSeries {
  points: Point[];
  label: string;
  units: string;
}

/** @deprecated */
export interface TimeSeriesChart {
  title: string;
  series: TimeSeries[];
  xSeries: Date[];
  windowPeriod: Duration | undefined;
}

export interface ListChartsFilters {
  linkEntityKind?: ChartLinkKind | undefined;
  linkedEntityId?: string | undefined;
}

export interface ListChartPageToken {
  /** Charts are sorted first by creation time, descending */
  createdAtHwm:
    | Date
    | undefined;
  /**
   * Then by id, descending.
   * Note: this is the chart link id, not the metric config id hwm!
   */
  idHwm: string;
}

export interface ListChartsRequest {
  filters?: ListChartsFilters | undefined;
  limit?:
    | number
    | undefined;
  /**
   * Must be encoded ListChartPageToken
   * see https://protobuf.dev/best-practices/api/#define-pagination-api
   */
  pageToken?: string | undefined;
}

export interface ListChartsResponse {
  /**
   * While still supported, heavily suggest using the second option charts_with_link
   * which includes metadata about other related entities to the chart
   *
   * @deprecated
   */
  charts: MetricConfig[];
  chartsWithLinks: Chart1[];
  /**
   * encoded ListChartPageToken
   * see https://protobuf.dev/best-practices/api/#define-pagination-api
   */
  nextPageToken?: string | undefined;
}

export interface GetChartSnapshotRequest {
  metricConfig: MetricConfig | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
}

export interface GetChartSnapshotResponse {
  charts: DenseTimeSeriesChart[];
  xSeries: Date[];
  windowPeriod: Duration | undefined;
}

function createBaseSeries(): Series {
  return { points: [], label: "", units: "" };
}

export const Series: MessageFns<Series> = {
  encode(message: Series, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.points) {
      writer.double(v);
    }
    writer.join();
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.units !== "") {
      writer.uint32(26).string(message.units);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Series {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 9) {
            message.points.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.points.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Series {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => globalThis.Number(e)) : [],
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
    };
  },

  toJSON(message: Series): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    return obj;
  },
};

function createBaseChart(): Chart {
  return { title: "", series: [], xTimestampMs: [] };
}

export const Chart: MessageFns<Chart> = {
  encode(message: Chart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      Series.encode(v!, writer.uint32(18).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.xTimestampMs) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Chart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(Series.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.xTimestampMs.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.xTimestampMs.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chart {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      series: globalThis.Array.isArray(object?.series) ? object.series.map((e: any) => Series.fromJSON(e)) : [],
      xTimestampMs: globalThis.Array.isArray(object?.xTimestampMs)
        ? object.xTimestampMs.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: Chart): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => Series.toJSON(e));
    }
    if (message.xTimestampMs?.length) {
      obj.xTimestampMs = message.xTimestampMs.map((e) => Math.round(e));
    }
    return obj;
  },
};

function createBasePoint(): Point {
  return { value: undefined };
}

export const Point: MessageFns<Point> = {
  encode(message: Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },
};

function createBaseTimeSeries(): TimeSeries {
  return { points: [], label: "", units: "" };
}

export const TimeSeries: MessageFns<TimeSeries> = {
  encode(message: TimeSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      Point.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.units !== "") {
      writer.uint32(26).string(message.units);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(Point.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeries {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Point.fromJSON(e)) : [],
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
    };
  },

  toJSON(message: TimeSeries): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => Point.toJSON(e));
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    return obj;
  },
};

function createBaseTimeSeriesChart(): TimeSeriesChart {
  return { title: "", series: [], xSeries: [], windowPeriod: undefined };
}

export const TimeSeriesChart: MessageFns<TimeSeriesChart> = {
  encode(message: TimeSeriesChart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      TimeSeries.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.xSeries) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(26).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesChart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(TimeSeries.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xSeries.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesChart {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      series: globalThis.Array.isArray(object?.series) ? object.series.map((e: any) => TimeSeries.fromJSON(e)) : [],
      xSeries: globalThis.Array.isArray(object?.xSeries) ? object.xSeries.map((e: any) => fromJsonTimestamp(e)) : [],
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
    };
  },

  toJSON(message: TimeSeriesChart): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => TimeSeries.toJSON(e));
    }
    if (message.xSeries?.length) {
      obj.xSeries = message.xSeries.map((e) => e.toISOString());
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    return obj;
  },
};

function createBaseListChartsFilters(): ListChartsFilters {
  return { linkEntityKind: undefined, linkedEntityId: undefined };
}

export const ListChartsFilters: MessageFns<ListChartsFilters> = {
  encode(message: ListChartsFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkEntityKind !== undefined) {
      writer.uint32(8).int32(message.linkEntityKind);
    }
    if (message.linkedEntityId !== undefined) {
      writer.uint32(18).string(message.linkedEntityId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChartsFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChartsFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.linkEntityKind = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkedEntityId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChartsFilters {
    return {
      linkEntityKind: isSet(object.linkEntityKind) ? chartLinkKindFromJSON(object.linkEntityKind) : undefined,
      linkedEntityId: isSet(object.linkedEntityId) ? globalThis.String(object.linkedEntityId) : undefined,
    };
  },

  toJSON(message: ListChartsFilters): unknown {
    const obj: any = {};
    if (message.linkEntityKind !== undefined) {
      obj.linkEntityKind = chartLinkKindToJSON(message.linkEntityKind);
    }
    if (message.linkedEntityId !== undefined) {
      obj.linkedEntityId = message.linkedEntityId;
    }
    return obj;
  },
};

function createBaseListChartPageToken(): ListChartPageToken {
  return { createdAtHwm: undefined, idHwm: "" };
}

export const ListChartPageToken: MessageFns<ListChartPageToken> = {
  encode(message: ListChartPageToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdAtHwm !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAtHwm), writer.uint32(10).fork()).join();
    }
    if (message.idHwm !== "") {
      writer.uint32(18).string(message.idHwm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChartPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChartPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createdAtHwm = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.idHwm = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChartPageToken {
    return {
      createdAtHwm: isSet(object.createdAtHwm) ? fromJsonTimestamp(object.createdAtHwm) : undefined,
      idHwm: isSet(object.idHwm) ? globalThis.String(object.idHwm) : "",
    };
  },

  toJSON(message: ListChartPageToken): unknown {
    const obj: any = {};
    if (message.createdAtHwm !== undefined) {
      obj.createdAtHwm = message.createdAtHwm.toISOString();
    }
    if (message.idHwm !== "") {
      obj.idHwm = message.idHwm;
    }
    return obj;
  },
};

function createBaseListChartsRequest(): ListChartsRequest {
  return { filters: undefined, limit: undefined, pageToken: undefined };
}

export const ListChartsRequest: MessageFns<ListChartsRequest> = {
  encode(message: ListChartsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      ListChartsFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.limit !== undefined) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChartsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChartsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = ListChartsFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChartsRequest {
    return {
      filters: isSet(object.filters) ? ListChartsFilters.fromJSON(object.filters) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
    };
  },

  toJSON(message: ListChartsRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = ListChartsFilters.toJSON(message.filters);
    }
    if (message.limit !== undefined) {
      obj.limit = Math.round(message.limit);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },
};

function createBaseListChartsResponse(): ListChartsResponse {
  return { charts: [], chartsWithLinks: [], nextPageToken: undefined };
}

export const ListChartsResponse: MessageFns<ListChartsResponse> = {
  encode(message: ListChartsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.charts) {
      MetricConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.chartsWithLinks) {
      Chart1.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChartsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChartsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.charts.push(MetricConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chartsWithLinks.push(Chart1.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChartsResponse {
    return {
      charts: globalThis.Array.isArray(object?.charts) ? object.charts.map((e: any) => MetricConfig.fromJSON(e)) : [],
      chartsWithLinks: globalThis.Array.isArray(object?.chartsWithLinks)
        ? object.chartsWithLinks.map((e: any) => Chart1.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListChartsResponse): unknown {
    const obj: any = {};
    if (message.charts?.length) {
      obj.charts = message.charts.map((e) => MetricConfig.toJSON(e));
    }
    if (message.chartsWithLinks?.length) {
      obj.chartsWithLinks = message.chartsWithLinks.map((e) => Chart1.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },
};

function createBaseGetChartSnapshotRequest(): GetChartSnapshotRequest {
  return { metricConfig: undefined, startTime: undefined, endTime: undefined };
}

export const GetChartSnapshotRequest: MessageFns<GetChartSnapshotRequest> = {
  encode(message: GetChartSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metricConfig !== undefined) {
      MetricConfig.encode(message.metricConfig, writer.uint32(10).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChartSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChartSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metricConfig = MetricConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChartSnapshotRequest {
    return {
      metricConfig: isSet(object.metricConfig) ? MetricConfig.fromJSON(object.metricConfig) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: GetChartSnapshotRequest): unknown {
    const obj: any = {};
    if (message.metricConfig !== undefined) {
      obj.metricConfig = MetricConfig.toJSON(message.metricConfig);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },
};

function createBaseGetChartSnapshotResponse(): GetChartSnapshotResponse {
  return { charts: [], xSeries: [], windowPeriod: undefined };
}

export const GetChartSnapshotResponse: MessageFns<GetChartSnapshotResponse> = {
  encode(message: GetChartSnapshotResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.charts) {
      DenseTimeSeriesChart.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.xSeries) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(18).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChartSnapshotResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChartSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.charts.push(DenseTimeSeriesChart.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.xSeries.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChartSnapshotResponse {
    return {
      charts: globalThis.Array.isArray(object?.charts)
        ? object.charts.map((e: any) => DenseTimeSeriesChart.fromJSON(e))
        : [],
      xSeries: globalThis.Array.isArray(object?.xSeries) ? object.xSeries.map((e: any) => fromJsonTimestamp(e)) : [],
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
    };
  },

  toJSON(message: GetChartSnapshotResponse): unknown {
    const obj: any = {};
    if (message.charts?.length) {
      obj.charts = message.charts.map((e) => DenseTimeSeriesChart.toJSON(e));
    }
    if (message.xSeries?.length) {
      obj.xSeries = message.xSeries.map((e) => e.toISOString());
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    return obj;
  },
};

export type ChartsServiceService = typeof ChartsServiceService;
export const ChartsServiceService = {
  listCharts: {
    path: "/chalk.server.v1.ChartsService/ListCharts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListChartsRequest) => Buffer.from(ListChartsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListChartsRequest.decode(value),
    responseSerialize: (value: ListChartsResponse) => Buffer.from(ListChartsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListChartsResponse.decode(value),
  },
  getChartSnapshot: {
    path: "/chalk.server.v1.ChartsService/GetChartSnapshot",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetChartSnapshotRequest) => Buffer.from(GetChartSnapshotRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetChartSnapshotRequest.decode(value),
    responseSerialize: (value: GetChartSnapshotResponse) =>
      Buffer.from(GetChartSnapshotResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetChartSnapshotResponse.decode(value),
  },
} as const;

export interface ChartsServiceServer extends UntypedServiceImplementation {
  listCharts: handleUnaryCall<ListChartsRequest, ListChartsResponse>;
  getChartSnapshot: handleUnaryCall<GetChartSnapshotRequest, GetChartSnapshotResponse>;
}

export interface ChartsServiceClient extends Client {
  listCharts(
    request: ListChartsRequest,
    callback: (error: ServiceError | null, response: ListChartsResponse) => void,
  ): ClientUnaryCall;
  listCharts(
    request: ListChartsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListChartsResponse) => void,
  ): ClientUnaryCall;
  listCharts(
    request: ListChartsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListChartsResponse) => void,
  ): ClientUnaryCall;
  getChartSnapshot(
    request: GetChartSnapshotRequest,
    callback: (error: ServiceError | null, response: GetChartSnapshotResponse) => void,
  ): ClientUnaryCall;
  getChartSnapshot(
    request: GetChartSnapshotRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetChartSnapshotResponse) => void,
  ): ClientUnaryCall;
  getChartSnapshot(
    request: GetChartSnapshotRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetChartSnapshotResponse) => void,
  ): ClientUnaryCall;
}

export const ChartsServiceClient = makeGenericClientConstructor(
  ChartsServiceService,
  "chalk.server.v1.ChartsService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ChartsServiceClient;
  service: typeof ChartsServiceService;
  serviceName: string;
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
