// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/environment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chalk.server.v1";

export enum CloudProviderKind {
  CLOUD_PROVIDER_KIND_UNSPECIFIED = 0,
  CLOUD_PROVIDER_KIND_UNKNOWN = 1,
  CLOUD_PROVIDER_KIND_GCP = 2,
  CLOUD_PROVIDER_KIND_AWS = 3,
  UNRECOGNIZED = -1,
}

export function cloudProviderKindFromJSON(object: any): CloudProviderKind {
  switch (object) {
    case 0:
    case "CLOUD_PROVIDER_KIND_UNSPECIFIED":
      return CloudProviderKind.CLOUD_PROVIDER_KIND_UNSPECIFIED;
    case 1:
    case "CLOUD_PROVIDER_KIND_UNKNOWN":
      return CloudProviderKind.CLOUD_PROVIDER_KIND_UNKNOWN;
    case 2:
    case "CLOUD_PROVIDER_KIND_GCP":
      return CloudProviderKind.CLOUD_PROVIDER_KIND_GCP;
    case 3:
    case "CLOUD_PROVIDER_KIND_AWS":
      return CloudProviderKind.CLOUD_PROVIDER_KIND_AWS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudProviderKind.UNRECOGNIZED;
  }
}

export function cloudProviderKindToJSON(object: CloudProviderKind): string {
  switch (object) {
    case CloudProviderKind.CLOUD_PROVIDER_KIND_UNSPECIFIED:
      return "CLOUD_PROVIDER_KIND_UNSPECIFIED";
    case CloudProviderKind.CLOUD_PROVIDER_KIND_UNKNOWN:
      return "CLOUD_PROVIDER_KIND_UNKNOWN";
    case CloudProviderKind.CLOUD_PROVIDER_KIND_GCP:
      return "CLOUD_PROVIDER_KIND_GCP";
    case CloudProviderKind.CLOUD_PROVIDER_KIND_AWS:
      return "CLOUD_PROVIDER_KIND_AWS";
    case CloudProviderKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AWSCloudWatchConfig {
  logGroupPath?: string | undefined;
  logGroupPaths: string[];
}

export interface AWSSecretManagerConfig {
  secretKmsArn?: string | undefined;
  secretTags: { [key: string]: string };
  secretPrefix?: string | undefined;
}

export interface AWSSecretManagerConfig_SecretTagsEntry {
  key: string;
  value: string;
}

export interface GCPWorkloadIdentity {
  gcpProjectNumber: string;
  gcpServiceAccount: string;
  poolId: string;
  providerId: string;
}

export interface DockerBuildConfig {
  builder: string;
  pushRegistryType: string;
  pushRegistryTagPrefix: string;
  registryCredentialsSecretId: string;
  notificationTopic: string;
}

export interface ElasticsearchLogConfig {
  username: string;
  password: string;
  endpoint: string;
}

export interface AWSCloudConfig {
  accountId: string;
  managementRoleArn: string;
  region: string;
  externalId?:
    | string
    | undefined;
  /** @deprecated */
  deprecatedCloudWatchConfig:
    | AWSCloudWatchConfig
    | undefined;
  /** @deprecated */
  deprecatedSecretManagerConfig:
    | AWSSecretManagerConfig
    | undefined;
  /** @deprecated */
  workloadIdentity: GCPWorkloadIdentity | undefined;
  dockerBuildConfig: DockerBuildConfig | undefined;
  elasticsearchLogConfig: ElasticsearchLogConfig | undefined;
  cloudwatchConfig: AWSCloudWatchConfig | undefined;
  secretmanagerConfig: AWSSecretManagerConfig | undefined;
  gcpWorkloadIdentity: GCPWorkloadIdentity | undefined;
}

export interface GCPCloudConfig {
  projectId: string;
  region: string;
  managementServiceAccount?: string | undefined;
  dockerBuildConfig: DockerBuildConfig | undefined;
}

export interface CloudConfig {
  aws?: AWSCloudConfig | undefined;
  gcp?: GCPCloudConfig | undefined;
}

export interface EnvironmentObjectStorageConfig {
  datasetBucket: string;
  planStagesBucket: string;
  sourceBundleBucket: string;
}

export interface Environment {
  name: string;
  projectId: string;
  id: string;
  teamId: string;
  activeDeploymentId?: string | undefined;
  workerUrl?: string | undefined;
  serviceUrl?: string | undefined;
  branchUrl?: string | undefined;
  offlineStoreSecret?: string | undefined;
  onlineStoreSecret?: string | undefined;
  featureStoreSecret?: string | undefined;
  postgresSecret?: string | undefined;
  onlineStoreKind?: string | undefined;
  emqUri?: string | undefined;
  vpcConnectorName?: string | undefined;
  kubeClusterName?: string | undefined;
  branchKubeClusterName?: string | undefined;
  engineKubeClusterName?: string | undefined;
  shadowEngineKubeClusterName?: string | undefined;
  kubeJobNamespace?: string | undefined;
  kubePreviewNamespace?: string | undefined;
  kubeServiceAccountName?: string | undefined;
  streamingQueryServiceUri?: string | undefined;
  skipOfflineWritesForOnlineCachedFeatures: boolean;
  resultBusTopic?: string | undefined;
  onlinePersistenceMode?: string | undefined;
  metricsBusTopic?: string | undefined;
  bigtableInstanceName?: string | undefined;
  bigtableTableName?: string | undefined;
  cloudAccountLocator?: string | undefined;
  cloudRegion?: string | undefined;
  cloudTenancyId?: string | undefined;
  sourceBundleBucket?: string | undefined;
  engineDockerRegistryPath?: string | undefined;
  defaultPlanner?: string | undefined;
  additionalEnvVars: { [key: string]: string };
  additionalCronEnvVars: { [key: string]: string };
  privatePipRepositories?: string | undefined;
  isSandbox: boolean;
  /** AWS/GCP */
  cloudProvider: CloudProviderKind;
  /** Null if the environment is hosted by Chalk. */
  cloudConfig?:
    | CloudConfig
    | undefined;
  /** TODO: really a structured object. */
  specConfigJson: { [key: string]: any | undefined };
  archivedAt?: Date | undefined;
  metadataServerMetricsStoreSecret?: string | undefined;
  queryServerMetricsStoreSecret?: string | undefined;
  pinnedBaseImage?: string | undefined;
  clusterGatewayId?: string | undefined;
  clusterTimescaledbId?: string | undefined;
  backgroundPersistenceDeploymentId?: string | undefined;
  environmentBuckets?: EnvironmentObjectStorageConfig | undefined;
  clusterTimescaledbSecret?: string | undefined;
  grpcEngineUrl?: string | undefined;
  kubeClusterMode?:
    | string
    | undefined;
  /**
   * string created_at: datetime=None,
   * string updated_at: Optional[datetime]=None,
   */
  dashboardUrl?: string | undefined;
}

export interface Environment_AdditionalEnvVarsEntry {
  key: string;
  value: string;
}

export interface Environment_AdditionalCronEnvVarsEntry {
  key: string;
  value: string;
}

export interface Environment_SpecConfigJsonEntry {
  key: string;
  value: any | undefined;
}

function createBaseAWSCloudWatchConfig(): AWSCloudWatchConfig {
  return { logGroupPath: undefined, logGroupPaths: [] };
}

export const AWSCloudWatchConfig: MessageFns<AWSCloudWatchConfig> = {
  encode(message: AWSCloudWatchConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.logGroupPath !== undefined) {
      writer.uint32(10).string(message.logGroupPath);
    }
    for (const v of message.logGroupPaths) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AWSCloudWatchConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAWSCloudWatchConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logGroupPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.logGroupPaths.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AWSCloudWatchConfig {
    return {
      logGroupPath: isSet(object.logGroupPath) ? globalThis.String(object.logGroupPath) : undefined,
      logGroupPaths: globalThis.Array.isArray(object?.logGroupPaths)
        ? object.logGroupPaths.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AWSCloudWatchConfig): unknown {
    const obj: any = {};
    if (message.logGroupPath !== undefined) {
      obj.logGroupPath = message.logGroupPath;
    }
    if (message.logGroupPaths?.length) {
      obj.logGroupPaths = message.logGroupPaths;
    }
    return obj;
  },
};

function createBaseAWSSecretManagerConfig(): AWSSecretManagerConfig {
  return { secretKmsArn: undefined, secretTags: {}, secretPrefix: undefined };
}

export const AWSSecretManagerConfig: MessageFns<AWSSecretManagerConfig> = {
  encode(message: AWSSecretManagerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretKmsArn !== undefined) {
      writer.uint32(10).string(message.secretKmsArn);
    }
    Object.entries(message.secretTags).forEach(([key, value]) => {
      AWSSecretManagerConfig_SecretTagsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.secretPrefix !== undefined) {
      writer.uint32(26).string(message.secretPrefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AWSSecretManagerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAWSSecretManagerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secretKmsArn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = AWSSecretManagerConfig_SecretTagsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.secretTags[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.secretPrefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AWSSecretManagerConfig {
    return {
      secretKmsArn: isSet(object.secretKmsArn) ? globalThis.String(object.secretKmsArn) : undefined,
      secretTags: isObject(object.secretTags)
        ? Object.entries(object.secretTags).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      secretPrefix: isSet(object.secretPrefix) ? globalThis.String(object.secretPrefix) : undefined,
    };
  },

  toJSON(message: AWSSecretManagerConfig): unknown {
    const obj: any = {};
    if (message.secretKmsArn !== undefined) {
      obj.secretKmsArn = message.secretKmsArn;
    }
    if (message.secretTags) {
      const entries = Object.entries(message.secretTags);
      if (entries.length > 0) {
        obj.secretTags = {};
        entries.forEach(([k, v]) => {
          obj.secretTags[k] = v;
        });
      }
    }
    if (message.secretPrefix !== undefined) {
      obj.secretPrefix = message.secretPrefix;
    }
    return obj;
  },
};

function createBaseAWSSecretManagerConfig_SecretTagsEntry(): AWSSecretManagerConfig_SecretTagsEntry {
  return { key: "", value: "" };
}

export const AWSSecretManagerConfig_SecretTagsEntry: MessageFns<AWSSecretManagerConfig_SecretTagsEntry> = {
  encode(message: AWSSecretManagerConfig_SecretTagsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AWSSecretManagerConfig_SecretTagsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAWSSecretManagerConfig_SecretTagsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AWSSecretManagerConfig_SecretTagsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AWSSecretManagerConfig_SecretTagsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseGCPWorkloadIdentity(): GCPWorkloadIdentity {
  return { gcpProjectNumber: "", gcpServiceAccount: "", poolId: "", providerId: "" };
}

export const GCPWorkloadIdentity: MessageFns<GCPWorkloadIdentity> = {
  encode(message: GCPWorkloadIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcpProjectNumber !== "") {
      writer.uint32(10).string(message.gcpProjectNumber);
    }
    if (message.gcpServiceAccount !== "") {
      writer.uint32(18).string(message.gcpServiceAccount);
    }
    if (message.poolId !== "") {
      writer.uint32(26).string(message.poolId);
    }
    if (message.providerId !== "") {
      writer.uint32(34).string(message.providerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCPWorkloadIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPWorkloadIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gcpProjectNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gcpServiceAccount = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPWorkloadIdentity {
    return {
      gcpProjectNumber: isSet(object.gcpProjectNumber) ? globalThis.String(object.gcpProjectNumber) : "",
      gcpServiceAccount: isSet(object.gcpServiceAccount) ? globalThis.String(object.gcpServiceAccount) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
    };
  },

  toJSON(message: GCPWorkloadIdentity): unknown {
    const obj: any = {};
    if (message.gcpProjectNumber !== "") {
      obj.gcpProjectNumber = message.gcpProjectNumber;
    }
    if (message.gcpServiceAccount !== "") {
      obj.gcpServiceAccount = message.gcpServiceAccount;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    return obj;
  },
};

function createBaseDockerBuildConfig(): DockerBuildConfig {
  return {
    builder: "",
    pushRegistryType: "",
    pushRegistryTagPrefix: "",
    registryCredentialsSecretId: "",
    notificationTopic: "",
  };
}

export const DockerBuildConfig: MessageFns<DockerBuildConfig> = {
  encode(message: DockerBuildConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.builder !== "") {
      writer.uint32(10).string(message.builder);
    }
    if (message.pushRegistryType !== "") {
      writer.uint32(18).string(message.pushRegistryType);
    }
    if (message.pushRegistryTagPrefix !== "") {
      writer.uint32(26).string(message.pushRegistryTagPrefix);
    }
    if (message.registryCredentialsSecretId !== "") {
      writer.uint32(34).string(message.registryCredentialsSecretId);
    }
    if (message.notificationTopic !== "") {
      writer.uint32(42).string(message.notificationTopic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DockerBuildConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDockerBuildConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.builder = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pushRegistryType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pushRegistryTagPrefix = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.registryCredentialsSecretId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.notificationTopic = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DockerBuildConfig {
    return {
      builder: isSet(object.builder) ? globalThis.String(object.builder) : "",
      pushRegistryType: isSet(object.pushRegistryType) ? globalThis.String(object.pushRegistryType) : "",
      pushRegistryTagPrefix: isSet(object.pushRegistryTagPrefix) ? globalThis.String(object.pushRegistryTagPrefix) : "",
      registryCredentialsSecretId: isSet(object.registryCredentialsSecretId)
        ? globalThis.String(object.registryCredentialsSecretId)
        : "",
      notificationTopic: isSet(object.notificationTopic) ? globalThis.String(object.notificationTopic) : "",
    };
  },

  toJSON(message: DockerBuildConfig): unknown {
    const obj: any = {};
    if (message.builder !== "") {
      obj.builder = message.builder;
    }
    if (message.pushRegistryType !== "") {
      obj.pushRegistryType = message.pushRegistryType;
    }
    if (message.pushRegistryTagPrefix !== "") {
      obj.pushRegistryTagPrefix = message.pushRegistryTagPrefix;
    }
    if (message.registryCredentialsSecretId !== "") {
      obj.registryCredentialsSecretId = message.registryCredentialsSecretId;
    }
    if (message.notificationTopic !== "") {
      obj.notificationTopic = message.notificationTopic;
    }
    return obj;
  },
};

function createBaseElasticsearchLogConfig(): ElasticsearchLogConfig {
  return { username: "", password: "", endpoint: "" };
}

export const ElasticsearchLogConfig: MessageFns<ElasticsearchLogConfig> = {
  encode(message: ElasticsearchLogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.endpoint !== "") {
      writer.uint32(26).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ElasticsearchLogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseElasticsearchLogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ElasticsearchLogConfig {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
    };
  },

  toJSON(message: ElasticsearchLogConfig): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },
};

function createBaseAWSCloudConfig(): AWSCloudConfig {
  return {
    accountId: "",
    managementRoleArn: "",
    region: "",
    externalId: undefined,
    deprecatedCloudWatchConfig: undefined,
    deprecatedSecretManagerConfig: undefined,
    workloadIdentity: undefined,
    dockerBuildConfig: undefined,
    elasticsearchLogConfig: undefined,
    cloudwatchConfig: undefined,
    secretmanagerConfig: undefined,
    gcpWorkloadIdentity: undefined,
  };
}

export const AWSCloudConfig: MessageFns<AWSCloudConfig> = {
  encode(message: AWSCloudConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.managementRoleArn !== "") {
      writer.uint32(18).string(message.managementRoleArn);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.externalId !== undefined) {
      writer.uint32(34).string(message.externalId);
    }
    if (message.deprecatedCloudWatchConfig !== undefined) {
      AWSCloudWatchConfig.encode(message.deprecatedCloudWatchConfig, writer.uint32(42).fork()).join();
    }
    if (message.deprecatedSecretManagerConfig !== undefined) {
      AWSSecretManagerConfig.encode(message.deprecatedSecretManagerConfig, writer.uint32(50).fork()).join();
    }
    if (message.workloadIdentity !== undefined) {
      GCPWorkloadIdentity.encode(message.workloadIdentity, writer.uint32(58).fork()).join();
    }
    if (message.dockerBuildConfig !== undefined) {
      DockerBuildConfig.encode(message.dockerBuildConfig, writer.uint32(66).fork()).join();
    }
    if (message.elasticsearchLogConfig !== undefined) {
      ElasticsearchLogConfig.encode(message.elasticsearchLogConfig, writer.uint32(74).fork()).join();
    }
    if (message.cloudwatchConfig !== undefined) {
      AWSCloudWatchConfig.encode(message.cloudwatchConfig, writer.uint32(82).fork()).join();
    }
    if (message.secretmanagerConfig !== undefined) {
      AWSSecretManagerConfig.encode(message.secretmanagerConfig, writer.uint32(90).fork()).join();
    }
    if (message.gcpWorkloadIdentity !== undefined) {
      GCPWorkloadIdentity.encode(message.gcpWorkloadIdentity, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AWSCloudConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAWSCloudConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.managementRoleArn = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deprecatedCloudWatchConfig = AWSCloudWatchConfig.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deprecatedSecretManagerConfig = AWSSecretManagerConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.workloadIdentity = GCPWorkloadIdentity.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.dockerBuildConfig = DockerBuildConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.elasticsearchLogConfig = ElasticsearchLogConfig.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.cloudwatchConfig = AWSCloudWatchConfig.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.secretmanagerConfig = AWSSecretManagerConfig.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.gcpWorkloadIdentity = GCPWorkloadIdentity.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AWSCloudConfig {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      managementRoleArn: isSet(object.managementRoleArn) ? globalThis.String(object.managementRoleArn) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : undefined,
      deprecatedCloudWatchConfig: isSet(object.deprecatedCloudWatchConfig)
        ? AWSCloudWatchConfig.fromJSON(object.deprecatedCloudWatchConfig)
        : undefined,
      deprecatedSecretManagerConfig: isSet(object.deprecatedSecretManagerConfig)
        ? AWSSecretManagerConfig.fromJSON(object.deprecatedSecretManagerConfig)
        : undefined,
      workloadIdentity: isSet(object.workloadIdentity)
        ? GCPWorkloadIdentity.fromJSON(object.workloadIdentity)
        : undefined,
      dockerBuildConfig: isSet(object.dockerBuildConfig)
        ? DockerBuildConfig.fromJSON(object.dockerBuildConfig)
        : undefined,
      elasticsearchLogConfig: isSet(object.elasticsearchLogConfig)
        ? ElasticsearchLogConfig.fromJSON(object.elasticsearchLogConfig)
        : undefined,
      cloudwatchConfig: isSet(object.cloudwatchConfig)
        ? AWSCloudWatchConfig.fromJSON(object.cloudwatchConfig)
        : undefined,
      secretmanagerConfig: isSet(object.secretmanagerConfig)
        ? AWSSecretManagerConfig.fromJSON(object.secretmanagerConfig)
        : undefined,
      gcpWorkloadIdentity: isSet(object.gcpWorkloadIdentity)
        ? GCPWorkloadIdentity.fromJSON(object.gcpWorkloadIdentity)
        : undefined,
    };
  },

  toJSON(message: AWSCloudConfig): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.managementRoleArn !== "") {
      obj.managementRoleArn = message.managementRoleArn;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.externalId !== undefined) {
      obj.externalId = message.externalId;
    }
    if (message.deprecatedCloudWatchConfig !== undefined) {
      obj.deprecatedCloudWatchConfig = AWSCloudWatchConfig.toJSON(message.deprecatedCloudWatchConfig);
    }
    if (message.deprecatedSecretManagerConfig !== undefined) {
      obj.deprecatedSecretManagerConfig = AWSSecretManagerConfig.toJSON(message.deprecatedSecretManagerConfig);
    }
    if (message.workloadIdentity !== undefined) {
      obj.workloadIdentity = GCPWorkloadIdentity.toJSON(message.workloadIdentity);
    }
    if (message.dockerBuildConfig !== undefined) {
      obj.dockerBuildConfig = DockerBuildConfig.toJSON(message.dockerBuildConfig);
    }
    if (message.elasticsearchLogConfig !== undefined) {
      obj.elasticsearchLogConfig = ElasticsearchLogConfig.toJSON(message.elasticsearchLogConfig);
    }
    if (message.cloudwatchConfig !== undefined) {
      obj.cloudwatchConfig = AWSCloudWatchConfig.toJSON(message.cloudwatchConfig);
    }
    if (message.secretmanagerConfig !== undefined) {
      obj.secretmanagerConfig = AWSSecretManagerConfig.toJSON(message.secretmanagerConfig);
    }
    if (message.gcpWorkloadIdentity !== undefined) {
      obj.gcpWorkloadIdentity = GCPWorkloadIdentity.toJSON(message.gcpWorkloadIdentity);
    }
    return obj;
  },
};

function createBaseGCPCloudConfig(): GCPCloudConfig {
  return { projectId: "", region: "", managementServiceAccount: undefined, dockerBuildConfig: undefined };
}

export const GCPCloudConfig: MessageFns<GCPCloudConfig> = {
  encode(message: GCPCloudConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.managementServiceAccount !== undefined) {
      writer.uint32(26).string(message.managementServiceAccount);
    }
    if (message.dockerBuildConfig !== undefined) {
      DockerBuildConfig.encode(message.dockerBuildConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCPCloudConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPCloudConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.managementServiceAccount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dockerBuildConfig = DockerBuildConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPCloudConfig {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      managementServiceAccount: isSet(object.managementServiceAccount)
        ? globalThis.String(object.managementServiceAccount)
        : undefined,
      dockerBuildConfig: isSet(object.dockerBuildConfig)
        ? DockerBuildConfig.fromJSON(object.dockerBuildConfig)
        : undefined,
    };
  },

  toJSON(message: GCPCloudConfig): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.managementServiceAccount !== undefined) {
      obj.managementServiceAccount = message.managementServiceAccount;
    }
    if (message.dockerBuildConfig !== undefined) {
      obj.dockerBuildConfig = DockerBuildConfig.toJSON(message.dockerBuildConfig);
    }
    return obj;
  },
};

function createBaseCloudConfig(): CloudConfig {
  return { aws: undefined, gcp: undefined };
}

export const CloudConfig: MessageFns<CloudConfig> = {
  encode(message: CloudConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aws !== undefined) {
      AWSCloudConfig.encode(message.aws, writer.uint32(10).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPCloudConfig.encode(message.gcp, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aws = AWSCloudConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gcp = GCPCloudConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudConfig {
    return {
      aws: isSet(object.aws) ? AWSCloudConfig.fromJSON(object.aws) : undefined,
      gcp: isSet(object.gcp) ? GCPCloudConfig.fromJSON(object.gcp) : undefined,
    };
  },

  toJSON(message: CloudConfig): unknown {
    const obj: any = {};
    if (message.aws !== undefined) {
      obj.aws = AWSCloudConfig.toJSON(message.aws);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPCloudConfig.toJSON(message.gcp);
    }
    return obj;
  },
};

function createBaseEnvironmentObjectStorageConfig(): EnvironmentObjectStorageConfig {
  return { datasetBucket: "", planStagesBucket: "", sourceBundleBucket: "" };
}

export const EnvironmentObjectStorageConfig: MessageFns<EnvironmentObjectStorageConfig> = {
  encode(message: EnvironmentObjectStorageConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetBucket !== "") {
      writer.uint32(10).string(message.datasetBucket);
    }
    if (message.planStagesBucket !== "") {
      writer.uint32(18).string(message.planStagesBucket);
    }
    if (message.sourceBundleBucket !== "") {
      writer.uint32(26).string(message.sourceBundleBucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentObjectStorageConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentObjectStorageConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.datasetBucket = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.planStagesBucket = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceBundleBucket = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentObjectStorageConfig {
    return {
      datasetBucket: isSet(object.datasetBucket) ? globalThis.String(object.datasetBucket) : "",
      planStagesBucket: isSet(object.planStagesBucket) ? globalThis.String(object.planStagesBucket) : "",
      sourceBundleBucket: isSet(object.sourceBundleBucket) ? globalThis.String(object.sourceBundleBucket) : "",
    };
  },

  toJSON(message: EnvironmentObjectStorageConfig): unknown {
    const obj: any = {};
    if (message.datasetBucket !== "") {
      obj.datasetBucket = message.datasetBucket;
    }
    if (message.planStagesBucket !== "") {
      obj.planStagesBucket = message.planStagesBucket;
    }
    if (message.sourceBundleBucket !== "") {
      obj.sourceBundleBucket = message.sourceBundleBucket;
    }
    return obj;
  },
};

function createBaseEnvironment(): Environment {
  return {
    name: "",
    projectId: "",
    id: "",
    teamId: "",
    activeDeploymentId: undefined,
    workerUrl: undefined,
    serviceUrl: undefined,
    branchUrl: undefined,
    offlineStoreSecret: undefined,
    onlineStoreSecret: undefined,
    featureStoreSecret: undefined,
    postgresSecret: undefined,
    onlineStoreKind: undefined,
    emqUri: undefined,
    vpcConnectorName: undefined,
    kubeClusterName: undefined,
    branchKubeClusterName: undefined,
    engineKubeClusterName: undefined,
    shadowEngineKubeClusterName: undefined,
    kubeJobNamespace: undefined,
    kubePreviewNamespace: undefined,
    kubeServiceAccountName: undefined,
    streamingQueryServiceUri: undefined,
    skipOfflineWritesForOnlineCachedFeatures: false,
    resultBusTopic: undefined,
    onlinePersistenceMode: undefined,
    metricsBusTopic: undefined,
    bigtableInstanceName: undefined,
    bigtableTableName: undefined,
    cloudAccountLocator: undefined,
    cloudRegion: undefined,
    cloudTenancyId: undefined,
    sourceBundleBucket: undefined,
    engineDockerRegistryPath: undefined,
    defaultPlanner: undefined,
    additionalEnvVars: {},
    additionalCronEnvVars: {},
    privatePipRepositories: undefined,
    isSandbox: false,
    cloudProvider: 0,
    cloudConfig: undefined,
    specConfigJson: {},
    archivedAt: undefined,
    metadataServerMetricsStoreSecret: undefined,
    queryServerMetricsStoreSecret: undefined,
    pinnedBaseImage: undefined,
    clusterGatewayId: undefined,
    clusterTimescaledbId: undefined,
    backgroundPersistenceDeploymentId: undefined,
    environmentBuckets: undefined,
    clusterTimescaledbSecret: undefined,
    grpcEngineUrl: undefined,
    kubeClusterMode: undefined,
    dashboardUrl: undefined,
  };
}

export const Environment: MessageFns<Environment> = {
  encode(message: Environment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.teamId !== "") {
      writer.uint32(34).string(message.teamId);
    }
    if (message.activeDeploymentId !== undefined) {
      writer.uint32(42).string(message.activeDeploymentId);
    }
    if (message.workerUrl !== undefined) {
      writer.uint32(50).string(message.workerUrl);
    }
    if (message.serviceUrl !== undefined) {
      writer.uint32(58).string(message.serviceUrl);
    }
    if (message.branchUrl !== undefined) {
      writer.uint32(66).string(message.branchUrl);
    }
    if (message.offlineStoreSecret !== undefined) {
      writer.uint32(74).string(message.offlineStoreSecret);
    }
    if (message.onlineStoreSecret !== undefined) {
      writer.uint32(82).string(message.onlineStoreSecret);
    }
    if (message.featureStoreSecret !== undefined) {
      writer.uint32(90).string(message.featureStoreSecret);
    }
    if (message.postgresSecret !== undefined) {
      writer.uint32(98).string(message.postgresSecret);
    }
    if (message.onlineStoreKind !== undefined) {
      writer.uint32(106).string(message.onlineStoreKind);
    }
    if (message.emqUri !== undefined) {
      writer.uint32(114).string(message.emqUri);
    }
    if (message.vpcConnectorName !== undefined) {
      writer.uint32(122).string(message.vpcConnectorName);
    }
    if (message.kubeClusterName !== undefined) {
      writer.uint32(130).string(message.kubeClusterName);
    }
    if (message.branchKubeClusterName !== undefined) {
      writer.uint32(138).string(message.branchKubeClusterName);
    }
    if (message.engineKubeClusterName !== undefined) {
      writer.uint32(146).string(message.engineKubeClusterName);
    }
    if (message.shadowEngineKubeClusterName !== undefined) {
      writer.uint32(154).string(message.shadowEngineKubeClusterName);
    }
    if (message.kubeJobNamespace !== undefined) {
      writer.uint32(162).string(message.kubeJobNamespace);
    }
    if (message.kubePreviewNamespace !== undefined) {
      writer.uint32(170).string(message.kubePreviewNamespace);
    }
    if (message.kubeServiceAccountName !== undefined) {
      writer.uint32(178).string(message.kubeServiceAccountName);
    }
    if (message.streamingQueryServiceUri !== undefined) {
      writer.uint32(186).string(message.streamingQueryServiceUri);
    }
    if (message.skipOfflineWritesForOnlineCachedFeatures !== false) {
      writer.uint32(192).bool(message.skipOfflineWritesForOnlineCachedFeatures);
    }
    if (message.resultBusTopic !== undefined) {
      writer.uint32(202).string(message.resultBusTopic);
    }
    if (message.onlinePersistenceMode !== undefined) {
      writer.uint32(210).string(message.onlinePersistenceMode);
    }
    if (message.metricsBusTopic !== undefined) {
      writer.uint32(218).string(message.metricsBusTopic);
    }
    if (message.bigtableInstanceName !== undefined) {
      writer.uint32(226).string(message.bigtableInstanceName);
    }
    if (message.bigtableTableName !== undefined) {
      writer.uint32(234).string(message.bigtableTableName);
    }
    if (message.cloudAccountLocator !== undefined) {
      writer.uint32(242).string(message.cloudAccountLocator);
    }
    if (message.cloudRegion !== undefined) {
      writer.uint32(250).string(message.cloudRegion);
    }
    if (message.cloudTenancyId !== undefined) {
      writer.uint32(258).string(message.cloudTenancyId);
    }
    if (message.sourceBundleBucket !== undefined) {
      writer.uint32(266).string(message.sourceBundleBucket);
    }
    if (message.engineDockerRegistryPath !== undefined) {
      writer.uint32(274).string(message.engineDockerRegistryPath);
    }
    if (message.defaultPlanner !== undefined) {
      writer.uint32(282).string(message.defaultPlanner);
    }
    Object.entries(message.additionalEnvVars).forEach(([key, value]) => {
      Environment_AdditionalEnvVarsEntry.encode({ key: key as any, value }, writer.uint32(290).fork()).join();
    });
    Object.entries(message.additionalCronEnvVars).forEach(([key, value]) => {
      Environment_AdditionalCronEnvVarsEntry.encode({ key: key as any, value }, writer.uint32(298).fork()).join();
    });
    if (message.privatePipRepositories !== undefined) {
      writer.uint32(306).string(message.privatePipRepositories);
    }
    if (message.isSandbox !== false) {
      writer.uint32(312).bool(message.isSandbox);
    }
    if (message.cloudProvider !== 0) {
      writer.uint32(328).int32(message.cloudProvider);
    }
    if (message.cloudConfig !== undefined) {
      CloudConfig.encode(message.cloudConfig, writer.uint32(338).fork()).join();
    }
    Object.entries(message.specConfigJson).forEach(([key, value]) => {
      if (value !== undefined) {
        Environment_SpecConfigJsonEntry.encode({ key: key as any, value }, writer.uint32(322).fork()).join();
      }
    });
    if (message.archivedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.archivedAt), writer.uint32(346).fork()).join();
    }
    if (message.metadataServerMetricsStoreSecret !== undefined) {
      writer.uint32(354).string(message.metadataServerMetricsStoreSecret);
    }
    if (message.queryServerMetricsStoreSecret !== undefined) {
      writer.uint32(362).string(message.queryServerMetricsStoreSecret);
    }
    if (message.pinnedBaseImage !== undefined) {
      writer.uint32(370).string(message.pinnedBaseImage);
    }
    if (message.clusterGatewayId !== undefined) {
      writer.uint32(378).string(message.clusterGatewayId);
    }
    if (message.clusterTimescaledbId !== undefined) {
      writer.uint32(386).string(message.clusterTimescaledbId);
    }
    if (message.backgroundPersistenceDeploymentId !== undefined) {
      writer.uint32(394).string(message.backgroundPersistenceDeploymentId);
    }
    if (message.environmentBuckets !== undefined) {
      EnvironmentObjectStorageConfig.encode(message.environmentBuckets, writer.uint32(402).fork()).join();
    }
    if (message.clusterTimescaledbSecret !== undefined) {
      writer.uint32(410).string(message.clusterTimescaledbSecret);
    }
    if (message.grpcEngineUrl !== undefined) {
      writer.uint32(418).string(message.grpcEngineUrl);
    }
    if (message.kubeClusterMode !== undefined) {
      writer.uint32(426).string(message.kubeClusterMode);
    }
    if (message.dashboardUrl !== undefined) {
      writer.uint32(434).string(message.dashboardUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.activeDeploymentId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.workerUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.serviceUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.branchUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.offlineStoreSecret = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.onlineStoreSecret = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.featureStoreSecret = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.postgresSecret = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.onlineStoreKind = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.emqUri = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.vpcConnectorName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.kubeClusterName = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.branchKubeClusterName = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.engineKubeClusterName = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.shadowEngineKubeClusterName = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.kubeJobNamespace = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.kubePreviewNamespace = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.kubeServiceAccountName = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.streamingQueryServiceUri = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.skipOfflineWritesForOnlineCachedFeatures = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.resultBusTopic = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.onlinePersistenceMode = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.metricsBusTopic = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.bigtableInstanceName = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.bigtableTableName = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.cloudAccountLocator = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.cloudRegion = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.cloudTenancyId = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.sourceBundleBucket = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.engineDockerRegistryPath = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.defaultPlanner = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          const entry36 = Environment_AdditionalEnvVarsEntry.decode(reader, reader.uint32());
          if (entry36.value !== undefined) {
            message.additionalEnvVars[entry36.key] = entry36.value;
          }
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          const entry37 = Environment_AdditionalCronEnvVarsEntry.decode(reader, reader.uint32());
          if (entry37.value !== undefined) {
            message.additionalCronEnvVars[entry37.key] = entry37.value;
          }
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.privatePipRepositories = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.isSandbox = reader.bool();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.cloudProvider = reader.int32() as any;
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.cloudConfig = CloudConfig.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          const entry40 = Environment_SpecConfigJsonEntry.decode(reader, reader.uint32());
          if (entry40.value !== undefined) {
            message.specConfigJson[entry40.key] = entry40.value;
          }
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.archivedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.metadataServerMetricsStoreSecret = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.queryServerMetricsStoreSecret = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.pinnedBaseImage = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.clusterGatewayId = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.clusterTimescaledbId = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.backgroundPersistenceDeploymentId = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.environmentBuckets = EnvironmentObjectStorageConfig.decode(reader, reader.uint32());
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.clusterTimescaledbSecret = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.grpcEngineUrl = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.kubeClusterMode = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.dashboardUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      activeDeploymentId: isSet(object.activeDeploymentId) ? globalThis.String(object.activeDeploymentId) : undefined,
      workerUrl: isSet(object.workerUrl) ? globalThis.String(object.workerUrl) : undefined,
      serviceUrl: isSet(object.serviceUrl) ? globalThis.String(object.serviceUrl) : undefined,
      branchUrl: isSet(object.branchUrl) ? globalThis.String(object.branchUrl) : undefined,
      offlineStoreSecret: isSet(object.offlineStoreSecret) ? globalThis.String(object.offlineStoreSecret) : undefined,
      onlineStoreSecret: isSet(object.onlineStoreSecret) ? globalThis.String(object.onlineStoreSecret) : undefined,
      featureStoreSecret: isSet(object.featureStoreSecret) ? globalThis.String(object.featureStoreSecret) : undefined,
      postgresSecret: isSet(object.postgresSecret) ? globalThis.String(object.postgresSecret) : undefined,
      onlineStoreKind: isSet(object.onlineStoreKind) ? globalThis.String(object.onlineStoreKind) : undefined,
      emqUri: isSet(object.emqUri) ? globalThis.String(object.emqUri) : undefined,
      vpcConnectorName: isSet(object.vpcConnectorName) ? globalThis.String(object.vpcConnectorName) : undefined,
      kubeClusterName: isSet(object.kubeClusterName) ? globalThis.String(object.kubeClusterName) : undefined,
      branchKubeClusterName: isSet(object.branchKubeClusterName)
        ? globalThis.String(object.branchKubeClusterName)
        : undefined,
      engineKubeClusterName: isSet(object.engineKubeClusterName)
        ? globalThis.String(object.engineKubeClusterName)
        : undefined,
      shadowEngineKubeClusterName: isSet(object.shadowEngineKubeClusterName)
        ? globalThis.String(object.shadowEngineKubeClusterName)
        : undefined,
      kubeJobNamespace: isSet(object.kubeJobNamespace) ? globalThis.String(object.kubeJobNamespace) : undefined,
      kubePreviewNamespace: isSet(object.kubePreviewNamespace)
        ? globalThis.String(object.kubePreviewNamespace)
        : undefined,
      kubeServiceAccountName: isSet(object.kubeServiceAccountName)
        ? globalThis.String(object.kubeServiceAccountName)
        : undefined,
      streamingQueryServiceUri: isSet(object.streamingQueryServiceUri)
        ? globalThis.String(object.streamingQueryServiceUri)
        : undefined,
      skipOfflineWritesForOnlineCachedFeatures: isSet(object.skipOfflineWritesForOnlineCachedFeatures)
        ? globalThis.Boolean(object.skipOfflineWritesForOnlineCachedFeatures)
        : false,
      resultBusTopic: isSet(object.resultBusTopic) ? globalThis.String(object.resultBusTopic) : undefined,
      onlinePersistenceMode: isSet(object.onlinePersistenceMode)
        ? globalThis.String(object.onlinePersistenceMode)
        : undefined,
      metricsBusTopic: isSet(object.metricsBusTopic) ? globalThis.String(object.metricsBusTopic) : undefined,
      bigtableInstanceName: isSet(object.bigtableInstanceName)
        ? globalThis.String(object.bigtableInstanceName)
        : undefined,
      bigtableTableName: isSet(object.bigtableTableName) ? globalThis.String(object.bigtableTableName) : undefined,
      cloudAccountLocator: isSet(object.cloudAccountLocator)
        ? globalThis.String(object.cloudAccountLocator)
        : undefined,
      cloudRegion: isSet(object.cloudRegion) ? globalThis.String(object.cloudRegion) : undefined,
      cloudTenancyId: isSet(object.cloudTenancyId) ? globalThis.String(object.cloudTenancyId) : undefined,
      sourceBundleBucket: isSet(object.sourceBundleBucket) ? globalThis.String(object.sourceBundleBucket) : undefined,
      engineDockerRegistryPath: isSet(object.engineDockerRegistryPath)
        ? globalThis.String(object.engineDockerRegistryPath)
        : undefined,
      defaultPlanner: isSet(object.defaultPlanner) ? globalThis.String(object.defaultPlanner) : undefined,
      additionalEnvVars: isObject(object.additionalEnvVars)
        ? Object.entries(object.additionalEnvVars).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      additionalCronEnvVars: isObject(object.additionalCronEnvVars)
        ? Object.entries(object.additionalCronEnvVars).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      privatePipRepositories: isSet(object.privatePipRepositories)
        ? globalThis.String(object.privatePipRepositories)
        : undefined,
      isSandbox: isSet(object.isSandbox) ? globalThis.Boolean(object.isSandbox) : false,
      cloudProvider: isSet(object.cloudProvider) ? cloudProviderKindFromJSON(object.cloudProvider) : 0,
      cloudConfig: isSet(object.cloudConfig) ? CloudConfig.fromJSON(object.cloudConfig) : undefined,
      specConfigJson: isObject(object.specConfigJson)
        ? Object.entries(object.specConfigJson).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      archivedAt: isSet(object.archivedAt) ? fromJsonTimestamp(object.archivedAt) : undefined,
      metadataServerMetricsStoreSecret: isSet(object.metadataServerMetricsStoreSecret)
        ? globalThis.String(object.metadataServerMetricsStoreSecret)
        : undefined,
      queryServerMetricsStoreSecret: isSet(object.queryServerMetricsStoreSecret)
        ? globalThis.String(object.queryServerMetricsStoreSecret)
        : undefined,
      pinnedBaseImage: isSet(object.pinnedBaseImage) ? globalThis.String(object.pinnedBaseImage) : undefined,
      clusterGatewayId: isSet(object.clusterGatewayId) ? globalThis.String(object.clusterGatewayId) : undefined,
      clusterTimescaledbId: isSet(object.clusterTimescaledbId)
        ? globalThis.String(object.clusterTimescaledbId)
        : undefined,
      backgroundPersistenceDeploymentId: isSet(object.backgroundPersistenceDeploymentId)
        ? globalThis.String(object.backgroundPersistenceDeploymentId)
        : undefined,
      environmentBuckets: isSet(object.environmentBuckets)
        ? EnvironmentObjectStorageConfig.fromJSON(object.environmentBuckets)
        : undefined,
      clusterTimescaledbSecret: isSet(object.clusterTimescaledbSecret)
        ? globalThis.String(object.clusterTimescaledbSecret)
        : undefined,
      grpcEngineUrl: isSet(object.grpcEngineUrl) ? globalThis.String(object.grpcEngineUrl) : undefined,
      kubeClusterMode: isSet(object.kubeClusterMode) ? globalThis.String(object.kubeClusterMode) : undefined,
      dashboardUrl: isSet(object.dashboardUrl) ? globalThis.String(object.dashboardUrl) : undefined,
    };
  },

  toJSON(message: Environment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.activeDeploymentId !== undefined) {
      obj.activeDeploymentId = message.activeDeploymentId;
    }
    if (message.workerUrl !== undefined) {
      obj.workerUrl = message.workerUrl;
    }
    if (message.serviceUrl !== undefined) {
      obj.serviceUrl = message.serviceUrl;
    }
    if (message.branchUrl !== undefined) {
      obj.branchUrl = message.branchUrl;
    }
    if (message.offlineStoreSecret !== undefined) {
      obj.offlineStoreSecret = message.offlineStoreSecret;
    }
    if (message.onlineStoreSecret !== undefined) {
      obj.onlineStoreSecret = message.onlineStoreSecret;
    }
    if (message.featureStoreSecret !== undefined) {
      obj.featureStoreSecret = message.featureStoreSecret;
    }
    if (message.postgresSecret !== undefined) {
      obj.postgresSecret = message.postgresSecret;
    }
    if (message.onlineStoreKind !== undefined) {
      obj.onlineStoreKind = message.onlineStoreKind;
    }
    if (message.emqUri !== undefined) {
      obj.emqUri = message.emqUri;
    }
    if (message.vpcConnectorName !== undefined) {
      obj.vpcConnectorName = message.vpcConnectorName;
    }
    if (message.kubeClusterName !== undefined) {
      obj.kubeClusterName = message.kubeClusterName;
    }
    if (message.branchKubeClusterName !== undefined) {
      obj.branchKubeClusterName = message.branchKubeClusterName;
    }
    if (message.engineKubeClusterName !== undefined) {
      obj.engineKubeClusterName = message.engineKubeClusterName;
    }
    if (message.shadowEngineKubeClusterName !== undefined) {
      obj.shadowEngineKubeClusterName = message.shadowEngineKubeClusterName;
    }
    if (message.kubeJobNamespace !== undefined) {
      obj.kubeJobNamespace = message.kubeJobNamespace;
    }
    if (message.kubePreviewNamespace !== undefined) {
      obj.kubePreviewNamespace = message.kubePreviewNamespace;
    }
    if (message.kubeServiceAccountName !== undefined) {
      obj.kubeServiceAccountName = message.kubeServiceAccountName;
    }
    if (message.streamingQueryServiceUri !== undefined) {
      obj.streamingQueryServiceUri = message.streamingQueryServiceUri;
    }
    if (message.skipOfflineWritesForOnlineCachedFeatures !== false) {
      obj.skipOfflineWritesForOnlineCachedFeatures = message.skipOfflineWritesForOnlineCachedFeatures;
    }
    if (message.resultBusTopic !== undefined) {
      obj.resultBusTopic = message.resultBusTopic;
    }
    if (message.onlinePersistenceMode !== undefined) {
      obj.onlinePersistenceMode = message.onlinePersistenceMode;
    }
    if (message.metricsBusTopic !== undefined) {
      obj.metricsBusTopic = message.metricsBusTopic;
    }
    if (message.bigtableInstanceName !== undefined) {
      obj.bigtableInstanceName = message.bigtableInstanceName;
    }
    if (message.bigtableTableName !== undefined) {
      obj.bigtableTableName = message.bigtableTableName;
    }
    if (message.cloudAccountLocator !== undefined) {
      obj.cloudAccountLocator = message.cloudAccountLocator;
    }
    if (message.cloudRegion !== undefined) {
      obj.cloudRegion = message.cloudRegion;
    }
    if (message.cloudTenancyId !== undefined) {
      obj.cloudTenancyId = message.cloudTenancyId;
    }
    if (message.sourceBundleBucket !== undefined) {
      obj.sourceBundleBucket = message.sourceBundleBucket;
    }
    if (message.engineDockerRegistryPath !== undefined) {
      obj.engineDockerRegistryPath = message.engineDockerRegistryPath;
    }
    if (message.defaultPlanner !== undefined) {
      obj.defaultPlanner = message.defaultPlanner;
    }
    if (message.additionalEnvVars) {
      const entries = Object.entries(message.additionalEnvVars);
      if (entries.length > 0) {
        obj.additionalEnvVars = {};
        entries.forEach(([k, v]) => {
          obj.additionalEnvVars[k] = v;
        });
      }
    }
    if (message.additionalCronEnvVars) {
      const entries = Object.entries(message.additionalCronEnvVars);
      if (entries.length > 0) {
        obj.additionalCronEnvVars = {};
        entries.forEach(([k, v]) => {
          obj.additionalCronEnvVars[k] = v;
        });
      }
    }
    if (message.privatePipRepositories !== undefined) {
      obj.privatePipRepositories = message.privatePipRepositories;
    }
    if (message.isSandbox !== false) {
      obj.isSandbox = message.isSandbox;
    }
    if (message.cloudProvider !== 0) {
      obj.cloudProvider = cloudProviderKindToJSON(message.cloudProvider);
    }
    if (message.cloudConfig !== undefined) {
      obj.cloudConfig = CloudConfig.toJSON(message.cloudConfig);
    }
    if (message.specConfigJson) {
      const entries = Object.entries(message.specConfigJson);
      if (entries.length > 0) {
        obj.specConfigJson = {};
        entries.forEach(([k, v]) => {
          obj.specConfigJson[k] = v;
        });
      }
    }
    if (message.archivedAt !== undefined) {
      obj.archivedAt = message.archivedAt.toISOString();
    }
    if (message.metadataServerMetricsStoreSecret !== undefined) {
      obj.metadataServerMetricsStoreSecret = message.metadataServerMetricsStoreSecret;
    }
    if (message.queryServerMetricsStoreSecret !== undefined) {
      obj.queryServerMetricsStoreSecret = message.queryServerMetricsStoreSecret;
    }
    if (message.pinnedBaseImage !== undefined) {
      obj.pinnedBaseImage = message.pinnedBaseImage;
    }
    if (message.clusterGatewayId !== undefined) {
      obj.clusterGatewayId = message.clusterGatewayId;
    }
    if (message.clusterTimescaledbId !== undefined) {
      obj.clusterTimescaledbId = message.clusterTimescaledbId;
    }
    if (message.backgroundPersistenceDeploymentId !== undefined) {
      obj.backgroundPersistenceDeploymentId = message.backgroundPersistenceDeploymentId;
    }
    if (message.environmentBuckets !== undefined) {
      obj.environmentBuckets = EnvironmentObjectStorageConfig.toJSON(message.environmentBuckets);
    }
    if (message.clusterTimescaledbSecret !== undefined) {
      obj.clusterTimescaledbSecret = message.clusterTimescaledbSecret;
    }
    if (message.grpcEngineUrl !== undefined) {
      obj.grpcEngineUrl = message.grpcEngineUrl;
    }
    if (message.kubeClusterMode !== undefined) {
      obj.kubeClusterMode = message.kubeClusterMode;
    }
    if (message.dashboardUrl !== undefined) {
      obj.dashboardUrl = message.dashboardUrl;
    }
    return obj;
  },
};

function createBaseEnvironment_AdditionalEnvVarsEntry(): Environment_AdditionalEnvVarsEntry {
  return { key: "", value: "" };
}

export const Environment_AdditionalEnvVarsEntry: MessageFns<Environment_AdditionalEnvVarsEntry> = {
  encode(message: Environment_AdditionalEnvVarsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_AdditionalEnvVarsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_AdditionalEnvVarsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_AdditionalEnvVarsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Environment_AdditionalEnvVarsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseEnvironment_AdditionalCronEnvVarsEntry(): Environment_AdditionalCronEnvVarsEntry {
  return { key: "", value: "" };
}

export const Environment_AdditionalCronEnvVarsEntry: MessageFns<Environment_AdditionalCronEnvVarsEntry> = {
  encode(message: Environment_AdditionalCronEnvVarsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_AdditionalCronEnvVarsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_AdditionalCronEnvVarsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_AdditionalCronEnvVarsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Environment_AdditionalCronEnvVarsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseEnvironment_SpecConfigJsonEntry(): Environment_SpecConfigJsonEntry {
  return { key: "", value: undefined };
}

export const Environment_SpecConfigJsonEntry: MessageFns<Environment_SpecConfigJsonEntry> = {
  encode(message: Environment_SpecConfigJsonEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment_SpecConfigJsonEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment_SpecConfigJsonEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment_SpecConfigJsonEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: Environment_SpecConfigJsonEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
