// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";
import {
  CreateLinkSessionRequest,
  CreateLinkSessionResponse,
  GetLinkSessionRequest,
  GetLinkSessionResponse,
} from "./link";

export const protobufPackage = "chalk.server.v1";

export interface GetTokenRequest {
  clientId: string;
  clientSecret: string;
  grantType: string;
  scope?: string | undefined;
}

export interface GetTokenResponse {
  accessToken: string;
  tokenType: string;
  expiresIn: number;
  expiresAt: Date | undefined;
  apiServer: string;
  primaryEnvironment?:
    | string
    | undefined;
  /** Maps of environment_id --> url */
  engines: { [key: string]: string };
  grpcEngines: { [key: string]: string };
  environmentIdToName: { [key: string]: string };
}

export interface GetTokenResponse_EnginesEntry {
  key: string;
  value: string;
}

export interface GetTokenResponse_GrpcEnginesEntry {
  key: string;
  value: string;
}

export interface GetTokenResponse_EnvironmentIdToNameEntry {
  key: string;
  value: string;
}

export interface UpdateLinkSessionRequest {
  status: string;
  userId: string;
  sessionId: string;
}

export interface UpdateLinkSessionResponse {
  id: string;
}

function createBaseGetTokenRequest(): GetTokenRequest {
  return { clientId: "", clientSecret: "", grantType: "", scope: undefined };
}

export const GetTokenRequest: MessageFns<GetTokenRequest> = {
  encode(message: GetTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(18).string(message.clientSecret);
    }
    if (message.grantType !== "") {
      writer.uint32(26).string(message.grantType);
    }
    if (message.scope !== undefined) {
      writer.uint32(34).string(message.scope);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.grantType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.scope = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenRequest {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      grantType: isSet(object.grantType) ? globalThis.String(object.grantType) : "",
      scope: isSet(object.scope) ? globalThis.String(object.scope) : undefined,
    };
  },

  toJSON(message: GetTokenRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.grantType !== "") {
      obj.grantType = message.grantType;
    }
    if (message.scope !== undefined) {
      obj.scope = message.scope;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokenRequest>, I>>(base?: I): GetTokenRequest {
    return GetTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokenRequest>, I>>(object: I): GetTokenRequest {
    const message = createBaseGetTokenRequest();
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.grantType = object.grantType ?? "";
    message.scope = object.scope ?? undefined;
    return message;
  },
};

function createBaseGetTokenResponse(): GetTokenResponse {
  return {
    accessToken: "",
    tokenType: "",
    expiresIn: 0,
    expiresAt: undefined,
    apiServer: "",
    primaryEnvironment: undefined,
    engines: {},
    grpcEngines: {},
    environmentIdToName: {},
  };
}

export const GetTokenResponse: MessageFns<GetTokenResponse> = {
  encode(message: GetTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.tokenType !== "") {
      writer.uint32(18).string(message.tokenType);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(24).int32(message.expiresIn);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(34).fork()).join();
    }
    if (message.apiServer !== "") {
      writer.uint32(42).string(message.apiServer);
    }
    if (message.primaryEnvironment !== undefined) {
      writer.uint32(50).string(message.primaryEnvironment);
    }
    Object.entries(message.engines).forEach(([key, value]) => {
      GetTokenResponse_EnginesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    Object.entries(message.grpcEngines).forEach(([key, value]) => {
      GetTokenResponse_GrpcEnginesEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    Object.entries(message.environmentIdToName).forEach(([key, value]) => {
      GetTokenResponse_EnvironmentIdToNameEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.apiServer = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.primaryEnvironment = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = GetTokenResponse_EnginesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.engines[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = GetTokenResponse_GrpcEnginesEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.grpcEngines[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = GetTokenResponse_EnvironmentIdToNameEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.environmentIdToName[entry9.key] = entry9.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      tokenType: isSet(object.tokenType) ? globalThis.String(object.tokenType) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      apiServer: isSet(object.apiServer) ? globalThis.String(object.apiServer) : "",
      primaryEnvironment: isSet(object.primaryEnvironment) ? globalThis.String(object.primaryEnvironment) : undefined,
      engines: isObject(object.engines)
        ? Object.entries(object.engines).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      grpcEngines: isObject(object.grpcEngines)
        ? Object.entries(object.grpcEngines).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environmentIdToName: isObject(object.environmentIdToName)
        ? Object.entries(object.environmentIdToName).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GetTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.tokenType !== "") {
      obj.tokenType = message.tokenType;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.apiServer !== "") {
      obj.apiServer = message.apiServer;
    }
    if (message.primaryEnvironment !== undefined) {
      obj.primaryEnvironment = message.primaryEnvironment;
    }
    if (message.engines) {
      const entries = Object.entries(message.engines);
      if (entries.length > 0) {
        obj.engines = {};
        entries.forEach(([k, v]) => {
          obj.engines[k] = v;
        });
      }
    }
    if (message.grpcEngines) {
      const entries = Object.entries(message.grpcEngines);
      if (entries.length > 0) {
        obj.grpcEngines = {};
        entries.forEach(([k, v]) => {
          obj.grpcEngines[k] = v;
        });
      }
    }
    if (message.environmentIdToName) {
      const entries = Object.entries(message.environmentIdToName);
      if (entries.length > 0) {
        obj.environmentIdToName = {};
        entries.forEach(([k, v]) => {
          obj.environmentIdToName[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokenResponse>, I>>(base?: I): GetTokenResponse {
    return GetTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokenResponse>, I>>(object: I): GetTokenResponse {
    const message = createBaseGetTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.tokenType = object.tokenType ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.expiresAt = object.expiresAt ?? undefined;
    message.apiServer = object.apiServer ?? "";
    message.primaryEnvironment = object.primaryEnvironment ?? undefined;
    message.engines = Object.entries(object.engines ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.grpcEngines = Object.entries(object.grpcEngines ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environmentIdToName = Object.entries(object.environmentIdToName ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGetTokenResponse_EnginesEntry(): GetTokenResponse_EnginesEntry {
  return { key: "", value: "" };
}

export const GetTokenResponse_EnginesEntry: MessageFns<GetTokenResponse_EnginesEntry> = {
  encode(message: GetTokenResponse_EnginesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenResponse_EnginesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenResponse_EnginesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenResponse_EnginesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetTokenResponse_EnginesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokenResponse_EnginesEntry>, I>>(base?: I): GetTokenResponse_EnginesEntry {
    return GetTokenResponse_EnginesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokenResponse_EnginesEntry>, I>>(
    object: I,
  ): GetTokenResponse_EnginesEntry {
    const message = createBaseGetTokenResponse_EnginesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetTokenResponse_GrpcEnginesEntry(): GetTokenResponse_GrpcEnginesEntry {
  return { key: "", value: "" };
}

export const GetTokenResponse_GrpcEnginesEntry: MessageFns<GetTokenResponse_GrpcEnginesEntry> = {
  encode(message: GetTokenResponse_GrpcEnginesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenResponse_GrpcEnginesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenResponse_GrpcEnginesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenResponse_GrpcEnginesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetTokenResponse_GrpcEnginesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokenResponse_GrpcEnginesEntry>, I>>(
    base?: I,
  ): GetTokenResponse_GrpcEnginesEntry {
    return GetTokenResponse_GrpcEnginesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokenResponse_GrpcEnginesEntry>, I>>(
    object: I,
  ): GetTokenResponse_GrpcEnginesEntry {
    const message = createBaseGetTokenResponse_GrpcEnginesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetTokenResponse_EnvironmentIdToNameEntry(): GetTokenResponse_EnvironmentIdToNameEntry {
  return { key: "", value: "" };
}

export const GetTokenResponse_EnvironmentIdToNameEntry: MessageFns<GetTokenResponse_EnvironmentIdToNameEntry> = {
  encode(message: GetTokenResponse_EnvironmentIdToNameEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenResponse_EnvironmentIdToNameEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenResponse_EnvironmentIdToNameEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenResponse_EnvironmentIdToNameEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetTokenResponse_EnvironmentIdToNameEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokenResponse_EnvironmentIdToNameEntry>, I>>(
    base?: I,
  ): GetTokenResponse_EnvironmentIdToNameEntry {
    return GetTokenResponse_EnvironmentIdToNameEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokenResponse_EnvironmentIdToNameEntry>, I>>(
    object: I,
  ): GetTokenResponse_EnvironmentIdToNameEntry {
    const message = createBaseGetTokenResponse_EnvironmentIdToNameEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateLinkSessionRequest(): UpdateLinkSessionRequest {
  return { status: "", userId: "", sessionId: "" };
}

export const UpdateLinkSessionRequest: MessageFns<UpdateLinkSessionRequest> = {
  encode(message: UpdateLinkSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(26).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLinkSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLinkSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLinkSessionRequest {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: UpdateLinkSessionRequest): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLinkSessionRequest>, I>>(base?: I): UpdateLinkSessionRequest {
    return UpdateLinkSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLinkSessionRequest>, I>>(object: I): UpdateLinkSessionRequest {
    const message = createBaseUpdateLinkSessionRequest();
    message.status = object.status ?? "";
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseUpdateLinkSessionResponse(): UpdateLinkSessionResponse {
  return { id: "" };
}

export const UpdateLinkSessionResponse: MessageFns<UpdateLinkSessionResponse> = {
  encode(message: UpdateLinkSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLinkSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLinkSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLinkSessionResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UpdateLinkSessionResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLinkSessionResponse>, I>>(base?: I): UpdateLinkSessionResponse {
    return UpdateLinkSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLinkSessionResponse>, I>>(object: I): UpdateLinkSessionResponse {
    const message = createBaseUpdateLinkSessionResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  getToken: {
    path: "/chalk.server.v1.AuthService/GetToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTokenRequest) => Buffer.from(GetTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTokenRequest.decode(value),
    responseSerialize: (value: GetTokenResponse) => Buffer.from(GetTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTokenResponse.decode(value),
  },
  createLinkSession: {
    path: "/chalk.server.v1.AuthService/CreateLinkSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateLinkSessionRequest) => Buffer.from(CreateLinkSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateLinkSessionRequest.decode(value),
    responseSerialize: (value: CreateLinkSessionResponse) =>
      Buffer.from(CreateLinkSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateLinkSessionResponse.decode(value),
  },
  getLinkSession: {
    path: "/chalk.server.v1.AuthService/GetLinkSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLinkSessionRequest) => Buffer.from(GetLinkSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetLinkSessionRequest.decode(value),
    responseSerialize: (value: GetLinkSessionResponse) => Buffer.from(GetLinkSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetLinkSessionResponse.decode(value),
  },
  updateLinkSession: {
    path: "/chalk.server.v1.AuthService/UpdateLinkSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateLinkSessionRequest) => Buffer.from(UpdateLinkSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateLinkSessionRequest.decode(value),
    responseSerialize: (value: UpdateLinkSessionResponse) =>
      Buffer.from(UpdateLinkSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateLinkSessionResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  getToken: handleUnaryCall<GetTokenRequest, GetTokenResponse>;
  createLinkSession: handleUnaryCall<CreateLinkSessionRequest, CreateLinkSessionResponse>;
  getLinkSession: handleUnaryCall<GetLinkSessionRequest, GetLinkSessionResponse>;
  updateLinkSession: handleUnaryCall<UpdateLinkSessionRequest, UpdateLinkSessionResponse>;
}

export interface AuthServiceClient extends Client {
  getToken(
    request: GetTokenRequest,
    callback: (error: ServiceError | null, response: GetTokenResponse) => void,
  ): ClientUnaryCall;
  getToken(
    request: GetTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTokenResponse) => void,
  ): ClientUnaryCall;
  getToken(
    request: GetTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTokenResponse) => void,
  ): ClientUnaryCall;
  createLinkSession(
    request: CreateLinkSessionRequest,
    callback: (error: ServiceError | null, response: CreateLinkSessionResponse) => void,
  ): ClientUnaryCall;
  createLinkSession(
    request: CreateLinkSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateLinkSessionResponse) => void,
  ): ClientUnaryCall;
  createLinkSession(
    request: CreateLinkSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateLinkSessionResponse) => void,
  ): ClientUnaryCall;
  getLinkSession(
    request: GetLinkSessionRequest,
    callback: (error: ServiceError | null, response: GetLinkSessionResponse) => void,
  ): ClientUnaryCall;
  getLinkSession(
    request: GetLinkSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetLinkSessionResponse) => void,
  ): ClientUnaryCall;
  getLinkSession(
    request: GetLinkSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetLinkSessionResponse) => void,
  ): ClientUnaryCall;
  updateLinkSession(
    request: UpdateLinkSessionRequest,
    callback: (error: ServiceError | null, response: UpdateLinkSessionResponse) => void,
  ): ClientUnaryCall;
  updateLinkSession(
    request: UpdateLinkSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateLinkSessionResponse) => void,
  ): ClientUnaryCall;
  updateLinkSession(
    request: UpdateLinkSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateLinkSessionResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(
  AuthServiceService,
  "chalk.server.v1.AuthService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
