// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/offline_queries.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Value } from "../../../google/protobuf/struct";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { PlanAggregateBackfillResponse } from "../../aggregate/v1/service";
import { DatasetRevisionMeta } from "./datasets";
import {
  ListOfflineQueryShardPerformanceSummariesRequest,
  ListOfflineQueryShardPerformanceSummariesResponse,
} from "./performance_summary";

export const protobufPackage = "chalk.server.v1";

export enum OfflineQueryStatus {
  OFFLINE_QUERY_STATUS_UNSPECIFIED = 0,
  OFFLINE_QUERY_STATUS_UNKNOWN = 1,
  OFFLINE_QUERY_STATUS_WORKING = 2,
  OFFLINE_QUERY_STATUS_FAILED = 3,
  OFFLINE_QUERY_STATUS_COMPLETED = 4,
  OFFLINE_QUERY_STATUS_CANCELED = 5,
  OFFLINE_QUERY_STATUS_QUEUED = 6,
  UNRECOGNIZED = -1,
}

export function offlineQueryStatusFromJSON(object: any): OfflineQueryStatus {
  switch (object) {
    case 0:
    case "OFFLINE_QUERY_STATUS_UNSPECIFIED":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_UNSPECIFIED;
    case 1:
    case "OFFLINE_QUERY_STATUS_UNKNOWN":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_UNKNOWN;
    case 2:
    case "OFFLINE_QUERY_STATUS_WORKING":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_WORKING;
    case 3:
    case "OFFLINE_QUERY_STATUS_FAILED":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_FAILED;
    case 4:
    case "OFFLINE_QUERY_STATUS_COMPLETED":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_COMPLETED;
    case 5:
    case "OFFLINE_QUERY_STATUS_CANCELED":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_CANCELED;
    case 6:
    case "OFFLINE_QUERY_STATUS_QUEUED":
      return OfflineQueryStatus.OFFLINE_QUERY_STATUS_QUEUED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfflineQueryStatus.UNRECOGNIZED;
  }
}

export function offlineQueryStatusToJSON(object: OfflineQueryStatus): string {
  switch (object) {
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_UNSPECIFIED:
      return "OFFLINE_QUERY_STATUS_UNSPECIFIED";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_UNKNOWN:
      return "OFFLINE_QUERY_STATUS_UNKNOWN";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_WORKING:
      return "OFFLINE_QUERY_STATUS_WORKING";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_FAILED:
      return "OFFLINE_QUERY_STATUS_FAILED";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_COMPLETED:
      return "OFFLINE_QUERY_STATUS_COMPLETED";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_CANCELED:
      return "OFFLINE_QUERY_STATUS_CANCELED";
    case OfflineQueryStatus.OFFLINE_QUERY_STATUS_QUEUED:
      return "OFFLINE_QUERY_STATUS_QUEUED";
    case OfflineQueryStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OfflineQueryKind {
  OFFLINE_QUERY_KIND_UNSPECIFIED = 0,
  OFFLINE_QUERY_KIND_UNKNOWN = 1,
  OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY = 2,
  OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY = 3,
  OFFLINE_QUERY_KIND_OFFLINE_QUERY = 4,
  OFFLINE_QUERY_KIND_DATASET_INGESTION = 5,
  OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL = 6,
  UNRECOGNIZED = -1,
}

export function offlineQueryKindFromJSON(object: any): OfflineQueryKind {
  switch (object) {
    case 0:
    case "OFFLINE_QUERY_KIND_UNSPECIFIED":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_UNSPECIFIED;
    case 1:
    case "OFFLINE_QUERY_KIND_UNKNOWN":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_UNKNOWN;
    case 2:
    case "OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY;
    case 3:
    case "OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY;
    case 4:
    case "OFFLINE_QUERY_KIND_OFFLINE_QUERY":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_OFFLINE_QUERY;
    case 5:
    case "OFFLINE_QUERY_KIND_DATASET_INGESTION":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_DATASET_INGESTION;
    case 6:
    case "OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL":
      return OfflineQueryKind.OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfflineQueryKind.UNRECOGNIZED;
  }
}

export function offlineQueryKindToJSON(object: OfflineQueryKind): string {
  switch (object) {
    case OfflineQueryKind.OFFLINE_QUERY_KIND_UNSPECIFIED:
      return "OFFLINE_QUERY_KIND_UNSPECIFIED";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_UNKNOWN:
      return "OFFLINE_QUERY_KIND_UNKNOWN";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY:
      return "OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY:
      return "OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_OFFLINE_QUERY:
      return "OFFLINE_QUERY_KIND_OFFLINE_QUERY";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_DATASET_INGESTION:
      return "OFFLINE_QUERY_KIND_DATASET_INGESTION";
    case OfflineQueryKind.OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL:
      return "OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL";
    case OfflineQueryKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface OfflineQueryMeta {
  id: number;
  operationId: string;
  environmentId: string;
  deploymentId: string;
  createdAt: Date | undefined;
  queryMeta?: any | undefined;
  queryPlanId?: string | undefined;
  branchName?: string | undefined;
  datasetId?: string | undefined;
  datasetName?: string | undefined;
  hasErrors?: boolean | undefined;
  agentId?: string | undefined;
  traceId?: string | undefined;
  correlationId?: string | undefined;
  completedAt: Date | undefined;
  status?: OfflineQueryStatus | undefined;
  hasPlanStages: boolean;
  totalComputers?: number | undefined;
  numCompletedComputers?: number | undefined;
  totalPartitions?: number | undefined;
  numCompletedPartitions?: number | undefined;
  recomputeFeatures?: string | undefined;
  spineSqlQuery?: string | undefined;
  filters?: any | undefined;
  plannerOptions?: any | undefined;
  invokerOptions?: any | undefined;
  queryType?: OfflineQueryKind | undefined;
  tags: string[];
  requiredResolverTags: string[];
  aggregateBackfillId?: string | undefined;
  output?: any | undefined;
  requiredOutput?: any | undefined;
  rawBodyFilename?: string | undefined;
  datasetRevision?: DatasetRevisionMeta | undefined;
  timeSeries: PlanAggregateBackfillResponse[];
  evaluationRunId?: string | undefined;
}

export interface ListOfflineQueriesRequest {
  cursor?: string | undefined;
  limit?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  idFilter?: string | undefined;
  agentIdFilter?: string | undefined;
  branchFilter?: string | undefined;
  kindFilter?: OfflineQueryKind | undefined;
  statusFilter?: OfflineQueryStatus | undefined;
  aggregationBackfillIdFilter?: string | undefined;
  evaluationRunIdFilter?: string | undefined;
}

export interface ListOfflineQueriesResponse {
  offlineQueries: OfflineQueryMeta[];
  cursor?: string | undefined;
}

export interface GetOfflineQueryRequest {
  offlineQueryId: string;
}

export interface GetOfflineQueryResponse {
  offlineQuery: OfflineQueryMeta | undefined;
}

function createBaseOfflineQueryMeta(): OfflineQueryMeta {
  return {
    id: 0,
    operationId: "",
    environmentId: "",
    deploymentId: "",
    createdAt: undefined,
    queryMeta: undefined,
    queryPlanId: undefined,
    branchName: undefined,
    datasetId: undefined,
    datasetName: undefined,
    hasErrors: undefined,
    agentId: undefined,
    traceId: undefined,
    correlationId: undefined,
    completedAt: undefined,
    status: undefined,
    hasPlanStages: false,
    totalComputers: undefined,
    numCompletedComputers: undefined,
    totalPartitions: undefined,
    numCompletedPartitions: undefined,
    recomputeFeatures: undefined,
    spineSqlQuery: undefined,
    filters: undefined,
    plannerOptions: undefined,
    invokerOptions: undefined,
    queryType: undefined,
    tags: [],
    requiredResolverTags: [],
    aggregateBackfillId: undefined,
    output: undefined,
    requiredOutput: undefined,
    rawBodyFilename: undefined,
    datasetRevision: undefined,
    timeSeries: [],
    evaluationRunId: undefined,
  };
}

export const OfflineQueryMeta: MessageFns<OfflineQueryMeta> = {
  encode(message: OfflineQueryMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.operationId !== "") {
      writer.uint32(18).string(message.operationId);
    }
    if (message.environmentId !== "") {
      writer.uint32(26).string(message.environmentId);
    }
    if (message.deploymentId !== "") {
      writer.uint32(34).string(message.deploymentId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.queryMeta !== undefined) {
      Value.encode(Value.wrap(message.queryMeta), writer.uint32(50).fork()).join();
    }
    if (message.queryPlanId !== undefined) {
      writer.uint32(58).string(message.queryPlanId);
    }
    if (message.branchName !== undefined) {
      writer.uint32(66).string(message.branchName);
    }
    if (message.datasetId !== undefined) {
      writer.uint32(74).string(message.datasetId);
    }
    if (message.datasetName !== undefined) {
      writer.uint32(82).string(message.datasetName);
    }
    if (message.hasErrors !== undefined) {
      writer.uint32(88).bool(message.hasErrors);
    }
    if (message.agentId !== undefined) {
      writer.uint32(98).string(message.agentId);
    }
    if (message.traceId !== undefined) {
      writer.uint32(106).string(message.traceId);
    }
    if (message.correlationId !== undefined) {
      writer.uint32(114).string(message.correlationId);
    }
    if (message.completedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.completedAt), writer.uint32(122).fork()).join();
    }
    if (message.status !== undefined) {
      writer.uint32(128).int32(message.status);
    }
    if (message.hasPlanStages !== false) {
      writer.uint32(136).bool(message.hasPlanStages);
    }
    if (message.totalComputers !== undefined) {
      writer.uint32(144).int32(message.totalComputers);
    }
    if (message.numCompletedComputers !== undefined) {
      writer.uint32(152).int32(message.numCompletedComputers);
    }
    if (message.totalPartitions !== undefined) {
      writer.uint32(160).int32(message.totalPartitions);
    }
    if (message.numCompletedPartitions !== undefined) {
      writer.uint32(168).int32(message.numCompletedPartitions);
    }
    if (message.recomputeFeatures !== undefined) {
      writer.uint32(178).string(message.recomputeFeatures);
    }
    if (message.spineSqlQuery !== undefined) {
      writer.uint32(186).string(message.spineSqlQuery);
    }
    if (message.filters !== undefined) {
      Value.encode(Value.wrap(message.filters), writer.uint32(194).fork()).join();
    }
    if (message.plannerOptions !== undefined) {
      Value.encode(Value.wrap(message.plannerOptions), writer.uint32(202).fork()).join();
    }
    if (message.invokerOptions !== undefined) {
      Value.encode(Value.wrap(message.invokerOptions), writer.uint32(210).fork()).join();
    }
    if (message.queryType !== undefined) {
      writer.uint32(216).int32(message.queryType);
    }
    for (const v of message.tags) {
      writer.uint32(226).string(v!);
    }
    for (const v of message.requiredResolverTags) {
      writer.uint32(234).string(v!);
    }
    if (message.aggregateBackfillId !== undefined) {
      writer.uint32(242).string(message.aggregateBackfillId);
    }
    if (message.output !== undefined) {
      Value.encode(Value.wrap(message.output), writer.uint32(250).fork()).join();
    }
    if (message.requiredOutput !== undefined) {
      Value.encode(Value.wrap(message.requiredOutput), writer.uint32(258).fork()).join();
    }
    if (message.rawBodyFilename !== undefined) {
      writer.uint32(266).string(message.rawBodyFilename);
    }
    if (message.datasetRevision !== undefined) {
      DatasetRevisionMeta.encode(message.datasetRevision, writer.uint32(274).fork()).join();
    }
    for (const v of message.timeSeries) {
      PlanAggregateBackfillResponse.encode(v!, writer.uint32(282).fork()).join();
    }
    if (message.evaluationRunId !== undefined) {
      writer.uint32(290).string(message.evaluationRunId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineQueryMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineQueryMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.queryMeta = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.queryPlanId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.branchName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.datasetName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.hasErrors = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.agentId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.traceId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.completedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.hasPlanStages = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.totalComputers = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.numCompletedComputers = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.totalPartitions = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.numCompletedPartitions = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.recomputeFeatures = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.spineSqlQuery = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.filters = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.plannerOptions = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.invokerOptions = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.queryType = reader.int32() as any;
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.requiredResolverTags.push(reader.string());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.aggregateBackfillId = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.output = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.requiredOutput = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.rawBodyFilename = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.datasetRevision = DatasetRevisionMeta.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.timeSeries.push(PlanAggregateBackfillResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.evaluationRunId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineQueryMeta {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      queryMeta: isSet(object?.queryMeta) ? object.queryMeta : undefined,
      queryPlanId: isSet(object.queryPlanId) ? globalThis.String(object.queryPlanId) : undefined,
      branchName: isSet(object.branchName) ? globalThis.String(object.branchName) : undefined,
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : undefined,
      datasetName: isSet(object.datasetName) ? globalThis.String(object.datasetName) : undefined,
      hasErrors: isSet(object.hasErrors) ? globalThis.Boolean(object.hasErrors) : undefined,
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : undefined,
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : undefined,
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : undefined,
      completedAt: isSet(object.completedAt) ? fromJsonTimestamp(object.completedAt) : undefined,
      status: isSet(object.status) ? offlineQueryStatusFromJSON(object.status) : undefined,
      hasPlanStages: isSet(object.hasPlanStages) ? globalThis.Boolean(object.hasPlanStages) : false,
      totalComputers: isSet(object.totalComputers) ? globalThis.Number(object.totalComputers) : undefined,
      numCompletedComputers: isSet(object.numCompletedComputers)
        ? globalThis.Number(object.numCompletedComputers)
        : undefined,
      totalPartitions: isSet(object.totalPartitions) ? globalThis.Number(object.totalPartitions) : undefined,
      numCompletedPartitions: isSet(object.numCompletedPartitions)
        ? globalThis.Number(object.numCompletedPartitions)
        : undefined,
      recomputeFeatures: isSet(object.recomputeFeatures) ? globalThis.String(object.recomputeFeatures) : undefined,
      spineSqlQuery: isSet(object.spineSqlQuery) ? globalThis.String(object.spineSqlQuery) : undefined,
      filters: isSet(object?.filters) ? object.filters : undefined,
      plannerOptions: isSet(object?.plannerOptions) ? object.plannerOptions : undefined,
      invokerOptions: isSet(object?.invokerOptions) ? object.invokerOptions : undefined,
      queryType: isSet(object.queryType) ? offlineQueryKindFromJSON(object.queryType) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      requiredResolverTags: globalThis.Array.isArray(object?.requiredResolverTags)
        ? object.requiredResolverTags.map((e: any) => globalThis.String(e))
        : [],
      aggregateBackfillId: isSet(object.aggregateBackfillId)
        ? globalThis.String(object.aggregateBackfillId)
        : undefined,
      output: isSet(object?.output) ? object.output : undefined,
      requiredOutput: isSet(object?.requiredOutput) ? object.requiredOutput : undefined,
      rawBodyFilename: isSet(object.rawBodyFilename) ? globalThis.String(object.rawBodyFilename) : undefined,
      datasetRevision: isSet(object.datasetRevision) ? DatasetRevisionMeta.fromJSON(object.datasetRevision) : undefined,
      timeSeries: globalThis.Array.isArray(object?.timeSeries)
        ? object.timeSeries.map((e: any) => PlanAggregateBackfillResponse.fromJSON(e))
        : [],
      evaluationRunId: isSet(object.evaluationRunId) ? globalThis.String(object.evaluationRunId) : undefined,
    };
  },

  toJSON(message: OfflineQueryMeta): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.queryMeta !== undefined) {
      obj.queryMeta = message.queryMeta;
    }
    if (message.queryPlanId !== undefined) {
      obj.queryPlanId = message.queryPlanId;
    }
    if (message.branchName !== undefined) {
      obj.branchName = message.branchName;
    }
    if (message.datasetId !== undefined) {
      obj.datasetId = message.datasetId;
    }
    if (message.datasetName !== undefined) {
      obj.datasetName = message.datasetName;
    }
    if (message.hasErrors !== undefined) {
      obj.hasErrors = message.hasErrors;
    }
    if (message.agentId !== undefined) {
      obj.agentId = message.agentId;
    }
    if (message.traceId !== undefined) {
      obj.traceId = message.traceId;
    }
    if (message.correlationId !== undefined) {
      obj.correlationId = message.correlationId;
    }
    if (message.completedAt !== undefined) {
      obj.completedAt = message.completedAt.toISOString();
    }
    if (message.status !== undefined) {
      obj.status = offlineQueryStatusToJSON(message.status);
    }
    if (message.hasPlanStages !== false) {
      obj.hasPlanStages = message.hasPlanStages;
    }
    if (message.totalComputers !== undefined) {
      obj.totalComputers = Math.round(message.totalComputers);
    }
    if (message.numCompletedComputers !== undefined) {
      obj.numCompletedComputers = Math.round(message.numCompletedComputers);
    }
    if (message.totalPartitions !== undefined) {
      obj.totalPartitions = Math.round(message.totalPartitions);
    }
    if (message.numCompletedPartitions !== undefined) {
      obj.numCompletedPartitions = Math.round(message.numCompletedPartitions);
    }
    if (message.recomputeFeatures !== undefined) {
      obj.recomputeFeatures = message.recomputeFeatures;
    }
    if (message.spineSqlQuery !== undefined) {
      obj.spineSqlQuery = message.spineSqlQuery;
    }
    if (message.filters !== undefined) {
      obj.filters = message.filters;
    }
    if (message.plannerOptions !== undefined) {
      obj.plannerOptions = message.plannerOptions;
    }
    if (message.invokerOptions !== undefined) {
      obj.invokerOptions = message.invokerOptions;
    }
    if (message.queryType !== undefined) {
      obj.queryType = offlineQueryKindToJSON(message.queryType);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.requiredResolverTags?.length) {
      obj.requiredResolverTags = message.requiredResolverTags;
    }
    if (message.aggregateBackfillId !== undefined) {
      obj.aggregateBackfillId = message.aggregateBackfillId;
    }
    if (message.output !== undefined) {
      obj.output = message.output;
    }
    if (message.requiredOutput !== undefined) {
      obj.requiredOutput = message.requiredOutput;
    }
    if (message.rawBodyFilename !== undefined) {
      obj.rawBodyFilename = message.rawBodyFilename;
    }
    if (message.datasetRevision !== undefined) {
      obj.datasetRevision = DatasetRevisionMeta.toJSON(message.datasetRevision);
    }
    if (message.timeSeries?.length) {
      obj.timeSeries = message.timeSeries.map((e) => PlanAggregateBackfillResponse.toJSON(e));
    }
    if (message.evaluationRunId !== undefined) {
      obj.evaluationRunId = message.evaluationRunId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OfflineQueryMeta>, I>>(base?: I): OfflineQueryMeta {
    return OfflineQueryMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OfflineQueryMeta>, I>>(object: I): OfflineQueryMeta {
    const message = createBaseOfflineQueryMeta();
    message.id = object.id ?? 0;
    message.operationId = object.operationId ?? "";
    message.environmentId = object.environmentId ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.queryMeta = object.queryMeta ?? undefined;
    message.queryPlanId = object.queryPlanId ?? undefined;
    message.branchName = object.branchName ?? undefined;
    message.datasetId = object.datasetId ?? undefined;
    message.datasetName = object.datasetName ?? undefined;
    message.hasErrors = object.hasErrors ?? undefined;
    message.agentId = object.agentId ?? undefined;
    message.traceId = object.traceId ?? undefined;
    message.correlationId = object.correlationId ?? undefined;
    message.completedAt = object.completedAt ?? undefined;
    message.status = object.status ?? undefined;
    message.hasPlanStages = object.hasPlanStages ?? false;
    message.totalComputers = object.totalComputers ?? undefined;
    message.numCompletedComputers = object.numCompletedComputers ?? undefined;
    message.totalPartitions = object.totalPartitions ?? undefined;
    message.numCompletedPartitions = object.numCompletedPartitions ?? undefined;
    message.recomputeFeatures = object.recomputeFeatures ?? undefined;
    message.spineSqlQuery = object.spineSqlQuery ?? undefined;
    message.filters = object.filters ?? undefined;
    message.plannerOptions = object.plannerOptions ?? undefined;
    message.invokerOptions = object.invokerOptions ?? undefined;
    message.queryType = object.queryType ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.requiredResolverTags = object.requiredResolverTags?.map((e) => e) || [];
    message.aggregateBackfillId = object.aggregateBackfillId ?? undefined;
    message.output = object.output ?? undefined;
    message.requiredOutput = object.requiredOutput ?? undefined;
    message.rawBodyFilename = object.rawBodyFilename ?? undefined;
    message.datasetRevision = (object.datasetRevision !== undefined && object.datasetRevision !== null)
      ? DatasetRevisionMeta.fromPartial(object.datasetRevision)
      : undefined;
    message.timeSeries = object.timeSeries?.map((e) => PlanAggregateBackfillResponse.fromPartial(e)) || [];
    message.evaluationRunId = object.evaluationRunId ?? undefined;
    return message;
  },
};

function createBaseListOfflineQueriesRequest(): ListOfflineQueriesRequest {
  return {
    cursor: undefined,
    limit: undefined,
    startDate: undefined,
    endDate: undefined,
    idFilter: undefined,
    agentIdFilter: undefined,
    branchFilter: undefined,
    kindFilter: undefined,
    statusFilter: undefined,
    aggregationBackfillIdFilter: undefined,
    evaluationRunIdFilter: undefined,
  };
}

export const ListOfflineQueriesRequest: MessageFns<ListOfflineQueriesRequest> = {
  encode(message: ListOfflineQueriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== undefined) {
      writer.uint32(10).string(message.cursor);
    }
    if (message.limit !== undefined) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.startDate !== undefined) {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(34).string(message.endDate);
    }
    if (message.idFilter !== undefined) {
      writer.uint32(42).string(message.idFilter);
    }
    if (message.agentIdFilter !== undefined) {
      writer.uint32(50).string(message.agentIdFilter);
    }
    if (message.branchFilter !== undefined) {
      writer.uint32(58).string(message.branchFilter);
    }
    if (message.kindFilter !== undefined) {
      writer.uint32(64).int32(message.kindFilter);
    }
    if (message.statusFilter !== undefined) {
      writer.uint32(72).int32(message.statusFilter);
    }
    if (message.aggregationBackfillIdFilter !== undefined) {
      writer.uint32(82).string(message.aggregationBackfillIdFilter);
    }
    if (message.evaluationRunIdFilter !== undefined) {
      writer.uint32(90).string(message.evaluationRunIdFilter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOfflineQueriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOfflineQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.idFilter = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.agentIdFilter = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.branchFilter = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.kindFilter = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.statusFilter = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.aggregationBackfillIdFilter = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.evaluationRunIdFilter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOfflineQueriesRequest {
    return {
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      idFilter: isSet(object.idFilter) ? globalThis.String(object.idFilter) : undefined,
      agentIdFilter: isSet(object.agentIdFilter) ? globalThis.String(object.agentIdFilter) : undefined,
      branchFilter: isSet(object.branchFilter) ? globalThis.String(object.branchFilter) : undefined,
      kindFilter: isSet(object.kindFilter) ? offlineQueryKindFromJSON(object.kindFilter) : undefined,
      statusFilter: isSet(object.statusFilter) ? offlineQueryStatusFromJSON(object.statusFilter) : undefined,
      aggregationBackfillIdFilter: isSet(object.aggregationBackfillIdFilter)
        ? globalThis.String(object.aggregationBackfillIdFilter)
        : undefined,
      evaluationRunIdFilter: isSet(object.evaluationRunIdFilter)
        ? globalThis.String(object.evaluationRunIdFilter)
        : undefined,
    };
  },

  toJSON(message: ListOfflineQueriesRequest): unknown {
    const obj: any = {};
    if (message.cursor !== undefined) {
      obj.cursor = message.cursor;
    }
    if (message.limit !== undefined) {
      obj.limit = Math.round(message.limit);
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.idFilter !== undefined) {
      obj.idFilter = message.idFilter;
    }
    if (message.agentIdFilter !== undefined) {
      obj.agentIdFilter = message.agentIdFilter;
    }
    if (message.branchFilter !== undefined) {
      obj.branchFilter = message.branchFilter;
    }
    if (message.kindFilter !== undefined) {
      obj.kindFilter = offlineQueryKindToJSON(message.kindFilter);
    }
    if (message.statusFilter !== undefined) {
      obj.statusFilter = offlineQueryStatusToJSON(message.statusFilter);
    }
    if (message.aggregationBackfillIdFilter !== undefined) {
      obj.aggregationBackfillIdFilter = message.aggregationBackfillIdFilter;
    }
    if (message.evaluationRunIdFilter !== undefined) {
      obj.evaluationRunIdFilter = message.evaluationRunIdFilter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOfflineQueriesRequest>, I>>(base?: I): ListOfflineQueriesRequest {
    return ListOfflineQueriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOfflineQueriesRequest>, I>>(object: I): ListOfflineQueriesRequest {
    const message = createBaseListOfflineQueriesRequest();
    message.cursor = object.cursor ?? undefined;
    message.limit = object.limit ?? undefined;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.idFilter = object.idFilter ?? undefined;
    message.agentIdFilter = object.agentIdFilter ?? undefined;
    message.branchFilter = object.branchFilter ?? undefined;
    message.kindFilter = object.kindFilter ?? undefined;
    message.statusFilter = object.statusFilter ?? undefined;
    message.aggregationBackfillIdFilter = object.aggregationBackfillIdFilter ?? undefined;
    message.evaluationRunIdFilter = object.evaluationRunIdFilter ?? undefined;
    return message;
  },
};

function createBaseListOfflineQueriesResponse(): ListOfflineQueriesResponse {
  return { offlineQueries: [], cursor: undefined };
}

export const ListOfflineQueriesResponse: MessageFns<ListOfflineQueriesResponse> = {
  encode(message: ListOfflineQueriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.offlineQueries) {
      OfflineQueryMeta.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== undefined) {
      writer.uint32(18).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOfflineQueriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOfflineQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.offlineQueries.push(OfflineQueryMeta.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOfflineQueriesResponse {
    return {
      offlineQueries: globalThis.Array.isArray(object?.offlineQueries)
        ? object.offlineQueries.map((e: any) => OfflineQueryMeta.fromJSON(e))
        : [],
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : undefined,
    };
  },

  toJSON(message: ListOfflineQueriesResponse): unknown {
    const obj: any = {};
    if (message.offlineQueries?.length) {
      obj.offlineQueries = message.offlineQueries.map((e) => OfflineQueryMeta.toJSON(e));
    }
    if (message.cursor !== undefined) {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOfflineQueriesResponse>, I>>(base?: I): ListOfflineQueriesResponse {
    return ListOfflineQueriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOfflineQueriesResponse>, I>>(object: I): ListOfflineQueriesResponse {
    const message = createBaseListOfflineQueriesResponse();
    message.offlineQueries = object.offlineQueries?.map((e) => OfflineQueryMeta.fromPartial(e)) || [];
    message.cursor = object.cursor ?? undefined;
    return message;
  },
};

function createBaseGetOfflineQueryRequest(): GetOfflineQueryRequest {
  return { offlineQueryId: "" };
}

export const GetOfflineQueryRequest: MessageFns<GetOfflineQueryRequest> = {
  encode(message: GetOfflineQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offlineQueryId !== "") {
      writer.uint32(10).string(message.offlineQueryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOfflineQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOfflineQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.offlineQueryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOfflineQueryRequest {
    return { offlineQueryId: isSet(object.offlineQueryId) ? globalThis.String(object.offlineQueryId) : "" };
  },

  toJSON(message: GetOfflineQueryRequest): unknown {
    const obj: any = {};
    if (message.offlineQueryId !== "") {
      obj.offlineQueryId = message.offlineQueryId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOfflineQueryRequest>, I>>(base?: I): GetOfflineQueryRequest {
    return GetOfflineQueryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOfflineQueryRequest>, I>>(object: I): GetOfflineQueryRequest {
    const message = createBaseGetOfflineQueryRequest();
    message.offlineQueryId = object.offlineQueryId ?? "";
    return message;
  },
};

function createBaseGetOfflineQueryResponse(): GetOfflineQueryResponse {
  return { offlineQuery: undefined };
}

export const GetOfflineQueryResponse: MessageFns<GetOfflineQueryResponse> = {
  encode(message: GetOfflineQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offlineQuery !== undefined) {
      OfflineQueryMeta.encode(message.offlineQuery, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOfflineQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOfflineQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.offlineQuery = OfflineQueryMeta.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOfflineQueryResponse {
    return { offlineQuery: isSet(object.offlineQuery) ? OfflineQueryMeta.fromJSON(object.offlineQuery) : undefined };
  },

  toJSON(message: GetOfflineQueryResponse): unknown {
    const obj: any = {};
    if (message.offlineQuery !== undefined) {
      obj.offlineQuery = OfflineQueryMeta.toJSON(message.offlineQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOfflineQueryResponse>, I>>(base?: I): GetOfflineQueryResponse {
    return GetOfflineQueryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOfflineQueryResponse>, I>>(object: I): GetOfflineQueryResponse {
    const message = createBaseGetOfflineQueryResponse();
    message.offlineQuery = (object.offlineQuery !== undefined && object.offlineQuery !== null)
      ? OfflineQueryMeta.fromPartial(object.offlineQuery)
      : undefined;
    return message;
  },
};

export type OfflineQueryMetadataServiceService = typeof OfflineQueryMetadataServiceService;
export const OfflineQueryMetadataServiceService = {
  listOfflineQueries: {
    path: "/chalk.server.v1.OfflineQueryMetadataService/ListOfflineQueries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListOfflineQueriesRequest) =>
      Buffer.from(ListOfflineQueriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListOfflineQueriesRequest.decode(value),
    responseSerialize: (value: ListOfflineQueriesResponse) =>
      Buffer.from(ListOfflineQueriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListOfflineQueriesResponse.decode(value),
  },
  getOfflineQuery: {
    path: "/chalk.server.v1.OfflineQueryMetadataService/GetOfflineQuery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOfflineQueryRequest) => Buffer.from(GetOfflineQueryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOfflineQueryRequest.decode(value),
    responseSerialize: (value: GetOfflineQueryResponse) => Buffer.from(GetOfflineQueryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOfflineQueryResponse.decode(value),
  },
  listOfflineQueryShardPerformanceSummaries: {
    path: "/chalk.server.v1.OfflineQueryMetadataService/ListOfflineQueryShardPerformanceSummaries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListOfflineQueryShardPerformanceSummariesRequest) =>
      Buffer.from(ListOfflineQueryShardPerformanceSummariesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListOfflineQueryShardPerformanceSummariesRequest.decode(value),
    responseSerialize: (value: ListOfflineQueryShardPerformanceSummariesResponse) =>
      Buffer.from(ListOfflineQueryShardPerformanceSummariesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListOfflineQueryShardPerformanceSummariesResponse.decode(value),
  },
} as const;

export interface OfflineQueryMetadataServiceServer extends UntypedServiceImplementation {
  listOfflineQueries: handleUnaryCall<ListOfflineQueriesRequest, ListOfflineQueriesResponse>;
  getOfflineQuery: handleUnaryCall<GetOfflineQueryRequest, GetOfflineQueryResponse>;
  listOfflineQueryShardPerformanceSummaries: handleUnaryCall<
    ListOfflineQueryShardPerformanceSummariesRequest,
    ListOfflineQueryShardPerformanceSummariesResponse
  >;
}

export interface OfflineQueryMetadataServiceClient extends Client {
  listOfflineQueries(
    request: ListOfflineQueriesRequest,
    callback: (error: ServiceError | null, response: ListOfflineQueriesResponse) => void,
  ): ClientUnaryCall;
  listOfflineQueries(
    request: ListOfflineQueriesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListOfflineQueriesResponse) => void,
  ): ClientUnaryCall;
  listOfflineQueries(
    request: ListOfflineQueriesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListOfflineQueriesResponse) => void,
  ): ClientUnaryCall;
  getOfflineQuery(
    request: GetOfflineQueryRequest,
    callback: (error: ServiceError | null, response: GetOfflineQueryResponse) => void,
  ): ClientUnaryCall;
  getOfflineQuery(
    request: GetOfflineQueryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOfflineQueryResponse) => void,
  ): ClientUnaryCall;
  getOfflineQuery(
    request: GetOfflineQueryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOfflineQueryResponse) => void,
  ): ClientUnaryCall;
  listOfflineQueryShardPerformanceSummaries(
    request: ListOfflineQueryShardPerformanceSummariesRequest,
    callback: (error: ServiceError | null, response: ListOfflineQueryShardPerformanceSummariesResponse) => void,
  ): ClientUnaryCall;
  listOfflineQueryShardPerformanceSummaries(
    request: ListOfflineQueryShardPerformanceSummariesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListOfflineQueryShardPerformanceSummariesResponse) => void,
  ): ClientUnaryCall;
  listOfflineQueryShardPerformanceSummaries(
    request: ListOfflineQueryShardPerformanceSummariesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListOfflineQueryShardPerformanceSummariesResponse) => void,
  ): ClientUnaryCall;
}

export const OfflineQueryMetadataServiceClient = makeGenericClientConstructor(
  OfflineQueryMetadataServiceService,
  "chalk.server.v1.OfflineQueryMetadataService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): OfflineQueryMetadataServiceClient;
  service: typeof OfflineQueryMetadataServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
