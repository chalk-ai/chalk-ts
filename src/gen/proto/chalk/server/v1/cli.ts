// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/cli.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chalk.server.v1";

export interface CommandLineInterfaceVersion {
  version: string;
  downloadUrl: string;
  os: string;
  arch: string;
  generation: number;
}

export interface GetVersionsRequest {
  os?: string | undefined;
  arch?: string | undefined;
}

export interface GetVersionsResponse {
  versions: CommandLineInterfaceVersion[];
  latest: CommandLineInterfaceVersion | undefined;
  nightly: CommandLineInterfaceVersion | undefined;
  minimum: string;
}

function createBaseCommandLineInterfaceVersion(): CommandLineInterfaceVersion {
  return { version: "", downloadUrl: "", os: "", arch: "", generation: 0 };
}

export const CommandLineInterfaceVersion: MessageFns<CommandLineInterfaceVersion> = {
  encode(message: CommandLineInterfaceVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.downloadUrl !== "") {
      writer.uint32(18).string(message.downloadUrl);
    }
    if (message.os !== "") {
      writer.uint32(26).string(message.os);
    }
    if (message.arch !== "") {
      writer.uint32(34).string(message.arch);
    }
    if (message.generation !== 0) {
      writer.uint32(40).int64(message.generation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandLineInterfaceVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandLineInterfaceVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.downloadUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.arch = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.generation = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandLineInterfaceVersion {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      downloadUrl: isSet(object.downloadUrl) ? globalThis.String(object.downloadUrl) : "",
      os: isSet(object.os) ? globalThis.String(object.os) : "",
      arch: isSet(object.arch) ? globalThis.String(object.arch) : "",
      generation: isSet(object.generation) ? globalThis.Number(object.generation) : 0,
    };
  },

  toJSON(message: CommandLineInterfaceVersion): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.downloadUrl !== "") {
      obj.downloadUrl = message.downloadUrl;
    }
    if (message.os !== "") {
      obj.os = message.os;
    }
    if (message.arch !== "") {
      obj.arch = message.arch;
    }
    if (message.generation !== 0) {
      obj.generation = Math.round(message.generation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandLineInterfaceVersion>, I>>(base?: I): CommandLineInterfaceVersion {
    return CommandLineInterfaceVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandLineInterfaceVersion>, I>>(object: I): CommandLineInterfaceVersion {
    const message = createBaseCommandLineInterfaceVersion();
    message.version = object.version ?? "";
    message.downloadUrl = object.downloadUrl ?? "";
    message.os = object.os ?? "";
    message.arch = object.arch ?? "";
    message.generation = object.generation ?? 0;
    return message;
  },
};

function createBaseGetVersionsRequest(): GetVersionsRequest {
  return { os: undefined, arch: undefined };
}

export const GetVersionsRequest: MessageFns<GetVersionsRequest> = {
  encode(message: GetVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.os !== undefined) {
      writer.uint32(10).string(message.os);
    }
    if (message.arch !== undefined) {
      writer.uint32(18).string(message.arch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.arch = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionsRequest {
    return {
      os: isSet(object.os) ? globalThis.String(object.os) : undefined,
      arch: isSet(object.arch) ? globalThis.String(object.arch) : undefined,
    };
  },

  toJSON(message: GetVersionsRequest): unknown {
    const obj: any = {};
    if (message.os !== undefined) {
      obj.os = message.os;
    }
    if (message.arch !== undefined) {
      obj.arch = message.arch;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVersionsRequest>, I>>(base?: I): GetVersionsRequest {
    return GetVersionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVersionsRequest>, I>>(object: I): GetVersionsRequest {
    const message = createBaseGetVersionsRequest();
    message.os = object.os ?? undefined;
    message.arch = object.arch ?? undefined;
    return message;
  },
};

function createBaseGetVersionsResponse(): GetVersionsResponse {
  return { versions: [], latest: undefined, nightly: undefined, minimum: "" };
}

export const GetVersionsResponse: MessageFns<GetVersionsResponse> = {
  encode(message: GetVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      CommandLineInterfaceVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.latest !== undefined) {
      CommandLineInterfaceVersion.encode(message.latest, writer.uint32(18).fork()).join();
    }
    if (message.nightly !== undefined) {
      CommandLineInterfaceVersion.encode(message.nightly, writer.uint32(26).fork()).join();
    }
    if (message.minimum !== "") {
      writer.uint32(34).string(message.minimum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.versions.push(CommandLineInterfaceVersion.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.latest = CommandLineInterfaceVersion.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nightly = CommandLineInterfaceVersion.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.minimum = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions)
        ? object.versions.map((e: any) => CommandLineInterfaceVersion.fromJSON(e))
        : [],
      latest: isSet(object.latest) ? CommandLineInterfaceVersion.fromJSON(object.latest) : undefined,
      nightly: isSet(object.nightly) ? CommandLineInterfaceVersion.fromJSON(object.nightly) : undefined,
      minimum: isSet(object.minimum) ? globalThis.String(object.minimum) : "",
    };
  },

  toJSON(message: GetVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => CommandLineInterfaceVersion.toJSON(e));
    }
    if (message.latest !== undefined) {
      obj.latest = CommandLineInterfaceVersion.toJSON(message.latest);
    }
    if (message.nightly !== undefined) {
      obj.nightly = CommandLineInterfaceVersion.toJSON(message.nightly);
    }
    if (message.minimum !== "") {
      obj.minimum = message.minimum;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVersionsResponse>, I>>(base?: I): GetVersionsResponse {
    return GetVersionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVersionsResponse>, I>>(object: I): GetVersionsResponse {
    const message = createBaseGetVersionsResponse();
    message.versions = object.versions?.map((e) => CommandLineInterfaceVersion.fromPartial(e)) || [];
    message.latest = (object.latest !== undefined && object.latest !== null)
      ? CommandLineInterfaceVersion.fromPartial(object.latest)
      : undefined;
    message.nightly = (object.nightly !== undefined && object.nightly !== null)
      ? CommandLineInterfaceVersion.fromPartial(object.nightly)
      : undefined;
    message.minimum = object.minimum ?? "";
    return message;
  },
};

export type CommandLineInterfaceServiceService = typeof CommandLineInterfaceServiceService;
export const CommandLineInterfaceServiceService = {
  getVersions: {
    path: "/chalk.server.v1.CommandLineInterfaceService/GetVersions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetVersionsRequest) => Buffer.from(GetVersionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetVersionsRequest.decode(value),
    responseSerialize: (value: GetVersionsResponse) => Buffer.from(GetVersionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetVersionsResponse.decode(value),
  },
} as const;

export interface CommandLineInterfaceServiceServer extends UntypedServiceImplementation {
  getVersions: handleUnaryCall<GetVersionsRequest, GetVersionsResponse>;
}

export interface CommandLineInterfaceServiceClient extends Client {
  getVersions(
    request: GetVersionsRequest,
    callback: (error: ServiceError | null, response: GetVersionsResponse) => void,
  ): ClientUnaryCall;
  getVersions(
    request: GetVersionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetVersionsResponse) => void,
  ): ClientUnaryCall;
  getVersions(
    request: GetVersionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetVersionsResponse) => void,
  ): ClientUnaryCall;
}

export const CommandLineInterfaceServiceClient = makeGenericClientConstructor(
  CommandLineInterfaceServiceService,
  "chalk.server.v1.CommandLineInterfaceService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): CommandLineInterfaceServiceClient;
  service: typeof CommandLineInterfaceServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
