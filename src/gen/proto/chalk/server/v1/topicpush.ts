// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/topicpush.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Topic } from "./topic";

export const protobufPackage = "chalk.server.v1";

export interface ScheduledJob {
  id: string;
  name: string;
  payload: string;
  schedule: string;
  topic: Topic | undefined;
  attributes: { [key: string]: string };
  environment?: string | undefined;
  tags: string[];
}

export interface ScheduledJob_AttributesEntry {
  key: string;
  value: string;
}

export interface UpdateJobRequest {
  id: string;
  name: string;
  payload: string;
  schedule: string;
  topic: Topic | undefined;
  attributes: { [key: string]: string };
  environment?: string | undefined;
  tags: string[];
}

export interface UpdateJobRequest_AttributesEntry {
  key: string;
  value: string;
}

export interface UpdateJobResponse {
  job: ScheduledJob | undefined;
}

export interface ListJobsRequest {
}

export interface ListJobsResponse {
  jobs: ScheduledJob[];
}

export interface CreateJobRequest {
  name: string;
  payload: string;
  schedule: string;
  topic: Topic | undefined;
  attributes: { [key: string]: string };
  environment?: string | undefined;
  tags: string[];
}

export interface CreateJobRequest_AttributesEntry {
  key: string;
  value: string;
}

export interface CreateJobResponse {
  job: ScheduledJob | undefined;
}

export interface DeleteJobRequest {
  id: string;
}

export interface DeleteJobResponse {
}

export interface GetJobByNameRequest {
  name: string;
}

export interface GetJobByNameResponse {
  job: ScheduledJob | undefined;
}

function createBaseScheduledJob(): ScheduledJob {
  return {
    id: "",
    name: "",
    payload: "",
    schedule: "",
    topic: undefined,
    attributes: {},
    environment: undefined,
    tags: [],
  };
}

export const ScheduledJob: MessageFns<ScheduledJob> = {
  encode(message: ScheduledJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    if (message.schedule !== "") {
      writer.uint32(34).string(message.schedule);
    }
    if (message.topic !== undefined) {
      Topic.encode(message.topic, writer.uint32(42).fork()).join();
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      ScheduledJob_AttributesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.environment !== undefined) {
      writer.uint32(58).string(message.environment);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.schedule = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.topic = Topic.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = ScheduledJob_AttributesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.attributes[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledJob {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
      topic: isSet(object.topic) ? Topic.fromJSON(object.topic) : undefined,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? globalThis.String(object.environment) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ScheduledJob): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.schedule !== "") {
      obj.schedule = message.schedule;
    }
    if (message.topic !== undefined) {
      obj.topic = Topic.toJSON(message.topic);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = message.environment;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduledJob>, I>>(base?: I): ScheduledJob {
    return ScheduledJob.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduledJob>, I>>(object: I): ScheduledJob {
    const message = createBaseScheduledJob();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.payload = object.payload ?? "";
    message.schedule = object.schedule ?? "";
    message.topic = (object.topic !== undefined && object.topic !== null) ? Topic.fromPartial(object.topic) : undefined;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = object.environment ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseScheduledJob_AttributesEntry(): ScheduledJob_AttributesEntry {
  return { key: "", value: "" };
}

export const ScheduledJob_AttributesEntry: MessageFns<ScheduledJob_AttributesEntry> = {
  encode(message: ScheduledJob_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledJob_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledJob_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledJob_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ScheduledJob_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduledJob_AttributesEntry>, I>>(base?: I): ScheduledJob_AttributesEntry {
    return ScheduledJob_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduledJob_AttributesEntry>, I>>(object: I): ScheduledJob_AttributesEntry {
    const message = createBaseScheduledJob_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateJobRequest(): UpdateJobRequest {
  return {
    id: "",
    name: "",
    payload: "",
    schedule: "",
    topic: undefined,
    attributes: {},
    environment: undefined,
    tags: [],
  };
}

export const UpdateJobRequest: MessageFns<UpdateJobRequest> = {
  encode(message: UpdateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    if (message.schedule !== "") {
      writer.uint32(34).string(message.schedule);
    }
    if (message.topic !== undefined) {
      Topic.encode(message.topic, writer.uint32(42).fork()).join();
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      UpdateJobRequest_AttributesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.environment !== undefined) {
      writer.uint32(58).string(message.environment);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.schedule = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.topic = Topic.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = UpdateJobRequest_AttributesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.attributes[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
      topic: isSet(object.topic) ? Topic.fromJSON(object.topic) : undefined,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? globalThis.String(object.environment) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: UpdateJobRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.schedule !== "") {
      obj.schedule = message.schedule;
    }
    if (message.topic !== undefined) {
      obj.topic = Topic.toJSON(message.topic);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = message.environment;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobRequest>, I>>(base?: I): UpdateJobRequest {
    return UpdateJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobRequest>, I>>(object: I): UpdateJobRequest {
    const message = createBaseUpdateJobRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.payload = object.payload ?? "";
    message.schedule = object.schedule ?? "";
    message.topic = (object.topic !== undefined && object.topic !== null) ? Topic.fromPartial(object.topic) : undefined;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = object.environment ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateJobRequest_AttributesEntry(): UpdateJobRequest_AttributesEntry {
  return { key: "", value: "" };
}

export const UpdateJobRequest_AttributesEntry: MessageFns<UpdateJobRequest_AttributesEntry> = {
  encode(message: UpdateJobRequest_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobRequest_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobRequest_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobRequest_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UpdateJobRequest_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobRequest_AttributesEntry>, I>>(
    base?: I,
  ): UpdateJobRequest_AttributesEntry {
    return UpdateJobRequest_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobRequest_AttributesEntry>, I>>(
    object: I,
  ): UpdateJobRequest_AttributesEntry {
    const message = createBaseUpdateJobRequest_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateJobResponse(): UpdateJobResponse {
  return { job: undefined };
}

export const UpdateJobResponse: MessageFns<UpdateJobResponse> = {
  encode(message: UpdateJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      ScheduledJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = ScheduledJob.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobResponse {
    return { job: isSet(object.job) ? ScheduledJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: UpdateJobResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = ScheduledJob.toJSON(message.job);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobResponse>, I>>(base?: I): UpdateJobResponse {
    return UpdateJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobResponse>, I>>(object: I): UpdateJobResponse {
    const message = createBaseUpdateJobResponse();
    message.job = (object.job !== undefined && object.job !== null) ? ScheduledJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseListJobsRequest(): ListJobsRequest {
  return {};
}

export const ListJobsRequest: MessageFns<ListJobsRequest> = {
  encode(_: ListJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListJobsRequest {
    return {};
  },

  toJSON(_: ListJobsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListJobsRequest>, I>>(base?: I): ListJobsRequest {
    return ListJobsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListJobsRequest>, I>>(_: I): ListJobsRequest {
    const message = createBaseListJobsRequest();
    return message;
  },
};

function createBaseListJobsResponse(): ListJobsResponse {
  return { jobs: [] };
}

export const ListJobsResponse: MessageFns<ListJobsResponse> = {
  encode(message: ListJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      ScheduledJob.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobs.push(ScheduledJob.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobsResponse {
    return {
      jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => ScheduledJob.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => ScheduledJob.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListJobsResponse>, I>>(base?: I): ListJobsResponse {
    return ListJobsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListJobsResponse>, I>>(object: I): ListJobsResponse {
    const message = createBaseListJobsResponse();
    message.jobs = object.jobs?.map((e) => ScheduledJob.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateJobRequest(): CreateJobRequest {
  return { name: "", payload: "", schedule: "", topic: undefined, attributes: {}, environment: undefined, tags: [] };
}

export const CreateJobRequest: MessageFns<CreateJobRequest> = {
  encode(message: CreateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    if (message.schedule !== "") {
      writer.uint32(26).string(message.schedule);
    }
    if (message.topic !== undefined) {
      Topic.encode(message.topic, writer.uint32(34).fork()).join();
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      CreateJobRequest_AttributesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.environment !== undefined) {
      writer.uint32(58).string(message.environment);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.schedule = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.topic = Topic.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = CreateJobRequest_AttributesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.attributes[entry5.key] = entry5.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
      topic: isSet(object.topic) ? Topic.fromJSON(object.topic) : undefined,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? globalThis.String(object.environment) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreateJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.schedule !== "") {
      obj.schedule = message.schedule;
    }
    if (message.topic !== undefined) {
      obj.topic = Topic.toJSON(message.topic);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = message.environment;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateJobRequest>, I>>(base?: I): CreateJobRequest {
    return CreateJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateJobRequest>, I>>(object: I): CreateJobRequest {
    const message = createBaseCreateJobRequest();
    message.name = object.name ?? "";
    message.payload = object.payload ?? "";
    message.schedule = object.schedule ?? "";
    message.topic = (object.topic !== undefined && object.topic !== null) ? Topic.fromPartial(object.topic) : undefined;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = object.environment ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateJobRequest_AttributesEntry(): CreateJobRequest_AttributesEntry {
  return { key: "", value: "" };
}

export const CreateJobRequest_AttributesEntry: MessageFns<CreateJobRequest_AttributesEntry> = {
  encode(message: CreateJobRequest_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobRequest_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobRequest_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobRequest_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateJobRequest_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateJobRequest_AttributesEntry>, I>>(
    base?: I,
  ): CreateJobRequest_AttributesEntry {
    return CreateJobRequest_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateJobRequest_AttributesEntry>, I>>(
    object: I,
  ): CreateJobRequest_AttributesEntry {
    const message = createBaseCreateJobRequest_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateJobResponse(): CreateJobResponse {
  return { job: undefined };
}

export const CreateJobResponse: MessageFns<CreateJobResponse> = {
  encode(message: CreateJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      ScheduledJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = ScheduledJob.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobResponse {
    return { job: isSet(object.job) ? ScheduledJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: CreateJobResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = ScheduledJob.toJSON(message.job);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateJobResponse>, I>>(base?: I): CreateJobResponse {
    return CreateJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateJobResponse>, I>>(object: I): CreateJobResponse {
    const message = createBaseCreateJobResponse();
    message.job = (object.job !== undefined && object.job !== null) ? ScheduledJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseDeleteJobRequest(): DeleteJobRequest {
  return { id: "" };
}

export const DeleteJobRequest: MessageFns<DeleteJobRequest> = {
  encode(message: DeleteJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteJobRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteJobRequest>, I>>(base?: I): DeleteJobRequest {
    return DeleteJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteJobRequest>, I>>(object: I): DeleteJobRequest {
    const message = createBaseDeleteJobRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteJobResponse(): DeleteJobResponse {
  return {};
}

export const DeleteJobResponse: MessageFns<DeleteJobResponse> = {
  encode(_: DeleteJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteJobResponse {
    return {};
  },

  toJSON(_: DeleteJobResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteJobResponse>, I>>(base?: I): DeleteJobResponse {
    return DeleteJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteJobResponse>, I>>(_: I): DeleteJobResponse {
    const message = createBaseDeleteJobResponse();
    return message;
  },
};

function createBaseGetJobByNameRequest(): GetJobByNameRequest {
  return { name: "" };
}

export const GetJobByNameRequest: MessageFns<GetJobByNameRequest> = {
  encode(message: GetJobByNameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobByNameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobByNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobByNameRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetJobByNameRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobByNameRequest>, I>>(base?: I): GetJobByNameRequest {
    return GetJobByNameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobByNameRequest>, I>>(object: I): GetJobByNameRequest {
    const message = createBaseGetJobByNameRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetJobByNameResponse(): GetJobByNameResponse {
  return { job: undefined };
}

export const GetJobByNameResponse: MessageFns<GetJobByNameResponse> = {
  encode(message: GetJobByNameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      ScheduledJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobByNameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobByNameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = ScheduledJob.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobByNameResponse {
    return { job: isSet(object.job) ? ScheduledJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: GetJobByNameResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = ScheduledJob.toJSON(message.job);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobByNameResponse>, I>>(base?: I): GetJobByNameResponse {
    return GetJobByNameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobByNameResponse>, I>>(object: I): GetJobByNameResponse {
    const message = createBaseGetJobByNameResponse();
    message.job = (object.job !== undefined && object.job !== null) ? ScheduledJob.fromPartial(object.job) : undefined;
    return message;
  },
};

export type TopicPushServiceService = typeof TopicPushServiceService;
export const TopicPushServiceService = {
  listJobs: {
    path: "/chalk.server.v1.TopicPushService/ListJobs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListJobsRequest) => Buffer.from(ListJobsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListJobsRequest.decode(value),
    responseSerialize: (value: ListJobsResponse) => Buffer.from(ListJobsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListJobsResponse.decode(value),
  },
  createJob: {
    path: "/chalk.server.v1.TopicPushService/CreateJob",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateJobRequest) => Buffer.from(CreateJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateJobRequest.decode(value),
    responseSerialize: (value: CreateJobResponse) => Buffer.from(CreateJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateJobResponse.decode(value),
  },
  updateJob: {
    path: "/chalk.server.v1.TopicPushService/UpdateJob",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateJobRequest) => Buffer.from(UpdateJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateJobRequest.decode(value),
    responseSerialize: (value: UpdateJobResponse) => Buffer.from(UpdateJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateJobResponse.decode(value),
  },
  deleteJob: {
    path: "/chalk.server.v1.TopicPushService/DeleteJob",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteJobRequest) => Buffer.from(DeleteJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteJobRequest.decode(value),
    responseSerialize: (value: DeleteJobResponse) => Buffer.from(DeleteJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteJobResponse.decode(value),
  },
  getJobByName: {
    path: "/chalk.server.v1.TopicPushService/GetJobByName",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetJobByNameRequest) => Buffer.from(GetJobByNameRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetJobByNameRequest.decode(value),
    responseSerialize: (value: GetJobByNameResponse) => Buffer.from(GetJobByNameResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetJobByNameResponse.decode(value),
  },
} as const;

export interface TopicPushServiceServer extends UntypedServiceImplementation {
  listJobs: handleUnaryCall<ListJobsRequest, ListJobsResponse>;
  createJob: handleUnaryCall<CreateJobRequest, CreateJobResponse>;
  updateJob: handleUnaryCall<UpdateJobRequest, UpdateJobResponse>;
  deleteJob: handleUnaryCall<DeleteJobRequest, DeleteJobResponse>;
  getJobByName: handleUnaryCall<GetJobByNameRequest, GetJobByNameResponse>;
}

export interface TopicPushServiceClient extends Client {
  listJobs(
    request: ListJobsRequest,
    callback: (error: ServiceError | null, response: ListJobsResponse) => void,
  ): ClientUnaryCall;
  listJobs(
    request: ListJobsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListJobsResponse) => void,
  ): ClientUnaryCall;
  listJobs(
    request: ListJobsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListJobsResponse) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
  getJobByName(
    request: GetJobByNameRequest,
    callback: (error: ServiceError | null, response: GetJobByNameResponse) => void,
  ): ClientUnaryCall;
  getJobByName(
    request: GetJobByNameRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetJobByNameResponse) => void,
  ): ClientUnaryCall;
  getJobByName(
    request: GetJobByNameRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetJobByNameResponse) => void,
  ): ClientUnaryCall;
}

export const TopicPushServiceClient = makeGenericClientConstructor(
  TopicPushServiceService,
  "chalk.server.v1.TopicPushService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TopicPushServiceClient;
  service: typeof TopicPushServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
