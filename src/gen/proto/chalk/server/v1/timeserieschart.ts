// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/timeserieschart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "chalk.server.v1";

/** @deprecated */
export interface PointV2 {
  value?: number | undefined;
}

/** @deprecated */
export interface TimeSeriesV2 {
  points: PointV2[];
  label: string;
  units: string;
}

/** @deprecated */
export interface TimeSeriesChartV2 {
  title: string;
  series: TimeSeriesV2[];
  xSeries: Date[];
  windowPeriod: Duration | undefined;
}

function createBasePointV2(): PointV2 {
  return { value: undefined };
}

export const PointV2: MessageFns<PointV2> = {
  encode(message: PointV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PointV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PointV2 {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: PointV2): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PointV2>, I>>(base?: I): PointV2 {
    return PointV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PointV2>, I>>(object: I): PointV2 {
    const message = createBasePointV2();
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseTimeSeriesV2(): TimeSeriesV2 {
  return { points: [], label: "", units: "" };
}

export const TimeSeriesV2: MessageFns<TimeSeriesV2> = {
  encode(message: TimeSeriesV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      PointV2.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.units !== "") {
      writer.uint32(26).string(message.units);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(PointV2.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesV2 {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => PointV2.fromJSON(e)) : [],
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
    };
  },

  toJSON(message: TimeSeriesV2): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => PointV2.toJSON(e));
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimeSeriesV2>, I>>(base?: I): TimeSeriesV2 {
    return TimeSeriesV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimeSeriesV2>, I>>(object: I): TimeSeriesV2 {
    const message = createBaseTimeSeriesV2();
    message.points = object.points?.map((e) => PointV2.fromPartial(e)) || [];
    message.label = object.label ?? "";
    message.units = object.units ?? "";
    return message;
  },
};

function createBaseTimeSeriesChartV2(): TimeSeriesChartV2 {
  return { title: "", series: [], xSeries: [], windowPeriod: undefined };
}

export const TimeSeriesChartV2: MessageFns<TimeSeriesChartV2> = {
  encode(message: TimeSeriesChartV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      TimeSeriesV2.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.xSeries) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(26).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesChartV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesChartV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(TimeSeriesV2.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xSeries.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesChartV2 {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      series: globalThis.Array.isArray(object?.series) ? object.series.map((e: any) => TimeSeriesV2.fromJSON(e)) : [],
      xSeries: globalThis.Array.isArray(object?.xSeries) ? object.xSeries.map((e: any) => fromJsonTimestamp(e)) : [],
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
    };
  },

  toJSON(message: TimeSeriesChartV2): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => TimeSeriesV2.toJSON(e));
    }
    if (message.xSeries?.length) {
      obj.xSeries = message.xSeries.map((e) => e.toISOString());
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimeSeriesChartV2>, I>>(base?: I): TimeSeriesChartV2 {
    return TimeSeriesChartV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimeSeriesChartV2>, I>>(object: I): TimeSeriesChartV2 {
    const message = createBaseTimeSeriesChartV2();
    message.title = object.title ?? "";
    message.series = object.series?.map((e) => TimeSeriesV2.fromPartial(e)) || [];
    message.xSeries = object.xSeries?.map((e) => e) || [];
    message.windowPeriod = (object.windowPeriod !== undefined && object.windowPeriod !== null)
      ? Duration.fromPartial(object.windowPeriod)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
