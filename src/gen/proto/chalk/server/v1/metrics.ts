// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chalk.server.v1";

export interface GetOverviewSummaryMetricsRequest {
  rangeStart?: string | undefined;
  rangeEnd?: string | undefined;
}

export interface OverviewSummaryMetric {
  name: string;
  value: number;
}

export interface GetOverviewSummaryMetricsResponse {
  metrics: OverviewSummaryMetric[];
}

function createBaseGetOverviewSummaryMetricsRequest(): GetOverviewSummaryMetricsRequest {
  return { rangeStart: undefined, rangeEnd: undefined };
}

export const GetOverviewSummaryMetricsRequest: MessageFns<GetOverviewSummaryMetricsRequest> = {
  encode(message: GetOverviewSummaryMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rangeStart !== undefined) {
      writer.uint32(10).string(message.rangeStart);
    }
    if (message.rangeEnd !== undefined) {
      writer.uint32(18).string(message.rangeEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOverviewSummaryMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOverviewSummaryMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rangeStart = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rangeEnd = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOverviewSummaryMetricsRequest {
    return {
      rangeStart: isSet(object.rangeStart) ? globalThis.String(object.rangeStart) : undefined,
      rangeEnd: isSet(object.rangeEnd) ? globalThis.String(object.rangeEnd) : undefined,
    };
  },

  toJSON(message: GetOverviewSummaryMetricsRequest): unknown {
    const obj: any = {};
    if (message.rangeStart !== undefined) {
      obj.rangeStart = message.rangeStart;
    }
    if (message.rangeEnd !== undefined) {
      obj.rangeEnd = message.rangeEnd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOverviewSummaryMetricsRequest>, I>>(
    base?: I,
  ): GetOverviewSummaryMetricsRequest {
    return GetOverviewSummaryMetricsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOverviewSummaryMetricsRequest>, I>>(
    object: I,
  ): GetOverviewSummaryMetricsRequest {
    const message = createBaseGetOverviewSummaryMetricsRequest();
    message.rangeStart = object.rangeStart ?? undefined;
    message.rangeEnd = object.rangeEnd ?? undefined;
    return message;
  },
};

function createBaseOverviewSummaryMetric(): OverviewSummaryMetric {
  return { name: "", value: 0 };
}

export const OverviewSummaryMetric: MessageFns<OverviewSummaryMetric> = {
  encode(message: OverviewSummaryMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverviewSummaryMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverviewSummaryMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverviewSummaryMetric {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: OverviewSummaryMetric): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverviewSummaryMetric>, I>>(base?: I): OverviewSummaryMetric {
    return OverviewSummaryMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverviewSummaryMetric>, I>>(object: I): OverviewSummaryMetric {
    const message = createBaseOverviewSummaryMetric();
    message.name = object.name ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGetOverviewSummaryMetricsResponse(): GetOverviewSummaryMetricsResponse {
  return { metrics: [] };
}

export const GetOverviewSummaryMetricsResponse: MessageFns<GetOverviewSummaryMetricsResponse> = {
  encode(message: GetOverviewSummaryMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metrics) {
      OverviewSummaryMetric.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOverviewSummaryMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOverviewSummaryMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metrics.push(OverviewSummaryMetric.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOverviewSummaryMetricsResponse {
    return {
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => OverviewSummaryMetric.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetOverviewSummaryMetricsResponse): unknown {
    const obj: any = {};
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => OverviewSummaryMetric.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOverviewSummaryMetricsResponse>, I>>(
    base?: I,
  ): GetOverviewSummaryMetricsResponse {
    return GetOverviewSummaryMetricsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOverviewSummaryMetricsResponse>, I>>(
    object: I,
  ): GetOverviewSummaryMetricsResponse {
    const message = createBaseGetOverviewSummaryMetricsResponse();
    message.metrics = object.metrics?.map((e) => OverviewSummaryMetric.fromPartial(e)) || [];
    return message;
  },
};

export type MetricsServiceService = typeof MetricsServiceService;
export const MetricsServiceService = {
  getOverviewSummaryMetrics: {
    path: "/chalk.server.v1.MetricsService/GetOverviewSummaryMetrics",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOverviewSummaryMetricsRequest) =>
      Buffer.from(GetOverviewSummaryMetricsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOverviewSummaryMetricsRequest.decode(value),
    responseSerialize: (value: GetOverviewSummaryMetricsResponse) =>
      Buffer.from(GetOverviewSummaryMetricsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOverviewSummaryMetricsResponse.decode(value),
  },
} as const;

export interface MetricsServiceServer extends UntypedServiceImplementation {
  getOverviewSummaryMetrics: handleUnaryCall<GetOverviewSummaryMetricsRequest, GetOverviewSummaryMetricsResponse>;
}

export interface MetricsServiceClient extends Client {
  getOverviewSummaryMetrics(
    request: GetOverviewSummaryMetricsRequest,
    callback: (error: ServiceError | null, response: GetOverviewSummaryMetricsResponse) => void,
  ): ClientUnaryCall;
  getOverviewSummaryMetrics(
    request: GetOverviewSummaryMetricsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOverviewSummaryMetricsResponse) => void,
  ): ClientUnaryCall;
  getOverviewSummaryMetrics(
    request: GetOverviewSummaryMetricsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOverviewSummaryMetricsResponse) => void,
  ): ClientUnaryCall;
}

export const MetricsServiceClient = makeGenericClientConstructor(
  MetricsServiceService,
  "chalk.server.v1.MetricsService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MetricsServiceClient;
  service: typeof MetricsServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
