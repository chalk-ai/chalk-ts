// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/bootstrap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Environment } from "./environment";
import { Project, Team, TeamInvite } from "./team";

export const protobufPackage = "chalk.server.v1";

export interface BootstrapExtraSettingsEnvironment {
  settings: { [key: string]: boolean };
}

export interface BootstrapExtraSettingsEnvironment_SettingsEntry {
  key: string;
  value: boolean;
}

export interface BootstrapExtraSettings {
  global: { [key: string]: boolean };
  environments: { [key: string]: BootstrapExtraSettingsEnvironment };
}

export interface BootstrapExtraSettings_GlobalEntry {
  key: string;
  value: boolean;
}

export interface BootstrapExtraSettings_EnvironmentsEntry {
  key: string;
  value: BootstrapExtraSettingsEnvironment | undefined;
}

export interface ParsedBootstrapConfigs {
  teams: Team[];
  projects: Project[];
  environments: Environment[];
  teamInvites: TeamInvite[];
  extraSettings: BootstrapExtraSettings | undefined;
  globalPinnedBaseImage?: string | undefined;
}

function createBaseBootstrapExtraSettingsEnvironment(): BootstrapExtraSettingsEnvironment {
  return { settings: {} };
}

export const BootstrapExtraSettingsEnvironment: MessageFns<BootstrapExtraSettingsEnvironment> = {
  encode(message: BootstrapExtraSettingsEnvironment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.settings).forEach(([key, value]) => {
      BootstrapExtraSettingsEnvironment_SettingsEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BootstrapExtraSettingsEnvironment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapExtraSettingsEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = BootstrapExtraSettingsEnvironment_SettingsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.settings[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BootstrapExtraSettingsEnvironment {
    return {
      settings: isObject(object.settings)
        ? Object.entries(object.settings).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BootstrapExtraSettingsEnvironment): unknown {
    const obj: any = {};
    if (message.settings) {
      const entries = Object.entries(message.settings);
      if (entries.length > 0) {
        obj.settings = {};
        entries.forEach(([k, v]) => {
          obj.settings[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BootstrapExtraSettingsEnvironment>, I>>(
    base?: I,
  ): BootstrapExtraSettingsEnvironment {
    return BootstrapExtraSettingsEnvironment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BootstrapExtraSettingsEnvironment>, I>>(
    object: I,
  ): BootstrapExtraSettingsEnvironment {
    const message = createBaseBootstrapExtraSettingsEnvironment();
    message.settings = Object.entries(object.settings ?? {}).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Boolean(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBootstrapExtraSettingsEnvironment_SettingsEntry(): BootstrapExtraSettingsEnvironment_SettingsEntry {
  return { key: "", value: false };
}

export const BootstrapExtraSettingsEnvironment_SettingsEntry: MessageFns<
  BootstrapExtraSettingsEnvironment_SettingsEntry
> = {
  encode(
    message: BootstrapExtraSettingsEnvironment_SettingsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BootstrapExtraSettingsEnvironment_SettingsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapExtraSettingsEnvironment_SettingsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BootstrapExtraSettingsEnvironment_SettingsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: BootstrapExtraSettingsEnvironment_SettingsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BootstrapExtraSettingsEnvironment_SettingsEntry>, I>>(
    base?: I,
  ): BootstrapExtraSettingsEnvironment_SettingsEntry {
    return BootstrapExtraSettingsEnvironment_SettingsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BootstrapExtraSettingsEnvironment_SettingsEntry>, I>>(
    object: I,
  ): BootstrapExtraSettingsEnvironment_SettingsEntry {
    const message = createBaseBootstrapExtraSettingsEnvironment_SettingsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseBootstrapExtraSettings(): BootstrapExtraSettings {
  return { global: {}, environments: {} };
}

export const BootstrapExtraSettings: MessageFns<BootstrapExtraSettings> = {
  encode(message: BootstrapExtraSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.global).forEach(([key, value]) => {
      BootstrapExtraSettings_GlobalEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    Object.entries(message.environments).forEach(([key, value]) => {
      BootstrapExtraSettings_EnvironmentsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BootstrapExtraSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapExtraSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = BootstrapExtraSettings_GlobalEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.global[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = BootstrapExtraSettings_EnvironmentsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.environments[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BootstrapExtraSettings {
    return {
      global: isObject(object.global)
        ? Object.entries(object.global).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      environments: isObject(object.environments)
        ? Object.entries(object.environments).reduce<{ [key: string]: BootstrapExtraSettingsEnvironment }>(
          (acc, [key, value]) => {
            acc[key] = BootstrapExtraSettingsEnvironment.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: BootstrapExtraSettings): unknown {
    const obj: any = {};
    if (message.global) {
      const entries = Object.entries(message.global);
      if (entries.length > 0) {
        obj.global = {};
        entries.forEach(([k, v]) => {
          obj.global[k] = v;
        });
      }
    }
    if (message.environments) {
      const entries = Object.entries(message.environments);
      if (entries.length > 0) {
        obj.environments = {};
        entries.forEach(([k, v]) => {
          obj.environments[k] = BootstrapExtraSettingsEnvironment.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BootstrapExtraSettings>, I>>(base?: I): BootstrapExtraSettings {
    return BootstrapExtraSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BootstrapExtraSettings>, I>>(object: I): BootstrapExtraSettings {
    const message = createBaseBootstrapExtraSettings();
    message.global = Object.entries(object.global ?? {}).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Boolean(value);
      }
      return acc;
    }, {});
    message.environments = Object.entries(object.environments ?? {}).reduce<
      { [key: string]: BootstrapExtraSettingsEnvironment }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = BootstrapExtraSettingsEnvironment.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBootstrapExtraSettings_GlobalEntry(): BootstrapExtraSettings_GlobalEntry {
  return { key: "", value: false };
}

export const BootstrapExtraSettings_GlobalEntry: MessageFns<BootstrapExtraSettings_GlobalEntry> = {
  encode(message: BootstrapExtraSettings_GlobalEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BootstrapExtraSettings_GlobalEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapExtraSettings_GlobalEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BootstrapExtraSettings_GlobalEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: BootstrapExtraSettings_GlobalEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BootstrapExtraSettings_GlobalEntry>, I>>(
    base?: I,
  ): BootstrapExtraSettings_GlobalEntry {
    return BootstrapExtraSettings_GlobalEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BootstrapExtraSettings_GlobalEntry>, I>>(
    object: I,
  ): BootstrapExtraSettings_GlobalEntry {
    const message = createBaseBootstrapExtraSettings_GlobalEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseBootstrapExtraSettings_EnvironmentsEntry(): BootstrapExtraSettings_EnvironmentsEntry {
  return { key: "", value: undefined };
}

export const BootstrapExtraSettings_EnvironmentsEntry: MessageFns<BootstrapExtraSettings_EnvironmentsEntry> = {
  encode(message: BootstrapExtraSettings_EnvironmentsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      BootstrapExtraSettingsEnvironment.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BootstrapExtraSettings_EnvironmentsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapExtraSettings_EnvironmentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BootstrapExtraSettingsEnvironment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BootstrapExtraSettings_EnvironmentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? BootstrapExtraSettingsEnvironment.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: BootstrapExtraSettings_EnvironmentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BootstrapExtraSettingsEnvironment.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BootstrapExtraSettings_EnvironmentsEntry>, I>>(
    base?: I,
  ): BootstrapExtraSettings_EnvironmentsEntry {
    return BootstrapExtraSettings_EnvironmentsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BootstrapExtraSettings_EnvironmentsEntry>, I>>(
    object: I,
  ): BootstrapExtraSettings_EnvironmentsEntry {
    const message = createBaseBootstrapExtraSettings_EnvironmentsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? BootstrapExtraSettingsEnvironment.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseParsedBootstrapConfigs(): ParsedBootstrapConfigs {
  return {
    teams: [],
    projects: [],
    environments: [],
    teamInvites: [],
    extraSettings: undefined,
    globalPinnedBaseImage: undefined,
  };
}

export const ParsedBootstrapConfigs: MessageFns<ParsedBootstrapConfigs> = {
  encode(message: ParsedBootstrapConfigs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teams) {
      Team.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.teamInvites) {
      TeamInvite.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.extraSettings !== undefined) {
      BootstrapExtraSettings.encode(message.extraSettings, writer.uint32(42).fork()).join();
    }
    if (message.globalPinnedBaseImage !== undefined) {
      writer.uint32(50).string(message.globalPinnedBaseImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParsedBootstrapConfigs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParsedBootstrapConfigs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teams.push(Team.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.teamInvites.push(TeamInvite.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extraSettings = BootstrapExtraSettings.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.globalPinnedBaseImage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParsedBootstrapConfigs {
    return {
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => Team.fromJSON(e)) : [],
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      teamInvites: globalThis.Array.isArray(object?.teamInvites)
        ? object.teamInvites.map((e: any) => TeamInvite.fromJSON(e))
        : [],
      extraSettings: isSet(object.extraSettings) ? BootstrapExtraSettings.fromJSON(object.extraSettings) : undefined,
      globalPinnedBaseImage: isSet(object.globalPinnedBaseImage)
        ? globalThis.String(object.globalPinnedBaseImage)
        : undefined,
    };
  },

  toJSON(message: ParsedBootstrapConfigs): unknown {
    const obj: any = {};
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => Team.toJSON(e));
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.teamInvites?.length) {
      obj.teamInvites = message.teamInvites.map((e) => TeamInvite.toJSON(e));
    }
    if (message.extraSettings !== undefined) {
      obj.extraSettings = BootstrapExtraSettings.toJSON(message.extraSettings);
    }
    if (message.globalPinnedBaseImage !== undefined) {
      obj.globalPinnedBaseImage = message.globalPinnedBaseImage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParsedBootstrapConfigs>, I>>(base?: I): ParsedBootstrapConfigs {
    return ParsedBootstrapConfigs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParsedBootstrapConfigs>, I>>(object: I): ParsedBootstrapConfigs {
    const message = createBaseParsedBootstrapConfigs();
    message.teams = object.teams?.map((e) => Team.fromPartial(e)) || [];
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.teamInvites = object.teamInvites?.map((e) => TeamInvite.fromPartial(e)) || [];
    message.extraSettings = (object.extraSettings !== undefined && object.extraSettings !== null)
      ? BootstrapExtraSettings.fromPartial(object.extraSettings)
      : undefined;
    message.globalPinnedBaseImage = object.globalPinnedBaseImage ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
