// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/queries.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Duration } from "../../../google/protobuf/duration.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart.pb";

export const protobufPackage = "chalk.server.v1";

export interface GetQueryPerformanceSummaryRequest {
  operationId: string;
}

export interface GetQueryPerformanceSummaryResponse {
  operationId: string;
  performanceSummary?: string | undefined;
}

export interface ListQueryErrorsPageToken {
  numericIdHwm: number;
  errorTimestampHwm: Date | undefined;
}

export interface QueryErrorFilters {
  operationId?: string | undefined;
  featureFqn?: string | undefined;
  resolverFqn?: string | undefined;
  queryName?: string | undefined;
}

export interface QueryErrorMeta {
  id: number;
  code: string;
  category: string;
  message: string;
  displayPrimaryKey?: string | undefined;
  displayPrimaryKeyFqn?: string | undefined;
  feature?: string | undefined;
  resolver?: string | undefined;
  queryName?: string | undefined;
  exceptionKind?: string | undefined;
  exceptionMessage?: string | undefined;
  exceptionStacktrace?: string | undefined;
  exceptionInternalStacktrace?: string | undefined;
  operationId?: string | undefined;
  deploymentId?: string | undefined;
  createdAt: Date | undefined;
}

export interface ListQueryErrorsRequest {
  startDate: Date | undefined;
  endDate: Date | undefined;
  filters: QueryErrorFilters | undefined;
  pageSize?:
    | number
    | undefined;
  /** This page_token is a b64-encoded ListQueryErrorsPageToken message */
  pageToken?: string | undefined;
}

export interface ListQueryErrorsResponse {
  queryErrors: QueryErrorMeta[];
  nextPageToken?: string | undefined;
}

export interface GetQueryErrorsChartRequest {
  startTimestampInclusive:
    | Date
    | undefined;
  /**
   * If not specified, assumes the current timestamp
   * To avoid awkward small window buckets at the end, specify this.
   */
  endTimestampExclusive?:
    | Date
    | undefined;
  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket start-aligned with end_timestamp_exclusive will be of size total_window % window_period
   */
  windowPeriod: Duration | undefined;
  filters: QueryErrorFilters | undefined;
}

export interface GetQueryErrorsChartResponse {
  chart: DenseTimeSeriesChart | undefined;
}

function createBaseGetQueryPerformanceSummaryRequest(): GetQueryPerformanceSummaryRequest {
  return { operationId: "" };
}

export const GetQueryPerformanceSummaryRequest: MessageFns<GetQueryPerformanceSummaryRequest> = {
  encode(message: GetQueryPerformanceSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryPerformanceSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryPerformanceSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryPerformanceSummaryRequest {
    return { operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "" };
  },

  toJSON(message: GetQueryPerformanceSummaryRequest): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    return obj;
  },
};

function createBaseGetQueryPerformanceSummaryResponse(): GetQueryPerformanceSummaryResponse {
  return { operationId: "", performanceSummary: undefined };
}

export const GetQueryPerformanceSummaryResponse: MessageFns<GetQueryPerformanceSummaryResponse> = {
  encode(message: GetQueryPerformanceSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.performanceSummary !== undefined) {
      writer.uint32(18).string(message.performanceSummary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryPerformanceSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryPerformanceSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.performanceSummary = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryPerformanceSummaryResponse {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      performanceSummary: isSet(object.performanceSummary) ? globalThis.String(object.performanceSummary) : undefined,
    };
  },

  toJSON(message: GetQueryPerformanceSummaryResponse): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.performanceSummary !== undefined) {
      obj.performanceSummary = message.performanceSummary;
    }
    return obj;
  },
};

function createBaseListQueryErrorsPageToken(): ListQueryErrorsPageToken {
  return { numericIdHwm: 0, errorTimestampHwm: undefined };
}

export const ListQueryErrorsPageToken: MessageFns<ListQueryErrorsPageToken> = {
  encode(message: ListQueryErrorsPageToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numericIdHwm !== 0) {
      writer.uint32(8).int64(message.numericIdHwm);
    }
    if (message.errorTimestampHwm !== undefined) {
      Timestamp.encode(toTimestamp(message.errorTimestampHwm), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQueryErrorsPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQueryErrorsPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numericIdHwm = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorTimestampHwm = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQueryErrorsPageToken {
    return {
      numericIdHwm: isSet(object.numericIdHwm) ? globalThis.Number(object.numericIdHwm) : 0,
      errorTimestampHwm: isSet(object.errorTimestampHwm) ? fromJsonTimestamp(object.errorTimestampHwm) : undefined,
    };
  },

  toJSON(message: ListQueryErrorsPageToken): unknown {
    const obj: any = {};
    if (message.numericIdHwm !== 0) {
      obj.numericIdHwm = Math.round(message.numericIdHwm);
    }
    if (message.errorTimestampHwm !== undefined) {
      obj.errorTimestampHwm = message.errorTimestampHwm.toISOString();
    }
    return obj;
  },
};

function createBaseQueryErrorFilters(): QueryErrorFilters {
  return { operationId: undefined, featureFqn: undefined, resolverFqn: undefined, queryName: undefined };
}

export const QueryErrorFilters: MessageFns<QueryErrorFilters> = {
  encode(message: QueryErrorFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== undefined) {
      writer.uint32(10).string(message.operationId);
    }
    if (message.featureFqn !== undefined) {
      writer.uint32(18).string(message.featureFqn);
    }
    if (message.resolverFqn !== undefined) {
      writer.uint32(26).string(message.resolverFqn);
    }
    if (message.queryName !== undefined) {
      writer.uint32(34).string(message.queryName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryErrorFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryErrorFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.featureFqn = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resolverFqn = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.queryName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryErrorFilters {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : undefined,
      featureFqn: isSet(object.featureFqn) ? globalThis.String(object.featureFqn) : undefined,
      resolverFqn: isSet(object.resolverFqn) ? globalThis.String(object.resolverFqn) : undefined,
      queryName: isSet(object.queryName) ? globalThis.String(object.queryName) : undefined,
    };
  },

  toJSON(message: QueryErrorFilters): unknown {
    const obj: any = {};
    if (message.operationId !== undefined) {
      obj.operationId = message.operationId;
    }
    if (message.featureFqn !== undefined) {
      obj.featureFqn = message.featureFqn;
    }
    if (message.resolverFqn !== undefined) {
      obj.resolverFqn = message.resolverFqn;
    }
    if (message.queryName !== undefined) {
      obj.queryName = message.queryName;
    }
    return obj;
  },
};

function createBaseQueryErrorMeta(): QueryErrorMeta {
  return {
    id: 0,
    code: "",
    category: "",
    message: "",
    displayPrimaryKey: undefined,
    displayPrimaryKeyFqn: undefined,
    feature: undefined,
    resolver: undefined,
    queryName: undefined,
    exceptionKind: undefined,
    exceptionMessage: undefined,
    exceptionStacktrace: undefined,
    exceptionInternalStacktrace: undefined,
    operationId: undefined,
    deploymentId: undefined,
    createdAt: undefined,
  };
}

export const QueryErrorMeta: MessageFns<QueryErrorMeta> = {
  encode(message: QueryErrorMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.category !== "") {
      writer.uint32(26).string(message.category);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    if (message.displayPrimaryKey !== undefined) {
      writer.uint32(42).string(message.displayPrimaryKey);
    }
    if (message.displayPrimaryKeyFqn !== undefined) {
      writer.uint32(50).string(message.displayPrimaryKeyFqn);
    }
    if (message.feature !== undefined) {
      writer.uint32(58).string(message.feature);
    }
    if (message.resolver !== undefined) {
      writer.uint32(66).string(message.resolver);
    }
    if (message.queryName !== undefined) {
      writer.uint32(74).string(message.queryName);
    }
    if (message.exceptionKind !== undefined) {
      writer.uint32(82).string(message.exceptionKind);
    }
    if (message.exceptionMessage !== undefined) {
      writer.uint32(90).string(message.exceptionMessage);
    }
    if (message.exceptionStacktrace !== undefined) {
      writer.uint32(98).string(message.exceptionStacktrace);
    }
    if (message.exceptionInternalStacktrace !== undefined) {
      writer.uint32(106).string(message.exceptionInternalStacktrace);
    }
    if (message.operationId !== undefined) {
      writer.uint32(114).string(message.operationId);
    }
    if (message.deploymentId !== undefined) {
      writer.uint32(122).string(message.deploymentId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryErrorMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryErrorMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayPrimaryKey = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.displayPrimaryKeyFqn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.feature = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.resolver = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.queryName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.exceptionKind = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.exceptionMessage = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.exceptionStacktrace = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.exceptionInternalStacktrace = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryErrorMeta {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      displayPrimaryKey: isSet(object.displayPrimaryKey) ? globalThis.String(object.displayPrimaryKey) : undefined,
      displayPrimaryKeyFqn: isSet(object.displayPrimaryKeyFqn)
        ? globalThis.String(object.displayPrimaryKeyFqn)
        : undefined,
      feature: isSet(object.feature) ? globalThis.String(object.feature) : undefined,
      resolver: isSet(object.resolver) ? globalThis.String(object.resolver) : undefined,
      queryName: isSet(object.queryName) ? globalThis.String(object.queryName) : undefined,
      exceptionKind: isSet(object.exceptionKind) ? globalThis.String(object.exceptionKind) : undefined,
      exceptionMessage: isSet(object.exceptionMessage) ? globalThis.String(object.exceptionMessage) : undefined,
      exceptionStacktrace: isSet(object.exceptionStacktrace)
        ? globalThis.String(object.exceptionStacktrace)
        : undefined,
      exceptionInternalStacktrace: isSet(object.exceptionInternalStacktrace)
        ? globalThis.String(object.exceptionInternalStacktrace)
        : undefined,
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : undefined,
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: QueryErrorMeta): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.displayPrimaryKey !== undefined) {
      obj.displayPrimaryKey = message.displayPrimaryKey;
    }
    if (message.displayPrimaryKeyFqn !== undefined) {
      obj.displayPrimaryKeyFqn = message.displayPrimaryKeyFqn;
    }
    if (message.feature !== undefined) {
      obj.feature = message.feature;
    }
    if (message.resolver !== undefined) {
      obj.resolver = message.resolver;
    }
    if (message.queryName !== undefined) {
      obj.queryName = message.queryName;
    }
    if (message.exceptionKind !== undefined) {
      obj.exceptionKind = message.exceptionKind;
    }
    if (message.exceptionMessage !== undefined) {
      obj.exceptionMessage = message.exceptionMessage;
    }
    if (message.exceptionStacktrace !== undefined) {
      obj.exceptionStacktrace = message.exceptionStacktrace;
    }
    if (message.exceptionInternalStacktrace !== undefined) {
      obj.exceptionInternalStacktrace = message.exceptionInternalStacktrace;
    }
    if (message.operationId !== undefined) {
      obj.operationId = message.operationId;
    }
    if (message.deploymentId !== undefined) {
      obj.deploymentId = message.deploymentId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },
};

function createBaseListQueryErrorsRequest(): ListQueryErrorsRequest {
  return { startDate: undefined, endDate: undefined, filters: undefined, pageSize: undefined, pageToken: undefined };
}

export const ListQueryErrorsRequest: MessageFns<ListQueryErrorsRequest> = {
  encode(message: ListQueryErrorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(10).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(18).fork()).join();
    }
    if (message.filters !== undefined) {
      QueryErrorFilters.encode(message.filters, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== undefined) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQueryErrorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQueryErrorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters = QueryErrorFilters.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQueryErrorsRequest {
    return {
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
      filters: isSet(object.filters) ? QueryErrorFilters.fromJSON(object.filters) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
    };
  },

  toJSON(message: ListQueryErrorsRequest): unknown {
    const obj: any = {};
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    if (message.filters !== undefined) {
      obj.filters = QueryErrorFilters.toJSON(message.filters);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },
};

function createBaseListQueryErrorsResponse(): ListQueryErrorsResponse {
  return { queryErrors: [], nextPageToken: undefined };
}

export const ListQueryErrorsResponse: MessageFns<ListQueryErrorsResponse> = {
  encode(message: ListQueryErrorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.queryErrors) {
      QueryErrorMeta.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQueryErrorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQueryErrorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queryErrors.push(QueryErrorMeta.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQueryErrorsResponse {
    return {
      queryErrors: globalThis.Array.isArray(object?.queryErrors)
        ? object.queryErrors.map((e: any) => QueryErrorMeta.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListQueryErrorsResponse): unknown {
    const obj: any = {};
    if (message.queryErrors?.length) {
      obj.queryErrors = message.queryErrors.map((e) => QueryErrorMeta.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },
};

function createBaseGetQueryErrorsChartRequest(): GetQueryErrorsChartRequest {
  return {
    startTimestampInclusive: undefined,
    endTimestampExclusive: undefined,
    windowPeriod: undefined,
    filters: undefined,
  };
}

export const GetQueryErrorsChartRequest: MessageFns<GetQueryErrorsChartRequest> = {
  encode(message: GetQueryErrorsChartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTimestampInclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.startTimestampInclusive), writer.uint32(10).fork()).join();
    }
    if (message.endTimestampExclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.endTimestampExclusive), writer.uint32(18).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(26).fork()).join();
    }
    if (message.filters !== undefined) {
      QueryErrorFilters.encode(message.filters, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryErrorsChartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryErrorsChartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTimestampInclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTimestampExclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = QueryErrorFilters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryErrorsChartRequest {
    return {
      startTimestampInclusive: isSet(object.startTimestampInclusive)
        ? fromJsonTimestamp(object.startTimestampInclusive)
        : undefined,
      endTimestampExclusive: isSet(object.endTimestampExclusive)
        ? fromJsonTimestamp(object.endTimestampExclusive)
        : undefined,
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
      filters: isSet(object.filters) ? QueryErrorFilters.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: GetQueryErrorsChartRequest): unknown {
    const obj: any = {};
    if (message.startTimestampInclusive !== undefined) {
      obj.startTimestampInclusive = message.startTimestampInclusive.toISOString();
    }
    if (message.endTimestampExclusive !== undefined) {
      obj.endTimestampExclusive = message.endTimestampExclusive.toISOString();
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    if (message.filters !== undefined) {
      obj.filters = QueryErrorFilters.toJSON(message.filters);
    }
    return obj;
  },
};

function createBaseGetQueryErrorsChartResponse(): GetQueryErrorsChartResponse {
  return { chart: undefined };
}

export const GetQueryErrorsChartResponse: MessageFns<GetQueryErrorsChartResponse> = {
  encode(message: GetQueryErrorsChartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chart !== undefined) {
      DenseTimeSeriesChart.encode(message.chart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQueryErrorsChartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQueryErrorsChartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chart = DenseTimeSeriesChart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQueryErrorsChartResponse {
    return { chart: isSet(object.chart) ? DenseTimeSeriesChart.fromJSON(object.chart) : undefined };
  },

  toJSON(message: GetQueryErrorsChartResponse): unknown {
    const obj: any = {};
    if (message.chart !== undefined) {
      obj.chart = DenseTimeSeriesChart.toJSON(message.chart);
    }
    return obj;
  },
};

export type QueriesServiceService = typeof QueriesServiceService;
export const QueriesServiceService = {
  getQueryPerformanceSummary: {
    path: "/chalk.server.v1.QueriesService/GetQueryPerformanceSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetQueryPerformanceSummaryRequest) =>
      Buffer.from(GetQueryPerformanceSummaryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetQueryPerformanceSummaryRequest.decode(value),
    responseSerialize: (value: GetQueryPerformanceSummaryResponse) =>
      Buffer.from(GetQueryPerformanceSummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetQueryPerformanceSummaryResponse.decode(value),
  },
  listQueryErrors: {
    path: "/chalk.server.v1.QueriesService/ListQueryErrors",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListQueryErrorsRequest) => Buffer.from(ListQueryErrorsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListQueryErrorsRequest.decode(value),
    responseSerialize: (value: ListQueryErrorsResponse) => Buffer.from(ListQueryErrorsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListQueryErrorsResponse.decode(value),
  },
  getQueryErrorsChart: {
    path: "/chalk.server.v1.QueriesService/GetQueryErrorsChart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetQueryErrorsChartRequest) =>
      Buffer.from(GetQueryErrorsChartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetQueryErrorsChartRequest.decode(value),
    responseSerialize: (value: GetQueryErrorsChartResponse) =>
      Buffer.from(GetQueryErrorsChartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetQueryErrorsChartResponse.decode(value),
  },
} as const;

export interface QueriesServiceServer extends UntypedServiceImplementation {
  getQueryPerformanceSummary: handleUnaryCall<GetQueryPerformanceSummaryRequest, GetQueryPerformanceSummaryResponse>;
  listQueryErrors: handleUnaryCall<ListQueryErrorsRequest, ListQueryErrorsResponse>;
  getQueryErrorsChart: handleUnaryCall<GetQueryErrorsChartRequest, GetQueryErrorsChartResponse>;
}

export interface QueriesServiceClient extends Client {
  getQueryPerformanceSummary(
    request: GetQueryPerformanceSummaryRequest,
    callback: (error: ServiceError | null, response: GetQueryPerformanceSummaryResponse) => void,
  ): ClientUnaryCall;
  getQueryPerformanceSummary(
    request: GetQueryPerformanceSummaryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetQueryPerformanceSummaryResponse) => void,
  ): ClientUnaryCall;
  getQueryPerformanceSummary(
    request: GetQueryPerformanceSummaryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetQueryPerformanceSummaryResponse) => void,
  ): ClientUnaryCall;
  listQueryErrors(
    request: ListQueryErrorsRequest,
    callback: (error: ServiceError | null, response: ListQueryErrorsResponse) => void,
  ): ClientUnaryCall;
  listQueryErrors(
    request: ListQueryErrorsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListQueryErrorsResponse) => void,
  ): ClientUnaryCall;
  listQueryErrors(
    request: ListQueryErrorsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListQueryErrorsResponse) => void,
  ): ClientUnaryCall;
  getQueryErrorsChart(
    request: GetQueryErrorsChartRequest,
    callback: (error: ServiceError | null, response: GetQueryErrorsChartResponse) => void,
  ): ClientUnaryCall;
  getQueryErrorsChart(
    request: GetQueryErrorsChartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetQueryErrorsChartResponse) => void,
  ): ClientUnaryCall;
  getQueryErrorsChart(
    request: GetQueryErrorsChartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetQueryErrorsChartResponse) => void,
  ): ClientUnaryCall;
}

export const QueriesServiceClient = makeGenericClientConstructor(
  QueriesServiceService,
  "chalk.server.v1.QueriesService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueriesServiceClient;
  service: typeof QueriesServiceService;
  serviceName: string;
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
