// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/link.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "chalk.server.v1";

export enum LinkSessionStatus {
  LINK_SESSION_STATUS_UNSPECIFIED = 0,
  LINK_SESSION_STATUS_PENDING = 1,
  LINK_SESSION_STATUS_SUCCESS = 2,
  LINK_SESSION_STATUS_FAILED = 3,
  LINK_SESSION_STATUS_NOT_FOUND = 4,
  LINK_SESSION_STATUS_FORBIDDEN = 5,
  UNRECOGNIZED = -1,
}

export function linkSessionStatusFromJSON(object: any): LinkSessionStatus {
  switch (object) {
    case 0:
    case "LINK_SESSION_STATUS_UNSPECIFIED":
      return LinkSessionStatus.LINK_SESSION_STATUS_UNSPECIFIED;
    case 1:
    case "LINK_SESSION_STATUS_PENDING":
      return LinkSessionStatus.LINK_SESSION_STATUS_PENDING;
    case 2:
    case "LINK_SESSION_STATUS_SUCCESS":
      return LinkSessionStatus.LINK_SESSION_STATUS_SUCCESS;
    case 3:
    case "LINK_SESSION_STATUS_FAILED":
      return LinkSessionStatus.LINK_SESSION_STATUS_FAILED;
    case 4:
    case "LINK_SESSION_STATUS_NOT_FOUND":
      return LinkSessionStatus.LINK_SESSION_STATUS_NOT_FOUND;
    case 5:
    case "LINK_SESSION_STATUS_FORBIDDEN":
      return LinkSessionStatus.LINK_SESSION_STATUS_FORBIDDEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkSessionStatus.UNRECOGNIZED;
  }
}

export function linkSessionStatusToJSON(object: LinkSessionStatus): string {
  switch (object) {
    case LinkSessionStatus.LINK_SESSION_STATUS_UNSPECIFIED:
      return "LINK_SESSION_STATUS_UNSPECIFIED";
    case LinkSessionStatus.LINK_SESSION_STATUS_PENDING:
      return "LINK_SESSION_STATUS_PENDING";
    case LinkSessionStatus.LINK_SESSION_STATUS_SUCCESS:
      return "LINK_SESSION_STATUS_SUCCESS";
    case LinkSessionStatus.LINK_SESSION_STATUS_FAILED:
      return "LINK_SESSION_STATUS_FAILED";
    case LinkSessionStatus.LINK_SESSION_STATUS_NOT_FOUND:
      return "LINK_SESSION_STATUS_NOT_FOUND";
    case LinkSessionStatus.LINK_SESSION_STATUS_FORBIDDEN:
      return "LINK_SESSION_STATUS_FORBIDDEN";
    case LinkSessionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LinkToken {
  name: string;
  clientId: string;
  clientSecret: string;
  apiServer: string;
  activeEnvironment?: string | undefined;
  validUntil: Date | undefined;
}

/** GET LINK */
export interface GetLinkSessionRequest {
  linkCode: string;
  projectName: string;
}

export interface GetLinkSessionResponse {
  status: LinkSessionStatus;
  message: string;
  token?: LinkToken | undefined;
  sessionId: string;
}

/** CREATE LINK */
export interface CreateLinkSessionRequest {
}

export interface CreateLinkSessionResponse {
  linkCode: string;
  authLink: string;
  expiresAt: Date | undefined;
  sessionId: string;
}

function createBaseLinkToken(): LinkToken {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    apiServer: "",
    activeEnvironment: undefined,
    validUntil: undefined,
  };
}

export const LinkToken: MessageFns<LinkToken> = {
  encode(message: LinkToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.apiServer !== "") {
      writer.uint32(34).string(message.apiServer);
    }
    if (message.activeEnvironment !== undefined) {
      writer.uint32(42).string(message.activeEnvironment);
    }
    if (message.validUntil !== undefined) {
      Timestamp.encode(toTimestamp(message.validUntil), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.apiServer = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.activeEnvironment = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.validUntil = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkToken {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      apiServer: isSet(object.apiServer) ? globalThis.String(object.apiServer) : "",
      activeEnvironment: isSet(object.activeEnvironment) ? globalThis.String(object.activeEnvironment) : undefined,
      validUntil: isSet(object.validUntil) ? fromJsonTimestamp(object.validUntil) : undefined,
    };
  },

  toJSON(message: LinkToken): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.apiServer !== "") {
      obj.apiServer = message.apiServer;
    }
    if (message.activeEnvironment !== undefined) {
      obj.activeEnvironment = message.activeEnvironment;
    }
    if (message.validUntil !== undefined) {
      obj.validUntil = message.validUntil.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkToken>, I>>(base?: I): LinkToken {
    return LinkToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkToken>, I>>(object: I): LinkToken {
    const message = createBaseLinkToken();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.apiServer = object.apiServer ?? "";
    message.activeEnvironment = object.activeEnvironment ?? undefined;
    message.validUntil = object.validUntil ?? undefined;
    return message;
  },
};

function createBaseGetLinkSessionRequest(): GetLinkSessionRequest {
  return { linkCode: "", projectName: "" };
}

export const GetLinkSessionRequest: MessageFns<GetLinkSessionRequest> = {
  encode(message: GetLinkSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkCode !== "") {
      writer.uint32(10).string(message.linkCode);
    }
    if (message.projectName !== "") {
      writer.uint32(18).string(message.projectName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLinkSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLinkSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.linkCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLinkSessionRequest {
    return {
      linkCode: isSet(object.linkCode) ? globalThis.String(object.linkCode) : "",
      projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
    };
  },

  toJSON(message: GetLinkSessionRequest): unknown {
    const obj: any = {};
    if (message.linkCode !== "") {
      obj.linkCode = message.linkCode;
    }
    if (message.projectName !== "") {
      obj.projectName = message.projectName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLinkSessionRequest>, I>>(base?: I): GetLinkSessionRequest {
    return GetLinkSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLinkSessionRequest>, I>>(object: I): GetLinkSessionRequest {
    const message = createBaseGetLinkSessionRequest();
    message.linkCode = object.linkCode ?? "";
    message.projectName = object.projectName ?? "";
    return message;
  },
};

function createBaseGetLinkSessionResponse(): GetLinkSessionResponse {
  return { status: 0, message: "", token: undefined, sessionId: "" };
}

export const GetLinkSessionResponse: MessageFns<GetLinkSessionResponse> = {
  encode(message: GetLinkSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.token !== undefined) {
      LinkToken.encode(message.token, writer.uint32(26).fork()).join();
    }
    if (message.sessionId !== "") {
      writer.uint32(34).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLinkSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLinkSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = LinkToken.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLinkSessionResponse {
    return {
      status: isSet(object.status) ? linkSessionStatusFromJSON(object.status) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      token: isSet(object.token) ? LinkToken.fromJSON(object.token) : undefined,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: GetLinkSessionResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = linkSessionStatusToJSON(message.status);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.token !== undefined) {
      obj.token = LinkToken.toJSON(message.token);
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLinkSessionResponse>, I>>(base?: I): GetLinkSessionResponse {
    return GetLinkSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLinkSessionResponse>, I>>(object: I): GetLinkSessionResponse {
    const message = createBaseGetLinkSessionResponse();
    message.status = object.status ?? 0;
    message.message = object.message ?? "";
    message.token = (object.token !== undefined && object.token !== null)
      ? LinkToken.fromPartial(object.token)
      : undefined;
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseCreateLinkSessionRequest(): CreateLinkSessionRequest {
  return {};
}

export const CreateLinkSessionRequest: MessageFns<CreateLinkSessionRequest> = {
  encode(_: CreateLinkSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLinkSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLinkSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateLinkSessionRequest {
    return {};
  },

  toJSON(_: CreateLinkSessionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLinkSessionRequest>, I>>(base?: I): CreateLinkSessionRequest {
    return CreateLinkSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLinkSessionRequest>, I>>(_: I): CreateLinkSessionRequest {
    const message = createBaseCreateLinkSessionRequest();
    return message;
  },
};

function createBaseCreateLinkSessionResponse(): CreateLinkSessionResponse {
  return { linkCode: "", authLink: "", expiresAt: undefined, sessionId: "" };
}

export const CreateLinkSessionResponse: MessageFns<CreateLinkSessionResponse> = {
  encode(message: CreateLinkSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkCode !== "") {
      writer.uint32(10).string(message.linkCode);
    }
    if (message.authLink !== "") {
      writer.uint32(18).string(message.authLink);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(26).fork()).join();
    }
    if (message.sessionId !== "") {
      writer.uint32(34).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLinkSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLinkSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.linkCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authLink = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLinkSessionResponse {
    return {
      linkCode: isSet(object.linkCode) ? globalThis.String(object.linkCode) : "",
      authLink: isSet(object.authLink) ? globalThis.String(object.authLink) : "",
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: CreateLinkSessionResponse): unknown {
    const obj: any = {};
    if (message.linkCode !== "") {
      obj.linkCode = message.linkCode;
    }
    if (message.authLink !== "") {
      obj.authLink = message.authLink;
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLinkSessionResponse>, I>>(base?: I): CreateLinkSessionResponse {
    return CreateLinkSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLinkSessionResponse>, I>>(object: I): CreateLinkSessionResponse {
    const message = createBaseCreateLinkSessionResponse();
    message.linkCode = object.linkCode ?? "";
    message.authLink = object.authLink ?? "";
    message.expiresAt = object.expiresAt ?? undefined;
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
