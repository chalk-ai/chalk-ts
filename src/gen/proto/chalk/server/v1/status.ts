// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Duration } from "../../../google/protobuf/duration";
import { Struct } from "../../../google/protobuf/struct";

export const protobufPackage = "chalk.server.v1";

export enum HealthCheckStatus {
  HEALTH_CHECK_STATUS_UNSPECIFIED = 0,
  HEALTH_CHECK_STATUS_OK = 1,
  HEALTH_CHECK_STATUS_FAILING = 2,
  UNRECOGNIZED = -1,
}

export function healthCheckStatusFromJSON(object: any): HealthCheckStatus {
  switch (object) {
    case 0:
    case "HEALTH_CHECK_STATUS_UNSPECIFIED":
      return HealthCheckStatus.HEALTH_CHECK_STATUS_UNSPECIFIED;
    case 1:
    case "HEALTH_CHECK_STATUS_OK":
      return HealthCheckStatus.HEALTH_CHECK_STATUS_OK;
    case 2:
    case "HEALTH_CHECK_STATUS_FAILING":
      return HealthCheckStatus.HEALTH_CHECK_STATUS_FAILING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HealthCheckStatus.UNRECOGNIZED;
  }
}

export function healthCheckStatusToJSON(object: HealthCheckStatus): string {
  switch (object) {
    case HealthCheckStatus.HEALTH_CHECK_STATUS_UNSPECIFIED:
      return "HEALTH_CHECK_STATUS_UNSPECIFIED";
    case HealthCheckStatus.HEALTH_CHECK_STATUS_OK:
      return "HEALTH_CHECK_STATUS_OK";
    case HealthCheckStatus.HEALTH_CHECK_STATUS_FAILING:
      return "HEALTH_CHECK_STATUS_FAILING";
    case HealthCheckStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HealthCheck {
  name: string;
  status: HealthCheckStatus;
  message?: string | undefined;
  latency?: Duration | undefined;
  kubeData?: { [key: string]: any } | undefined;
  metadata: { [key: string]: string };
}

export interface HealthCheck_MetadataEntry {
  key: string;
  value: string;
}

export interface HealthCheckFilters {
  /**
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   */
  name: string[];
  status: HealthCheckStatus[];
}

export interface CheckHealthRequest {
  filters?: HealthCheckFilters | undefined;
}

export interface CheckHealthResponse {
  checks: HealthCheck[];
}

export interface GetHealthRequest {
  filters?: HealthCheckFilters | undefined;
}

export interface GetHealthResponse {
  checks: HealthCheck[];
}

export interface GetClusterMetricsRequest {
}

export interface GetClusterMetricsResponse {
  metrics: string;
}

function createBaseHealthCheck(): HealthCheck {
  return { name: "", status: 0, message: undefined, latency: undefined, kubeData: undefined, metadata: {} };
}

export const HealthCheck: MessageFns<HealthCheck> = {
  encode(message: HealthCheck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.message !== undefined) {
      writer.uint32(26).string(message.message);
    }
    if (message.latency !== undefined) {
      Duration.encode(message.latency, writer.uint32(34).fork()).join();
    }
    if (message.kubeData !== undefined) {
      Struct.encode(Struct.wrap(message.kubeData), writer.uint32(42).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      HealthCheck_MetadataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.latency = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.kubeData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = HealthCheck_MetadataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.metadata[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheck {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      status: isSet(object.status) ? healthCheckStatusFromJSON(object.status) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      latency: isSet(object.latency) ? Duration.fromJSON(object.latency) : undefined,
      kubeData: isObject(object.kubeData) ? object.kubeData : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: HealthCheck): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = healthCheckStatusToJSON(message.status);
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.latency !== undefined) {
      obj.latency = Duration.toJSON(message.latency);
    }
    if (message.kubeData !== undefined) {
      obj.kubeData = message.kubeData;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheck>, I>>(base?: I): HealthCheck {
    return HealthCheck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheck>, I>>(object: I): HealthCheck {
    const message = createBaseHealthCheck();
    message.name = object.name ?? "";
    message.status = object.status ?? 0;
    message.message = object.message ?? undefined;
    message.latency = (object.latency !== undefined && object.latency !== null)
      ? Duration.fromPartial(object.latency)
      : undefined;
    message.kubeData = object.kubeData ?? undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseHealthCheck_MetadataEntry(): HealthCheck_MetadataEntry {
  return { key: "", value: "" };
}

export const HealthCheck_MetadataEntry: MessageFns<HealthCheck_MetadataEntry> = {
  encode(message: HealthCheck_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheck_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheck_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheck_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HealthCheck_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheck_MetadataEntry>, I>>(base?: I): HealthCheck_MetadataEntry {
    return HealthCheck_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheck_MetadataEntry>, I>>(object: I): HealthCheck_MetadataEntry {
    const message = createBaseHealthCheck_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHealthCheckFilters(): HealthCheckFilters {
  return { name: [], status: [] };
}

export const HealthCheckFilters: MessageFns<HealthCheckFilters> = {
  encode(message: HealthCheckFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.name) {
      writer.uint32(10).string(v!);
    }
    writer.uint32(18).fork();
    for (const v of message.status) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name.push(reader.string());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.status.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.status.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckFilters {
    return {
      name: globalThis.Array.isArray(object?.name) ? object.name.map((e: any) => globalThis.String(e)) : [],
      status: globalThis.Array.isArray(object?.status)
        ? object.status.map((e: any) => healthCheckStatusFromJSON(e))
        : [],
    };
  },

  toJSON(message: HealthCheckFilters): unknown {
    const obj: any = {};
    if (message.name?.length) {
      obj.name = message.name;
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => healthCheckStatusToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckFilters>, I>>(base?: I): HealthCheckFilters {
    return HealthCheckFilters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckFilters>, I>>(object: I): HealthCheckFilters {
    const message = createBaseHealthCheckFilters();
    message.name = object.name?.map((e) => e) || [];
    message.status = object.status?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckHealthRequest(): CheckHealthRequest {
  return { filters: undefined };
}

export const CheckHealthRequest: MessageFns<CheckHealthRequest> = {
  encode(message: CheckHealthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      HealthCheckFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckHealthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckHealthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = HealthCheckFilters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckHealthRequest {
    return { filters: isSet(object.filters) ? HealthCheckFilters.fromJSON(object.filters) : undefined };
  },

  toJSON(message: CheckHealthRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = HealthCheckFilters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckHealthRequest>, I>>(base?: I): CheckHealthRequest {
    return CheckHealthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckHealthRequest>, I>>(object: I): CheckHealthRequest {
    const message = createBaseCheckHealthRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? HealthCheckFilters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseCheckHealthResponse(): CheckHealthResponse {
  return { checks: [] };
}

export const CheckHealthResponse: MessageFns<CheckHealthResponse> = {
  encode(message: CheckHealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.checks) {
      HealthCheck.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckHealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checks.push(HealthCheck.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckHealthResponse {
    return {
      checks: globalThis.Array.isArray(object?.checks) ? object.checks.map((e: any) => HealthCheck.fromJSON(e)) : [],
    };
  },

  toJSON(message: CheckHealthResponse): unknown {
    const obj: any = {};
    if (message.checks?.length) {
      obj.checks = message.checks.map((e) => HealthCheck.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckHealthResponse>, I>>(base?: I): CheckHealthResponse {
    return CheckHealthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckHealthResponse>, I>>(object: I): CheckHealthResponse {
    const message = createBaseCheckHealthResponse();
    message.checks = object.checks?.map((e) => HealthCheck.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetHealthRequest(): GetHealthRequest {
  return { filters: undefined };
}

export const GetHealthRequest: MessageFns<GetHealthRequest> = {
  encode(message: GetHealthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      HealthCheckFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHealthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHealthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = HealthCheckFilters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHealthRequest {
    return { filters: isSet(object.filters) ? HealthCheckFilters.fromJSON(object.filters) : undefined };
  },

  toJSON(message: GetHealthRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = HealthCheckFilters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHealthRequest>, I>>(base?: I): GetHealthRequest {
    return GetHealthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHealthRequest>, I>>(object: I): GetHealthRequest {
    const message = createBaseGetHealthRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? HealthCheckFilters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseGetHealthResponse(): GetHealthResponse {
  return { checks: [] };
}

export const GetHealthResponse: MessageFns<GetHealthResponse> = {
  encode(message: GetHealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.checks) {
      HealthCheck.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checks.push(HealthCheck.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHealthResponse {
    return {
      checks: globalThis.Array.isArray(object?.checks) ? object.checks.map((e: any) => HealthCheck.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetHealthResponse): unknown {
    const obj: any = {};
    if (message.checks?.length) {
      obj.checks = message.checks.map((e) => HealthCheck.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHealthResponse>, I>>(base?: I): GetHealthResponse {
    return GetHealthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHealthResponse>, I>>(object: I): GetHealthResponse {
    const message = createBaseGetHealthResponse();
    message.checks = object.checks?.map((e) => HealthCheck.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetClusterMetricsRequest(): GetClusterMetricsRequest {
  return {};
}

export const GetClusterMetricsRequest: MessageFns<GetClusterMetricsRequest> = {
  encode(_: GetClusterMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetClusterMetricsRequest {
    return {};
  },

  toJSON(_: GetClusterMetricsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterMetricsRequest>, I>>(base?: I): GetClusterMetricsRequest {
    return GetClusterMetricsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterMetricsRequest>, I>>(_: I): GetClusterMetricsRequest {
    const message = createBaseGetClusterMetricsRequest();
    return message;
  },
};

function createBaseGetClusterMetricsResponse(): GetClusterMetricsResponse {
  return { metrics: "" };
}

export const GetClusterMetricsResponse: MessageFns<GetClusterMetricsResponse> = {
  encode(message: GetClusterMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metrics !== "") {
      writer.uint32(10).string(message.metrics);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metrics = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterMetricsResponse {
    return { metrics: isSet(object.metrics) ? globalThis.String(object.metrics) : "" };
  },

  toJSON(message: GetClusterMetricsResponse): unknown {
    const obj: any = {};
    if (message.metrics !== "") {
      obj.metrics = message.metrics;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterMetricsResponse>, I>>(base?: I): GetClusterMetricsResponse {
    return GetClusterMetricsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterMetricsResponse>, I>>(object: I): GetClusterMetricsResponse {
    const message = createBaseGetClusterMetricsResponse();
    message.metrics = object.metrics ?? "";
    return message;
  },
};

export type HealthServiceService = typeof HealthServiceService;
export const HealthServiceService = {
  /** If any checks fail, this request fails. */
  checkHealth: {
    path: "/chalk.server.v1.HealthService/CheckHealth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckHealthRequest) => Buffer.from(CheckHealthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckHealthRequest.decode(value),
    responseSerialize: (value: CheckHealthResponse) => Buffer.from(CheckHealthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckHealthResponse.decode(value),
  },
  /** Return the actual health check values. */
  getHealth: {
    path: "/chalk.server.v1.HealthService/GetHealth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetHealthRequest) => Buffer.from(GetHealthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetHealthRequest.decode(value),
    responseSerialize: (value: GetHealthResponse) => Buffer.from(GetHealthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetHealthResponse.decode(value),
  },
  /** Return collected cluster prometheus metrics */
  getClusterMetrics: {
    path: "/chalk.server.v1.HealthService/GetClusterMetrics",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetClusterMetricsRequest) => Buffer.from(GetClusterMetricsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetClusterMetricsRequest.decode(value),
    responseSerialize: (value: GetClusterMetricsResponse) =>
      Buffer.from(GetClusterMetricsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetClusterMetricsResponse.decode(value),
  },
} as const;

export interface HealthServiceServer extends UntypedServiceImplementation {
  /** If any checks fail, this request fails. */
  checkHealth: handleUnaryCall<CheckHealthRequest, CheckHealthResponse>;
  /** Return the actual health check values. */
  getHealth: handleUnaryCall<GetHealthRequest, GetHealthResponse>;
  /** Return collected cluster prometheus metrics */
  getClusterMetrics: handleUnaryCall<GetClusterMetricsRequest, GetClusterMetricsResponse>;
}

export interface HealthServiceClient extends Client {
  /** If any checks fail, this request fails. */
  checkHealth(
    request: CheckHealthRequest,
    callback: (error: ServiceError | null, response: CheckHealthResponse) => void,
  ): ClientUnaryCall;
  checkHealth(
    request: CheckHealthRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckHealthResponse) => void,
  ): ClientUnaryCall;
  checkHealth(
    request: CheckHealthRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckHealthResponse) => void,
  ): ClientUnaryCall;
  /** Return the actual health check values. */
  getHealth(
    request: GetHealthRequest,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  /** Return collected cluster prometheus metrics */
  getClusterMetrics(
    request: GetClusterMetricsRequest,
    callback: (error: ServiceError | null, response: GetClusterMetricsResponse) => void,
  ): ClientUnaryCall;
  getClusterMetrics(
    request: GetClusterMetricsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetClusterMetricsResponse) => void,
  ): ClientUnaryCall;
  getClusterMetrics(
    request: GetClusterMetricsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetClusterMetricsResponse) => void,
  ): ClientUnaryCall;
}

export const HealthServiceClient = makeGenericClientConstructor(
  HealthServiceService,
  "chalk.server.v1.HealthService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HealthServiceClient;
  service: typeof HealthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
