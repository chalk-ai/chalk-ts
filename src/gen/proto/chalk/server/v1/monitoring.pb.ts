// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/monitoring.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chalk.server.v1";

export enum PagerDutySeverity {
  PAGER_DUTY_SEVERITY_UNSPECIFIED = 0,
  PAGER_DUTY_SEVERITY_INFO = 1,
  PAGER_DUTY_SEVERITY_WARNING = 2,
  PAGER_DUTY_SEVERITY_ERROR = 3,
  PAGER_DUTY_SEVERITY_CRITICAL = 4,
  UNRECOGNIZED = -1,
}

export function pagerDutySeverityFromJSON(object: any): PagerDutySeverity {
  switch (object) {
    case 0:
    case "PAGER_DUTY_SEVERITY_UNSPECIFIED":
      return PagerDutySeverity.PAGER_DUTY_SEVERITY_UNSPECIFIED;
    case 1:
    case "PAGER_DUTY_SEVERITY_INFO":
      return PagerDutySeverity.PAGER_DUTY_SEVERITY_INFO;
    case 2:
    case "PAGER_DUTY_SEVERITY_WARNING":
      return PagerDutySeverity.PAGER_DUTY_SEVERITY_WARNING;
    case 3:
    case "PAGER_DUTY_SEVERITY_ERROR":
      return PagerDutySeverity.PAGER_DUTY_SEVERITY_ERROR;
    case 4:
    case "PAGER_DUTY_SEVERITY_CRITICAL":
      return PagerDutySeverity.PAGER_DUTY_SEVERITY_CRITICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PagerDutySeverity.UNRECOGNIZED;
  }
}

export function pagerDutySeverityToJSON(object: PagerDutySeverity): string {
  switch (object) {
    case PagerDutySeverity.PAGER_DUTY_SEVERITY_UNSPECIFIED:
      return "PAGER_DUTY_SEVERITY_UNSPECIFIED";
    case PagerDutySeverity.PAGER_DUTY_SEVERITY_INFO:
      return "PAGER_DUTY_SEVERITY_INFO";
    case PagerDutySeverity.PAGER_DUTY_SEVERITY_WARNING:
      return "PAGER_DUTY_SEVERITY_WARNING";
    case PagerDutySeverity.PAGER_DUTY_SEVERITY_ERROR:
      return "PAGER_DUTY_SEVERITY_ERROR";
    case PagerDutySeverity.PAGER_DUTY_SEVERITY_CRITICAL:
      return "PAGER_DUTY_SEVERITY_CRITICAL";
    case PagerDutySeverity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PagerDutyEventAction {
  PAGER_DUTY_EVENT_ACTION_UNSPECIFIED = 0,
  PAGER_DUTY_EVENT_ACTION_TRIGGER = 1,
  PAGER_DUTY_EVENT_ACTION_ACKNOWLEDGE = 2,
  PAGER_DUTY_EVENT_ACTION_RESOLVE = 3,
  UNRECOGNIZED = -1,
}

export function pagerDutyEventActionFromJSON(object: any): PagerDutyEventAction {
  switch (object) {
    case 0:
    case "PAGER_DUTY_EVENT_ACTION_UNSPECIFIED":
      return PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_UNSPECIFIED;
    case 1:
    case "PAGER_DUTY_EVENT_ACTION_TRIGGER":
      return PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_TRIGGER;
    case 2:
    case "PAGER_DUTY_EVENT_ACTION_ACKNOWLEDGE":
      return PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_ACKNOWLEDGE;
    case 3:
    case "PAGER_DUTY_EVENT_ACTION_RESOLVE":
      return PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_RESOLVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PagerDutyEventAction.UNRECOGNIZED;
  }
}

export function pagerDutyEventActionToJSON(object: PagerDutyEventAction): string {
  switch (object) {
    case PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_UNSPECIFIED:
      return "PAGER_DUTY_EVENT_ACTION_UNSPECIFIED";
    case PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_TRIGGER:
      return "PAGER_DUTY_EVENT_ACTION_TRIGGER";
    case PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_ACKNOWLEDGE:
      return "PAGER_DUTY_EVENT_ACTION_ACKNOWLEDGE";
    case PagerDutyEventAction.PAGER_DUTY_EVENT_ACTION_RESOLVE:
      return "PAGER_DUTY_EVENT_ACTION_RESOLVE";
    case PagerDutyEventAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PagerDutyEventV2Payload {
  summary: string;
  timestamp?: Date | undefined;
  severity: PagerDutySeverity;
  source: string;
  component?: string | undefined;
  group?: string | undefined;
  class?: string | undefined;
}

export interface PagerDutyEventV2Link {
  href: string;
  text?: string | undefined;
}

export interface PagerDutyEventV2Image {
  src: string;
  href?: string | undefined;
  alt?: string | undefined;
}

export interface PagerDutyEventV2 {
  payload: PagerDutyEventV2Payload | undefined;
  routingKey: string;
  eventAction: PagerDutyEventAction;
  dedupKey?: string | undefined;
  client?: string | undefined;
  clientUrl?: string | undefined;
  links: PagerDutyEventV2Link[];
  images: PagerDutyEventV2Image[];
}

export interface PagerDutyIntegration {
  id: string;
  name?: string | undefined;
  default: boolean;
  token: string;
  environmentId: string;
}

export interface IncidentIoIntegration {
  id: string;
  token: string;
  environmentId: string;
  name?: string | undefined;
  sourceId: string;
  sourceToken: string;
  /** @deprecated */
  severityId: string;
  /** @deprecated */
  severityToken: string;
}

/** @deprecated */
export interface IncidentIoEventV2 {
  routeId: string;
  routeToken: string;
  dedupKey?: string | undefined;
  sourceUrl?: string | undefined;
  description?: string | undefined;
  status: string;
  title: string;
}

export interface TestPagerDutyIntegrationRequest {
  id: string;
}

export interface GetPagerDutyIntegrationRequest {
  id?: string | undefined;
}

export interface GetPagerDutyIntegrationResponse {
  integration: PagerDutyIntegration | undefined;
}

export interface TestPagerDutyIntegrationResponse {
  status: string;
  message: string;
}

export interface AddPagerDutyIntegrationRequest {
  name?: string | undefined;
  token: string;
}

export interface AddPagerDutyIntegrationResponse {
  integration: PagerDutyIntegration | undefined;
}

export interface DeletePagerDutyIntegrationRequest {
  id: string;
}

export interface DeletePagerDutyIntegrationResponse {
}

export interface UpdatePagerDutyIntegrationRequest {
  id: string;
  name?: string | undefined;
  default?: boolean | undefined;
  token?: string | undefined;
}

export interface UpdatePagerDutyIntegrationResponse {
  integration: PagerDutyIntegration | undefined;
}

export interface SetDefaultPagerDutyIntegrationRequest {
  id: string;
}

export interface SetDefaultPagerDutyIntegrationResponse {
  id: string;
}

export interface GetAllPagerDutyIntegrationsRequest {
}

export interface GetAllPagerDutyIntegrationsResponse {
  integrations: PagerDutyIntegration[];
}

export interface TestIncidentIoIntegrationRequest {
  id: string;
}

export interface TestIncidentIoIntegrationResponse {
  status: string;
  message: string;
}

export interface GetIncidentIoIntegrationRequest {
  id: string;
}

export interface GetIncidentIoIntegrationResponse {
  integration: IncidentIoIntegration | undefined;
}

export interface AddIncidentIoIntegrationRequest {
  integrationName?: string | undefined;
  integrationToken: string;
  integrationSourceId: string;
}

export interface AddIncidentIoIntegrationResponse {
  integration: IncidentIoIntegration | undefined;
}

export interface DeleteIncidentIoIntegrationRequest {
  id: string;
}

export interface DeleteIncidentIoIntegrationResponse {
}

export interface UpdateIncidentIoIntegrationRequest {
  id: string;
  name?: string | undefined;
  token?: string | undefined;
  sourceId?: string | undefined;
}

export interface UpdateIncidentIoIntegrationResponse {
  integration: IncidentIoIntegration | undefined;
}

export interface GetAllIncidentIoIntegrationsRequest {
}

export interface GetAllIncidentIoIntegrationsResponse {
  integrations: IncidentIoIntegration[];
}

function createBasePagerDutyEventV2Payload(): PagerDutyEventV2Payload {
  return {
    summary: "",
    timestamp: undefined,
    severity: 0,
    source: "",
    component: undefined,
    group: undefined,
    class: undefined,
  };
}

export const PagerDutyEventV2Payload: MessageFns<PagerDutyEventV2Payload> = {
  encode(message: PagerDutyEventV2Payload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summary !== "") {
      writer.uint32(10).string(message.summary);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(24).int32(message.severity);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.component !== undefined) {
      writer.uint32(42).string(message.component);
    }
    if (message.group !== undefined) {
      writer.uint32(50).string(message.group);
    }
    if (message.class !== undefined) {
      writer.uint32(58).string(message.class);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PagerDutyEventV2Payload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagerDutyEventV2Payload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.component = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.class = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PagerDutyEventV2Payload {
    return {
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      severity: isSet(object.severity) ? pagerDutySeverityFromJSON(object.severity) : 0,
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      component: isSet(object.component) ? globalThis.String(object.component) : undefined,
      group: isSet(object.group) ? globalThis.String(object.group) : undefined,
      class: isSet(object.class) ? globalThis.String(object.class) : undefined,
    };
  },

  toJSON(message: PagerDutyEventV2Payload): unknown {
    const obj: any = {};
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.severity !== 0) {
      obj.severity = pagerDutySeverityToJSON(message.severity);
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.component !== undefined) {
      obj.component = message.component;
    }
    if (message.group !== undefined) {
      obj.group = message.group;
    }
    if (message.class !== undefined) {
      obj.class = message.class;
    }
    return obj;
  },
};

function createBasePagerDutyEventV2Link(): PagerDutyEventV2Link {
  return { href: "", text: undefined };
}

export const PagerDutyEventV2Link: MessageFns<PagerDutyEventV2Link> = {
  encode(message: PagerDutyEventV2Link, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.href !== "") {
      writer.uint32(10).string(message.href);
    }
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PagerDutyEventV2Link {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagerDutyEventV2Link();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.href = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PagerDutyEventV2Link {
    return {
      href: isSet(object.href) ? globalThis.String(object.href) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
    };
  },

  toJSON(message: PagerDutyEventV2Link): unknown {
    const obj: any = {};
    if (message.href !== "") {
      obj.href = message.href;
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    return obj;
  },
};

function createBasePagerDutyEventV2Image(): PagerDutyEventV2Image {
  return { src: "", href: undefined, alt: undefined };
}

export const PagerDutyEventV2Image: MessageFns<PagerDutyEventV2Image> = {
  encode(message: PagerDutyEventV2Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.href !== undefined) {
      writer.uint32(18).string(message.href);
    }
    if (message.alt !== undefined) {
      writer.uint32(26).string(message.alt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PagerDutyEventV2Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagerDutyEventV2Image();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.href = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.alt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PagerDutyEventV2Image {
    return {
      src: isSet(object.src) ? globalThis.String(object.src) : "",
      href: isSet(object.href) ? globalThis.String(object.href) : undefined,
      alt: isSet(object.alt) ? globalThis.String(object.alt) : undefined,
    };
  },

  toJSON(message: PagerDutyEventV2Image): unknown {
    const obj: any = {};
    if (message.src !== "") {
      obj.src = message.src;
    }
    if (message.href !== undefined) {
      obj.href = message.href;
    }
    if (message.alt !== undefined) {
      obj.alt = message.alt;
    }
    return obj;
  },
};

function createBasePagerDutyEventV2(): PagerDutyEventV2 {
  return {
    payload: undefined,
    routingKey: "",
    eventAction: 0,
    dedupKey: undefined,
    client: undefined,
    clientUrl: undefined,
    links: [],
    images: [],
  };
}

export const PagerDutyEventV2: MessageFns<PagerDutyEventV2> = {
  encode(message: PagerDutyEventV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      PagerDutyEventV2Payload.encode(message.payload, writer.uint32(10).fork()).join();
    }
    if (message.routingKey !== "") {
      writer.uint32(18).string(message.routingKey);
    }
    if (message.eventAction !== 0) {
      writer.uint32(24).int32(message.eventAction);
    }
    if (message.dedupKey !== undefined) {
      writer.uint32(34).string(message.dedupKey);
    }
    if (message.client !== undefined) {
      writer.uint32(42).string(message.client);
    }
    if (message.clientUrl !== undefined) {
      writer.uint32(50).string(message.clientUrl);
    }
    for (const v of message.links) {
      PagerDutyEventV2Link.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.images) {
      PagerDutyEventV2Image.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PagerDutyEventV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagerDutyEventV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = PagerDutyEventV2Payload.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.routingKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.eventAction = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dedupKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.client = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.links.push(PagerDutyEventV2Link.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.images.push(PagerDutyEventV2Image.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PagerDutyEventV2 {
    return {
      payload: isSet(object.payload) ? PagerDutyEventV2Payload.fromJSON(object.payload) : undefined,
      routingKey: isSet(object.routingKey) ? globalThis.String(object.routingKey) : "",
      eventAction: isSet(object.eventAction) ? pagerDutyEventActionFromJSON(object.eventAction) : 0,
      dedupKey: isSet(object.dedupKey) ? globalThis.String(object.dedupKey) : undefined,
      client: isSet(object.client) ? globalThis.String(object.client) : undefined,
      clientUrl: isSet(object.clientUrl) ? globalThis.String(object.clientUrl) : undefined,
      links: globalThis.Array.isArray(object?.links)
        ? object.links.map((e: any) => PagerDutyEventV2Link.fromJSON(e))
        : [],
      images: globalThis.Array.isArray(object?.images)
        ? object.images.map((e: any) => PagerDutyEventV2Image.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PagerDutyEventV2): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = PagerDutyEventV2Payload.toJSON(message.payload);
    }
    if (message.routingKey !== "") {
      obj.routingKey = message.routingKey;
    }
    if (message.eventAction !== 0) {
      obj.eventAction = pagerDutyEventActionToJSON(message.eventAction);
    }
    if (message.dedupKey !== undefined) {
      obj.dedupKey = message.dedupKey;
    }
    if (message.client !== undefined) {
      obj.client = message.client;
    }
    if (message.clientUrl !== undefined) {
      obj.clientUrl = message.clientUrl;
    }
    if (message.links?.length) {
      obj.links = message.links.map((e) => PagerDutyEventV2Link.toJSON(e));
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => PagerDutyEventV2Image.toJSON(e));
    }
    return obj;
  },
};

function createBasePagerDutyIntegration(): PagerDutyIntegration {
  return { id: "", name: undefined, default: false, token: "", environmentId: "" };
}

export const PagerDutyIntegration: MessageFns<PagerDutyIntegration> = {
  encode(message: PagerDutyIntegration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.default !== false) {
      writer.uint32(24).bool(message.default);
    }
    if (message.token !== "") {
      writer.uint32(34).string(message.token);
    }
    if (message.environmentId !== "") {
      writer.uint32(42).string(message.environmentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PagerDutyIntegration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagerDutyIntegration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.default = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PagerDutyIntegration {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      default: isSet(object.default) ? globalThis.Boolean(object.default) : false,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
    };
  },

  toJSON(message: PagerDutyIntegration): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.default !== false) {
      obj.default = message.default;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    return obj;
  },
};

function createBaseIncidentIoIntegration(): IncidentIoIntegration {
  return {
    id: "",
    token: "",
    environmentId: "",
    name: undefined,
    sourceId: "",
    sourceToken: "",
    severityId: "",
    severityToken: "",
  };
}

export const IncidentIoIntegration: MessageFns<IncidentIoIntegration> = {
  encode(message: IncidentIoIntegration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.environmentId !== "") {
      writer.uint32(26).string(message.environmentId);
    }
    if (message.name !== undefined) {
      writer.uint32(34).string(message.name);
    }
    if (message.sourceId !== "") {
      writer.uint32(42).string(message.sourceId);
    }
    if (message.sourceToken !== "") {
      writer.uint32(50).string(message.sourceToken);
    }
    if (message.severityId !== "") {
      writer.uint32(58).string(message.severityId);
    }
    if (message.severityToken !== "") {
      writer.uint32(66).string(message.severityToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncidentIoIntegration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncidentIoIntegration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sourceId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sourceToken = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.severityId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.severityToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncidentIoIntegration {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      sourceId: isSet(object.sourceId) ? globalThis.String(object.sourceId) : "",
      sourceToken: isSet(object.sourceToken) ? globalThis.String(object.sourceToken) : "",
      severityId: isSet(object.severityId) ? globalThis.String(object.severityId) : "",
      severityToken: isSet(object.severityToken) ? globalThis.String(object.severityToken) : "",
    };
  },

  toJSON(message: IncidentIoIntegration): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.sourceId !== "") {
      obj.sourceId = message.sourceId;
    }
    if (message.sourceToken !== "") {
      obj.sourceToken = message.sourceToken;
    }
    if (message.severityId !== "") {
      obj.severityId = message.severityId;
    }
    if (message.severityToken !== "") {
      obj.severityToken = message.severityToken;
    }
    return obj;
  },
};

function createBaseIncidentIoEventV2(): IncidentIoEventV2 {
  return {
    routeId: "",
    routeToken: "",
    dedupKey: undefined,
    sourceUrl: undefined,
    description: undefined,
    status: "",
    title: "",
  };
}

export const IncidentIoEventV2: MessageFns<IncidentIoEventV2> = {
  encode(message: IncidentIoEventV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routeId !== "") {
      writer.uint32(10).string(message.routeId);
    }
    if (message.routeToken !== "") {
      writer.uint32(18).string(message.routeToken);
    }
    if (message.dedupKey !== undefined) {
      writer.uint32(26).string(message.dedupKey);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(34).string(message.sourceUrl);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.title !== "") {
      writer.uint32(58).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncidentIoEventV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncidentIoEventV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.routeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.routeToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dedupKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncidentIoEventV2 {
    return {
      routeId: isSet(object.routeId) ? globalThis.String(object.routeId) : "",
      routeToken: isSet(object.routeToken) ? globalThis.String(object.routeToken) : "",
      dedupKey: isSet(object.dedupKey) ? globalThis.String(object.dedupKey) : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
    };
  },

  toJSON(message: IncidentIoEventV2): unknown {
    const obj: any = {};
    if (message.routeId !== "") {
      obj.routeId = message.routeId;
    }
    if (message.routeToken !== "") {
      obj.routeToken = message.routeToken;
    }
    if (message.dedupKey !== undefined) {
      obj.dedupKey = message.dedupKey;
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },
};

function createBaseTestPagerDutyIntegrationRequest(): TestPagerDutyIntegrationRequest {
  return { id: "" };
}

export const TestPagerDutyIntegrationRequest: MessageFns<TestPagerDutyIntegrationRequest> = {
  encode(message: TestPagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestPagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestPagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestPagerDutyIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: TestPagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseGetPagerDutyIntegrationRequest(): GetPagerDutyIntegrationRequest {
  return { id: undefined };
}

export const GetPagerDutyIntegrationRequest: MessageFns<GetPagerDutyIntegrationRequest> = {
  encode(message: GetPagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPagerDutyIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : undefined };
  },

  toJSON(message: GetPagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseGetPagerDutyIntegrationResponse(): GetPagerDutyIntegrationResponse {
  return { integration: undefined };
}

export const GetPagerDutyIntegrationResponse: MessageFns<GetPagerDutyIntegrationResponse> = {
  encode(message: GetPagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      PagerDutyIntegration.encode(message.integration, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integration = PagerDutyIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPagerDutyIntegrationResponse {
    return { integration: isSet(object.integration) ? PagerDutyIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: GetPagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = PagerDutyIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseTestPagerDutyIntegrationResponse(): TestPagerDutyIntegrationResponse {
  return { status: "", message: "" };
}

export const TestPagerDutyIntegrationResponse: MessageFns<TestPagerDutyIntegrationResponse> = {
  encode(message: TestPagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestPagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestPagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestPagerDutyIntegrationResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: TestPagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseAddPagerDutyIntegrationRequest(): AddPagerDutyIntegrationRequest {
  return { name: undefined, token: "" };
}

export const AddPagerDutyIntegrationRequest: MessageFns<AddPagerDutyIntegrationRequest> = {
  encode(message: AddPagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPagerDutyIntegrationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: AddPagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },
};

function createBaseAddPagerDutyIntegrationResponse(): AddPagerDutyIntegrationResponse {
  return { integration: undefined };
}

export const AddPagerDutyIntegrationResponse: MessageFns<AddPagerDutyIntegrationResponse> = {
  encode(message: AddPagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      PagerDutyIntegration.encode(message.integration, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integration = PagerDutyIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPagerDutyIntegrationResponse {
    return { integration: isSet(object.integration) ? PagerDutyIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: AddPagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = PagerDutyIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseDeletePagerDutyIntegrationRequest(): DeletePagerDutyIntegrationRequest {
  return { id: "" };
}

export const DeletePagerDutyIntegrationRequest: MessageFns<DeletePagerDutyIntegrationRequest> = {
  encode(message: DeletePagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePagerDutyIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeletePagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseDeletePagerDutyIntegrationResponse(): DeletePagerDutyIntegrationResponse {
  return {};
}

export const DeletePagerDutyIntegrationResponse: MessageFns<DeletePagerDutyIntegrationResponse> = {
  encode(_: DeletePagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeletePagerDutyIntegrationResponse {
    return {};
  },

  toJSON(_: DeletePagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseUpdatePagerDutyIntegrationRequest(): UpdatePagerDutyIntegrationRequest {
  return { id: "", name: undefined, default: undefined, token: undefined };
}

export const UpdatePagerDutyIntegrationRequest: MessageFns<UpdatePagerDutyIntegrationRequest> = {
  encode(message: UpdatePagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.default !== undefined) {
      writer.uint32(24).bool(message.default);
    }
    if (message.token !== undefined) {
      writer.uint32(34).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.default = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePagerDutyIntegrationRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      default: isSet(object.default) ? globalThis.Boolean(object.default) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
    };
  },

  toJSON(message: UpdatePagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.default !== undefined) {
      obj.default = message.default;
    }
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    return obj;
  },
};

function createBaseUpdatePagerDutyIntegrationResponse(): UpdatePagerDutyIntegrationResponse {
  return { integration: undefined };
}

export const UpdatePagerDutyIntegrationResponse: MessageFns<UpdatePagerDutyIntegrationResponse> = {
  encode(message: UpdatePagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      PagerDutyIntegration.encode(message.integration, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.integration = PagerDutyIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePagerDutyIntegrationResponse {
    return { integration: isSet(object.integration) ? PagerDutyIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: UpdatePagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = PagerDutyIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseSetDefaultPagerDutyIntegrationRequest(): SetDefaultPagerDutyIntegrationRequest {
  return { id: "" };
}

export const SetDefaultPagerDutyIntegrationRequest: MessageFns<SetDefaultPagerDutyIntegrationRequest> = {
  encode(message: SetDefaultPagerDutyIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPagerDutyIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPagerDutyIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPagerDutyIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SetDefaultPagerDutyIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseSetDefaultPagerDutyIntegrationResponse(): SetDefaultPagerDutyIntegrationResponse {
  return { id: "" };
}

export const SetDefaultPagerDutyIntegrationResponse: MessageFns<SetDefaultPagerDutyIntegrationResponse> = {
  encode(message: SetDefaultPagerDutyIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPagerDutyIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPagerDutyIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPagerDutyIntegrationResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SetDefaultPagerDutyIntegrationResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseGetAllPagerDutyIntegrationsRequest(): GetAllPagerDutyIntegrationsRequest {
  return {};
}

export const GetAllPagerDutyIntegrationsRequest: MessageFns<GetAllPagerDutyIntegrationsRequest> = {
  encode(_: GetAllPagerDutyIntegrationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPagerDutyIntegrationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPagerDutyIntegrationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllPagerDutyIntegrationsRequest {
    return {};
  },

  toJSON(_: GetAllPagerDutyIntegrationsRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseGetAllPagerDutyIntegrationsResponse(): GetAllPagerDutyIntegrationsResponse {
  return { integrations: [] };
}

export const GetAllPagerDutyIntegrationsResponse: MessageFns<GetAllPagerDutyIntegrationsResponse> = {
  encode(message: GetAllPagerDutyIntegrationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.integrations) {
      PagerDutyIntegration.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPagerDutyIntegrationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPagerDutyIntegrationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integrations.push(PagerDutyIntegration.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPagerDutyIntegrationsResponse {
    return {
      integrations: globalThis.Array.isArray(object?.integrations)
        ? object.integrations.map((e: any) => PagerDutyIntegration.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllPagerDutyIntegrationsResponse): unknown {
    const obj: any = {};
    if (message.integrations?.length) {
      obj.integrations = message.integrations.map((e) => PagerDutyIntegration.toJSON(e));
    }
    return obj;
  },
};

function createBaseTestIncidentIoIntegrationRequest(): TestIncidentIoIntegrationRequest {
  return { id: "" };
}

export const TestIncidentIoIntegrationRequest: MessageFns<TestIncidentIoIntegrationRequest> = {
  encode(message: TestIncidentIoIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestIncidentIoIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestIncidentIoIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestIncidentIoIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: TestIncidentIoIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseTestIncidentIoIntegrationResponse(): TestIncidentIoIntegrationResponse {
  return { status: "", message: "" };
}

export const TestIncidentIoIntegrationResponse: MessageFns<TestIncidentIoIntegrationResponse> = {
  encode(message: TestIncidentIoIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestIncidentIoIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestIncidentIoIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestIncidentIoIntegrationResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: TestIncidentIoIntegrationResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseGetIncidentIoIntegrationRequest(): GetIncidentIoIntegrationRequest {
  return { id: "" };
}

export const GetIncidentIoIntegrationRequest: MessageFns<GetIncidentIoIntegrationRequest> = {
  encode(message: GetIncidentIoIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIncidentIoIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIncidentIoIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIncidentIoIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetIncidentIoIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseGetIncidentIoIntegrationResponse(): GetIncidentIoIntegrationResponse {
  return { integration: undefined };
}

export const GetIncidentIoIntegrationResponse: MessageFns<GetIncidentIoIntegrationResponse> = {
  encode(message: GetIncidentIoIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      IncidentIoIntegration.encode(message.integration, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIncidentIoIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIncidentIoIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integration = IncidentIoIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIncidentIoIntegrationResponse {
    return { integration: isSet(object.integration) ? IncidentIoIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: GetIncidentIoIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = IncidentIoIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseAddIncidentIoIntegrationRequest(): AddIncidentIoIntegrationRequest {
  return { integrationName: undefined, integrationToken: "", integrationSourceId: "" };
}

export const AddIncidentIoIntegrationRequest: MessageFns<AddIncidentIoIntegrationRequest> = {
  encode(message: AddIncidentIoIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integrationName !== undefined) {
      writer.uint32(10).string(message.integrationName);
    }
    if (message.integrationToken !== "") {
      writer.uint32(26).string(message.integrationToken);
    }
    if (message.integrationSourceId !== "") {
      writer.uint32(34).string(message.integrationSourceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIncidentIoIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIncidentIoIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integrationName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.integrationToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.integrationSourceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIncidentIoIntegrationRequest {
    return {
      integrationName: isSet(object.integrationName) ? globalThis.String(object.integrationName) : undefined,
      integrationToken: isSet(object.integrationToken) ? globalThis.String(object.integrationToken) : "",
      integrationSourceId: isSet(object.integrationSourceId) ? globalThis.String(object.integrationSourceId) : "",
    };
  },

  toJSON(message: AddIncidentIoIntegrationRequest): unknown {
    const obj: any = {};
    if (message.integrationName !== undefined) {
      obj.integrationName = message.integrationName;
    }
    if (message.integrationToken !== "") {
      obj.integrationToken = message.integrationToken;
    }
    if (message.integrationSourceId !== "") {
      obj.integrationSourceId = message.integrationSourceId;
    }
    return obj;
  },
};

function createBaseAddIncidentIoIntegrationResponse(): AddIncidentIoIntegrationResponse {
  return { integration: undefined };
}

export const AddIncidentIoIntegrationResponse: MessageFns<AddIncidentIoIntegrationResponse> = {
  encode(message: AddIncidentIoIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      IncidentIoIntegration.encode(message.integration, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIncidentIoIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIncidentIoIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integration = IncidentIoIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIncidentIoIntegrationResponse {
    return { integration: isSet(object.integration) ? IncidentIoIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: AddIncidentIoIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = IncidentIoIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseDeleteIncidentIoIntegrationRequest(): DeleteIncidentIoIntegrationRequest {
  return { id: "" };
}

export const DeleteIncidentIoIntegrationRequest: MessageFns<DeleteIncidentIoIntegrationRequest> = {
  encode(message: DeleteIncidentIoIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIncidentIoIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIncidentIoIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIncidentIoIntegrationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteIncidentIoIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseDeleteIncidentIoIntegrationResponse(): DeleteIncidentIoIntegrationResponse {
  return {};
}

export const DeleteIncidentIoIntegrationResponse: MessageFns<DeleteIncidentIoIntegrationResponse> = {
  encode(_: DeleteIncidentIoIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIncidentIoIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIncidentIoIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteIncidentIoIntegrationResponse {
    return {};
  },

  toJSON(_: DeleteIncidentIoIntegrationResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseUpdateIncidentIoIntegrationRequest(): UpdateIncidentIoIntegrationRequest {
  return { id: "", name: undefined, token: undefined, sourceId: undefined };
}

export const UpdateIncidentIoIntegrationRequest: MessageFns<UpdateIncidentIoIntegrationRequest> = {
  encode(message: UpdateIncidentIoIntegrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.token !== undefined) {
      writer.uint32(26).string(message.token);
    }
    if (message.sourceId !== undefined) {
      writer.uint32(34).string(message.sourceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIncidentIoIntegrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIncidentIoIntegrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIncidentIoIntegrationRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
      sourceId: isSet(object.sourceId) ? globalThis.String(object.sourceId) : undefined,
    };
  },

  toJSON(message: UpdateIncidentIoIntegrationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    if (message.sourceId !== undefined) {
      obj.sourceId = message.sourceId;
    }
    return obj;
  },
};

function createBaseUpdateIncidentIoIntegrationResponse(): UpdateIncidentIoIntegrationResponse {
  return { integration: undefined };
}

export const UpdateIncidentIoIntegrationResponse: MessageFns<UpdateIncidentIoIntegrationResponse> = {
  encode(message: UpdateIncidentIoIntegrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integration !== undefined) {
      IncidentIoIntegration.encode(message.integration, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIncidentIoIntegrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIncidentIoIntegrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integration = IncidentIoIntegration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIncidentIoIntegrationResponse {
    return { integration: isSet(object.integration) ? IncidentIoIntegration.fromJSON(object.integration) : undefined };
  },

  toJSON(message: UpdateIncidentIoIntegrationResponse): unknown {
    const obj: any = {};
    if (message.integration !== undefined) {
      obj.integration = IncidentIoIntegration.toJSON(message.integration);
    }
    return obj;
  },
};

function createBaseGetAllIncidentIoIntegrationsRequest(): GetAllIncidentIoIntegrationsRequest {
  return {};
}

export const GetAllIncidentIoIntegrationsRequest: MessageFns<GetAllIncidentIoIntegrationsRequest> = {
  encode(_: GetAllIncidentIoIntegrationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllIncidentIoIntegrationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllIncidentIoIntegrationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllIncidentIoIntegrationsRequest {
    return {};
  },

  toJSON(_: GetAllIncidentIoIntegrationsRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseGetAllIncidentIoIntegrationsResponse(): GetAllIncidentIoIntegrationsResponse {
  return { integrations: [] };
}

export const GetAllIncidentIoIntegrationsResponse: MessageFns<GetAllIncidentIoIntegrationsResponse> = {
  encode(message: GetAllIncidentIoIntegrationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.integrations) {
      IncidentIoIntegration.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllIncidentIoIntegrationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllIncidentIoIntegrationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integrations.push(IncidentIoIntegration.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllIncidentIoIntegrationsResponse {
    return {
      integrations: globalThis.Array.isArray(object?.integrations)
        ? object.integrations.map((e: any) => IncidentIoIntegration.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllIncidentIoIntegrationsResponse): unknown {
    const obj: any = {};
    if (message.integrations?.length) {
      obj.integrations = message.integrations.map((e) => IncidentIoIntegration.toJSON(e));
    }
    return obj;
  },
};

export type MonitoringServiceService = typeof MonitoringServiceService;
export const MonitoringServiceService = {
  testPagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/TestPagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestPagerDutyIntegrationRequest) =>
      Buffer.from(TestPagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestPagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: TestPagerDutyIntegrationResponse) =>
      Buffer.from(TestPagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestPagerDutyIntegrationResponse.decode(value),
  },
  addPagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/AddPagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddPagerDutyIntegrationRequest) =>
      Buffer.from(AddPagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddPagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: AddPagerDutyIntegrationResponse) =>
      Buffer.from(AddPagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddPagerDutyIntegrationResponse.decode(value),
  },
  deletePagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/DeletePagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeletePagerDutyIntegrationRequest) =>
      Buffer.from(DeletePagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeletePagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: DeletePagerDutyIntegrationResponse) =>
      Buffer.from(DeletePagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeletePagerDutyIntegrationResponse.decode(value),
  },
  setDefaultPagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/SetDefaultPagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetDefaultPagerDutyIntegrationRequest) =>
      Buffer.from(SetDefaultPagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetDefaultPagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: SetDefaultPagerDutyIntegrationResponse) =>
      Buffer.from(SetDefaultPagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SetDefaultPagerDutyIntegrationResponse.decode(value),
  },
  updatePagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/UpdatePagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePagerDutyIntegrationRequest) =>
      Buffer.from(UpdatePagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdatePagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: UpdatePagerDutyIntegrationResponse) =>
      Buffer.from(UpdatePagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdatePagerDutyIntegrationResponse.decode(value),
  },
  getAllPagerDutyIntegrations: {
    path: "/chalk.server.v1.MonitoringService/GetAllPagerDutyIntegrations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllPagerDutyIntegrationsRequest) =>
      Buffer.from(GetAllPagerDutyIntegrationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllPagerDutyIntegrationsRequest.decode(value),
    responseSerialize: (value: GetAllPagerDutyIntegrationsResponse) =>
      Buffer.from(GetAllPagerDutyIntegrationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllPagerDutyIntegrationsResponse.decode(value),
  },
  getPagerDutyIntegration: {
    path: "/chalk.server.v1.MonitoringService/GetPagerDutyIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPagerDutyIntegrationRequest) =>
      Buffer.from(GetPagerDutyIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPagerDutyIntegrationRequest.decode(value),
    responseSerialize: (value: GetPagerDutyIntegrationResponse) =>
      Buffer.from(GetPagerDutyIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPagerDutyIntegrationResponse.decode(value),
  },
  testIncidentIoIntegration: {
    path: "/chalk.server.v1.MonitoringService/TestIncidentIoIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestIncidentIoIntegrationRequest) =>
      Buffer.from(TestIncidentIoIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestIncidentIoIntegrationRequest.decode(value),
    responseSerialize: (value: TestIncidentIoIntegrationResponse) =>
      Buffer.from(TestIncidentIoIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestIncidentIoIntegrationResponse.decode(value),
  },
  addIncidentIoIntegration: {
    path: "/chalk.server.v1.MonitoringService/AddIncidentIoIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddIncidentIoIntegrationRequest) =>
      Buffer.from(AddIncidentIoIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddIncidentIoIntegrationRequest.decode(value),
    responseSerialize: (value: AddIncidentIoIntegrationResponse) =>
      Buffer.from(AddIncidentIoIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddIncidentIoIntegrationResponse.decode(value),
  },
  deleteIncidentIoIntegration: {
    path: "/chalk.server.v1.MonitoringService/DeleteIncidentIoIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteIncidentIoIntegrationRequest) =>
      Buffer.from(DeleteIncidentIoIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteIncidentIoIntegrationRequest.decode(value),
    responseSerialize: (value: DeleteIncidentIoIntegrationResponse) =>
      Buffer.from(DeleteIncidentIoIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteIncidentIoIntegrationResponse.decode(value),
  },
  updateIncidentIoIntegration: {
    path: "/chalk.server.v1.MonitoringService/UpdateIncidentIoIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateIncidentIoIntegrationRequest) =>
      Buffer.from(UpdateIncidentIoIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateIncidentIoIntegrationRequest.decode(value),
    responseSerialize: (value: UpdateIncidentIoIntegrationResponse) =>
      Buffer.from(UpdateIncidentIoIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateIncidentIoIntegrationResponse.decode(value),
  },
  getAllIncidentIoIntegrations: {
    path: "/chalk.server.v1.MonitoringService/GetAllIncidentIoIntegrations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllIncidentIoIntegrationsRequest) =>
      Buffer.from(GetAllIncidentIoIntegrationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllIncidentIoIntegrationsRequest.decode(value),
    responseSerialize: (value: GetAllIncidentIoIntegrationsResponse) =>
      Buffer.from(GetAllIncidentIoIntegrationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllIncidentIoIntegrationsResponse.decode(value),
  },
  getIncidentIoIntegration: {
    path: "/chalk.server.v1.MonitoringService/GetIncidentIoIntegration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetIncidentIoIntegrationRequest) =>
      Buffer.from(GetIncidentIoIntegrationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetIncidentIoIntegrationRequest.decode(value),
    responseSerialize: (value: GetIncidentIoIntegrationResponse) =>
      Buffer.from(GetIncidentIoIntegrationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetIncidentIoIntegrationResponse.decode(value),
  },
} as const;

export interface MonitoringServiceServer extends UntypedServiceImplementation {
  testPagerDutyIntegration: handleUnaryCall<TestPagerDutyIntegrationRequest, TestPagerDutyIntegrationResponse>;
  addPagerDutyIntegration: handleUnaryCall<AddPagerDutyIntegrationRequest, AddPagerDutyIntegrationResponse>;
  deletePagerDutyIntegration: handleUnaryCall<DeletePagerDutyIntegrationRequest, DeletePagerDutyIntegrationResponse>;
  setDefaultPagerDutyIntegration: handleUnaryCall<
    SetDefaultPagerDutyIntegrationRequest,
    SetDefaultPagerDutyIntegrationResponse
  >;
  updatePagerDutyIntegration: handleUnaryCall<UpdatePagerDutyIntegrationRequest, UpdatePagerDutyIntegrationResponse>;
  getAllPagerDutyIntegrations: handleUnaryCall<GetAllPagerDutyIntegrationsRequest, GetAllPagerDutyIntegrationsResponse>;
  getPagerDutyIntegration: handleUnaryCall<GetPagerDutyIntegrationRequest, GetPagerDutyIntegrationResponse>;
  testIncidentIoIntegration: handleUnaryCall<TestIncidentIoIntegrationRequest, TestIncidentIoIntegrationResponse>;
  addIncidentIoIntegration: handleUnaryCall<AddIncidentIoIntegrationRequest, AddIncidentIoIntegrationResponse>;
  deleteIncidentIoIntegration: handleUnaryCall<DeleteIncidentIoIntegrationRequest, DeleteIncidentIoIntegrationResponse>;
  updateIncidentIoIntegration: handleUnaryCall<UpdateIncidentIoIntegrationRequest, UpdateIncidentIoIntegrationResponse>;
  getAllIncidentIoIntegrations: handleUnaryCall<
    GetAllIncidentIoIntegrationsRequest,
    GetAllIncidentIoIntegrationsResponse
  >;
  getIncidentIoIntegration: handleUnaryCall<GetIncidentIoIntegrationRequest, GetIncidentIoIntegrationResponse>;
}

export interface MonitoringServiceClient extends Client {
  testPagerDutyIntegration(
    request: TestPagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: TestPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  testPagerDutyIntegration(
    request: TestPagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  testPagerDutyIntegration(
    request: TestPagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  addPagerDutyIntegration(
    request: AddPagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: AddPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  addPagerDutyIntegration(
    request: AddPagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  addPagerDutyIntegration(
    request: AddPagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  deletePagerDutyIntegration(
    request: DeletePagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: DeletePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  deletePagerDutyIntegration(
    request: DeletePagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeletePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  deletePagerDutyIntegration(
    request: DeletePagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeletePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  setDefaultPagerDutyIntegration(
    request: SetDefaultPagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: SetDefaultPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  setDefaultPagerDutyIntegration(
    request: SetDefaultPagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetDefaultPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  setDefaultPagerDutyIntegration(
    request: SetDefaultPagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetDefaultPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  updatePagerDutyIntegration(
    request: UpdatePagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: UpdatePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  updatePagerDutyIntegration(
    request: UpdatePagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdatePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  updatePagerDutyIntegration(
    request: UpdatePagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdatePagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  getAllPagerDutyIntegrations(
    request: GetAllPagerDutyIntegrationsRequest,
    callback: (error: ServiceError | null, response: GetAllPagerDutyIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getAllPagerDutyIntegrations(
    request: GetAllPagerDutyIntegrationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllPagerDutyIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getAllPagerDutyIntegrations(
    request: GetAllPagerDutyIntegrationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllPagerDutyIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getPagerDutyIntegration(
    request: GetPagerDutyIntegrationRequest,
    callback: (error: ServiceError | null, response: GetPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  getPagerDutyIntegration(
    request: GetPagerDutyIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  getPagerDutyIntegration(
    request: GetPagerDutyIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPagerDutyIntegrationResponse) => void,
  ): ClientUnaryCall;
  testIncidentIoIntegration(
    request: TestIncidentIoIntegrationRequest,
    callback: (error: ServiceError | null, response: TestIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  testIncidentIoIntegration(
    request: TestIncidentIoIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  testIncidentIoIntegration(
    request: TestIncidentIoIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  addIncidentIoIntegration(
    request: AddIncidentIoIntegrationRequest,
    callback: (error: ServiceError | null, response: AddIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  addIncidentIoIntegration(
    request: AddIncidentIoIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  addIncidentIoIntegration(
    request: AddIncidentIoIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  deleteIncidentIoIntegration(
    request: DeleteIncidentIoIntegrationRequest,
    callback: (error: ServiceError | null, response: DeleteIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  deleteIncidentIoIntegration(
    request: DeleteIncidentIoIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  deleteIncidentIoIntegration(
    request: DeleteIncidentIoIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  updateIncidentIoIntegration(
    request: UpdateIncidentIoIntegrationRequest,
    callback: (error: ServiceError | null, response: UpdateIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  updateIncidentIoIntegration(
    request: UpdateIncidentIoIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  updateIncidentIoIntegration(
    request: UpdateIncidentIoIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  getAllIncidentIoIntegrations(
    request: GetAllIncidentIoIntegrationsRequest,
    callback: (error: ServiceError | null, response: GetAllIncidentIoIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getAllIncidentIoIntegrations(
    request: GetAllIncidentIoIntegrationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllIncidentIoIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getAllIncidentIoIntegrations(
    request: GetAllIncidentIoIntegrationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllIncidentIoIntegrationsResponse) => void,
  ): ClientUnaryCall;
  getIncidentIoIntegration(
    request: GetIncidentIoIntegrationRequest,
    callback: (error: ServiceError | null, response: GetIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  getIncidentIoIntegration(
    request: GetIncidentIoIntegrationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
  getIncidentIoIntegration(
    request: GetIncidentIoIntegrationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetIncidentIoIntegrationResponse) => void,
  ): ClientUnaryCall;
}

export const MonitoringServiceClient = makeGenericClientConstructor(
  MonitoringServiceService,
  "chalk.server.v1.MonitoringService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MonitoringServiceClient;
  service: typeof MonitoringServiceService;
  serviceName: string;
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
