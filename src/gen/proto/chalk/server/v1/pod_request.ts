// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/pod_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart";

export const protobufPackage = "chalk.server.v1";

export enum PodRequestGrouping {
  POD_REQUEST_GROUPING_UNSPECIFIED = 0,
  POD_REQUEST_GROUPING_NAMESPACE = 1,
  POD_REQUEST_GROUPING_CLUSTER = 2,
  POD_REQUEST_GROUPING_ENVIRONMENT = 3,
  POD_REQUEST_GROUPING_SERVICE = 4,
  UNRECOGNIZED = -1,
}

export function podRequestGroupingFromJSON(object: any): PodRequestGrouping {
  switch (object) {
    case 0:
    case "POD_REQUEST_GROUPING_UNSPECIFIED":
      return PodRequestGrouping.POD_REQUEST_GROUPING_UNSPECIFIED;
    case 1:
    case "POD_REQUEST_GROUPING_NAMESPACE":
      return PodRequestGrouping.POD_REQUEST_GROUPING_NAMESPACE;
    case 2:
    case "POD_REQUEST_GROUPING_CLUSTER":
      return PodRequestGrouping.POD_REQUEST_GROUPING_CLUSTER;
    case 3:
    case "POD_REQUEST_GROUPING_ENVIRONMENT":
      return PodRequestGrouping.POD_REQUEST_GROUPING_ENVIRONMENT;
    case 4:
    case "POD_REQUEST_GROUPING_SERVICE":
      return PodRequestGrouping.POD_REQUEST_GROUPING_SERVICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PodRequestGrouping.UNRECOGNIZED;
  }
}

export function podRequestGroupingToJSON(object: PodRequestGrouping): string {
  switch (object) {
    case PodRequestGrouping.POD_REQUEST_GROUPING_UNSPECIFIED:
      return "POD_REQUEST_GROUPING_UNSPECIFIED";
    case PodRequestGrouping.POD_REQUEST_GROUPING_NAMESPACE:
      return "POD_REQUEST_GROUPING_NAMESPACE";
    case PodRequestGrouping.POD_REQUEST_GROUPING_CLUSTER:
      return "POD_REQUEST_GROUPING_CLUSTER";
    case PodRequestGrouping.POD_REQUEST_GROUPING_ENVIRONMENT:
      return "POD_REQUEST_GROUPING_ENVIRONMENT";
    case PodRequestGrouping.POD_REQUEST_GROUPING_SERVICE:
      return "POD_REQUEST_GROUPING_SERVICE";
    case PodRequestGrouping.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PodRequestResourceType {
  POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED = 0,
  POD_REQUEST_RESOURCE_TYPE_CPU = 1,
  POD_REQUEST_RESOURCE_TYPE_MEMORY = 2,
  POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE = 3,
  UNRECOGNIZED = -1,
}

export function podRequestResourceTypeFromJSON(object: any): PodRequestResourceType {
  switch (object) {
    case 0:
    case "POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED":
      return PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED;
    case 1:
    case "POD_REQUEST_RESOURCE_TYPE_CPU":
      return PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_CPU;
    case 2:
    case "POD_REQUEST_RESOURCE_TYPE_MEMORY":
      return PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_MEMORY;
    case 3:
    case "POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE":
      return PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PodRequestResourceType.UNRECOGNIZED;
  }
}

export function podRequestResourceTypeToJSON(object: PodRequestResourceType): string {
  switch (object) {
    case PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED:
      return "POD_REQUEST_RESOURCE_TYPE_UNSPECIFIED";
    case PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_CPU:
      return "POD_REQUEST_RESOURCE_TYPE_CPU";
    case PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_MEMORY:
      return "POD_REQUEST_RESOURCE_TYPE_MEMORY";
    case PodRequestResourceType.POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE:
      return "POD_REQUEST_RESOURCE_TYPE_EPHEMERAL_STORAGE";
    case PodRequestResourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetPodRequestChartsRequest {
  startTimestampInclusive:
    | Date
    | undefined;
  /** If not provided, will assume current time is the ending time */
  endTimestampExclusive?:
    | Date
    | undefined;
  /** The bucket width to use. Minimum 1 hour in current implementation. */
  windowPeriod:
    | Duration
    | undefined;
  /** If set, return one series per group member (one series per environment, for example) */
  grouping?:
    | PodRequestGrouping
    | undefined;
  /** The types of resources to fetch. If empty, fetches all types of resources */
  resourceTypes: PodRequestResourceType[];
}

export interface GetPodRequestChartsResponse {
  /**
   * Return one chart per resource type, as it does not make sense to graph different resource types on the
   * same chart (even though our graph libraries do allow this, they have different units and orders of magnitude)
   */
  charts: DenseTimeSeriesChart[];
}

function createBaseGetPodRequestChartsRequest(): GetPodRequestChartsRequest {
  return {
    startTimestampInclusive: undefined,
    endTimestampExclusive: undefined,
    windowPeriod: undefined,
    grouping: undefined,
    resourceTypes: [],
  };
}

export const GetPodRequestChartsRequest: MessageFns<GetPodRequestChartsRequest> = {
  encode(message: GetPodRequestChartsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTimestampInclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.startTimestampInclusive), writer.uint32(10).fork()).join();
    }
    if (message.endTimestampExclusive !== undefined) {
      Timestamp.encode(toTimestamp(message.endTimestampExclusive), writer.uint32(18).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(26).fork()).join();
    }
    if (message.grouping !== undefined) {
      writer.uint32(32).int32(message.grouping);
    }
    writer.uint32(42).fork();
    for (const v of message.resourceTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPodRequestChartsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPodRequestChartsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTimestampInclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTimestampExclusive = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.grouping = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.resourceTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.resourceTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPodRequestChartsRequest {
    return {
      startTimestampInclusive: isSet(object.startTimestampInclusive)
        ? fromJsonTimestamp(object.startTimestampInclusive)
        : undefined,
      endTimestampExclusive: isSet(object.endTimestampExclusive)
        ? fromJsonTimestamp(object.endTimestampExclusive)
        : undefined,
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
      grouping: isSet(object.grouping) ? podRequestGroupingFromJSON(object.grouping) : undefined,
      resourceTypes: globalThis.Array.isArray(object?.resourceTypes)
        ? object.resourceTypes.map((e: any) => podRequestResourceTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPodRequestChartsRequest): unknown {
    const obj: any = {};
    if (message.startTimestampInclusive !== undefined) {
      obj.startTimestampInclusive = message.startTimestampInclusive.toISOString();
    }
    if (message.endTimestampExclusive !== undefined) {
      obj.endTimestampExclusive = message.endTimestampExclusive.toISOString();
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    if (message.grouping !== undefined) {
      obj.grouping = podRequestGroupingToJSON(message.grouping);
    }
    if (message.resourceTypes?.length) {
      obj.resourceTypes = message.resourceTypes.map((e) => podRequestResourceTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPodRequestChartsRequest>, I>>(base?: I): GetPodRequestChartsRequest {
    return GetPodRequestChartsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPodRequestChartsRequest>, I>>(object: I): GetPodRequestChartsRequest {
    const message = createBaseGetPodRequestChartsRequest();
    message.startTimestampInclusive = object.startTimestampInclusive ?? undefined;
    message.endTimestampExclusive = object.endTimestampExclusive ?? undefined;
    message.windowPeriod = (object.windowPeriod !== undefined && object.windowPeriod !== null)
      ? Duration.fromPartial(object.windowPeriod)
      : undefined;
    message.grouping = object.grouping ?? undefined;
    message.resourceTypes = object.resourceTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPodRequestChartsResponse(): GetPodRequestChartsResponse {
  return { charts: [] };
}

export const GetPodRequestChartsResponse: MessageFns<GetPodRequestChartsResponse> = {
  encode(message: GetPodRequestChartsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.charts) {
      DenseTimeSeriesChart.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPodRequestChartsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPodRequestChartsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.charts.push(DenseTimeSeriesChart.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPodRequestChartsResponse {
    return {
      charts: globalThis.Array.isArray(object?.charts)
        ? object.charts.map((e: any) => DenseTimeSeriesChart.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPodRequestChartsResponse): unknown {
    const obj: any = {};
    if (message.charts?.length) {
      obj.charts = message.charts.map((e) => DenseTimeSeriesChart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPodRequestChartsResponse>, I>>(base?: I): GetPodRequestChartsResponse {
    return GetPodRequestChartsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPodRequestChartsResponse>, I>>(object: I): GetPodRequestChartsResponse {
    const message = createBaseGetPodRequestChartsResponse();
    message.charts = object.charts?.map((e) => DenseTimeSeriesChart.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
