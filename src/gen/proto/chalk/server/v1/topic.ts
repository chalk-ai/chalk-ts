// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/topic.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.server.v1";

export interface SQSTopic {
  queueUrl: string;
}

export interface PubSubTopic {
  projectId: string;
  topicId: string;
}

export interface Topic {
  sqsTopic?: SQSTopic | undefined;
  pubsubTopic?: PubSubTopic | undefined;
}

function createBaseSQSTopic(): SQSTopic {
  return { queueUrl: "" };
}

export const SQSTopic: MessageFns<SQSTopic> = {
  encode(message: SQSTopic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queueUrl !== "") {
      writer.uint32(10).string(message.queueUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SQSTopic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSQSTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queueUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SQSTopic {
    return { queueUrl: isSet(object.queueUrl) ? globalThis.String(object.queueUrl) : "" };
  },

  toJSON(message: SQSTopic): unknown {
    const obj: any = {};
    if (message.queueUrl !== "") {
      obj.queueUrl = message.queueUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SQSTopic>, I>>(base?: I): SQSTopic {
    return SQSTopic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SQSTopic>, I>>(object: I): SQSTopic {
    const message = createBaseSQSTopic();
    message.queueUrl = object.queueUrl ?? "";
    return message;
  },
};

function createBasePubSubTopic(): PubSubTopic {
  return { projectId: "", topicId: "" };
}

export const PubSubTopic: MessageFns<PubSubTopic> = {
  encode(message: PubSubTopic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.topicId !== "") {
      writer.uint32(18).string(message.topicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubSubTopic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubSubTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubSubTopic {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      topicId: isSet(object.topicId) ? globalThis.String(object.topicId) : "",
    };
  },

  toJSON(message: PubSubTopic): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.topicId !== "") {
      obj.topicId = message.topicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubSubTopic>, I>>(base?: I): PubSubTopic {
    return PubSubTopic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubSubTopic>, I>>(object: I): PubSubTopic {
    const message = createBasePubSubTopic();
    message.projectId = object.projectId ?? "";
    message.topicId = object.topicId ?? "";
    return message;
  },
};

function createBaseTopic(): Topic {
  return { sqsTopic: undefined, pubsubTopic: undefined };
}

export const Topic: MessageFns<Topic> = {
  encode(message: Topic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sqsTopic !== undefined) {
      SQSTopic.encode(message.sqsTopic, writer.uint32(10).fork()).join();
    }
    if (message.pubsubTopic !== undefined) {
      PubSubTopic.encode(message.pubsubTopic, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Topic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sqsTopic = SQSTopic.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pubsubTopic = PubSubTopic.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Topic {
    return {
      sqsTopic: isSet(object.sqsTopic) ? SQSTopic.fromJSON(object.sqsTopic) : undefined,
      pubsubTopic: isSet(object.pubsubTopic) ? PubSubTopic.fromJSON(object.pubsubTopic) : undefined,
    };
  },

  toJSON(message: Topic): unknown {
    const obj: any = {};
    if (message.sqsTopic !== undefined) {
      obj.sqsTopic = SQSTopic.toJSON(message.sqsTopic);
    }
    if (message.pubsubTopic !== undefined) {
      obj.pubsubTopic = PubSubTopic.toJSON(message.pubsubTopic);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Topic>, I>>(base?: I): Topic {
    return Topic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Topic>, I>>(object: I): Topic {
    const message = createBaseTopic();
    message.sqsTopic = (object.sqsTopic !== undefined && object.sqsTopic !== null)
      ? SQSTopic.fromPartial(object.sqsTopic)
      : undefined;
    message.pubsubTopic = (object.pubsubTopic !== undefined && object.pubsubTopic !== null)
      ? PubSubTopic.fromPartial(object.pubsubTopic)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
