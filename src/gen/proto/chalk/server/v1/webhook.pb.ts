// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/webhook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Struct } from "../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chalk.server.v1";

export interface Webhook {
  id: string;
  environmentId: string;
  teamId: string;
  name: string;
  url: string;
  subscriptions: string[];
  secret?: string | undefined;
  headers?: { [key: string]: any } | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface CreateWebhookRequest {
  environmentId: string;
  name: string;
  url: string;
  subscriptions: string[];
  secret?: string | undefined;
  headers?: { [key: string]: any } | undefined;
}

export interface CreateWebhookResponse {
  webhook: Webhook | undefined;
}

export interface UpdateWebhookRequest {
  id: string;
  name?: string | undefined;
  url?: string | undefined;
  subscriptions: string[];
  secret?: string | undefined;
  headers?: { [key: string]: any } | undefined;
}

export interface UpdateWebhookResponse {
  webhook: Webhook | undefined;
}

export interface DeleteWebhookRequest {
  id: string;
}

export interface DeleteWebhookResponse {
  webhook: Webhook | undefined;
}

export interface GetWebhookRequest {
  id: string;
}

export interface GetWebhookResponse {
  webhook: Webhook | undefined;
}

export interface ListWebhooksRequest {
  environmentId: string;
}

export interface ListWebhooksResponse {
  webhooks: Webhook[];
}

function createBaseWebhook(): Webhook {
  return {
    id: "",
    environmentId: "",
    teamId: "",
    name: "",
    url: "",
    subscriptions: [],
    secret: undefined,
    headers: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Webhook: MessageFns<Webhook> = {
  encode(message: Webhook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.environmentId !== "") {
      writer.uint32(18).string(message.environmentId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    for (const v of message.subscriptions) {
      writer.uint32(50).string(v!);
    }
    if (message.secret !== undefined) {
      writer.uint32(58).string(message.secret);
    }
    if (message.headers !== undefined) {
      Struct.encode(Struct.wrap(message.headers), writer.uint32(66).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subscriptions.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.headers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      subscriptions: globalThis.Array.isArray(object?.subscriptions)
        ? object.subscriptions.map((e: any) => globalThis.String(e))
        : [],
      secret: isSet(object.secret) ? globalThis.String(object.secret) : undefined,
      headers: isObject(object.headers) ? object.headers : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Webhook): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.subscriptions?.length) {
      obj.subscriptions = message.subscriptions;
    }
    if (message.secret !== undefined) {
      obj.secret = message.secret;
    }
    if (message.headers !== undefined) {
      obj.headers = message.headers;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },
};

function createBaseCreateWebhookRequest(): CreateWebhookRequest {
  return { environmentId: "", name: "", url: "", subscriptions: [], secret: undefined, headers: undefined };
}

export const CreateWebhookRequest: MessageFns<CreateWebhookRequest> = {
  encode(message: CreateWebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environmentId !== "") {
      writer.uint32(10).string(message.environmentId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    for (const v of message.subscriptions) {
      writer.uint32(34).string(v!);
    }
    if (message.secret !== undefined) {
      writer.uint32(42).string(message.secret);
    }
    if (message.headers !== undefined) {
      Struct.encode(Struct.wrap(message.headers), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subscriptions.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.headers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWebhookRequest {
    return {
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      subscriptions: globalThis.Array.isArray(object?.subscriptions)
        ? object.subscriptions.map((e: any) => globalThis.String(e))
        : [],
      secret: isSet(object.secret) ? globalThis.String(object.secret) : undefined,
      headers: isObject(object.headers) ? object.headers : undefined,
    };
  },

  toJSON(message: CreateWebhookRequest): unknown {
    const obj: any = {};
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.subscriptions?.length) {
      obj.subscriptions = message.subscriptions;
    }
    if (message.secret !== undefined) {
      obj.secret = message.secret;
    }
    if (message.headers !== undefined) {
      obj.headers = message.headers;
    }
    return obj;
  },
};

function createBaseCreateWebhookResponse(): CreateWebhookResponse {
  return { webhook: undefined };
}

export const CreateWebhookResponse: MessageFns<CreateWebhookResponse> = {
  encode(message: CreateWebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webhook !== undefined) {
      Webhook.encode(message.webhook, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhook = Webhook.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWebhookResponse {
    return { webhook: isSet(object.webhook) ? Webhook.fromJSON(object.webhook) : undefined };
  },

  toJSON(message: CreateWebhookResponse): unknown {
    const obj: any = {};
    if (message.webhook !== undefined) {
      obj.webhook = Webhook.toJSON(message.webhook);
    }
    return obj;
  },
};

function createBaseUpdateWebhookRequest(): UpdateWebhookRequest {
  return { id: "", name: undefined, url: undefined, subscriptions: [], secret: undefined, headers: undefined };
}

export const UpdateWebhookRequest: MessageFns<UpdateWebhookRequest> = {
  encode(message: UpdateWebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.url !== undefined) {
      writer.uint32(26).string(message.url);
    }
    for (const v of message.subscriptions) {
      writer.uint32(34).string(v!);
    }
    if (message.secret !== undefined) {
      writer.uint32(42).string(message.secret);
    }
    if (message.headers !== undefined) {
      Struct.encode(Struct.wrap(message.headers), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subscriptions.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.headers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWebhookRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      subscriptions: globalThis.Array.isArray(object?.subscriptions)
        ? object.subscriptions.map((e: any) => globalThis.String(e))
        : [],
      secret: isSet(object.secret) ? globalThis.String(object.secret) : undefined,
      headers: isObject(object.headers) ? object.headers : undefined,
    };
  },

  toJSON(message: UpdateWebhookRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.subscriptions?.length) {
      obj.subscriptions = message.subscriptions;
    }
    if (message.secret !== undefined) {
      obj.secret = message.secret;
    }
    if (message.headers !== undefined) {
      obj.headers = message.headers;
    }
    return obj;
  },
};

function createBaseUpdateWebhookResponse(): UpdateWebhookResponse {
  return { webhook: undefined };
}

export const UpdateWebhookResponse: MessageFns<UpdateWebhookResponse> = {
  encode(message: UpdateWebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webhook !== undefined) {
      Webhook.encode(message.webhook, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhook = Webhook.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWebhookResponse {
    return { webhook: isSet(object.webhook) ? Webhook.fromJSON(object.webhook) : undefined };
  },

  toJSON(message: UpdateWebhookResponse): unknown {
    const obj: any = {};
    if (message.webhook !== undefined) {
      obj.webhook = Webhook.toJSON(message.webhook);
    }
    return obj;
  },
};

function createBaseDeleteWebhookRequest(): DeleteWebhookRequest {
  return { id: "" };
}

export const DeleteWebhookRequest: MessageFns<DeleteWebhookRequest> = {
  encode(message: DeleteWebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWebhookRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteWebhookRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseDeleteWebhookResponse(): DeleteWebhookResponse {
  return { webhook: undefined };
}

export const DeleteWebhookResponse: MessageFns<DeleteWebhookResponse> = {
  encode(message: DeleteWebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webhook !== undefined) {
      Webhook.encode(message.webhook, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhook = Webhook.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWebhookResponse {
    return { webhook: isSet(object.webhook) ? Webhook.fromJSON(object.webhook) : undefined };
  },

  toJSON(message: DeleteWebhookResponse): unknown {
    const obj: any = {};
    if (message.webhook !== undefined) {
      obj.webhook = Webhook.toJSON(message.webhook);
    }
    return obj;
  },
};

function createBaseGetWebhookRequest(): GetWebhookRequest {
  return { id: "" };
}

export const GetWebhookRequest: MessageFns<GetWebhookRequest> = {
  encode(message: GetWebhookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWebhookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWebhookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWebhookRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetWebhookRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
};

function createBaseGetWebhookResponse(): GetWebhookResponse {
  return { webhook: undefined };
}

export const GetWebhookResponse: MessageFns<GetWebhookResponse> = {
  encode(message: GetWebhookResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webhook !== undefined) {
      Webhook.encode(message.webhook, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWebhookResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWebhookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhook = Webhook.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWebhookResponse {
    return { webhook: isSet(object.webhook) ? Webhook.fromJSON(object.webhook) : undefined };
  },

  toJSON(message: GetWebhookResponse): unknown {
    const obj: any = {};
    if (message.webhook !== undefined) {
      obj.webhook = Webhook.toJSON(message.webhook);
    }
    return obj;
  },
};

function createBaseListWebhooksRequest(): ListWebhooksRequest {
  return { environmentId: "" };
}

export const ListWebhooksRequest: MessageFns<ListWebhooksRequest> = {
  encode(message: ListWebhooksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environmentId !== "") {
      writer.uint32(10).string(message.environmentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWebhooksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWebhooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWebhooksRequest {
    return { environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "" };
  },

  toJSON(message: ListWebhooksRequest): unknown {
    const obj: any = {};
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    return obj;
  },
};

function createBaseListWebhooksResponse(): ListWebhooksResponse {
  return { webhooks: [] };
}

export const ListWebhooksResponse: MessageFns<ListWebhooksResponse> = {
  encode(message: ListWebhooksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.webhooks) {
      Webhook.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWebhooksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWebhooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhooks.push(Webhook.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWebhooksResponse {
    return {
      webhooks: globalThis.Array.isArray(object?.webhooks) ? object.webhooks.map((e: any) => Webhook.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListWebhooksResponse): unknown {
    const obj: any = {};
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => Webhook.toJSON(e));
    }
    return obj;
  },
};

export type WebhookServiceService = typeof WebhookServiceService;
export const WebhookServiceService = {
  createWebhook: {
    path: "/chalk.server.v1.WebhookService/CreateWebhook",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateWebhookRequest) => Buffer.from(CreateWebhookRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateWebhookRequest.decode(value),
    responseSerialize: (value: CreateWebhookResponse) => Buffer.from(CreateWebhookResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateWebhookResponse.decode(value),
  },
  updateWebhook: {
    path: "/chalk.server.v1.WebhookService/UpdateWebhook",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateWebhookRequest) => Buffer.from(UpdateWebhookRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateWebhookRequest.decode(value),
    responseSerialize: (value: UpdateWebhookResponse) => Buffer.from(UpdateWebhookResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateWebhookResponse.decode(value),
  },
  deleteWebhook: {
    path: "/chalk.server.v1.WebhookService/DeleteWebhook",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteWebhookRequest) => Buffer.from(DeleteWebhookRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteWebhookRequest.decode(value),
    responseSerialize: (value: DeleteWebhookResponse) => Buffer.from(DeleteWebhookResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteWebhookResponse.decode(value),
  },
  getWebhook: {
    path: "/chalk.server.v1.WebhookService/GetWebhook",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWebhookRequest) => Buffer.from(GetWebhookRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWebhookRequest.decode(value),
    responseSerialize: (value: GetWebhookResponse) => Buffer.from(GetWebhookResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWebhookResponse.decode(value),
  },
  listWebhooks: {
    path: "/chalk.server.v1.WebhookService/ListWebhooks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListWebhooksRequest) => Buffer.from(ListWebhooksRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListWebhooksRequest.decode(value),
    responseSerialize: (value: ListWebhooksResponse) => Buffer.from(ListWebhooksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListWebhooksResponse.decode(value),
  },
} as const;

export interface WebhookServiceServer extends UntypedServiceImplementation {
  createWebhook: handleUnaryCall<CreateWebhookRequest, CreateWebhookResponse>;
  updateWebhook: handleUnaryCall<UpdateWebhookRequest, UpdateWebhookResponse>;
  deleteWebhook: handleUnaryCall<DeleteWebhookRequest, DeleteWebhookResponse>;
  getWebhook: handleUnaryCall<GetWebhookRequest, GetWebhookResponse>;
  listWebhooks: handleUnaryCall<ListWebhooksRequest, ListWebhooksResponse>;
}

export interface WebhookServiceClient extends Client {
  createWebhook(
    request: CreateWebhookRequest,
    callback: (error: ServiceError | null, response: CreateWebhookResponse) => void,
  ): ClientUnaryCall;
  createWebhook(
    request: CreateWebhookRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateWebhookResponse) => void,
  ): ClientUnaryCall;
  createWebhook(
    request: CreateWebhookRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateWebhookResponse) => void,
  ): ClientUnaryCall;
  updateWebhook(
    request: UpdateWebhookRequest,
    callback: (error: ServiceError | null, response: UpdateWebhookResponse) => void,
  ): ClientUnaryCall;
  updateWebhook(
    request: UpdateWebhookRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateWebhookResponse) => void,
  ): ClientUnaryCall;
  updateWebhook(
    request: UpdateWebhookRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateWebhookResponse) => void,
  ): ClientUnaryCall;
  deleteWebhook(
    request: DeleteWebhookRequest,
    callback: (error: ServiceError | null, response: DeleteWebhookResponse) => void,
  ): ClientUnaryCall;
  deleteWebhook(
    request: DeleteWebhookRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteWebhookResponse) => void,
  ): ClientUnaryCall;
  deleteWebhook(
    request: DeleteWebhookRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteWebhookResponse) => void,
  ): ClientUnaryCall;
  getWebhook(
    request: GetWebhookRequest,
    callback: (error: ServiceError | null, response: GetWebhookResponse) => void,
  ): ClientUnaryCall;
  getWebhook(
    request: GetWebhookRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWebhookResponse) => void,
  ): ClientUnaryCall;
  getWebhook(
    request: GetWebhookRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWebhookResponse) => void,
  ): ClientUnaryCall;
  listWebhooks(
    request: ListWebhooksRequest,
    callback: (error: ServiceError | null, response: ListWebhooksResponse) => void,
  ): ClientUnaryCall;
  listWebhooks(
    request: ListWebhooksRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListWebhooksResponse) => void,
  ): ClientUnaryCall;
  listWebhooks(
    request: ListWebhooksRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListWebhooksResponse) => void,
  ): ClientUnaryCall;
}

export const WebhookServiceClient = makeGenericClientConstructor(
  WebhookServiceService,
  "chalk.server.v1.WebhookService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WebhookServiceClient;
  service: typeof WebhookServiceService;
  serviceName: string;
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
