// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/http_engine_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ChalkError } from "../../common/v1/chalk_error";
import { DatasetResponse } from "../../common/v1/dataset_response";
import { ColumnMetadataList, OfflineQueryRequest } from "../../common/v1/offline_query";

export const protobufPackage = "chalk.server.v1";

export interface CreateOfflineQueryRequest {
  request: OfflineQueryRequest | undefined;
}

export interface CreateOfflineQueryResponse {
  /**
   * these fields are a pale mimicry of the better maintained dataset response
   *
   * @deprecated
   */
  isFinished: boolean;
  /** @deprecated */
  version: number;
  /** @deprecated */
  urls: string[];
  /** @deprecated */
  errors: ChalkError[];
  /** @deprecated */
  columns?: ColumnMetadataList | undefined;
  datasetResponse: DatasetResponse | undefined;
}

function createBaseCreateOfflineQueryRequest(): CreateOfflineQueryRequest {
  return { request: undefined };
}

export const CreateOfflineQueryRequest: MessageFns<CreateOfflineQueryRequest> = {
  encode(message: CreateOfflineQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      OfflineQueryRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOfflineQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOfflineQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = OfflineQueryRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOfflineQueryRequest {
    return { request: isSet(object.request) ? OfflineQueryRequest.fromJSON(object.request) : undefined };
  },

  toJSON(message: CreateOfflineQueryRequest): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = OfflineQueryRequest.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOfflineQueryRequest>, I>>(base?: I): CreateOfflineQueryRequest {
    return CreateOfflineQueryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOfflineQueryRequest>, I>>(object: I): CreateOfflineQueryRequest {
    const message = createBaseCreateOfflineQueryRequest();
    message.request = (object.request !== undefined && object.request !== null)
      ? OfflineQueryRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseCreateOfflineQueryResponse(): CreateOfflineQueryResponse {
  return { isFinished: false, version: 0, urls: [], errors: [], columns: undefined, datasetResponse: undefined };
}

export const CreateOfflineQueryResponse: MessageFns<CreateOfflineQueryResponse> = {
  encode(message: CreateOfflineQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isFinished !== false) {
      writer.uint32(8).bool(message.isFinished);
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    for (const v of message.urls) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.errors) {
      ChalkError.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.columns !== undefined) {
      ColumnMetadataList.encode(message.columns, writer.uint32(42).fork()).join();
    }
    if (message.datasetResponse !== undefined) {
      DatasetResponse.encode(message.datasetResponse, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOfflineQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOfflineQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isFinished = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.urls.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.errors.push(ChalkError.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.columns = ColumnMetadataList.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.datasetResponse = DatasetResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOfflineQueryResponse {
    return {
      isFinished: isSet(object.isFinished) ? globalThis.Boolean(object.isFinished) : false,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      urls: globalThis.Array.isArray(object?.urls) ? object.urls.map((e: any) => globalThis.String(e)) : [],
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ChalkError.fromJSON(e)) : [],
      columns: isSet(object.columns) ? ColumnMetadataList.fromJSON(object.columns) : undefined,
      datasetResponse: isSet(object.datasetResponse) ? DatasetResponse.fromJSON(object.datasetResponse) : undefined,
    };
  },

  toJSON(message: CreateOfflineQueryResponse): unknown {
    const obj: any = {};
    if (message.isFinished !== false) {
      obj.isFinished = message.isFinished;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.urls?.length) {
      obj.urls = message.urls;
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ChalkError.toJSON(e));
    }
    if (message.columns !== undefined) {
      obj.columns = ColumnMetadataList.toJSON(message.columns);
    }
    if (message.datasetResponse !== undefined) {
      obj.datasetResponse = DatasetResponse.toJSON(message.datasetResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOfflineQueryResponse>, I>>(base?: I): CreateOfflineQueryResponse {
    return CreateOfflineQueryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOfflineQueryResponse>, I>>(object: I): CreateOfflineQueryResponse {
    const message = createBaseCreateOfflineQueryResponse();
    message.isFinished = object.isFinished ?? false;
    message.version = object.version ?? 0;
    message.urls = object.urls?.map((e) => e) || [];
    message.errors = object.errors?.map((e) => ChalkError.fromPartial(e)) || [];
    message.columns = (object.columns !== undefined && object.columns !== null)
      ? ColumnMetadataList.fromPartial(object.columns)
      : undefined;
    message.datasetResponse = (object.datasetResponse !== undefined && object.datasetResponse !== null)
      ? DatasetResponse.fromPartial(object.datasetResponse)
      : undefined;
    return message;
  },
};

export type HTTPEngineProxyServiceService = typeof HTTPEngineProxyServiceService;
export const HTTPEngineProxyServiceService = {
  createOfflineQuery: {
    path: "/chalk.server.v1.HTTPEngineProxyService/CreateOfflineQuery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOfflineQueryRequest) =>
      Buffer.from(CreateOfflineQueryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateOfflineQueryRequest.decode(value),
    responseSerialize: (value: CreateOfflineQueryResponse) =>
      Buffer.from(CreateOfflineQueryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateOfflineQueryResponse.decode(value),
  },
} as const;

export interface HTTPEngineProxyServiceServer extends UntypedServiceImplementation {
  createOfflineQuery: handleUnaryCall<CreateOfflineQueryRequest, CreateOfflineQueryResponse>;
}

export interface HTTPEngineProxyServiceClient extends Client {
  createOfflineQuery(
    request: CreateOfflineQueryRequest,
    callback: (error: ServiceError | null, response: CreateOfflineQueryResponse) => void,
  ): ClientUnaryCall;
  createOfflineQuery(
    request: CreateOfflineQueryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateOfflineQueryResponse) => void,
  ): ClientUnaryCall;
  createOfflineQuery(
    request: CreateOfflineQueryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateOfflineQueryResponse) => void,
  ): ClientUnaryCall;
}

export const HTTPEngineProxyServiceClient = makeGenericClientConstructor(
  HTTPEngineProxyServiceService,
  "chalk.server.v1.HTTPEngineProxyService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): HTTPEngineProxyServiceClient;
  service: typeof HTTPEngineProxyServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
