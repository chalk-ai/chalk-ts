// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/performance_summary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../google/protobuf/struct";

export const protobufPackage = "chalk.server.v1";

export interface ShardPerformanceSummary {
  operationId: string;
  shardId: number;
  /**
   * This is called performance_summary in the DB,
   * but is a more comprehensive object where performance_summary is one of the fields
   */
  performanceSummaryWithQueryConfig: { [key: string]: any } | undefined;
}

/**
 * Not directly used by any other proto, but used as page_token and next_page_token
 * after bytes are base64 encoded
 */
export interface ListOfflineQueryShardPerformanceSummariesPageToken {
  shardIdHwm: number;
}

export interface ListOfflineQueryShardPerformanceSummariesRequest {
  operationId: string;
  limit: number;
  /** expected to be an base64 encoded ListOfflineQueryShardPerformanceSummariesPageToken message */
  pageToken: string;
}

export interface ListOfflineQueryShardPerformanceSummariesResponse {
  performanceSummaries: ShardPerformanceSummary[];
  nextPageToken: string;
}

function createBaseShardPerformanceSummary(): ShardPerformanceSummary {
  return { operationId: "", shardId: 0, performanceSummaryWithQueryConfig: undefined };
}

export const ShardPerformanceSummary: MessageFns<ShardPerformanceSummary> = {
  encode(message: ShardPerformanceSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.shardId !== 0) {
      writer.uint32(16).int64(message.shardId);
    }
    if (message.performanceSummaryWithQueryConfig !== undefined) {
      Struct.encode(Struct.wrap(message.performanceSummaryWithQueryConfig), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShardPerformanceSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShardPerformanceSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.shardId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.performanceSummaryWithQueryConfig = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShardPerformanceSummary {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
      performanceSummaryWithQueryConfig: isObject(object.performanceSummaryWithQueryConfig)
        ? object.performanceSummaryWithQueryConfig
        : undefined,
    };
  },

  toJSON(message: ShardPerformanceSummary): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.shardId !== 0) {
      obj.shardId = Math.round(message.shardId);
    }
    if (message.performanceSummaryWithQueryConfig !== undefined) {
      obj.performanceSummaryWithQueryConfig = message.performanceSummaryWithQueryConfig;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShardPerformanceSummary>, I>>(base?: I): ShardPerformanceSummary {
    return ShardPerformanceSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShardPerformanceSummary>, I>>(object: I): ShardPerformanceSummary {
    const message = createBaseShardPerformanceSummary();
    message.operationId = object.operationId ?? "";
    message.shardId = object.shardId ?? 0;
    message.performanceSummaryWithQueryConfig = object.performanceSummaryWithQueryConfig ?? undefined;
    return message;
  },
};

function createBaseListOfflineQueryShardPerformanceSummariesPageToken(): ListOfflineQueryShardPerformanceSummariesPageToken {
  return { shardIdHwm: 0 };
}

export const ListOfflineQueryShardPerformanceSummariesPageToken: MessageFns<
  ListOfflineQueryShardPerformanceSummariesPageToken
> = {
  encode(
    message: ListOfflineQueryShardPerformanceSummariesPageToken,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.shardIdHwm !== 0) {
      writer.uint32(8).int64(message.shardIdHwm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOfflineQueryShardPerformanceSummariesPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOfflineQueryShardPerformanceSummariesPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shardIdHwm = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOfflineQueryShardPerformanceSummariesPageToken {
    return { shardIdHwm: isSet(object.shardIdHwm) ? globalThis.Number(object.shardIdHwm) : 0 };
  },

  toJSON(message: ListOfflineQueryShardPerformanceSummariesPageToken): unknown {
    const obj: any = {};
    if (message.shardIdHwm !== 0) {
      obj.shardIdHwm = Math.round(message.shardIdHwm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesPageToken>, I>>(
    base?: I,
  ): ListOfflineQueryShardPerformanceSummariesPageToken {
    return ListOfflineQueryShardPerformanceSummariesPageToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesPageToken>, I>>(
    object: I,
  ): ListOfflineQueryShardPerformanceSummariesPageToken {
    const message = createBaseListOfflineQueryShardPerformanceSummariesPageToken();
    message.shardIdHwm = object.shardIdHwm ?? 0;
    return message;
  },
};

function createBaseListOfflineQueryShardPerformanceSummariesRequest(): ListOfflineQueryShardPerformanceSummariesRequest {
  return { operationId: "", limit: 0, pageToken: "" };
}

export const ListOfflineQueryShardPerformanceSummariesRequest: MessageFns<
  ListOfflineQueryShardPerformanceSummariesRequest
> = {
  encode(
    message: ListOfflineQueryShardPerformanceSummariesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int64(message.limit);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOfflineQueryShardPerformanceSummariesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOfflineQueryShardPerformanceSummariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOfflineQueryShardPerformanceSummariesRequest {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListOfflineQueryShardPerformanceSummariesRequest): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesRequest>, I>>(
    base?: I,
  ): ListOfflineQueryShardPerformanceSummariesRequest {
    return ListOfflineQueryShardPerformanceSummariesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesRequest>, I>>(
    object: I,
  ): ListOfflineQueryShardPerformanceSummariesRequest {
    const message = createBaseListOfflineQueryShardPerformanceSummariesRequest();
    message.operationId = object.operationId ?? "";
    message.limit = object.limit ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListOfflineQueryShardPerformanceSummariesResponse(): ListOfflineQueryShardPerformanceSummariesResponse {
  return { performanceSummaries: [], nextPageToken: "" };
}

export const ListOfflineQueryShardPerformanceSummariesResponse: MessageFns<
  ListOfflineQueryShardPerformanceSummariesResponse
> = {
  encode(
    message: ListOfflineQueryShardPerformanceSummariesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.performanceSummaries) {
      ShardPerformanceSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOfflineQueryShardPerformanceSummariesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOfflineQueryShardPerformanceSummariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.performanceSummaries.push(ShardPerformanceSummary.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOfflineQueryShardPerformanceSummariesResponse {
    return {
      performanceSummaries: globalThis.Array.isArray(object?.performanceSummaries)
        ? object.performanceSummaries.map((e: any) => ShardPerformanceSummary.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOfflineQueryShardPerformanceSummariesResponse): unknown {
    const obj: any = {};
    if (message.performanceSummaries?.length) {
      obj.performanceSummaries = message.performanceSummaries.map((e) => ShardPerformanceSummary.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesResponse>, I>>(
    base?: I,
  ): ListOfflineQueryShardPerformanceSummariesResponse {
    return ListOfflineQueryShardPerformanceSummariesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOfflineQueryShardPerformanceSummariesResponse>, I>>(
    object: I,
  ): ListOfflineQueryShardPerformanceSummariesResponse {
    const message = createBaseListOfflineQueryShardPerformanceSummariesResponse();
    message.performanceSummaries = object.performanceSummaries?.map((e) => ShardPerformanceSummary.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
