// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/flag.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chalk.server.v1";

export enum FlagScope {
  FLAG_SCOPE_UNSPECIFIED = 0,
  FLAG_SCOPE_TEAM = 1,
  FLAG_SCOPE_ENVIRONMENT = 2,
  UNRECOGNIZED = -1,
}

export function flagScopeFromJSON(object: any): FlagScope {
  switch (object) {
    case 0:
    case "FLAG_SCOPE_UNSPECIFIED":
      return FlagScope.FLAG_SCOPE_UNSPECIFIED;
    case 1:
    case "FLAG_SCOPE_TEAM":
      return FlagScope.FLAG_SCOPE_TEAM;
    case 2:
    case "FLAG_SCOPE_ENVIRONMENT":
      return FlagScope.FLAG_SCOPE_ENVIRONMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FlagScope.UNRECOGNIZED;
  }
}

export function flagScopeToJSON(object: FlagScope): string {
  switch (object) {
    case FlagScope.FLAG_SCOPE_UNSPECIFIED:
      return "FLAG_SCOPE_UNSPECIFIED";
    case FlagScope.FLAG_SCOPE_TEAM:
      return "FLAG_SCOPE_TEAM";
    case FlagScope.FLAG_SCOPE_ENVIRONMENT:
      return "FLAG_SCOPE_ENVIRONMENT";
    case FlagScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeatureFlagValue {
  flag: string;
  value: boolean;
}

export interface GetFeatureFlagsRequest {
}

export interface GetFeatureFlagsResponse {
  flags: FeatureFlagValue[];
}

export interface SetFeatureFlagRequest {
  flag: string;
  value: boolean;
  scope: FlagScope;
}

export interface SetFeatureFlagResponse {
}

function createBaseFeatureFlagValue(): FeatureFlagValue {
  return { flag: "", value: false };
}

export const FeatureFlagValue: MessageFns<FeatureFlagValue> = {
  encode(message: FeatureFlagValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== "") {
      writer.uint32(10).string(message.flag);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureFlagValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureFlagValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureFlagValue {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: FeatureFlagValue): unknown {
    const obj: any = {};
    if (message.flag !== "") {
      obj.flag = message.flag;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseGetFeatureFlagsRequest(): GetFeatureFlagsRequest {
  return {};
}

export const GetFeatureFlagsRequest: MessageFns<GetFeatureFlagsRequest> = {
  encode(_: GetFeatureFlagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureFlagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureFlagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetFeatureFlagsRequest {
    return {};
  },

  toJSON(_: GetFeatureFlagsRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseGetFeatureFlagsResponse(): GetFeatureFlagsResponse {
  return { flags: [] };
}

export const GetFeatureFlagsResponse: MessageFns<GetFeatureFlagsResponse> = {
  encode(message: GetFeatureFlagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      FeatureFlagValue.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureFlagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureFlagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(FeatureFlagValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureFlagsResponse {
    return {
      flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => FeatureFlagValue.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetFeatureFlagsResponse): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags.map((e) => FeatureFlagValue.toJSON(e));
    }
    return obj;
  },
};

function createBaseSetFeatureFlagRequest(): SetFeatureFlagRequest {
  return { flag: "", value: false, scope: 0 };
}

export const SetFeatureFlagRequest: MessageFns<SetFeatureFlagRequest> = {
  encode(message: SetFeatureFlagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== "") {
      writer.uint32(10).string(message.flag);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    if (message.scope !== 0) {
      writer.uint32(24).int32(message.scope);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetFeatureFlagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFeatureFlagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFeatureFlagRequest {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
      scope: isSet(object.scope) ? flagScopeFromJSON(object.scope) : 0,
    };
  },

  toJSON(message: SetFeatureFlagRequest): unknown {
    const obj: any = {};
    if (message.flag !== "") {
      obj.flag = message.flag;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    if (message.scope !== 0) {
      obj.scope = flagScopeToJSON(message.scope);
    }
    return obj;
  },
};

function createBaseSetFeatureFlagResponse(): SetFeatureFlagResponse {
  return {};
}

export const SetFeatureFlagResponse: MessageFns<SetFeatureFlagResponse> = {
  encode(_: SetFeatureFlagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetFeatureFlagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFeatureFlagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetFeatureFlagResponse {
    return {};
  },

  toJSON(_: SetFeatureFlagResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

export type FeatureFlagServiceService = typeof FeatureFlagServiceService;
export const FeatureFlagServiceService = {
  getFeatureFlags: {
    path: "/chalk.server.v1.FeatureFlagService/GetFeatureFlags",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFeatureFlagsRequest) => Buffer.from(GetFeatureFlagsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFeatureFlagsRequest.decode(value),
    responseSerialize: (value: GetFeatureFlagsResponse) => Buffer.from(GetFeatureFlagsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFeatureFlagsResponse.decode(value),
  },
  setFeatureFlag: {
    path: "/chalk.server.v1.FeatureFlagService/SetFeatureFlag",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetFeatureFlagRequest) => Buffer.from(SetFeatureFlagRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetFeatureFlagRequest.decode(value),
    responseSerialize: (value: SetFeatureFlagResponse) => Buffer.from(SetFeatureFlagResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SetFeatureFlagResponse.decode(value),
  },
} as const;

export interface FeatureFlagServiceServer extends UntypedServiceImplementation {
  getFeatureFlags: handleUnaryCall<GetFeatureFlagsRequest, GetFeatureFlagsResponse>;
  setFeatureFlag: handleUnaryCall<SetFeatureFlagRequest, SetFeatureFlagResponse>;
}

export interface FeatureFlagServiceClient extends Client {
  getFeatureFlags(
    request: GetFeatureFlagsRequest,
    callback: (error: ServiceError | null, response: GetFeatureFlagsResponse) => void,
  ): ClientUnaryCall;
  getFeatureFlags(
    request: GetFeatureFlagsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFeatureFlagsResponse) => void,
  ): ClientUnaryCall;
  getFeatureFlags(
    request: GetFeatureFlagsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFeatureFlagsResponse) => void,
  ): ClientUnaryCall;
  setFeatureFlag(
    request: SetFeatureFlagRequest,
    callback: (error: ServiceError | null, response: SetFeatureFlagResponse) => void,
  ): ClientUnaryCall;
  setFeatureFlag(
    request: SetFeatureFlagRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetFeatureFlagResponse) => void,
  ): ClientUnaryCall;
  setFeatureFlag(
    request: SetFeatureFlagRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetFeatureFlagResponse) => void,
  ): ClientUnaryCall;
}

export const FeatureFlagServiceClient = makeGenericClientConstructor(
  FeatureFlagServiceService,
  "chalk.server.v1.FeatureFlagService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FeatureFlagServiceClient;
  service: typeof FeatureFlagServiceService;
  serviceName: string;
};

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
