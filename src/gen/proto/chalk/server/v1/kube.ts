// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/kube.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ChalkKubernetesEvent } from "../../kubernetes/v1/events";
import { ChalkKubernetesPersistentVolume } from "../../kubernetes/v1/persistentvolume";

export const protobufPackage = "chalk.server.v1";

export interface GetPodStackTraceDumpRequest {
  /** If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header) */
  namespace?: string | undefined;
  podName: string;
  /**
   * Optional specification of the container to use
   * Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
   */
  containerName?: string | undefined;
  processId?: number | undefined;
  processName?:
    | string
    | undefined;
  /** Infers the process id/name based on the pod/container/other contextual information */
  autoDetectProcess?: boolean | undefined;
}

export interface GetPodStackTraceDumpResponse {
  stackTrace: string;
}

export interface GetKubernetesEventsRequest {
  /** defaults to the environment's kube cluster name */
  clusterName?:
    | string
    | undefined;
  /** defaults to the environment's kube namespace */
  namespace?: string | undefined;
  labelSelector?: string | undefined;
  fieldSelector?: string | undefined;
}

export interface GetKubernetesEventsResponse {
  events: ChalkKubernetesEvent[];
}

export interface GetKubernetesPersistentVolumesRequest {
}

export interface GetKubernetesPersistentVolumesResponse {
  volumes: ChalkKubernetesPersistentVolume[];
}

function createBaseGetPodStackTraceDumpRequest(): GetPodStackTraceDumpRequest {
  return {
    namespace: undefined,
    podName: "",
    containerName: undefined,
    processId: undefined,
    processName: undefined,
    autoDetectProcess: undefined,
  };
}

export const GetPodStackTraceDumpRequest: MessageFns<GetPodStackTraceDumpRequest> = {
  encode(message: GetPodStackTraceDumpRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== undefined) {
      writer.uint32(10).string(message.namespace);
    }
    if (message.podName !== "") {
      writer.uint32(18).string(message.podName);
    }
    if (message.containerName !== undefined) {
      writer.uint32(26).string(message.containerName);
    }
    if (message.processId !== undefined) {
      writer.uint32(32).int32(message.processId);
    }
    if (message.processName !== undefined) {
      writer.uint32(42).string(message.processName);
    }
    if (message.autoDetectProcess !== undefined) {
      writer.uint32(48).bool(message.autoDetectProcess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPodStackTraceDumpRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPodStackTraceDumpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.podName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.containerName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.processId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.processName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.autoDetectProcess = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPodStackTraceDumpRequest {
    return {
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : undefined,
      podName: isSet(object.podName) ? globalThis.String(object.podName) : "",
      containerName: isSet(object.containerName) ? globalThis.String(object.containerName) : undefined,
      processId: isSet(object.processId) ? globalThis.Number(object.processId) : undefined,
      processName: isSet(object.processName) ? globalThis.String(object.processName) : undefined,
      autoDetectProcess: isSet(object.autoDetectProcess) ? globalThis.Boolean(object.autoDetectProcess) : undefined,
    };
  },

  toJSON(message: GetPodStackTraceDumpRequest): unknown {
    const obj: any = {};
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    if (message.podName !== "") {
      obj.podName = message.podName;
    }
    if (message.containerName !== undefined) {
      obj.containerName = message.containerName;
    }
    if (message.processId !== undefined) {
      obj.processId = Math.round(message.processId);
    }
    if (message.processName !== undefined) {
      obj.processName = message.processName;
    }
    if (message.autoDetectProcess !== undefined) {
      obj.autoDetectProcess = message.autoDetectProcess;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPodStackTraceDumpRequest>, I>>(base?: I): GetPodStackTraceDumpRequest {
    return GetPodStackTraceDumpRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPodStackTraceDumpRequest>, I>>(object: I): GetPodStackTraceDumpRequest {
    const message = createBaseGetPodStackTraceDumpRequest();
    message.namespace = object.namespace ?? undefined;
    message.podName = object.podName ?? "";
    message.containerName = object.containerName ?? undefined;
    message.processId = object.processId ?? undefined;
    message.processName = object.processName ?? undefined;
    message.autoDetectProcess = object.autoDetectProcess ?? undefined;
    return message;
  },
};

function createBaseGetPodStackTraceDumpResponse(): GetPodStackTraceDumpResponse {
  return { stackTrace: "" };
}

export const GetPodStackTraceDumpResponse: MessageFns<GetPodStackTraceDumpResponse> = {
  encode(message: GetPodStackTraceDumpResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stackTrace !== "") {
      writer.uint32(10).string(message.stackTrace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPodStackTraceDumpResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPodStackTraceDumpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stackTrace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPodStackTraceDumpResponse {
    return { stackTrace: isSet(object.stackTrace) ? globalThis.String(object.stackTrace) : "" };
  },

  toJSON(message: GetPodStackTraceDumpResponse): unknown {
    const obj: any = {};
    if (message.stackTrace !== "") {
      obj.stackTrace = message.stackTrace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPodStackTraceDumpResponse>, I>>(base?: I): GetPodStackTraceDumpResponse {
    return GetPodStackTraceDumpResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPodStackTraceDumpResponse>, I>>(object: I): GetPodStackTraceDumpResponse {
    const message = createBaseGetPodStackTraceDumpResponse();
    message.stackTrace = object.stackTrace ?? "";
    return message;
  },
};

function createBaseGetKubernetesEventsRequest(): GetKubernetesEventsRequest {
  return { clusterName: undefined, namespace: undefined, labelSelector: undefined, fieldSelector: undefined };
}

export const GetKubernetesEventsRequest: MessageFns<GetKubernetesEventsRequest> = {
  encode(message: GetKubernetesEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clusterName !== undefined) {
      writer.uint32(10).string(message.clusterName);
    }
    if (message.namespace !== undefined) {
      writer.uint32(18).string(message.namespace);
    }
    if (message.labelSelector !== undefined) {
      writer.uint32(26).string(message.labelSelector);
    }
    if (message.fieldSelector !== undefined) {
      writer.uint32(34).string(message.fieldSelector);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKubernetesEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKubernetesEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clusterName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.labelSelector = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fieldSelector = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKubernetesEventsRequest {
    return {
      clusterName: isSet(object.clusterName) ? globalThis.String(object.clusterName) : undefined,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : undefined,
      labelSelector: isSet(object.labelSelector) ? globalThis.String(object.labelSelector) : undefined,
      fieldSelector: isSet(object.fieldSelector) ? globalThis.String(object.fieldSelector) : undefined,
    };
  },

  toJSON(message: GetKubernetesEventsRequest): unknown {
    const obj: any = {};
    if (message.clusterName !== undefined) {
      obj.clusterName = message.clusterName;
    }
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    if (message.labelSelector !== undefined) {
      obj.labelSelector = message.labelSelector;
    }
    if (message.fieldSelector !== undefined) {
      obj.fieldSelector = message.fieldSelector;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetKubernetesEventsRequest>, I>>(base?: I): GetKubernetesEventsRequest {
    return GetKubernetesEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetKubernetesEventsRequest>, I>>(object: I): GetKubernetesEventsRequest {
    const message = createBaseGetKubernetesEventsRequest();
    message.clusterName = object.clusterName ?? undefined;
    message.namespace = object.namespace ?? undefined;
    message.labelSelector = object.labelSelector ?? undefined;
    message.fieldSelector = object.fieldSelector ?? undefined;
    return message;
  },
};

function createBaseGetKubernetesEventsResponse(): GetKubernetesEventsResponse {
  return { events: [] };
}

export const GetKubernetesEventsResponse: MessageFns<GetKubernetesEventsResponse> = {
  encode(message: GetKubernetesEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      ChalkKubernetesEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKubernetesEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKubernetesEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(ChalkKubernetesEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKubernetesEventsResponse {
    return {
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => ChalkKubernetesEvent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetKubernetesEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ChalkKubernetesEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetKubernetesEventsResponse>, I>>(base?: I): GetKubernetesEventsResponse {
    return GetKubernetesEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetKubernetesEventsResponse>, I>>(object: I): GetKubernetesEventsResponse {
    const message = createBaseGetKubernetesEventsResponse();
    message.events = object.events?.map((e) => ChalkKubernetesEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetKubernetesPersistentVolumesRequest(): GetKubernetesPersistentVolumesRequest {
  return {};
}

export const GetKubernetesPersistentVolumesRequest: MessageFns<GetKubernetesPersistentVolumesRequest> = {
  encode(_: GetKubernetesPersistentVolumesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKubernetesPersistentVolumesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKubernetesPersistentVolumesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetKubernetesPersistentVolumesRequest {
    return {};
  },

  toJSON(_: GetKubernetesPersistentVolumesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetKubernetesPersistentVolumesRequest>, I>>(
    base?: I,
  ): GetKubernetesPersistentVolumesRequest {
    return GetKubernetesPersistentVolumesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetKubernetesPersistentVolumesRequest>, I>>(
    _: I,
  ): GetKubernetesPersistentVolumesRequest {
    const message = createBaseGetKubernetesPersistentVolumesRequest();
    return message;
  },
};

function createBaseGetKubernetesPersistentVolumesResponse(): GetKubernetesPersistentVolumesResponse {
  return { volumes: [] };
}

export const GetKubernetesPersistentVolumesResponse: MessageFns<GetKubernetesPersistentVolumesResponse> = {
  encode(message: GetKubernetesPersistentVolumesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.volumes) {
      ChalkKubernetesPersistentVolume.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKubernetesPersistentVolumesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKubernetesPersistentVolumesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.volumes.push(ChalkKubernetesPersistentVolume.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKubernetesPersistentVolumesResponse {
    return {
      volumes: globalThis.Array.isArray(object?.volumes)
        ? object.volumes.map((e: any) => ChalkKubernetesPersistentVolume.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetKubernetesPersistentVolumesResponse): unknown {
    const obj: any = {};
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => ChalkKubernetesPersistentVolume.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetKubernetesPersistentVolumesResponse>, I>>(
    base?: I,
  ): GetKubernetesPersistentVolumesResponse {
    return GetKubernetesPersistentVolumesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetKubernetesPersistentVolumesResponse>, I>>(
    object: I,
  ): GetKubernetesPersistentVolumesResponse {
    const message = createBaseGetKubernetesPersistentVolumesResponse();
    message.volumes = object.volumes?.map((e) => ChalkKubernetesPersistentVolume.fromPartial(e)) || [];
    return message;
  },
};

export type KubeServiceService = typeof KubeServiceService;
export const KubeServiceService = {
  /**
   * GetPodStackTraceDump gets the stack trace dump from a single process running in a pod
   * The process can be specified either by name or process ID
   */
  getPodStackTraceDump: {
    path: "/chalk.server.v1.KubeService/GetPodStackTraceDump",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPodStackTraceDumpRequest) =>
      Buffer.from(GetPodStackTraceDumpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPodStackTraceDumpRequest.decode(value),
    responseSerialize: (value: GetPodStackTraceDumpResponse) =>
      Buffer.from(GetPodStackTraceDumpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPodStackTraceDumpResponse.decode(value),
  },
  getKubernetesEvents: {
    path: "/chalk.server.v1.KubeService/GetKubernetesEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetKubernetesEventsRequest) =>
      Buffer.from(GetKubernetesEventsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetKubernetesEventsRequest.decode(value),
    responseSerialize: (value: GetKubernetesEventsResponse) =>
      Buffer.from(GetKubernetesEventsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetKubernetesEventsResponse.decode(value),
  },
  getKubernetesPersistentVolumes: {
    path: "/chalk.server.v1.KubeService/GetKubernetesPersistentVolumes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetKubernetesPersistentVolumesRequest) =>
      Buffer.from(GetKubernetesPersistentVolumesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetKubernetesPersistentVolumesRequest.decode(value),
    responseSerialize: (value: GetKubernetesPersistentVolumesResponse) =>
      Buffer.from(GetKubernetesPersistentVolumesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetKubernetesPersistentVolumesResponse.decode(value),
  },
} as const;

export interface KubeServiceServer extends UntypedServiceImplementation {
  /**
   * GetPodStackTraceDump gets the stack trace dump from a single process running in a pod
   * The process can be specified either by name or process ID
   */
  getPodStackTraceDump: handleUnaryCall<GetPodStackTraceDumpRequest, GetPodStackTraceDumpResponse>;
  getKubernetesEvents: handleUnaryCall<GetKubernetesEventsRequest, GetKubernetesEventsResponse>;
  getKubernetesPersistentVolumes: handleUnaryCall<
    GetKubernetesPersistentVolumesRequest,
    GetKubernetesPersistentVolumesResponse
  >;
}

export interface KubeServiceClient extends Client {
  /**
   * GetPodStackTraceDump gets the stack trace dump from a single process running in a pod
   * The process can be specified either by name or process ID
   */
  getPodStackTraceDump(
    request: GetPodStackTraceDumpRequest,
    callback: (error: ServiceError | null, response: GetPodStackTraceDumpResponse) => void,
  ): ClientUnaryCall;
  getPodStackTraceDump(
    request: GetPodStackTraceDumpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPodStackTraceDumpResponse) => void,
  ): ClientUnaryCall;
  getPodStackTraceDump(
    request: GetPodStackTraceDumpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPodStackTraceDumpResponse) => void,
  ): ClientUnaryCall;
  getKubernetesEvents(
    request: GetKubernetesEventsRequest,
    callback: (error: ServiceError | null, response: GetKubernetesEventsResponse) => void,
  ): ClientUnaryCall;
  getKubernetesEvents(
    request: GetKubernetesEventsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetKubernetesEventsResponse) => void,
  ): ClientUnaryCall;
  getKubernetesEvents(
    request: GetKubernetesEventsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetKubernetesEventsResponse) => void,
  ): ClientUnaryCall;
  getKubernetesPersistentVolumes(
    request: GetKubernetesPersistentVolumesRequest,
    callback: (error: ServiceError | null, response: GetKubernetesPersistentVolumesResponse) => void,
  ): ClientUnaryCall;
  getKubernetesPersistentVolumes(
    request: GetKubernetesPersistentVolumesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetKubernetesPersistentVolumesResponse) => void,
  ): ClientUnaryCall;
  getKubernetesPersistentVolumes(
    request: GetKubernetesPersistentVolumesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetKubernetesPersistentVolumesResponse) => void,
  ): ClientUnaryCall;
}

export const KubeServiceClient = makeGenericClientConstructor(
  KubeServiceService,
  "chalk.server.v1.KubeService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): KubeServiceClient;
  service: typeof KubeServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
