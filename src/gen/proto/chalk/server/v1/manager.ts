// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chalk.server.v1";

export interface GetClusterEnvironmentsRequest {
  clusterName: string;
}

export interface GetClusterEnvironmentsResponse {
  environmentIds: string[];
}

function createBaseGetClusterEnvironmentsRequest(): GetClusterEnvironmentsRequest {
  return { clusterName: "" };
}

export const GetClusterEnvironmentsRequest: MessageFns<GetClusterEnvironmentsRequest> = {
  encode(message: GetClusterEnvironmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clusterName !== "") {
      writer.uint32(10).string(message.clusterName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterEnvironmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterEnvironmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clusterName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterEnvironmentsRequest {
    return { clusterName: isSet(object.clusterName) ? globalThis.String(object.clusterName) : "" };
  },

  toJSON(message: GetClusterEnvironmentsRequest): unknown {
    const obj: any = {};
    if (message.clusterName !== "") {
      obj.clusterName = message.clusterName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterEnvironmentsRequest>, I>>(base?: I): GetClusterEnvironmentsRequest {
    return GetClusterEnvironmentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterEnvironmentsRequest>, I>>(
    object: I,
  ): GetClusterEnvironmentsRequest {
    const message = createBaseGetClusterEnvironmentsRequest();
    message.clusterName = object.clusterName ?? "";
    return message;
  },
};

function createBaseGetClusterEnvironmentsResponse(): GetClusterEnvironmentsResponse {
  return { environmentIds: [] };
}

export const GetClusterEnvironmentsResponse: MessageFns<GetClusterEnvironmentsResponse> = {
  encode(message: GetClusterEnvironmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environmentIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClusterEnvironmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterEnvironmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environmentIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterEnvironmentsResponse {
    return {
      environmentIds: globalThis.Array.isArray(object?.environmentIds)
        ? object.environmentIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetClusterEnvironmentsResponse): unknown {
    const obj: any = {};
    if (message.environmentIds?.length) {
      obj.environmentIds = message.environmentIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterEnvironmentsResponse>, I>>(base?: I): GetClusterEnvironmentsResponse {
    return GetClusterEnvironmentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterEnvironmentsResponse>, I>>(
    object: I,
  ): GetClusterEnvironmentsResponse {
    const message = createBaseGetClusterEnvironmentsResponse();
    message.environmentIds = object.environmentIds?.map((e) => e) || [];
    return message;
  },
};

export type ManagerServiceService = typeof ManagerServiceService;
export const ManagerServiceService = {
  /** If any checks fail, this request fails. */
  getClusterEnvironments: {
    path: "/chalk.server.v1.ManagerService/GetClusterEnvironments",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetClusterEnvironmentsRequest) =>
      Buffer.from(GetClusterEnvironmentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetClusterEnvironmentsRequest.decode(value),
    responseSerialize: (value: GetClusterEnvironmentsResponse) =>
      Buffer.from(GetClusterEnvironmentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetClusterEnvironmentsResponse.decode(value),
  },
} as const;

export interface ManagerServiceServer extends UntypedServiceImplementation {
  /** If any checks fail, this request fails. */
  getClusterEnvironments: handleUnaryCall<GetClusterEnvironmentsRequest, GetClusterEnvironmentsResponse>;
}

export interface ManagerServiceClient extends Client {
  /** If any checks fail, this request fails. */
  getClusterEnvironments(
    request: GetClusterEnvironmentsRequest,
    callback: (error: ServiceError | null, response: GetClusterEnvironmentsResponse) => void,
  ): ClientUnaryCall;
  getClusterEnvironments(
    request: GetClusterEnvironmentsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetClusterEnvironmentsResponse) => void,
  ): ClientUnaryCall;
  getClusterEnvironments(
    request: GetClusterEnvironmentsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetClusterEnvironmentsResponse) => void,
  ): ClientUnaryCall;
}

export const ManagerServiceClient = makeGenericClientConstructor(
  ManagerServiceService,
  "chalk.server.v1.ManagerService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ManagerServiceClient;
  service: typeof ManagerServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
