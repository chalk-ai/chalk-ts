// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/audit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Value } from "../../../google/protobuf/struct";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Code, codeFromJSON, codeToJSON } from "../../../google/rpc/code";
import { Agent } from "../../auth/v1/agent";

export const protobufPackage = "chalk.server.v1";

export interface AuditLog {
  /** The agent who made the request. */
  agent:
    | Agent
    | undefined;
  /** A description of the request, taken from the service endpoint */
  description?:
    | string
    | undefined;
  /** The service endpoint that was called */
  endpoint: string;
  /** The time the request was made. */
  at:
    | Date
    | undefined;
  /** The trace ID of the request, if available. */
  traceId?:
    | number
    | undefined;
  /** The status of the request. */
  code?:
    | Code
    | undefined;
  /** The serialized request */
  request: { [key: string]: any | undefined };
  /** The serialized response */
  response: { [key: string]: any | undefined };
  /** The IP address of the client */
  ip?: string | undefined;
}

export interface AuditLog_RequestEntry {
  key: string;
  value: any | undefined;
}

export interface AuditLog_ResponseEntry {
  key: string;
  value: any | undefined;
}

export interface GetAuditLogsRequest {
}

export interface GetAuditLogsResponse {
  logs: AuditLog[];
}

function createBaseAuditLog(): AuditLog {
  return {
    agent: undefined,
    description: undefined,
    endpoint: "",
    at: undefined,
    traceId: undefined,
    code: undefined,
    request: {},
    response: {},
    ip: undefined,
  };
}

export const AuditLog: MessageFns<AuditLog> = {
  encode(message: AuditLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== undefined) {
      Agent.encode(message.agent, writer.uint32(10).fork()).join();
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.endpoint !== "") {
      writer.uint32(26).string(message.endpoint);
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(34).fork()).join();
    }
    if (message.traceId !== undefined) {
      writer.uint32(40).uint64(message.traceId);
    }
    if (message.code !== undefined) {
      writer.uint32(48).int32(message.code);
    }
    Object.entries(message.request).forEach(([key, value]) => {
      if (value !== undefined) {
        AuditLog_RequestEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
      }
    });
    Object.entries(message.response).forEach(([key, value]) => {
      if (value !== undefined) {
        AuditLog_ResponseEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
      }
    });
    if (message.ip !== undefined) {
      writer.uint32(74).string(message.ip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent = Agent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.traceId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = AuditLog_RequestEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.request[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = AuditLog_ResponseEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.response[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLog {
    return {
      agent: isSet(object.agent) ? Agent.fromJSON(object.agent) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
      traceId: isSet(object.traceId) ? globalThis.Number(object.traceId) : undefined,
      code: isSet(object.code) ? codeFromJSON(object.code) : undefined,
      request: isObject(object.request)
        ? Object.entries(object.request).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      response: isObject(object.response)
        ? Object.entries(object.response).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      ip: isSet(object.ip) ? globalThis.String(object.ip) : undefined,
    };
  },

  toJSON(message: AuditLog): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = Agent.toJSON(message.agent);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    if (message.traceId !== undefined) {
      obj.traceId = Math.round(message.traceId);
    }
    if (message.code !== undefined) {
      obj.code = codeToJSON(message.code);
    }
    if (message.request) {
      const entries = Object.entries(message.request);
      if (entries.length > 0) {
        obj.request = {};
        entries.forEach(([k, v]) => {
          obj.request[k] = v;
        });
      }
    }
    if (message.response) {
      const entries = Object.entries(message.response);
      if (entries.length > 0) {
        obj.response = {};
        entries.forEach(([k, v]) => {
          obj.response[k] = v;
        });
      }
    }
    if (message.ip !== undefined) {
      obj.ip = message.ip;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLog>, I>>(base?: I): AuditLog {
    return AuditLog.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLog>, I>>(object: I): AuditLog {
    const message = createBaseAuditLog();
    message.agent = (object.agent !== undefined && object.agent !== null) ? Agent.fromPartial(object.agent) : undefined;
    message.description = object.description ?? undefined;
    message.endpoint = object.endpoint ?? "";
    message.at = object.at ?? undefined;
    message.traceId = object.traceId ?? undefined;
    message.code = object.code ?? undefined;
    message.request = Object.entries(object.request ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.response = Object.entries(object.response ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.ip = object.ip ?? undefined;
    return message;
  },
};

function createBaseAuditLog_RequestEntry(): AuditLog_RequestEntry {
  return { key: "", value: undefined };
}

export const AuditLog_RequestEntry: MessageFns<AuditLog_RequestEntry> = {
  encode(message: AuditLog_RequestEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLog_RequestEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLog_RequestEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLog_RequestEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: AuditLog_RequestEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLog_RequestEntry>, I>>(base?: I): AuditLog_RequestEntry {
    return AuditLog_RequestEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLog_RequestEntry>, I>>(object: I): AuditLog_RequestEntry {
    const message = createBaseAuditLog_RequestEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseAuditLog_ResponseEntry(): AuditLog_ResponseEntry {
  return { key: "", value: undefined };
}

export const AuditLog_ResponseEntry: MessageFns<AuditLog_ResponseEntry> = {
  encode(message: AuditLog_ResponseEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLog_ResponseEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLog_ResponseEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLog_ResponseEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: AuditLog_ResponseEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLog_ResponseEntry>, I>>(base?: I): AuditLog_ResponseEntry {
    return AuditLog_ResponseEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLog_ResponseEntry>, I>>(object: I): AuditLog_ResponseEntry {
    const message = createBaseAuditLog_ResponseEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseGetAuditLogsRequest(): GetAuditLogsRequest {
  return {};
}

export const GetAuditLogsRequest: MessageFns<GetAuditLogsRequest> = {
  encode(_: GetAuditLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuditLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuditLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAuditLogsRequest {
    return {};
  },

  toJSON(_: GetAuditLogsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuditLogsRequest>, I>>(base?: I): GetAuditLogsRequest {
    return GetAuditLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuditLogsRequest>, I>>(_: I): GetAuditLogsRequest {
    const message = createBaseGetAuditLogsRequest();
    return message;
  },
};

function createBaseGetAuditLogsResponse(): GetAuditLogsResponse {
  return { logs: [] };
}

export const GetAuditLogsResponse: MessageFns<GetAuditLogsResponse> = {
  encode(message: GetAuditLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.logs) {
      AuditLog.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuditLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuditLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logs.push(AuditLog.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuditLogsResponse {
    return { logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => AuditLog.fromJSON(e)) : [] };
  },

  toJSON(message: GetAuditLogsResponse): unknown {
    const obj: any = {};
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => AuditLog.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuditLogsResponse>, I>>(base?: I): GetAuditLogsResponse {
    return GetAuditLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuditLogsResponse>, I>>(object: I): GetAuditLogsResponse {
    const message = createBaseGetAuditLogsResponse();
    message.logs = object.logs?.map((e) => AuditLog.fromPartial(e)) || [];
    return message;
  },
};

export type AuditServiceService = typeof AuditServiceService;
export const AuditServiceService = {
  getAuditLogs: {
    path: "/chalk.server.v1.AuditService/GetAuditLogs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAuditLogsRequest) => Buffer.from(GetAuditLogsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAuditLogsRequest.decode(value),
    responseSerialize: (value: GetAuditLogsResponse) => Buffer.from(GetAuditLogsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAuditLogsResponse.decode(value),
  },
} as const;

export interface AuditServiceServer extends UntypedServiceImplementation {
  getAuditLogs: handleUnaryCall<GetAuditLogsRequest, GetAuditLogsResponse>;
}

export interface AuditServiceClient extends Client {
  getAuditLogs(
    request: GetAuditLogsRequest,
    callback: (error: ServiceError | null, response: GetAuditLogsResponse) => void,
  ): ClientUnaryCall;
  getAuditLogs(
    request: GetAuditLogsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAuditLogsResponse) => void,
  ): ClientUnaryCall;
  getAuditLogs(
    request: GetAuditLogsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAuditLogsResponse) => void,
  ): ClientUnaryCall;
}

export const AuditServiceClient = makeGenericClientConstructor(
  AuditServiceService,
  "chalk.server.v1.AuditService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuditServiceClient;
  service: typeof AuditServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
