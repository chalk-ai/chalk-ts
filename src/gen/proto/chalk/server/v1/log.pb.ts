// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/server/v1/log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chalk.server.v1";

export interface LogEntry {
  id: string;
  severity?: string | undefined;
  timestamp: Date | undefined;
  message: string;
}

export interface SearchLogEntriesPageToken {
  nextPageToken: string;
}

export interface SearchLogEntriesRequest {
  query?: string | undefined;
  pageToken?: SearchLogEntriesPageToken | undefined;
}

export interface SearchLogEntriesResponse {
  logEntries: LogEntry[];
  nextPageToken?: SearchLogEntriesPageToken | undefined;
}

function createBaseLogEntry(): LogEntry {
  return { id: "", severity: undefined, timestamp: undefined, message: "" };
}

export const LogEntry: MessageFns<LogEntry> = {
  encode(message: LogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.severity !== undefined) {
      writer.uint32(18).string(message.severity);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.severity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogEntry {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      severity: isSet(object.severity) ? globalThis.String(object.severity) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: LogEntry): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.severity !== undefined) {
      obj.severity = message.severity;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseSearchLogEntriesPageToken(): SearchLogEntriesPageToken {
  return { nextPageToken: "" };
}

export const SearchLogEntriesPageToken: MessageFns<SearchLogEntriesPageToken> = {
  encode(message: SearchLogEntriesPageToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextPageToken !== "") {
      writer.uint32(10).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchLogEntriesPageToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchLogEntriesPageToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchLogEntriesPageToken {
    return { nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "" };
  },

  toJSON(message: SearchLogEntriesPageToken): unknown {
    const obj: any = {};
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },
};

function createBaseSearchLogEntriesRequest(): SearchLogEntriesRequest {
  return { query: undefined, pageToken: undefined };
}

export const SearchLogEntriesRequest: MessageFns<SearchLogEntriesRequest> = {
  encode(message: SearchLogEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      writer.uint32(10).string(message.query);
    }
    if (message.pageToken !== undefined) {
      SearchLogEntriesPageToken.encode(message.pageToken, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchLogEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchLogEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = SearchLogEntriesPageToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchLogEntriesRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : undefined,
      pageToken: isSet(object.pageToken) ? SearchLogEntriesPageToken.fromJSON(object.pageToken) : undefined,
    };
  },

  toJSON(message: SearchLogEntriesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = message.query;
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = SearchLogEntriesPageToken.toJSON(message.pageToken);
    }
    return obj;
  },
};

function createBaseSearchLogEntriesResponse(): SearchLogEntriesResponse {
  return { logEntries: [], nextPageToken: undefined };
}

export const SearchLogEntriesResponse: MessageFns<SearchLogEntriesResponse> = {
  encode(message: SearchLogEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.logEntries) {
      LogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      SearchLogEntriesPageToken.encode(message.nextPageToken, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchLogEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchLogEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logEntries.push(LogEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = SearchLogEntriesPageToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchLogEntriesResponse {
    return {
      logEntries: globalThis.Array.isArray(object?.logEntries)
        ? object.logEntries.map((e: any) => LogEntry.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? SearchLogEntriesPageToken.fromJSON(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: SearchLogEntriesResponse): unknown {
    const obj: any = {};
    if (message.logEntries?.length) {
      obj.logEntries = message.logEntries.map((e) => LogEntry.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = SearchLogEntriesPageToken.toJSON(message.nextPageToken);
    }
    return obj;
  },
};

export type LogSearchServiceService = typeof LogSearchServiceService;
export const LogSearchServiceService = {
  searchLogEntries: {
    path: "/chalk.server.v1.LogSearchService/SearchLogEntries",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchLogEntriesRequest) => Buffer.from(SearchLogEntriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchLogEntriesRequest.decode(value),
    responseSerialize: (value: SearchLogEntriesResponse) =>
      Buffer.from(SearchLogEntriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SearchLogEntriesResponse.decode(value),
  },
} as const;

export interface LogSearchServiceServer extends UntypedServiceImplementation {
  searchLogEntries: handleUnaryCall<SearchLogEntriesRequest, SearchLogEntriesResponse>;
}

export interface LogSearchServiceClient extends Client {
  searchLogEntries(
    request: SearchLogEntriesRequest,
    callback: (error: ServiceError | null, response: SearchLogEntriesResponse) => void,
  ): ClientUnaryCall;
  searchLogEntries(
    request: SearchLogEntriesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchLogEntriesResponse) => void,
  ): ClientUnaryCall;
  searchLogEntries(
    request: SearchLogEntriesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchLogEntriesResponse) => void,
  ): ClientUnaryCall;
}

export const LogSearchServiceClient = makeGenericClientConstructor(
  LogSearchServiceService,
  "chalk.server.v1.LogSearchService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LogSearchServiceClient;
  service: typeof LogSearchServiceService;
  serviceName: string;
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
