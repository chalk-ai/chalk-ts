// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/kubernetes/v1/nodes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.kubernetes.v1";

export interface KubernetesNodeTaint {
  key: string;
  value?: string | undefined;
  effect: string;
  timeAdded?: number | undefined;
}

export interface KubernetesNodeSpec {
  podCidr?: string | undefined;
  taints: KubernetesNodeTaint[];
  podCidrs: string[];
  providerId?: string | undefined;
  unschedulable?: boolean | undefined;
}

export interface KubernetesNodeCondition {
  type: string;
  status: string;
  lastHeartbeatTime: number;
  lastTransitionTime: number;
  reason?: string | undefined;
  message?: string | undefined;
}

export interface KubernetesAttachedVolume {
  name: string;
  devicePath: string;
}

export interface KubernetesNodeStatus {
  conditions: KubernetesNodeCondition[];
  volumesInUse: string[];
  volumesAttached: KubernetesAttachedVolume[];
}

/** InstanceUsage is a message that represents the usage of a single instance. */
export interface KubernetesNodeData {
  /** The Chalk team name that incurred the usage. */
  team: string;
  /** node.Name */
  name: string;
  /** node.UID */
  uid: string;
  /** node.kubernetes.io/instance-type */
  instanceType: string;
  /** topology.kubernetes.io/region */
  region: string;
  /** topology.kubernetes.io/zone */
  zone: string;
  /**
   * The time that the instance was created.
   * node.CreationTimestamp.Unix()
   */
  creationTimestamp: number;
  /**
   * node.DeletionTimestamp.Unix()
   * The time that the instance was deleted. May be 0 if the instance is still running.
   */
  deletionTimestamp: number;
  /** The time that we polled the instance for usage. */
  observedTimestamp: number;
  /** node.Labels */
  labels: { [key: string]: string };
  /** node.Annotations */
  annotations: { [key: string]: string };
  machineId: string;
  systemUuid: string;
  bootId: string;
  unschedulable: boolean;
  namespace: string;
  /** container.googleapis.com/instance_id */
  instanceId: string;
  cluster: string;
  totalCpu: string;
  totalMemory: string;
  allocatableCpu: string;
  allocatableMemory: string;
  spec?: KubernetesNodeSpec | undefined;
  status?: KubernetesNodeStatus | undefined;
}

export interface KubernetesNodeData_LabelsEntry {
  key: string;
  value: string;
}

export interface KubernetesNodeData_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseKubernetesNodeTaint(): KubernetesNodeTaint {
  return { key: "", value: undefined, effect: "", timeAdded: undefined };
}

export const KubernetesNodeTaint: MessageFns<KubernetesNodeTaint> = {
  encode(message: KubernetesNodeTaint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      writer.uint32(18).string(message.value);
    }
    if (message.effect !== "") {
      writer.uint32(26).string(message.effect);
    }
    if (message.timeAdded !== undefined) {
      writer.uint32(32).int64(message.timeAdded);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeTaint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeTaint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.effect = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timeAdded = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeTaint {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      effect: isSet(object.effect) ? globalThis.String(object.effect) : "",
      timeAdded: isSet(object.timeAdded) ? globalThis.Number(object.timeAdded) : undefined,
    };
  },

  toJSON(message: KubernetesNodeTaint): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.effect !== "") {
      obj.effect = message.effect;
    }
    if (message.timeAdded !== undefined) {
      obj.timeAdded = Math.round(message.timeAdded);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeTaint>, I>>(base?: I): KubernetesNodeTaint {
    return KubernetesNodeTaint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeTaint>, I>>(object: I): KubernetesNodeTaint {
    const message = createBaseKubernetesNodeTaint();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    message.effect = object.effect ?? "";
    message.timeAdded = object.timeAdded ?? undefined;
    return message;
  },
};

function createBaseKubernetesNodeSpec(): KubernetesNodeSpec {
  return { podCidr: undefined, taints: [], podCidrs: [], providerId: undefined, unschedulable: undefined };
}

export const KubernetesNodeSpec: MessageFns<KubernetesNodeSpec> = {
  encode(message: KubernetesNodeSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.podCidr !== undefined) {
      writer.uint32(10).string(message.podCidr);
    }
    for (const v of message.taints) {
      KubernetesNodeTaint.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.podCidrs) {
      writer.uint32(26).string(v!);
    }
    if (message.providerId !== undefined) {
      writer.uint32(34).string(message.providerId);
    }
    if (message.unschedulable !== undefined) {
      writer.uint32(40).bool(message.unschedulable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.podCidr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.taints.push(KubernetesNodeTaint.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.podCidrs.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.unschedulable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeSpec {
    return {
      podCidr: isSet(object.podCidr) ? globalThis.String(object.podCidr) : undefined,
      taints: globalThis.Array.isArray(object?.taints)
        ? object.taints.map((e: any) => KubernetesNodeTaint.fromJSON(e))
        : [],
      podCidrs: globalThis.Array.isArray(object?.podCidrs) ? object.podCidrs.map((e: any) => globalThis.String(e)) : [],
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : undefined,
      unschedulable: isSet(object.unschedulable) ? globalThis.Boolean(object.unschedulable) : undefined,
    };
  },

  toJSON(message: KubernetesNodeSpec): unknown {
    const obj: any = {};
    if (message.podCidr !== undefined) {
      obj.podCidr = message.podCidr;
    }
    if (message.taints?.length) {
      obj.taints = message.taints.map((e) => KubernetesNodeTaint.toJSON(e));
    }
    if (message.podCidrs?.length) {
      obj.podCidrs = message.podCidrs;
    }
    if (message.providerId !== undefined) {
      obj.providerId = message.providerId;
    }
    if (message.unschedulable !== undefined) {
      obj.unschedulable = message.unschedulable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeSpec>, I>>(base?: I): KubernetesNodeSpec {
    return KubernetesNodeSpec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeSpec>, I>>(object: I): KubernetesNodeSpec {
    const message = createBaseKubernetesNodeSpec();
    message.podCidr = object.podCidr ?? undefined;
    message.taints = object.taints?.map((e) => KubernetesNodeTaint.fromPartial(e)) || [];
    message.podCidrs = object.podCidrs?.map((e) => e) || [];
    message.providerId = object.providerId ?? undefined;
    message.unschedulable = object.unschedulable ?? undefined;
    return message;
  },
};

function createBaseKubernetesNodeCondition(): KubernetesNodeCondition {
  return { type: "", status: "", lastHeartbeatTime: 0, lastTransitionTime: 0, reason: undefined, message: undefined };
}

export const KubernetesNodeCondition: MessageFns<KubernetesNodeCondition> = {
  encode(message: KubernetesNodeCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.lastHeartbeatTime !== 0) {
      writer.uint32(24).int64(message.lastHeartbeatTime);
    }
    if (message.lastTransitionTime !== 0) {
      writer.uint32(32).int64(message.lastTransitionTime);
    }
    if (message.reason !== undefined) {
      writer.uint32(42).string(message.reason);
    }
    if (message.message !== undefined) {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lastHeartbeatTime = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastTransitionTime = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeCondition {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      lastHeartbeatTime: isSet(object.lastHeartbeatTime) ? globalThis.Number(object.lastHeartbeatTime) : 0,
      lastTransitionTime: isSet(object.lastTransitionTime) ? globalThis.Number(object.lastTransitionTime) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: KubernetesNodeCondition): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.lastHeartbeatTime !== 0) {
      obj.lastHeartbeatTime = Math.round(message.lastHeartbeatTime);
    }
    if (message.lastTransitionTime !== 0) {
      obj.lastTransitionTime = Math.round(message.lastTransitionTime);
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeCondition>, I>>(base?: I): KubernetesNodeCondition {
    return KubernetesNodeCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeCondition>, I>>(object: I): KubernetesNodeCondition {
    const message = createBaseKubernetesNodeCondition();
    message.type = object.type ?? "";
    message.status = object.status ?? "";
    message.lastHeartbeatTime = object.lastHeartbeatTime ?? 0;
    message.lastTransitionTime = object.lastTransitionTime ?? 0;
    message.reason = object.reason ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseKubernetesAttachedVolume(): KubernetesAttachedVolume {
  return { name: "", devicePath: "" };
}

export const KubernetesAttachedVolume: MessageFns<KubernetesAttachedVolume> = {
  encode(message: KubernetesAttachedVolume, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.devicePath !== "") {
      writer.uint32(18).string(message.devicePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesAttachedVolume {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesAttachedVolume();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.devicePath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesAttachedVolume {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      devicePath: isSet(object.devicePath) ? globalThis.String(object.devicePath) : "",
    };
  },

  toJSON(message: KubernetesAttachedVolume): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.devicePath !== "") {
      obj.devicePath = message.devicePath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesAttachedVolume>, I>>(base?: I): KubernetesAttachedVolume {
    return KubernetesAttachedVolume.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesAttachedVolume>, I>>(object: I): KubernetesAttachedVolume {
    const message = createBaseKubernetesAttachedVolume();
    message.name = object.name ?? "";
    message.devicePath = object.devicePath ?? "";
    return message;
  },
};

function createBaseKubernetesNodeStatus(): KubernetesNodeStatus {
  return { conditions: [], volumesInUse: [], volumesAttached: [] };
}

export const KubernetesNodeStatus: MessageFns<KubernetesNodeStatus> = {
  encode(message: KubernetesNodeStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conditions) {
      KubernetesNodeCondition.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.volumesInUse) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.volumesAttached) {
      KubernetesAttachedVolume.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conditions.push(KubernetesNodeCondition.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.volumesInUse.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.volumesAttached.push(KubernetesAttachedVolume.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeStatus {
    return {
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => KubernetesNodeCondition.fromJSON(e))
        : [],
      volumesInUse: globalThis.Array.isArray(object?.volumesInUse)
        ? object.volumesInUse.map((e: any) => globalThis.String(e))
        : [],
      volumesAttached: globalThis.Array.isArray(object?.volumesAttached)
        ? object.volumesAttached.map((e: any) => KubernetesAttachedVolume.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KubernetesNodeStatus): unknown {
    const obj: any = {};
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => KubernetesNodeCondition.toJSON(e));
    }
    if (message.volumesInUse?.length) {
      obj.volumesInUse = message.volumesInUse;
    }
    if (message.volumesAttached?.length) {
      obj.volumesAttached = message.volumesAttached.map((e) => KubernetesAttachedVolume.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeStatus>, I>>(base?: I): KubernetesNodeStatus {
    return KubernetesNodeStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeStatus>, I>>(object: I): KubernetesNodeStatus {
    const message = createBaseKubernetesNodeStatus();
    message.conditions = object.conditions?.map((e) => KubernetesNodeCondition.fromPartial(e)) || [];
    message.volumesInUse = object.volumesInUse?.map((e) => e) || [];
    message.volumesAttached = object.volumesAttached?.map((e) => KubernetesAttachedVolume.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKubernetesNodeData(): KubernetesNodeData {
  return {
    team: "",
    name: "",
    uid: "",
    instanceType: "",
    region: "",
    zone: "",
    creationTimestamp: 0,
    deletionTimestamp: 0,
    observedTimestamp: 0,
    labels: {},
    annotations: {},
    machineId: "",
    systemUuid: "",
    bootId: "",
    unschedulable: false,
    namespace: "",
    instanceId: "",
    cluster: "",
    totalCpu: "",
    totalMemory: "",
    allocatableCpu: "",
    allocatableMemory: "",
    spec: undefined,
    status: undefined,
  };
}

export const KubernetesNodeData: MessageFns<KubernetesNodeData> = {
  encode(message: KubernetesNodeData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.team !== "") {
      writer.uint32(10).string(message.team);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(26).string(message.uid);
    }
    if (message.instanceType !== "") {
      writer.uint32(34).string(message.instanceType);
    }
    if (message.region !== "") {
      writer.uint32(42).string(message.region);
    }
    if (message.zone !== "") {
      writer.uint32(50).string(message.zone);
    }
    if (message.creationTimestamp !== 0) {
      writer.uint32(64).int64(message.creationTimestamp);
    }
    if (message.deletionTimestamp !== 0) {
      writer.uint32(72).int64(message.deletionTimestamp);
    }
    if (message.observedTimestamp !== 0) {
      writer.uint32(80).int64(message.observedTimestamp);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      KubernetesNodeData_LabelsEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      KubernetesNodeData_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.machineId !== "") {
      writer.uint32(106).string(message.machineId);
    }
    if (message.systemUuid !== "") {
      writer.uint32(114).string(message.systemUuid);
    }
    if (message.bootId !== "") {
      writer.uint32(122).string(message.bootId);
    }
    if (message.unschedulable !== false) {
      writer.uint32(128).bool(message.unschedulable);
    }
    if (message.namespace !== "") {
      writer.uint32(138).string(message.namespace);
    }
    if (message.instanceId !== "") {
      writer.uint32(146).string(message.instanceId);
    }
    if (message.cluster !== "") {
      writer.uint32(154).string(message.cluster);
    }
    if (message.totalCpu !== "") {
      writer.uint32(162).string(message.totalCpu);
    }
    if (message.totalMemory !== "") {
      writer.uint32(170).string(message.totalMemory);
    }
    if (message.allocatableCpu !== "") {
      writer.uint32(178).string(message.allocatableCpu);
    }
    if (message.allocatableMemory !== "") {
      writer.uint32(186).string(message.allocatableMemory);
    }
    if (message.spec !== undefined) {
      KubernetesNodeSpec.encode(message.spec, writer.uint32(194).fork()).join();
    }
    if (message.status !== undefined) {
      KubernetesNodeStatus.encode(message.status, writer.uint32(202).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.team = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.instanceType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.creationTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.deletionTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.observedTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          const entry11 = KubernetesNodeData_LabelsEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.labels[entry11.key] = entry11.value;
          }
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          const entry12 = KubernetesNodeData_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.annotations[entry12.key] = entry12.value;
          }
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.machineId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.systemUuid = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.bootId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.unschedulable = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.cluster = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.totalCpu = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.totalMemory = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.allocatableCpu = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.allocatableMemory = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.spec = KubernetesNodeSpec.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.status = KubernetesNodeStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeData {
    return {
      team: isSet(object.team) ? globalThis.String(object.team) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      instanceType: isSet(object.instanceType) ? globalThis.String(object.instanceType) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      creationTimestamp: isSet(object.creationTimestamp) ? globalThis.Number(object.creationTimestamp) : 0,
      deletionTimestamp: isSet(object.deletionTimestamp) ? globalThis.Number(object.deletionTimestamp) : 0,
      observedTimestamp: isSet(object.observedTimestamp) ? globalThis.Number(object.observedTimestamp) : 0,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      machineId: isSet(object.machineId) ? globalThis.String(object.machineId) : "",
      systemUuid: isSet(object.systemUuid) ? globalThis.String(object.systemUuid) : "",
      bootId: isSet(object.bootId) ? globalThis.String(object.bootId) : "",
      unschedulable: isSet(object.unschedulable) ? globalThis.Boolean(object.unschedulable) : false,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "",
      totalCpu: isSet(object.totalCpu) ? globalThis.String(object.totalCpu) : "",
      totalMemory: isSet(object.totalMemory) ? globalThis.String(object.totalMemory) : "",
      allocatableCpu: isSet(object.allocatableCpu) ? globalThis.String(object.allocatableCpu) : "",
      allocatableMemory: isSet(object.allocatableMemory) ? globalThis.String(object.allocatableMemory) : "",
      spec: isSet(object.spec) ? KubernetesNodeSpec.fromJSON(object.spec) : undefined,
      status: isSet(object.status) ? KubernetesNodeStatus.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: KubernetesNodeData): unknown {
    const obj: any = {};
    if (message.team !== "") {
      obj.team = message.team;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.instanceType !== "") {
      obj.instanceType = message.instanceType;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.creationTimestamp !== 0) {
      obj.creationTimestamp = Math.round(message.creationTimestamp);
    }
    if (message.deletionTimestamp !== 0) {
      obj.deletionTimestamp = Math.round(message.deletionTimestamp);
    }
    if (message.observedTimestamp !== 0) {
      obj.observedTimestamp = Math.round(message.observedTimestamp);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.machineId !== "") {
      obj.machineId = message.machineId;
    }
    if (message.systemUuid !== "") {
      obj.systemUuid = message.systemUuid;
    }
    if (message.bootId !== "") {
      obj.bootId = message.bootId;
    }
    if (message.unschedulable !== false) {
      obj.unschedulable = message.unschedulable;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    if (message.totalCpu !== "") {
      obj.totalCpu = message.totalCpu;
    }
    if (message.totalMemory !== "") {
      obj.totalMemory = message.totalMemory;
    }
    if (message.allocatableCpu !== "") {
      obj.allocatableCpu = message.allocatableCpu;
    }
    if (message.allocatableMemory !== "") {
      obj.allocatableMemory = message.allocatableMemory;
    }
    if (message.spec !== undefined) {
      obj.spec = KubernetesNodeSpec.toJSON(message.spec);
    }
    if (message.status !== undefined) {
      obj.status = KubernetesNodeStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeData>, I>>(base?: I): KubernetesNodeData {
    return KubernetesNodeData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeData>, I>>(object: I): KubernetesNodeData {
    const message = createBaseKubernetesNodeData();
    message.team = object.team ?? "";
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.instanceType = object.instanceType ?? "";
    message.region = object.region ?? "";
    message.zone = object.zone ?? "";
    message.creationTimestamp = object.creationTimestamp ?? 0;
    message.deletionTimestamp = object.deletionTimestamp ?? 0;
    message.observedTimestamp = object.observedTimestamp ?? 0;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.machineId = object.machineId ?? "";
    message.systemUuid = object.systemUuid ?? "";
    message.bootId = object.bootId ?? "";
    message.unschedulable = object.unschedulable ?? false;
    message.namespace = object.namespace ?? "";
    message.instanceId = object.instanceId ?? "";
    message.cluster = object.cluster ?? "";
    message.totalCpu = object.totalCpu ?? "";
    message.totalMemory = object.totalMemory ?? "";
    message.allocatableCpu = object.allocatableCpu ?? "";
    message.allocatableMemory = object.allocatableMemory ?? "";
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? KubernetesNodeSpec.fromPartial(object.spec)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? KubernetesNodeStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseKubernetesNodeData_LabelsEntry(): KubernetesNodeData_LabelsEntry {
  return { key: "", value: "" };
}

export const KubernetesNodeData_LabelsEntry: MessageFns<KubernetesNodeData_LabelsEntry> = {
  encode(message: KubernetesNodeData_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeData_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeData_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeData_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KubernetesNodeData_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeData_LabelsEntry>, I>>(base?: I): KubernetesNodeData_LabelsEntry {
    return KubernetesNodeData_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeData_LabelsEntry>, I>>(
    object: I,
  ): KubernetesNodeData_LabelsEntry {
    const message = createBaseKubernetesNodeData_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKubernetesNodeData_AnnotationsEntry(): KubernetesNodeData_AnnotationsEntry {
  return { key: "", value: "" };
}

export const KubernetesNodeData_AnnotationsEntry: MessageFns<KubernetesNodeData_AnnotationsEntry> = {
  encode(message: KubernetesNodeData_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KubernetesNodeData_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKubernetesNodeData_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KubernetesNodeData_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KubernetesNodeData_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KubernetesNodeData_AnnotationsEntry>, I>>(
    base?: I,
  ): KubernetesNodeData_AnnotationsEntry {
    return KubernetesNodeData_AnnotationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KubernetesNodeData_AnnotationsEntry>, I>>(
    object: I,
  ): KubernetesNodeData_AnnotationsEntry {
    const message = createBaseKubernetesNodeData_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
