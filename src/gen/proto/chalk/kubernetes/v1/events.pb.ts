// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/kubernetes/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.kubernetes.v1";

export interface ChalkKubernetesEventSeries {
  count: number;
  lastObservedTime: number;
}

export interface ChalkKubernetesEvent {
  type: string;
  reason: string;
  action: string;
  reportingController: string;
  eventTime: number;
  note?: string | undefined;
  series?: ChalkKubernetesEventSeries | undefined;
}

function createBaseChalkKubernetesEventSeries(): ChalkKubernetesEventSeries {
  return { count: 0, lastObservedTime: 0 };
}

export const ChalkKubernetesEventSeries: MessageFns<ChalkKubernetesEventSeries> = {
  encode(message: ChalkKubernetesEventSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).int32(message.count);
    }
    if (message.lastObservedTime !== 0) {
      writer.uint32(16).int64(message.lastObservedTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChalkKubernetesEventSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChalkKubernetesEventSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastObservedTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChalkKubernetesEventSeries {
    return {
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      lastObservedTime: isSet(object.lastObservedTime) ? globalThis.Number(object.lastObservedTime) : 0,
    };
  },

  toJSON(message: ChalkKubernetesEventSeries): unknown {
    const obj: any = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.lastObservedTime !== 0) {
      obj.lastObservedTime = Math.round(message.lastObservedTime);
    }
    return obj;
  },
};

function createBaseChalkKubernetesEvent(): ChalkKubernetesEvent {
  return {
    type: "",
    reason: "",
    action: "",
    reportingController: "",
    eventTime: 0,
    note: undefined,
    series: undefined,
  };
}

export const ChalkKubernetesEvent: MessageFns<ChalkKubernetesEvent> = {
  encode(message: ChalkKubernetesEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    if (message.action !== "") {
      writer.uint32(26).string(message.action);
    }
    if (message.reportingController !== "") {
      writer.uint32(34).string(message.reportingController);
    }
    if (message.eventTime !== 0) {
      writer.uint32(40).int64(message.eventTime);
    }
    if (message.note !== undefined) {
      writer.uint32(50).string(message.note);
    }
    if (message.series !== undefined) {
      ChalkKubernetesEventSeries.encode(message.series, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChalkKubernetesEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChalkKubernetesEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reportingController = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.eventTime = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.series = ChalkKubernetesEventSeries.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChalkKubernetesEvent {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      reportingController: isSet(object.reportingController) ? globalThis.String(object.reportingController) : "",
      eventTime: isSet(object.eventTime) ? globalThis.Number(object.eventTime) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      series: isSet(object.series) ? ChalkKubernetesEventSeries.fromJSON(object.series) : undefined,
    };
  },

  toJSON(message: ChalkKubernetesEvent): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.reportingController !== "") {
      obj.reportingController = message.reportingController;
    }
    if (message.eventTime !== 0) {
      obj.eventTime = Math.round(message.eventTime);
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.series !== undefined) {
      obj.series = ChalkKubernetesEventSeries.toJSON(message.series);
    }
    return obj;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
