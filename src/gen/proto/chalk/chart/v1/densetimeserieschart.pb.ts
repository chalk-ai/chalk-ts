// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/chart/v1/densetimeserieschart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";
import { ScalarValue } from "../../arrow/v1/arrow.pb";

export const protobufPackage = "chalk.chart.v1";

export interface DensePoint {
  /** wrapped in a Point to allow for optional (empty space in time series) */
  value?: number | undefined;
}

/**
 * If this series was created as part of a group-by(s)
 * This stores extra information about which ones and what value it pertains to
 */
export interface GroupTag {
  groupKey: string;
  value: ScalarValue | undefined;
}

export interface DenseTimeSeries {
  points: DensePoint[];
  label: string;
  unit: string;
  groupTags: GroupTag[];
}

/**
 * A representation of a densely encoded chart, suitable for time series where the series
 * have mostly non-null values.
 * Consider implementing a sparse chart if not every series has data at every tick
 */
export interface DenseTimeSeriesChart {
  title: string;
  series: DenseTimeSeries[];
  xSeries: Date[];
  windowPeriod: Duration | undefined;
}

function createBaseDensePoint(): DensePoint {
  return { value: undefined };
}

export const DensePoint: MessageFns<DensePoint> = {
  encode(message: DensePoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DensePoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDensePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DensePoint {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: DensePoint): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseGroupTag(): GroupTag {
  return { groupKey: "", value: undefined };
}

export const GroupTag: MessageFns<GroupTag> = {
  encode(message: GroupTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupKey !== "") {
      writer.uint32(10).string(message.groupKey);
    }
    if (message.value !== undefined) {
      ScalarValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ScalarValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupTag {
    return {
      groupKey: isSet(object.groupKey) ? globalThis.String(object.groupKey) : "",
      value: isSet(object.value) ? ScalarValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GroupTag): unknown {
    const obj: any = {};
    if (message.groupKey !== "") {
      obj.groupKey = message.groupKey;
    }
    if (message.value !== undefined) {
      obj.value = ScalarValue.toJSON(message.value);
    }
    return obj;
  },
};

function createBaseDenseTimeSeries(): DenseTimeSeries {
  return { points: [], label: "", unit: "", groupTags: [] };
}

export const DenseTimeSeries: MessageFns<DenseTimeSeries> = {
  encode(message: DenseTimeSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      DensePoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.unit !== "") {
      writer.uint32(26).string(message.unit);
    }
    for (const v of message.groupTags) {
      GroupTag.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenseTimeSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenseTimeSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(DensePoint.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupTags.push(GroupTag.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenseTimeSeries {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => DensePoint.fromJSON(e)) : [],
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      groupTags: globalThis.Array.isArray(object?.groupTags)
        ? object.groupTags.map((e: any) => GroupTag.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DenseTimeSeries): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => DensePoint.toJSON(e));
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.groupTags?.length) {
      obj.groupTags = message.groupTags.map((e) => GroupTag.toJSON(e));
    }
    return obj;
  },
};

function createBaseDenseTimeSeriesChart(): DenseTimeSeriesChart {
  return { title: "", series: [], xSeries: [], windowPeriod: undefined };
}

export const DenseTimeSeriesChart: MessageFns<DenseTimeSeriesChart> = {
  encode(message: DenseTimeSeriesChart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.series) {
      DenseTimeSeries.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.xSeries) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(26).fork()).join();
    }
    if (message.windowPeriod !== undefined) {
      Duration.encode(message.windowPeriod, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenseTimeSeriesChart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenseTimeSeriesChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(DenseTimeSeries.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xSeries.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.windowPeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenseTimeSeriesChart {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      series: globalThis.Array.isArray(object?.series)
        ? object.series.map((e: any) => DenseTimeSeries.fromJSON(e))
        : [],
      xSeries: globalThis.Array.isArray(object?.xSeries) ? object.xSeries.map((e: any) => fromJsonTimestamp(e)) : [],
      windowPeriod: isSet(object.windowPeriod) ? Duration.fromJSON(object.windowPeriod) : undefined,
    };
  },

  toJSON(message: DenseTimeSeriesChart): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => DenseTimeSeries.toJSON(e));
    }
    if (message.xSeries?.length) {
      obj.xSeries = message.xSeries.map((e) => e.toISOString());
    }
    if (message.windowPeriod !== undefined) {
      obj.windowPeriod = Duration.toJSON(message.windowPeriod);
    }
    return obj;
  },
};

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
