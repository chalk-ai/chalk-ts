// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/graph/v2/sources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../../google/protobuf/struct";

export const protobufPackage = "chalk.graph.v2";

/** Pointer to an underlying database source -- used by native sql resolvers to identify which DB they are for */
export interface DatabaseSourceReference {
  /** The type of the database source -- e.g. postgres, bigquery */
  sourceType: string;
  /** The (customer provided) name for the database source. The default source for the given type is represented by the empty string */
  name: string;
}

export interface DatabaseSource {
  /** The type of the database source -- e.g. postgres, bigquery */
  sourceType: string;
  /** The (customer provided) name for the database source. The default source for the given type is represented by the empty string */
  name: string;
  /** Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE. */
  options: { [key: string]: any | undefined };
}

export interface DatabaseSource_OptionsEntry {
  key: string;
  value: any | undefined;
}

export interface DatabaseSourceGroup {
  name: string;
  defaultSource: DatabaseSourceReference | undefined;
  taggedSources: { [key: string]: DatabaseSourceReference };
}

export interface DatabaseSourceGroup_TaggedSourcesEntry {
  key: string;
  value: DatabaseSourceReference | undefined;
}

/** Pointer to an underlying stream source -- used by stream resolvers */
export interface StreamSourceReference {
  /** The type of the stream source -- e.g. kafka, pubsub, sqs */
  sourceType: string;
  /** The (customer provided) name for the stream source. The default source for the given type is represented by the empty string */
  name: string;
}

export interface StreamSource {
  /** The type of the stream source -- e.g. kafka, pubsub, sqs */
  sourceType: string;
  /** The (customer provided) name for the stream source. The default source for the given type is represented by the empty string */
  name: string;
  /** Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE. */
  options: { [key: string]: any | undefined };
}

export interface StreamSource_OptionsEntry {
  key: string;
  value: any | undefined;
}

export interface SourceSecrets {
  /** Secrets for sql and stream sources, in the style of integration variables */
  secrets: { [key: string]: string };
}

export interface SourceSecrets_SecretsEntry {
  key: string;
  value: string;
}

function createBaseDatabaseSourceReference(): DatabaseSourceReference {
  return { sourceType: "", name: "" };
}

export const DatabaseSourceReference: MessageFns<DatabaseSourceReference> = {
  encode(message: DatabaseSourceReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== "") {
      writer.uint32(10).string(message.sourceType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSourceReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSourceReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSourceReference {
    return {
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: DatabaseSourceReference): unknown {
    const obj: any = {};
    if (message.sourceType !== "") {
      obj.sourceType = message.sourceType;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatabaseSourceReference>, I>>(base?: I): DatabaseSourceReference {
    return DatabaseSourceReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatabaseSourceReference>, I>>(object: I): DatabaseSourceReference {
    const message = createBaseDatabaseSourceReference();
    message.sourceType = object.sourceType ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDatabaseSource(): DatabaseSource {
  return { sourceType: "", name: "", options: {} };
}

export const DatabaseSource: MessageFns<DatabaseSource> = {
  encode(message: DatabaseSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== "") {
      writer.uint32(10).string(message.sourceType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.options).forEach(([key, value]) => {
      if (value !== undefined) {
        DatabaseSource_OptionsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = DatabaseSource_OptionsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.options[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSource {
    return {
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DatabaseSource): unknown {
    const obj: any = {};
    if (message.sourceType !== "") {
      obj.sourceType = message.sourceType;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatabaseSource>, I>>(base?: I): DatabaseSource {
    return DatabaseSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatabaseSource>, I>>(object: I): DatabaseSource {
    const message = createBaseDatabaseSource();
    message.sourceType = object.sourceType ?? "";
    message.name = object.name ?? "";
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDatabaseSource_OptionsEntry(): DatabaseSource_OptionsEntry {
  return { key: "", value: undefined };
}

export const DatabaseSource_OptionsEntry: MessageFns<DatabaseSource_OptionsEntry> = {
  encode(message: DatabaseSource_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSource_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSource_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSource_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: DatabaseSource_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatabaseSource_OptionsEntry>, I>>(base?: I): DatabaseSource_OptionsEntry {
    return DatabaseSource_OptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatabaseSource_OptionsEntry>, I>>(object: I): DatabaseSource_OptionsEntry {
    const message = createBaseDatabaseSource_OptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseDatabaseSourceGroup(): DatabaseSourceGroup {
  return { name: "", defaultSource: undefined, taggedSources: {} };
}

export const DatabaseSourceGroup: MessageFns<DatabaseSourceGroup> = {
  encode(message: DatabaseSourceGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.defaultSource !== undefined) {
      DatabaseSourceReference.encode(message.defaultSource, writer.uint32(18).fork()).join();
    }
    Object.entries(message.taggedSources).forEach(([key, value]) => {
      DatabaseSourceGroup_TaggedSourcesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSourceGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSourceGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultSource = DatabaseSourceReference.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = DatabaseSourceGroup_TaggedSourcesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.taggedSources[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSourceGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      defaultSource: isSet(object.defaultSource) ? DatabaseSourceReference.fromJSON(object.defaultSource) : undefined,
      taggedSources: isObject(object.taggedSources)
        ? Object.entries(object.taggedSources).reduce<{ [key: string]: DatabaseSourceReference }>(
          (acc, [key, value]) => {
            acc[key] = DatabaseSourceReference.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: DatabaseSourceGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.defaultSource !== undefined) {
      obj.defaultSource = DatabaseSourceReference.toJSON(message.defaultSource);
    }
    if (message.taggedSources) {
      const entries = Object.entries(message.taggedSources);
      if (entries.length > 0) {
        obj.taggedSources = {};
        entries.forEach(([k, v]) => {
          obj.taggedSources[k] = DatabaseSourceReference.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatabaseSourceGroup>, I>>(base?: I): DatabaseSourceGroup {
    return DatabaseSourceGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatabaseSourceGroup>, I>>(object: I): DatabaseSourceGroup {
    const message = createBaseDatabaseSourceGroup();
    message.name = object.name ?? "";
    message.defaultSource = (object.defaultSource !== undefined && object.defaultSource !== null)
      ? DatabaseSourceReference.fromPartial(object.defaultSource)
      : undefined;
    message.taggedSources = Object.entries(object.taggedSources ?? {}).reduce<
      { [key: string]: DatabaseSourceReference }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = DatabaseSourceReference.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseDatabaseSourceGroup_TaggedSourcesEntry(): DatabaseSourceGroup_TaggedSourcesEntry {
  return { key: "", value: undefined };
}

export const DatabaseSourceGroup_TaggedSourcesEntry: MessageFns<DatabaseSourceGroup_TaggedSourcesEntry> = {
  encode(message: DatabaseSourceGroup_TaggedSourcesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      DatabaseSourceReference.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSourceGroup_TaggedSourcesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSourceGroup_TaggedSourcesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = DatabaseSourceReference.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSourceGroup_TaggedSourcesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? DatabaseSourceReference.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: DatabaseSourceGroup_TaggedSourcesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = DatabaseSourceReference.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatabaseSourceGroup_TaggedSourcesEntry>, I>>(
    base?: I,
  ): DatabaseSourceGroup_TaggedSourcesEntry {
    return DatabaseSourceGroup_TaggedSourcesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatabaseSourceGroup_TaggedSourcesEntry>, I>>(
    object: I,
  ): DatabaseSourceGroup_TaggedSourcesEntry {
    const message = createBaseDatabaseSourceGroup_TaggedSourcesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? DatabaseSourceReference.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseStreamSourceReference(): StreamSourceReference {
  return { sourceType: "", name: "" };
}

export const StreamSourceReference: MessageFns<StreamSourceReference> = {
  encode(message: StreamSourceReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== "") {
      writer.uint32(10).string(message.sourceType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamSourceReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamSourceReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamSourceReference {
    return {
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: StreamSourceReference): unknown {
    const obj: any = {};
    if (message.sourceType !== "") {
      obj.sourceType = message.sourceType;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamSourceReference>, I>>(base?: I): StreamSourceReference {
    return StreamSourceReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamSourceReference>, I>>(object: I): StreamSourceReference {
    const message = createBaseStreamSourceReference();
    message.sourceType = object.sourceType ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStreamSource(): StreamSource {
  return { sourceType: "", name: "", options: {} };
}

export const StreamSource: MessageFns<StreamSource> = {
  encode(message: StreamSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== "") {
      writer.uint32(10).string(message.sourceType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.options).forEach(([key, value]) => {
      if (value !== undefined) {
        StreamSource_OptionsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = StreamSource_OptionsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.options[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamSource {
    return {
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: StreamSource): unknown {
    const obj: any = {};
    if (message.sourceType !== "") {
      obj.sourceType = message.sourceType;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamSource>, I>>(base?: I): StreamSource {
    return StreamSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamSource>, I>>(object: I): StreamSource {
    const message = createBaseStreamSource();
    message.sourceType = object.sourceType ?? "";
    message.name = object.name ?? "";
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseStreamSource_OptionsEntry(): StreamSource_OptionsEntry {
  return { key: "", value: undefined };
}

export const StreamSource_OptionsEntry: MessageFns<StreamSource_OptionsEntry> = {
  encode(message: StreamSource_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamSource_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamSource_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamSource_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: StreamSource_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamSource_OptionsEntry>, I>>(base?: I): StreamSource_OptionsEntry {
    return StreamSource_OptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamSource_OptionsEntry>, I>>(object: I): StreamSource_OptionsEntry {
    const message = createBaseStreamSource_OptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseSourceSecrets(): SourceSecrets {
  return { secrets: {} };
}

export const SourceSecrets: MessageFns<SourceSecrets> = {
  encode(message: SourceSecrets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.secrets).forEach(([key, value]) => {
      SourceSecrets_SecretsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceSecrets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceSecrets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = SourceSecrets_SecretsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.secrets[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceSecrets {
    return {
      secrets: isObject(object.secrets)
        ? Object.entries(object.secrets).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SourceSecrets): unknown {
    const obj: any = {};
    if (message.secrets) {
      const entries = Object.entries(message.secrets);
      if (entries.length > 0) {
        obj.secrets = {};
        entries.forEach(([k, v]) => {
          obj.secrets[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceSecrets>, I>>(base?: I): SourceSecrets {
    return SourceSecrets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceSecrets>, I>>(object: I): SourceSecrets {
    const message = createBaseSourceSecrets();
    message.secrets = Object.entries(object.secrets ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSourceSecrets_SecretsEntry(): SourceSecrets_SecretsEntry {
  return { key: "", value: "" };
}

export const SourceSecrets_SecretsEntry: MessageFns<SourceSecrets_SecretsEntry> = {
  encode(message: SourceSecrets_SecretsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceSecrets_SecretsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceSecrets_SecretsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceSecrets_SecretsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SourceSecrets_SecretsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceSecrets_SecretsEntry>, I>>(base?: I): SourceSecrets_SecretsEntry {
    return SourceSecrets_SecretsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceSecrets_SecretsEntry>, I>>(object: I): SourceSecrets_SecretsEntry {
    const message = createBaseSourceSecrets_SecretsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
