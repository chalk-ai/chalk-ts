// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/usage/v1/rate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.usage.v1";

/** Cloud represents a cloud provider. */
export enum BillingCloud {
  BILLING_CLOUD_UNSPECIFIED = 0,
  BILLING_CLOUD_AWS = 1,
  BILLING_CLOUD_GCP = 2,
  UNRECOGNIZED = -1,
}

export function billingCloudFromJSON(object: any): BillingCloud {
  switch (object) {
    case 0:
    case "BILLING_CLOUD_UNSPECIFIED":
      return BillingCloud.BILLING_CLOUD_UNSPECIFIED;
    case 1:
    case "BILLING_CLOUD_AWS":
      return BillingCloud.BILLING_CLOUD_AWS;
    case 2:
    case "BILLING_CLOUD_GCP":
      return BillingCloud.BILLING_CLOUD_GCP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BillingCloud.UNRECOGNIZED;
  }
}

export function billingCloudToJSON(object: BillingCloud): string {
  switch (object) {
    case BillingCloud.BILLING_CLOUD_UNSPECIFIED:
      return "BILLING_CLOUD_UNSPECIFIED";
    case BillingCloud.BILLING_CLOUD_AWS:
      return "BILLING_CLOUD_AWS";
    case BillingCloud.BILLING_CLOUD_GCP:
      return "BILLING_CLOUD_GCP";
    case BillingCloud.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MachineRate {
  machineType: string;
  cpus: number;
  memoryGb: number;
  creditsPerHour: number;
  cloud: BillingCloud;
  machineFamily: string;
}

function createBaseMachineRate(): MachineRate {
  return { machineType: "", cpus: 0, memoryGb: 0, creditsPerHour: 0, cloud: 0, machineFamily: "" };
}

export const MachineRate: MessageFns<MachineRate> = {
  encode(message: MachineRate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.machineType !== "") {
      writer.uint32(10).string(message.machineType);
    }
    if (message.cpus !== 0) {
      writer.uint32(17).double(message.cpus);
    }
    if (message.memoryGb !== 0) {
      writer.uint32(25).double(message.memoryGb);
    }
    if (message.creditsPerHour !== 0) {
      writer.uint32(33).double(message.creditsPerHour);
    }
    if (message.cloud !== 0) {
      writer.uint32(40).int32(message.cloud);
    }
    if (message.machineFamily !== "") {
      writer.uint32(50).string(message.machineFamily);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MachineRate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMachineRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.machineType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.cpus = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.memoryGb = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.creditsPerHour = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.cloud = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.machineFamily = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MachineRate {
    return {
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      cpus: isSet(object.cpus) ? globalThis.Number(object.cpus) : 0,
      memoryGb: isSet(object.memoryGb) ? globalThis.Number(object.memoryGb) : 0,
      creditsPerHour: isSet(object.creditsPerHour) ? globalThis.Number(object.creditsPerHour) : 0,
      cloud: isSet(object.cloud) ? billingCloudFromJSON(object.cloud) : 0,
      machineFamily: isSet(object.machineFamily) ? globalThis.String(object.machineFamily) : "",
    };
  },

  toJSON(message: MachineRate): unknown {
    const obj: any = {};
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.cpus !== 0) {
      obj.cpus = message.cpus;
    }
    if (message.memoryGb !== 0) {
      obj.memoryGb = message.memoryGb;
    }
    if (message.creditsPerHour !== 0) {
      obj.creditsPerHour = message.creditsPerHour;
    }
    if (message.cloud !== 0) {
      obj.cloud = billingCloudToJSON(message.cloud);
    }
    if (message.machineFamily !== "") {
      obj.machineFamily = message.machineFamily;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MachineRate>, I>>(base?: I): MachineRate {
    return MachineRate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MachineRate>, I>>(object: I): MachineRate {
    const message = createBaseMachineRate();
    message.machineType = object.machineType ?? "";
    message.cpus = object.cpus ?? 0;
    message.memoryGb = object.memoryGb ?? 0;
    message.creditsPerHour = object.creditsPerHour ?? 0;
    message.cloud = object.cloud ?? 0;
    message.machineFamily = object.machineFamily ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
