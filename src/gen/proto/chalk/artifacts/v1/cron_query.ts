// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/artifacts/v1/cron_query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "chalk.artifacts.v1";

export interface RecomputeSettings {
  featureFqns: string[];
  allFeatures: boolean;
}

export interface CronQuery {
  name: string;
  cron: string;
  fileName: string;
  output: string[];
  maxSamples?: number | undefined;
  recompute: RecomputeSettings | undefined;
  lowerBound: Date | undefined;
  upperBound: Date | undefined;
  tags: string[];
  requiredResolverTags: string[];
  storeOnline: boolean;
  storeOffline: boolean;
  incrementalSources: string[];
  resourceGroup?: string | undefined;
  plannerOptions: { [key: string]: string };
}

export interface CronQuery_PlannerOptionsEntry {
  key: string;
  value: string;
}

function createBaseRecomputeSettings(): RecomputeSettings {
  return { featureFqns: [], allFeatures: false };
}

export const RecomputeSettings: MessageFns<RecomputeSettings> = {
  encode(message: RecomputeSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureFqns) {
      writer.uint32(10).string(v!);
    }
    if (message.allFeatures !== false) {
      writer.uint32(16).bool(message.allFeatures);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecomputeSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecomputeSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.featureFqns.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.allFeatures = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecomputeSettings {
    return {
      featureFqns: globalThis.Array.isArray(object?.featureFqns)
        ? object.featureFqns.map((e: any) => globalThis.String(e))
        : [],
      allFeatures: isSet(object.allFeatures) ? globalThis.Boolean(object.allFeatures) : false,
    };
  },

  toJSON(message: RecomputeSettings): unknown {
    const obj: any = {};
    if (message.featureFqns?.length) {
      obj.featureFqns = message.featureFqns;
    }
    if (message.allFeatures !== false) {
      obj.allFeatures = message.allFeatures;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecomputeSettings>, I>>(base?: I): RecomputeSettings {
    return RecomputeSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecomputeSettings>, I>>(object: I): RecomputeSettings {
    const message = createBaseRecomputeSettings();
    message.featureFqns = object.featureFqns?.map((e) => e) || [];
    message.allFeatures = object.allFeatures ?? false;
    return message;
  },
};

function createBaseCronQuery(): CronQuery {
  return {
    name: "",
    cron: "",
    fileName: "",
    output: [],
    maxSamples: undefined,
    recompute: undefined,
    lowerBound: undefined,
    upperBound: undefined,
    tags: [],
    requiredResolverTags: [],
    storeOnline: false,
    storeOffline: false,
    incrementalSources: [],
    resourceGroup: undefined,
    plannerOptions: {},
  };
}

export const CronQuery: MessageFns<CronQuery> = {
  encode(message: CronQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cron !== "") {
      writer.uint32(18).string(message.cron);
    }
    if (message.fileName !== "") {
      writer.uint32(26).string(message.fileName);
    }
    for (const v of message.output) {
      writer.uint32(34).string(v!);
    }
    if (message.maxSamples !== undefined) {
      writer.uint32(40).int64(message.maxSamples);
    }
    if (message.recompute !== undefined) {
      RecomputeSettings.encode(message.recompute, writer.uint32(50).fork()).join();
    }
    if (message.lowerBound !== undefined) {
      Timestamp.encode(toTimestamp(message.lowerBound), writer.uint32(58).fork()).join();
    }
    if (message.upperBound !== undefined) {
      Timestamp.encode(toTimestamp(message.upperBound), writer.uint32(66).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.requiredResolverTags) {
      writer.uint32(82).string(v!);
    }
    if (message.storeOnline !== false) {
      writer.uint32(88).bool(message.storeOnline);
    }
    if (message.storeOffline !== false) {
      writer.uint32(96).bool(message.storeOffline);
    }
    for (const v of message.incrementalSources) {
      writer.uint32(106).string(v!);
    }
    if (message.resourceGroup !== undefined) {
      writer.uint32(114).string(message.resourceGroup);
    }
    Object.entries(message.plannerOptions).forEach(([key, value]) => {
      CronQuery_PlannerOptionsEntry.encode({ key: key as any, value }, writer.uint32(122).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CronQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCronQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cron = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxSamples = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recompute = RecomputeSettings.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lowerBound = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.upperBound = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.requiredResolverTags.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.storeOnline = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.storeOffline = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.incrementalSources.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.resourceGroup = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          const entry15 = CronQuery_PlannerOptionsEntry.decode(reader, reader.uint32());
          if (entry15.value !== undefined) {
            message.plannerOptions[entry15.key] = entry15.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CronQuery {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cron: isSet(object.cron) ? globalThis.String(object.cron) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      output: globalThis.Array.isArray(object?.output) ? object.output.map((e: any) => globalThis.String(e)) : [],
      maxSamples: isSet(object.maxSamples) ? globalThis.Number(object.maxSamples) : undefined,
      recompute: isSet(object.recompute) ? RecomputeSettings.fromJSON(object.recompute) : undefined,
      lowerBound: isSet(object.lowerBound) ? fromJsonTimestamp(object.lowerBound) : undefined,
      upperBound: isSet(object.upperBound) ? fromJsonTimestamp(object.upperBound) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      requiredResolverTags: globalThis.Array.isArray(object?.requiredResolverTags)
        ? object.requiredResolverTags.map((e: any) => globalThis.String(e))
        : [],
      storeOnline: isSet(object.storeOnline) ? globalThis.Boolean(object.storeOnline) : false,
      storeOffline: isSet(object.storeOffline) ? globalThis.Boolean(object.storeOffline) : false,
      incrementalSources: globalThis.Array.isArray(object?.incrementalSources)
        ? object.incrementalSources.map((e: any) => globalThis.String(e))
        : [],
      resourceGroup: isSet(object.resourceGroup) ? globalThis.String(object.resourceGroup) : undefined,
      plannerOptions: isObject(object.plannerOptions)
        ? Object.entries(object.plannerOptions).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: CronQuery): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cron !== "") {
      obj.cron = message.cron;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.output?.length) {
      obj.output = message.output;
    }
    if (message.maxSamples !== undefined) {
      obj.maxSamples = Math.round(message.maxSamples);
    }
    if (message.recompute !== undefined) {
      obj.recompute = RecomputeSettings.toJSON(message.recompute);
    }
    if (message.lowerBound !== undefined) {
      obj.lowerBound = message.lowerBound.toISOString();
    }
    if (message.upperBound !== undefined) {
      obj.upperBound = message.upperBound.toISOString();
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.requiredResolverTags?.length) {
      obj.requiredResolverTags = message.requiredResolverTags;
    }
    if (message.storeOnline !== false) {
      obj.storeOnline = message.storeOnline;
    }
    if (message.storeOffline !== false) {
      obj.storeOffline = message.storeOffline;
    }
    if (message.incrementalSources?.length) {
      obj.incrementalSources = message.incrementalSources;
    }
    if (message.resourceGroup !== undefined) {
      obj.resourceGroup = message.resourceGroup;
    }
    if (message.plannerOptions) {
      const entries = Object.entries(message.plannerOptions);
      if (entries.length > 0) {
        obj.plannerOptions = {};
        entries.forEach(([k, v]) => {
          obj.plannerOptions[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CronQuery>, I>>(base?: I): CronQuery {
    return CronQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CronQuery>, I>>(object: I): CronQuery {
    const message = createBaseCronQuery();
    message.name = object.name ?? "";
    message.cron = object.cron ?? "";
    message.fileName = object.fileName ?? "";
    message.output = object.output?.map((e) => e) || [];
    message.maxSamples = object.maxSamples ?? undefined;
    message.recompute = (object.recompute !== undefined && object.recompute !== null)
      ? RecomputeSettings.fromPartial(object.recompute)
      : undefined;
    message.lowerBound = object.lowerBound ?? undefined;
    message.upperBound = object.upperBound ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.requiredResolverTags = object.requiredResolverTags?.map((e) => e) || [];
    message.storeOnline = object.storeOnline ?? false;
    message.storeOffline = object.storeOffline ?? false;
    message.incrementalSources = object.incrementalSources?.map((e) => e) || [];
    message.resourceGroup = object.resourceGroup ?? undefined;
    message.plannerOptions = Object.entries(object.plannerOptions ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseCronQuery_PlannerOptionsEntry(): CronQuery_PlannerOptionsEntry {
  return { key: "", value: "" };
}

export const CronQuery_PlannerOptionsEntry: MessageFns<CronQuery_PlannerOptionsEntry> = {
  encode(message: CronQuery_PlannerOptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CronQuery_PlannerOptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCronQuery_PlannerOptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CronQuery_PlannerOptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CronQuery_PlannerOptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CronQuery_PlannerOptionsEntry>, I>>(base?: I): CronQuery_PlannerOptionsEntry {
    return CronQuery_PlannerOptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CronQuery_PlannerOptionsEntry>, I>>(
    object: I,
  ): CronQuery_PlannerOptionsEntry {
    const message = createBaseCronQuery_PlannerOptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
