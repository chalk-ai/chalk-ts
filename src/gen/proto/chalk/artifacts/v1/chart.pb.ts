// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/artifacts/v1/chart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.artifacts.v1";

export enum MetricKind {
  METRIC_KIND_UNSPECIFIED = 0,
  METRIC_KIND_FEATURE_REQUEST_COUNT = 1,
  METRIC_KIND_FEATURE_LATENCY = 2,
  METRIC_KIND_FEATURE_STALENESS = 3,
  METRIC_KIND_FEATURE_VALUE = 4,
  METRIC_KIND_FEATURE_WRITE = 5,
  METRIC_KIND_FEATURE_NULL_RATIO = 6,
  METRIC_KIND_RESOLVER_REQUEST_COUNT = 7,
  METRIC_KIND_RESOLVER_LATENCY = 8,
  METRIC_KIND_RESOLVER_SUCCESS_RATIO = 9,
  METRIC_KIND_QUERY_COUNT = 10,
  METRIC_KIND_QUERY_LATENCY = 11,
  METRIC_KIND_QUERY_SUCCESS_RATIO = 12,
  METRIC_KIND_BILLING_INFERENCE = 13,
  METRIC_KIND_BILLING_CRON = 14,
  METRIC_KIND_BILLING_MIGRATION = 15,
  METRIC_KIND_CRON_COUNT = 16,
  METRIC_KIND_CRON_LATENCY = 17,
  METRIC_KIND_STREAM_MESSAGES_PROCESSED = 18,
  METRIC_KIND_STREAM_MESSAGE_LATENCY = 19,
  METRIC_KIND_STREAM_WINDOWS_PROCESSED = 20,
  METRIC_KIND_STREAM_WINDOW_LATENCY = 21,
  UNRECOGNIZED = -1,
}

export function metricKindFromJSON(object: any): MetricKind {
  switch (object) {
    case 0:
    case "METRIC_KIND_UNSPECIFIED":
      return MetricKind.METRIC_KIND_UNSPECIFIED;
    case 1:
    case "METRIC_KIND_FEATURE_REQUEST_COUNT":
      return MetricKind.METRIC_KIND_FEATURE_REQUEST_COUNT;
    case 2:
    case "METRIC_KIND_FEATURE_LATENCY":
      return MetricKind.METRIC_KIND_FEATURE_LATENCY;
    case 3:
    case "METRIC_KIND_FEATURE_STALENESS":
      return MetricKind.METRIC_KIND_FEATURE_STALENESS;
    case 4:
    case "METRIC_KIND_FEATURE_VALUE":
      return MetricKind.METRIC_KIND_FEATURE_VALUE;
    case 5:
    case "METRIC_KIND_FEATURE_WRITE":
      return MetricKind.METRIC_KIND_FEATURE_WRITE;
    case 6:
    case "METRIC_KIND_FEATURE_NULL_RATIO":
      return MetricKind.METRIC_KIND_FEATURE_NULL_RATIO;
    case 7:
    case "METRIC_KIND_RESOLVER_REQUEST_COUNT":
      return MetricKind.METRIC_KIND_RESOLVER_REQUEST_COUNT;
    case 8:
    case "METRIC_KIND_RESOLVER_LATENCY":
      return MetricKind.METRIC_KIND_RESOLVER_LATENCY;
    case 9:
    case "METRIC_KIND_RESOLVER_SUCCESS_RATIO":
      return MetricKind.METRIC_KIND_RESOLVER_SUCCESS_RATIO;
    case 10:
    case "METRIC_KIND_QUERY_COUNT":
      return MetricKind.METRIC_KIND_QUERY_COUNT;
    case 11:
    case "METRIC_KIND_QUERY_LATENCY":
      return MetricKind.METRIC_KIND_QUERY_LATENCY;
    case 12:
    case "METRIC_KIND_QUERY_SUCCESS_RATIO":
      return MetricKind.METRIC_KIND_QUERY_SUCCESS_RATIO;
    case 13:
    case "METRIC_KIND_BILLING_INFERENCE":
      return MetricKind.METRIC_KIND_BILLING_INFERENCE;
    case 14:
    case "METRIC_KIND_BILLING_CRON":
      return MetricKind.METRIC_KIND_BILLING_CRON;
    case 15:
    case "METRIC_KIND_BILLING_MIGRATION":
      return MetricKind.METRIC_KIND_BILLING_MIGRATION;
    case 16:
    case "METRIC_KIND_CRON_COUNT":
      return MetricKind.METRIC_KIND_CRON_COUNT;
    case 17:
    case "METRIC_KIND_CRON_LATENCY":
      return MetricKind.METRIC_KIND_CRON_LATENCY;
    case 18:
    case "METRIC_KIND_STREAM_MESSAGES_PROCESSED":
      return MetricKind.METRIC_KIND_STREAM_MESSAGES_PROCESSED;
    case 19:
    case "METRIC_KIND_STREAM_MESSAGE_LATENCY":
      return MetricKind.METRIC_KIND_STREAM_MESSAGE_LATENCY;
    case 20:
    case "METRIC_KIND_STREAM_WINDOWS_PROCESSED":
      return MetricKind.METRIC_KIND_STREAM_WINDOWS_PROCESSED;
    case 21:
    case "METRIC_KIND_STREAM_WINDOW_LATENCY":
      return MetricKind.METRIC_KIND_STREAM_WINDOW_LATENCY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MetricKind.UNRECOGNIZED;
  }
}

export function metricKindToJSON(object: MetricKind): string {
  switch (object) {
    case MetricKind.METRIC_KIND_UNSPECIFIED:
      return "METRIC_KIND_UNSPECIFIED";
    case MetricKind.METRIC_KIND_FEATURE_REQUEST_COUNT:
      return "METRIC_KIND_FEATURE_REQUEST_COUNT";
    case MetricKind.METRIC_KIND_FEATURE_LATENCY:
      return "METRIC_KIND_FEATURE_LATENCY";
    case MetricKind.METRIC_KIND_FEATURE_STALENESS:
      return "METRIC_KIND_FEATURE_STALENESS";
    case MetricKind.METRIC_KIND_FEATURE_VALUE:
      return "METRIC_KIND_FEATURE_VALUE";
    case MetricKind.METRIC_KIND_FEATURE_WRITE:
      return "METRIC_KIND_FEATURE_WRITE";
    case MetricKind.METRIC_KIND_FEATURE_NULL_RATIO:
      return "METRIC_KIND_FEATURE_NULL_RATIO";
    case MetricKind.METRIC_KIND_RESOLVER_REQUEST_COUNT:
      return "METRIC_KIND_RESOLVER_REQUEST_COUNT";
    case MetricKind.METRIC_KIND_RESOLVER_LATENCY:
      return "METRIC_KIND_RESOLVER_LATENCY";
    case MetricKind.METRIC_KIND_RESOLVER_SUCCESS_RATIO:
      return "METRIC_KIND_RESOLVER_SUCCESS_RATIO";
    case MetricKind.METRIC_KIND_QUERY_COUNT:
      return "METRIC_KIND_QUERY_COUNT";
    case MetricKind.METRIC_KIND_QUERY_LATENCY:
      return "METRIC_KIND_QUERY_LATENCY";
    case MetricKind.METRIC_KIND_QUERY_SUCCESS_RATIO:
      return "METRIC_KIND_QUERY_SUCCESS_RATIO";
    case MetricKind.METRIC_KIND_BILLING_INFERENCE:
      return "METRIC_KIND_BILLING_INFERENCE";
    case MetricKind.METRIC_KIND_BILLING_CRON:
      return "METRIC_KIND_BILLING_CRON";
    case MetricKind.METRIC_KIND_BILLING_MIGRATION:
      return "METRIC_KIND_BILLING_MIGRATION";
    case MetricKind.METRIC_KIND_CRON_COUNT:
      return "METRIC_KIND_CRON_COUNT";
    case MetricKind.METRIC_KIND_CRON_LATENCY:
      return "METRIC_KIND_CRON_LATENCY";
    case MetricKind.METRIC_KIND_STREAM_MESSAGES_PROCESSED:
      return "METRIC_KIND_STREAM_MESSAGES_PROCESSED";
    case MetricKind.METRIC_KIND_STREAM_MESSAGE_LATENCY:
      return "METRIC_KIND_STREAM_MESSAGE_LATENCY";
    case MetricKind.METRIC_KIND_STREAM_WINDOWS_PROCESSED:
      return "METRIC_KIND_STREAM_WINDOWS_PROCESSED";
    case MetricKind.METRIC_KIND_STREAM_WINDOW_LATENCY:
      return "METRIC_KIND_STREAM_WINDOW_LATENCY";
    case MetricKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FilterKind {
  FILTER_KIND_UNSPECIFIED = 0,
  FILTER_KIND_FEATURE_STATUS = 1,
  FILTER_KIND_FEATURE_NAME = 2,
  FILTER_KIND_FEATURE_TAG = 3,
  FILTER_KIND_RESOLVER_STATUS = 4,
  FILTER_KIND_RESOLVER_NAME = 5,
  FILTER_KIND_RESOLVER_TAG = 6,
  FILTER_KIND_CRON_STATUS = 7,
  FILTER_KIND_MIGRATION_STATUS = 8,
  FILTER_KIND_ONLINE_OFFLINE = 9,
  FILTER_KIND_CACHE_HIT = 10,
  FILTER_KIND_OPERATION_ID = 11,
  FILTER_KIND_QUERY_NAME = 12,
  FILTER_KIND_QUERY_STATUS = 13,
  FILTER_KIND_IS_NULL = 14,
  FILTER_KIND_USAGE_KIND = 15,
  FILTER_KIND_RESOURCE_GROUP = 16,
  UNRECOGNIZED = -1,
}

export function filterKindFromJSON(object: any): FilterKind {
  switch (object) {
    case 0:
    case "FILTER_KIND_UNSPECIFIED":
      return FilterKind.FILTER_KIND_UNSPECIFIED;
    case 1:
    case "FILTER_KIND_FEATURE_STATUS":
      return FilterKind.FILTER_KIND_FEATURE_STATUS;
    case 2:
    case "FILTER_KIND_FEATURE_NAME":
      return FilterKind.FILTER_KIND_FEATURE_NAME;
    case 3:
    case "FILTER_KIND_FEATURE_TAG":
      return FilterKind.FILTER_KIND_FEATURE_TAG;
    case 4:
    case "FILTER_KIND_RESOLVER_STATUS":
      return FilterKind.FILTER_KIND_RESOLVER_STATUS;
    case 5:
    case "FILTER_KIND_RESOLVER_NAME":
      return FilterKind.FILTER_KIND_RESOLVER_NAME;
    case 6:
    case "FILTER_KIND_RESOLVER_TAG":
      return FilterKind.FILTER_KIND_RESOLVER_TAG;
    case 7:
    case "FILTER_KIND_CRON_STATUS":
      return FilterKind.FILTER_KIND_CRON_STATUS;
    case 8:
    case "FILTER_KIND_MIGRATION_STATUS":
      return FilterKind.FILTER_KIND_MIGRATION_STATUS;
    case 9:
    case "FILTER_KIND_ONLINE_OFFLINE":
      return FilterKind.FILTER_KIND_ONLINE_OFFLINE;
    case 10:
    case "FILTER_KIND_CACHE_HIT":
      return FilterKind.FILTER_KIND_CACHE_HIT;
    case 11:
    case "FILTER_KIND_OPERATION_ID":
      return FilterKind.FILTER_KIND_OPERATION_ID;
    case 12:
    case "FILTER_KIND_QUERY_NAME":
      return FilterKind.FILTER_KIND_QUERY_NAME;
    case 13:
    case "FILTER_KIND_QUERY_STATUS":
      return FilterKind.FILTER_KIND_QUERY_STATUS;
    case 14:
    case "FILTER_KIND_IS_NULL":
      return FilterKind.FILTER_KIND_IS_NULL;
    case 15:
    case "FILTER_KIND_USAGE_KIND":
      return FilterKind.FILTER_KIND_USAGE_KIND;
    case 16:
    case "FILTER_KIND_RESOURCE_GROUP":
      return FilterKind.FILTER_KIND_RESOURCE_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FilterKind.UNRECOGNIZED;
  }
}

export function filterKindToJSON(object: FilterKind): string {
  switch (object) {
    case FilterKind.FILTER_KIND_UNSPECIFIED:
      return "FILTER_KIND_UNSPECIFIED";
    case FilterKind.FILTER_KIND_FEATURE_STATUS:
      return "FILTER_KIND_FEATURE_STATUS";
    case FilterKind.FILTER_KIND_FEATURE_NAME:
      return "FILTER_KIND_FEATURE_NAME";
    case FilterKind.FILTER_KIND_FEATURE_TAG:
      return "FILTER_KIND_FEATURE_TAG";
    case FilterKind.FILTER_KIND_RESOLVER_STATUS:
      return "FILTER_KIND_RESOLVER_STATUS";
    case FilterKind.FILTER_KIND_RESOLVER_NAME:
      return "FILTER_KIND_RESOLVER_NAME";
    case FilterKind.FILTER_KIND_RESOLVER_TAG:
      return "FILTER_KIND_RESOLVER_TAG";
    case FilterKind.FILTER_KIND_CRON_STATUS:
      return "FILTER_KIND_CRON_STATUS";
    case FilterKind.FILTER_KIND_MIGRATION_STATUS:
      return "FILTER_KIND_MIGRATION_STATUS";
    case FilterKind.FILTER_KIND_ONLINE_OFFLINE:
      return "FILTER_KIND_ONLINE_OFFLINE";
    case FilterKind.FILTER_KIND_CACHE_HIT:
      return "FILTER_KIND_CACHE_HIT";
    case FilterKind.FILTER_KIND_OPERATION_ID:
      return "FILTER_KIND_OPERATION_ID";
    case FilterKind.FILTER_KIND_QUERY_NAME:
      return "FILTER_KIND_QUERY_NAME";
    case FilterKind.FILTER_KIND_QUERY_STATUS:
      return "FILTER_KIND_QUERY_STATUS";
    case FilterKind.FILTER_KIND_IS_NULL:
      return "FILTER_KIND_IS_NULL";
    case FilterKind.FILTER_KIND_USAGE_KIND:
      return "FILTER_KIND_USAGE_KIND";
    case FilterKind.FILTER_KIND_RESOURCE_GROUP:
      return "FILTER_KIND_RESOURCE_GROUP";
    case FilterKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ComparatorKind {
  COMPARATOR_KIND_UNSPECIFIED = 0,
  COMPARATOR_KIND_EQ = 1,
  COMPARATOR_KIND_NEQ = 2,
  COMPARATOR_KIND_ONE_OF = 3,
  UNRECOGNIZED = -1,
}

export function comparatorKindFromJSON(object: any): ComparatorKind {
  switch (object) {
    case 0:
    case "COMPARATOR_KIND_UNSPECIFIED":
      return ComparatorKind.COMPARATOR_KIND_UNSPECIFIED;
    case 1:
    case "COMPARATOR_KIND_EQ":
      return ComparatorKind.COMPARATOR_KIND_EQ;
    case 2:
    case "COMPARATOR_KIND_NEQ":
      return ComparatorKind.COMPARATOR_KIND_NEQ;
    case 3:
    case "COMPARATOR_KIND_ONE_OF":
      return ComparatorKind.COMPARATOR_KIND_ONE_OF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ComparatorKind.UNRECOGNIZED;
  }
}

export function comparatorKindToJSON(object: ComparatorKind): string {
  switch (object) {
    case ComparatorKind.COMPARATOR_KIND_UNSPECIFIED:
      return "COMPARATOR_KIND_UNSPECIFIED";
    case ComparatorKind.COMPARATOR_KIND_EQ:
      return "COMPARATOR_KIND_EQ";
    case ComparatorKind.COMPARATOR_KIND_NEQ:
      return "COMPARATOR_KIND_NEQ";
    case ComparatorKind.COMPARATOR_KIND_ONE_OF:
      return "COMPARATOR_KIND_ONE_OF";
    case ComparatorKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WindowFunctionKind {
  WINDOW_FUNCTION_KIND_UNSPECIFIED = 0,
  WINDOW_FUNCTION_KIND_COUNT = 1,
  WINDOW_FUNCTION_KIND_MEAN = 2,
  WINDOW_FUNCTION_KIND_SUM = 3,
  WINDOW_FUNCTION_KIND_MIN = 4,
  WINDOW_FUNCTION_KIND_MAX = 5,
  WINDOW_FUNCTION_KIND_PERCENTILE_99 = 6,
  WINDOW_FUNCTION_KIND_PERCENTILE_95 = 7,
  WINDOW_FUNCTION_KIND_PERCENTILE_75 = 8,
  WINDOW_FUNCTION_KIND_PERCENTILE_50 = 9,
  WINDOW_FUNCTION_KIND_PERCENTILE_25 = 10,
  WINDOW_FUNCTION_KIND_PERCENTILE_5 = 11,
  WINDOW_FUNCTION_KIND_ALL_PERCENTILES = 12,
  UNRECOGNIZED = -1,
}

export function windowFunctionKindFromJSON(object: any): WindowFunctionKind {
  switch (object) {
    case 0:
    case "WINDOW_FUNCTION_KIND_UNSPECIFIED":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_UNSPECIFIED;
    case 1:
    case "WINDOW_FUNCTION_KIND_COUNT":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_COUNT;
    case 2:
    case "WINDOW_FUNCTION_KIND_MEAN":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_MEAN;
    case 3:
    case "WINDOW_FUNCTION_KIND_SUM":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_SUM;
    case 4:
    case "WINDOW_FUNCTION_KIND_MIN":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_MIN;
    case 5:
    case "WINDOW_FUNCTION_KIND_MAX":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_MAX;
    case 6:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_99":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_99;
    case 7:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_95":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_95;
    case 8:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_75":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_75;
    case 9:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_50":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_50;
    case 10:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_25":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_25;
    case 11:
    case "WINDOW_FUNCTION_KIND_PERCENTILE_5":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_5;
    case 12:
    case "WINDOW_FUNCTION_KIND_ALL_PERCENTILES":
      return WindowFunctionKind.WINDOW_FUNCTION_KIND_ALL_PERCENTILES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WindowFunctionKind.UNRECOGNIZED;
  }
}

export function windowFunctionKindToJSON(object: WindowFunctionKind): string {
  switch (object) {
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_UNSPECIFIED:
      return "WINDOW_FUNCTION_KIND_UNSPECIFIED";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_COUNT:
      return "WINDOW_FUNCTION_KIND_COUNT";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_MEAN:
      return "WINDOW_FUNCTION_KIND_MEAN";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_SUM:
      return "WINDOW_FUNCTION_KIND_SUM";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_MIN:
      return "WINDOW_FUNCTION_KIND_MIN";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_MAX:
      return "WINDOW_FUNCTION_KIND_MAX";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_99:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_99";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_95:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_95";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_75:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_75";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_50:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_50";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_25:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_25";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_PERCENTILE_5:
      return "WINDOW_FUNCTION_KIND_PERCENTILE_5";
    case WindowFunctionKind.WINDOW_FUNCTION_KIND_ALL_PERCENTILES:
      return "WINDOW_FUNCTION_KIND_ALL_PERCENTILES";
    case WindowFunctionKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GroupByKind {
  GROUP_BY_KIND_UNSPECIFIED = 0,
  GROUP_BY_KIND_FEATURE_STATUS = 1,
  GROUP_BY_KIND_FEATURE_NAME = 2,
  GROUP_BY_KIND_IS_NULL = 3,
  GROUP_BY_KIND_RESOLVER_STATUS = 4,
  GROUP_BY_KIND_RESOLVER_NAME = 5,
  GROUP_BY_KIND_QUERY_STATUS = 6,
  GROUP_BY_KIND_QUERY_NAME = 7,
  GROUP_BY_KIND_ONLINE_OFFLINE = 8,
  GROUP_BY_KIND_CACHE_HIT = 9,
  GROUP_BY_KIND_USAGE_KIND = 10,
  GROUP_BY_KIND_RESOURCE_GROUP = 11,
  UNRECOGNIZED = -1,
}

export function groupByKindFromJSON(object: any): GroupByKind {
  switch (object) {
    case 0:
    case "GROUP_BY_KIND_UNSPECIFIED":
      return GroupByKind.GROUP_BY_KIND_UNSPECIFIED;
    case 1:
    case "GROUP_BY_KIND_FEATURE_STATUS":
      return GroupByKind.GROUP_BY_KIND_FEATURE_STATUS;
    case 2:
    case "GROUP_BY_KIND_FEATURE_NAME":
      return GroupByKind.GROUP_BY_KIND_FEATURE_NAME;
    case 3:
    case "GROUP_BY_KIND_IS_NULL":
      return GroupByKind.GROUP_BY_KIND_IS_NULL;
    case 4:
    case "GROUP_BY_KIND_RESOLVER_STATUS":
      return GroupByKind.GROUP_BY_KIND_RESOLVER_STATUS;
    case 5:
    case "GROUP_BY_KIND_RESOLVER_NAME":
      return GroupByKind.GROUP_BY_KIND_RESOLVER_NAME;
    case 6:
    case "GROUP_BY_KIND_QUERY_STATUS":
      return GroupByKind.GROUP_BY_KIND_QUERY_STATUS;
    case 7:
    case "GROUP_BY_KIND_QUERY_NAME":
      return GroupByKind.GROUP_BY_KIND_QUERY_NAME;
    case 8:
    case "GROUP_BY_KIND_ONLINE_OFFLINE":
      return GroupByKind.GROUP_BY_KIND_ONLINE_OFFLINE;
    case 9:
    case "GROUP_BY_KIND_CACHE_HIT":
      return GroupByKind.GROUP_BY_KIND_CACHE_HIT;
    case 10:
    case "GROUP_BY_KIND_USAGE_KIND":
      return GroupByKind.GROUP_BY_KIND_USAGE_KIND;
    case 11:
    case "GROUP_BY_KIND_RESOURCE_GROUP":
      return GroupByKind.GROUP_BY_KIND_RESOURCE_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GroupByKind.UNRECOGNIZED;
  }
}

export function groupByKindToJSON(object: GroupByKind): string {
  switch (object) {
    case GroupByKind.GROUP_BY_KIND_UNSPECIFIED:
      return "GROUP_BY_KIND_UNSPECIFIED";
    case GroupByKind.GROUP_BY_KIND_FEATURE_STATUS:
      return "GROUP_BY_KIND_FEATURE_STATUS";
    case GroupByKind.GROUP_BY_KIND_FEATURE_NAME:
      return "GROUP_BY_KIND_FEATURE_NAME";
    case GroupByKind.GROUP_BY_KIND_IS_NULL:
      return "GROUP_BY_KIND_IS_NULL";
    case GroupByKind.GROUP_BY_KIND_RESOLVER_STATUS:
      return "GROUP_BY_KIND_RESOLVER_STATUS";
    case GroupByKind.GROUP_BY_KIND_RESOLVER_NAME:
      return "GROUP_BY_KIND_RESOLVER_NAME";
    case GroupByKind.GROUP_BY_KIND_QUERY_STATUS:
      return "GROUP_BY_KIND_QUERY_STATUS";
    case GroupByKind.GROUP_BY_KIND_QUERY_NAME:
      return "GROUP_BY_KIND_QUERY_NAME";
    case GroupByKind.GROUP_BY_KIND_ONLINE_OFFLINE:
      return "GROUP_BY_KIND_ONLINE_OFFLINE";
    case GroupByKind.GROUP_BY_KIND_CACHE_HIT:
      return "GROUP_BY_KIND_CACHE_HIT";
    case GroupByKind.GROUP_BY_KIND_USAGE_KIND:
      return "GROUP_BY_KIND_USAGE_KIND";
    case GroupByKind.GROUP_BY_KIND_RESOURCE_GROUP:
      return "GROUP_BY_KIND_RESOURCE_GROUP";
    case GroupByKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MetricFormulaKind {
  METRIC_FORMULA_KIND_UNSPECIFIED = 0,
  METRIC_FORMULA_KIND_SUM = 1,
  METRIC_FORMULA_KIND_TOTAL_RATIO = 2,
  METRIC_FORMULA_KIND_RATIO = 3,
  METRIC_FORMULA_KIND_PRODUCT = 4,
  METRIC_FORMULA_KIND_ABS = 5,
  METRIC_FORMULA_KIND_KS_STAT = 6,
  METRIC_FORMULA_KIND_KS_TEST = 7,
  METRIC_FORMULA_KIND_KS_THRESHOLD = 8,
  METRIC_FORMULA_KIND_TIME_OFFSET = 9,
  UNRECOGNIZED = -1,
}

export function metricFormulaKindFromJSON(object: any): MetricFormulaKind {
  switch (object) {
    case 0:
    case "METRIC_FORMULA_KIND_UNSPECIFIED":
      return MetricFormulaKind.METRIC_FORMULA_KIND_UNSPECIFIED;
    case 1:
    case "METRIC_FORMULA_KIND_SUM":
      return MetricFormulaKind.METRIC_FORMULA_KIND_SUM;
    case 2:
    case "METRIC_FORMULA_KIND_TOTAL_RATIO":
      return MetricFormulaKind.METRIC_FORMULA_KIND_TOTAL_RATIO;
    case 3:
    case "METRIC_FORMULA_KIND_RATIO":
      return MetricFormulaKind.METRIC_FORMULA_KIND_RATIO;
    case 4:
    case "METRIC_FORMULA_KIND_PRODUCT":
      return MetricFormulaKind.METRIC_FORMULA_KIND_PRODUCT;
    case 5:
    case "METRIC_FORMULA_KIND_ABS":
      return MetricFormulaKind.METRIC_FORMULA_KIND_ABS;
    case 6:
    case "METRIC_FORMULA_KIND_KS_STAT":
      return MetricFormulaKind.METRIC_FORMULA_KIND_KS_STAT;
    case 7:
    case "METRIC_FORMULA_KIND_KS_TEST":
      return MetricFormulaKind.METRIC_FORMULA_KIND_KS_TEST;
    case 8:
    case "METRIC_FORMULA_KIND_KS_THRESHOLD":
      return MetricFormulaKind.METRIC_FORMULA_KIND_KS_THRESHOLD;
    case 9:
    case "METRIC_FORMULA_KIND_TIME_OFFSET":
      return MetricFormulaKind.METRIC_FORMULA_KIND_TIME_OFFSET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MetricFormulaKind.UNRECOGNIZED;
  }
}

export function metricFormulaKindToJSON(object: MetricFormulaKind): string {
  switch (object) {
    case MetricFormulaKind.METRIC_FORMULA_KIND_UNSPECIFIED:
      return "METRIC_FORMULA_KIND_UNSPECIFIED";
    case MetricFormulaKind.METRIC_FORMULA_KIND_SUM:
      return "METRIC_FORMULA_KIND_SUM";
    case MetricFormulaKind.METRIC_FORMULA_KIND_TOTAL_RATIO:
      return "METRIC_FORMULA_KIND_TOTAL_RATIO";
    case MetricFormulaKind.METRIC_FORMULA_KIND_RATIO:
      return "METRIC_FORMULA_KIND_RATIO";
    case MetricFormulaKind.METRIC_FORMULA_KIND_PRODUCT:
      return "METRIC_FORMULA_KIND_PRODUCT";
    case MetricFormulaKind.METRIC_FORMULA_KIND_ABS:
      return "METRIC_FORMULA_KIND_ABS";
    case MetricFormulaKind.METRIC_FORMULA_KIND_KS_STAT:
      return "METRIC_FORMULA_KIND_KS_STAT";
    case MetricFormulaKind.METRIC_FORMULA_KIND_KS_TEST:
      return "METRIC_FORMULA_KIND_KS_TEST";
    case MetricFormulaKind.METRIC_FORMULA_KIND_KS_THRESHOLD:
      return "METRIC_FORMULA_KIND_KS_THRESHOLD";
    case MetricFormulaKind.METRIC_FORMULA_KIND_TIME_OFFSET:
      return "METRIC_FORMULA_KIND_TIME_OFFSET";
    case MetricFormulaKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AlertSeverityKind {
  ALERT_SEVERITY_KIND_UNSPECIFIED = 0,
  ALERT_SEVERITY_KIND_CRITICAL = 1,
  ALERT_SEVERITY_KIND_ERROR = 2,
  ALERT_SEVERITY_KIND_WARNING = 3,
  ALERT_SEVERITY_KIND_INFO = 4,
  UNRECOGNIZED = -1,
}

export function alertSeverityKindFromJSON(object: any): AlertSeverityKind {
  switch (object) {
    case 0:
    case "ALERT_SEVERITY_KIND_UNSPECIFIED":
      return AlertSeverityKind.ALERT_SEVERITY_KIND_UNSPECIFIED;
    case 1:
    case "ALERT_SEVERITY_KIND_CRITICAL":
      return AlertSeverityKind.ALERT_SEVERITY_KIND_CRITICAL;
    case 2:
    case "ALERT_SEVERITY_KIND_ERROR":
      return AlertSeverityKind.ALERT_SEVERITY_KIND_ERROR;
    case 3:
    case "ALERT_SEVERITY_KIND_WARNING":
      return AlertSeverityKind.ALERT_SEVERITY_KIND_WARNING;
    case 4:
    case "ALERT_SEVERITY_KIND_INFO":
      return AlertSeverityKind.ALERT_SEVERITY_KIND_INFO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AlertSeverityKind.UNRECOGNIZED;
  }
}

export function alertSeverityKindToJSON(object: AlertSeverityKind): string {
  switch (object) {
    case AlertSeverityKind.ALERT_SEVERITY_KIND_UNSPECIFIED:
      return "ALERT_SEVERITY_KIND_UNSPECIFIED";
    case AlertSeverityKind.ALERT_SEVERITY_KIND_CRITICAL:
      return "ALERT_SEVERITY_KIND_CRITICAL";
    case AlertSeverityKind.ALERT_SEVERITY_KIND_ERROR:
      return "ALERT_SEVERITY_KIND_ERROR";
    case AlertSeverityKind.ALERT_SEVERITY_KIND_WARNING:
      return "ALERT_SEVERITY_KIND_WARNING";
    case AlertSeverityKind.ALERT_SEVERITY_KIND_INFO:
      return "ALERT_SEVERITY_KIND_INFO";
    case AlertSeverityKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ThresholdKind {
  THRESHOLD_KIND_UNSPECIFIED = 0,
  THRESHOLD_KIND_ABOVE = 1,
  THRESHOLD_KIND_BELOW = 2,
  THRESHOLD_KIND_GREATER_EQUAL = 3,
  THRESHOLD_KIND_LESS_EQUAL = 4,
  THRESHOLD_KIND_EQUAL = 5,
  THRESHOLD_KIND_NOT_EQUAL = 6,
  UNRECOGNIZED = -1,
}

export function thresholdKindFromJSON(object: any): ThresholdKind {
  switch (object) {
    case 0:
    case "THRESHOLD_KIND_UNSPECIFIED":
      return ThresholdKind.THRESHOLD_KIND_UNSPECIFIED;
    case 1:
    case "THRESHOLD_KIND_ABOVE":
      return ThresholdKind.THRESHOLD_KIND_ABOVE;
    case 2:
    case "THRESHOLD_KIND_BELOW":
      return ThresholdKind.THRESHOLD_KIND_BELOW;
    case 3:
    case "THRESHOLD_KIND_GREATER_EQUAL":
      return ThresholdKind.THRESHOLD_KIND_GREATER_EQUAL;
    case 4:
    case "THRESHOLD_KIND_LESS_EQUAL":
      return ThresholdKind.THRESHOLD_KIND_LESS_EQUAL;
    case 5:
    case "THRESHOLD_KIND_EQUAL":
      return ThresholdKind.THRESHOLD_KIND_EQUAL;
    case 6:
    case "THRESHOLD_KIND_NOT_EQUAL":
      return ThresholdKind.THRESHOLD_KIND_NOT_EQUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThresholdKind.UNRECOGNIZED;
  }
}

export function thresholdKindToJSON(object: ThresholdKind): string {
  switch (object) {
    case ThresholdKind.THRESHOLD_KIND_UNSPECIFIED:
      return "THRESHOLD_KIND_UNSPECIFIED";
    case ThresholdKind.THRESHOLD_KIND_ABOVE:
      return "THRESHOLD_KIND_ABOVE";
    case ThresholdKind.THRESHOLD_KIND_BELOW:
      return "THRESHOLD_KIND_BELOW";
    case ThresholdKind.THRESHOLD_KIND_GREATER_EQUAL:
      return "THRESHOLD_KIND_GREATER_EQUAL";
    case ThresholdKind.THRESHOLD_KIND_LESS_EQUAL:
      return "THRESHOLD_KIND_LESS_EQUAL";
    case ThresholdKind.THRESHOLD_KIND_EQUAL:
      return "THRESHOLD_KIND_EQUAL";
    case ThresholdKind.THRESHOLD_KIND_NOT_EQUAL:
      return "THRESHOLD_KIND_NOT_EQUAL";
    case ThresholdKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ChartLinkKind {
  CHART_LINK_KIND_UNSPECIFIED = 0,
  CHART_LINK_KIND_RESOLVER = 1,
  CHART_LINK_KIND_FEATURE = 2,
  CHART_LINK_KIND_QUERY = 3,
  CHART_LINK_KIND_MANUAL = 4,
  UNRECOGNIZED = -1,
}

export function chartLinkKindFromJSON(object: any): ChartLinkKind {
  switch (object) {
    case 0:
    case "CHART_LINK_KIND_UNSPECIFIED":
      return ChartLinkKind.CHART_LINK_KIND_UNSPECIFIED;
    case 1:
    case "CHART_LINK_KIND_RESOLVER":
      return ChartLinkKind.CHART_LINK_KIND_RESOLVER;
    case 2:
    case "CHART_LINK_KIND_FEATURE":
      return ChartLinkKind.CHART_LINK_KIND_FEATURE;
    case 3:
    case "CHART_LINK_KIND_QUERY":
      return ChartLinkKind.CHART_LINK_KIND_QUERY;
    case 4:
    case "CHART_LINK_KIND_MANUAL":
      return ChartLinkKind.CHART_LINK_KIND_MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChartLinkKind.UNRECOGNIZED;
  }
}

export function chartLinkKindToJSON(object: ChartLinkKind): string {
  switch (object) {
    case ChartLinkKind.CHART_LINK_KIND_UNSPECIFIED:
      return "CHART_LINK_KIND_UNSPECIFIED";
    case ChartLinkKind.CHART_LINK_KIND_RESOLVER:
      return "CHART_LINK_KIND_RESOLVER";
    case ChartLinkKind.CHART_LINK_KIND_FEATURE:
      return "CHART_LINK_KIND_FEATURE";
    case ChartLinkKind.CHART_LINK_KIND_QUERY:
      return "CHART_LINK_KIND_QUERY";
    case ChartLinkKind.CHART_LINK_KIND_MANUAL:
      return "CHART_LINK_KIND_MANUAL";
    case ChartLinkKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AlertTrigger {
  name: string;
  severity: AlertSeverityKind;
  thresholdPosition: ThresholdKind;
  thresholdValue: number;
  seriesName?: string | undefined;
  channelName?: string | undefined;
  description?: string | undefined;
}

export interface DatasetFeatureOperand {
  dataset: string;
  feature: string;
}

export interface MetricFormula {
  kind: MetricFormulaKind;
  /**
   * The following fields are mutually exclusive
   * but we're not using `oneof` because one of
   * the fields is a repeated field, which would
   * make using `oneof` really ugly.
   * ---- UNION START ----
   */
  singleSeriesOperands?: number | undefined;
  multiSeriesOperands: number[];
  datasetFeatureOperands:
    | DatasetFeatureOperand
    | undefined;
  /** ---- UNION END ---- */
  name?: string | undefined;
}

export interface MetricFilter {
  kind: FilterKind;
  comparator: ComparatorKind;
  value: string[];
}

export interface MetricConfigSeries {
  metric: MetricKind;
  filters: MetricFilter[];
  name?: string | undefined;
  windowFunction: WindowFunctionKind;
  groupBy: GroupByKind[];
}

export interface MetricConfig {
  name: string;
  windowPeriod: string;
  series: MetricConfigSeries[];
  formulas: MetricFormula[];
  trigger: AlertTrigger | undefined;
}

export interface Chart {
  id: string;
  config: MetricConfig | undefined;
  entityKind: ChartLinkKind;
  entityId?: string | undefined;
}

function createBaseAlertTrigger(): AlertTrigger {
  return {
    name: "",
    severity: 0,
    thresholdPosition: 0,
    thresholdValue: 0,
    seriesName: undefined,
    channelName: undefined,
    description: undefined,
  };
}

export const AlertTrigger: MessageFns<AlertTrigger> = {
  encode(message: AlertTrigger, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    if (message.thresholdPosition !== 0) {
      writer.uint32(24).int32(message.thresholdPosition);
    }
    if (message.thresholdValue !== 0) {
      writer.uint32(37).float(message.thresholdValue);
    }
    if (message.seriesName !== undefined) {
      writer.uint32(42).string(message.seriesName);
    }
    if (message.channelName !== undefined) {
      writer.uint32(50).string(message.channelName);
    }
    if (message.description !== undefined) {
      writer.uint32(58).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertTrigger {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.thresholdPosition = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.thresholdValue = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.seriesName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.channelName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertTrigger {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      severity: isSet(object.severity) ? alertSeverityKindFromJSON(object.severity) : 0,
      thresholdPosition: isSet(object.thresholdPosition) ? thresholdKindFromJSON(object.thresholdPosition) : 0,
      thresholdValue: isSet(object.thresholdValue) ? globalThis.Number(object.thresholdValue) : 0,
      seriesName: isSet(object.seriesName) ? globalThis.String(object.seriesName) : undefined,
      channelName: isSet(object.channelName) ? globalThis.String(object.channelName) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: AlertTrigger): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.severity !== 0) {
      obj.severity = alertSeverityKindToJSON(message.severity);
    }
    if (message.thresholdPosition !== 0) {
      obj.thresholdPosition = thresholdKindToJSON(message.thresholdPosition);
    }
    if (message.thresholdValue !== 0) {
      obj.thresholdValue = message.thresholdValue;
    }
    if (message.seriesName !== undefined) {
      obj.seriesName = message.seriesName;
    }
    if (message.channelName !== undefined) {
      obj.channelName = message.channelName;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },
};

function createBaseDatasetFeatureOperand(): DatasetFeatureOperand {
  return { dataset: "", feature: "" };
}

export const DatasetFeatureOperand: MessageFns<DatasetFeatureOperand> = {
  encode(message: DatasetFeatureOperand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.feature !== "") {
      writer.uint32(18).string(message.feature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatasetFeatureOperand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatasetFeatureOperand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.feature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatasetFeatureOperand {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      feature: isSet(object.feature) ? globalThis.String(object.feature) : "",
    };
  },

  toJSON(message: DatasetFeatureOperand): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.feature !== "") {
      obj.feature = message.feature;
    }
    return obj;
  },
};

function createBaseMetricFormula(): MetricFormula {
  return {
    kind: 0,
    singleSeriesOperands: undefined,
    multiSeriesOperands: [],
    datasetFeatureOperands: undefined,
    name: undefined,
  };
}

export const MetricFormula: MessageFns<MetricFormula> = {
  encode(message: MetricFormula, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.singleSeriesOperands !== undefined) {
      writer.uint32(16).int64(message.singleSeriesOperands);
    }
    writer.uint32(26).fork();
    for (const v of message.multiSeriesOperands) {
      writer.int64(v);
    }
    writer.join();
    if (message.datasetFeatureOperands !== undefined) {
      DatasetFeatureOperand.encode(message.datasetFeatureOperands, writer.uint32(34).fork()).join();
    }
    if (message.name !== undefined) {
      writer.uint32(42).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricFormula {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricFormula();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.singleSeriesOperands = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.multiSeriesOperands.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.multiSeriesOperands.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.datasetFeatureOperands = DatasetFeatureOperand.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricFormula {
    return {
      kind: isSet(object.kind) ? metricFormulaKindFromJSON(object.kind) : 0,
      singleSeriesOperands: isSet(object.singleSeriesOperands)
        ? globalThis.Number(object.singleSeriesOperands)
        : undefined,
      multiSeriesOperands: globalThis.Array.isArray(object?.multiSeriesOperands)
        ? object.multiSeriesOperands.map((e: any) => globalThis.Number(e))
        : [],
      datasetFeatureOperands: isSet(object.datasetFeatureOperands)
        ? DatasetFeatureOperand.fromJSON(object.datasetFeatureOperands)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: MetricFormula): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = metricFormulaKindToJSON(message.kind);
    }
    if (message.singleSeriesOperands !== undefined) {
      obj.singleSeriesOperands = Math.round(message.singleSeriesOperands);
    }
    if (message.multiSeriesOperands?.length) {
      obj.multiSeriesOperands = message.multiSeriesOperands.map((e) => Math.round(e));
    }
    if (message.datasetFeatureOperands !== undefined) {
      obj.datasetFeatureOperands = DatasetFeatureOperand.toJSON(message.datasetFeatureOperands);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },
};

function createBaseMetricFilter(): MetricFilter {
  return { kind: 0, comparator: 0, value: [] };
}

export const MetricFilter: MessageFns<MetricFilter> = {
  encode(message: MetricFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.comparator !== 0) {
      writer.uint32(16).int32(message.comparator);
    }
    for (const v of message.value) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.comparator = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricFilter {
    return {
      kind: isSet(object.kind) ? filterKindFromJSON(object.kind) : 0,
      comparator: isSet(object.comparator) ? comparatorKindFromJSON(object.comparator) : 0,
      value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MetricFilter): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = filterKindToJSON(message.kind);
    }
    if (message.comparator !== 0) {
      obj.comparator = comparatorKindToJSON(message.comparator);
    }
    if (message.value?.length) {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseMetricConfigSeries(): MetricConfigSeries {
  return { metric: 0, filters: [], name: undefined, windowFunction: 0, groupBy: [] };
}

export const MetricConfigSeries: MessageFns<MetricConfigSeries> = {
  encode(message: MetricConfigSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metric !== 0) {
      writer.uint32(8).int32(message.metric);
    }
    for (const v of message.filters) {
      MetricFilter.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.windowFunction !== 0) {
      writer.uint32(32).int32(message.windowFunction);
    }
    writer.uint32(42).fork();
    for (const v of message.groupBy) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricConfigSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricConfigSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.metric = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filters.push(MetricFilter.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.windowFunction = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.groupBy.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.groupBy.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricConfigSeries {
    return {
      metric: isSet(object.metric) ? metricKindFromJSON(object.metric) : 0,
      filters: globalThis.Array.isArray(object?.filters)
        ? object.filters.map((e: any) => MetricFilter.fromJSON(e))
        : [],
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      windowFunction: isSet(object.windowFunction) ? windowFunctionKindFromJSON(object.windowFunction) : 0,
      groupBy: globalThis.Array.isArray(object?.groupBy) ? object.groupBy.map((e: any) => groupByKindFromJSON(e)) : [],
    };
  },

  toJSON(message: MetricConfigSeries): unknown {
    const obj: any = {};
    if (message.metric !== 0) {
      obj.metric = metricKindToJSON(message.metric);
    }
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => MetricFilter.toJSON(e));
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.windowFunction !== 0) {
      obj.windowFunction = windowFunctionKindToJSON(message.windowFunction);
    }
    if (message.groupBy?.length) {
      obj.groupBy = message.groupBy.map((e) => groupByKindToJSON(e));
    }
    return obj;
  },
};

function createBaseMetricConfig(): MetricConfig {
  return { name: "", windowPeriod: "", series: [], formulas: [], trigger: undefined };
}

export const MetricConfig: MessageFns<MetricConfig> = {
  encode(message: MetricConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.windowPeriod !== "") {
      writer.uint32(18).string(message.windowPeriod);
    }
    for (const v of message.series) {
      MetricConfigSeries.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.formulas) {
      MetricFormula.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.trigger !== undefined) {
      AlertTrigger.encode(message.trigger, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.windowPeriod = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.series.push(MetricConfigSeries.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.formulas.push(MetricFormula.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trigger = AlertTrigger.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      windowPeriod: isSet(object.windowPeriod) ? globalThis.String(object.windowPeriod) : "",
      series: globalThis.Array.isArray(object?.series)
        ? object.series.map((e: any) => MetricConfigSeries.fromJSON(e))
        : [],
      formulas: globalThis.Array.isArray(object?.formulas)
        ? object.formulas.map((e: any) => MetricFormula.fromJSON(e))
        : [],
      trigger: isSet(object.trigger) ? AlertTrigger.fromJSON(object.trigger) : undefined,
    };
  },

  toJSON(message: MetricConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.windowPeriod !== "") {
      obj.windowPeriod = message.windowPeriod;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => MetricConfigSeries.toJSON(e));
    }
    if (message.formulas?.length) {
      obj.formulas = message.formulas.map((e) => MetricFormula.toJSON(e));
    }
    if (message.trigger !== undefined) {
      obj.trigger = AlertTrigger.toJSON(message.trigger);
    }
    return obj;
  },
};

function createBaseChart(): Chart {
  return { id: "", config: undefined, entityKind: 0, entityId: undefined };
}

export const Chart: MessageFns<Chart> = {
  encode(message: Chart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.config !== undefined) {
      MetricConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.entityKind !== 0) {
      writer.uint32(24).int32(message.entityKind);
    }
    if (message.entityId !== undefined) {
      writer.uint32(34).string(message.entityId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Chart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = MetricConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.entityKind = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entityId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chart {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      config: isSet(object.config) ? MetricConfig.fromJSON(object.config) : undefined,
      entityKind: isSet(object.entityKind) ? chartLinkKindFromJSON(object.entityKind) : 0,
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : undefined,
    };
  },

  toJSON(message: Chart): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.config !== undefined) {
      obj.config = MetricConfig.toJSON(message.config);
    }
    if (message.entityKind !== 0) {
      obj.entityKind = chartLinkKindToJSON(message.entityKind);
    }
    if (message.entityId !== undefined) {
      obj.entityId = message.entityId;
    }
    return obj;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
