// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/artifacts/v1/cdc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.artifacts.v1";

export interface CDCTableReference {
  name: string;
  schema: string;
}

export interface CDCSource {
  integrationName: string;
  tables: CDCTableReference[];
}

function createBaseCDCTableReference(): CDCTableReference {
  return { name: "", schema: "" };
}

export const CDCTableReference: MessageFns<CDCTableReference> = {
  encode(message: CDCTableReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.schema !== "") {
      writer.uint32(18).string(message.schema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CDCTableReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCDCTableReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CDCTableReference {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
    };
  },

  toJSON(message: CDCTableReference): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CDCTableReference>, I>>(base?: I): CDCTableReference {
    return CDCTableReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CDCTableReference>, I>>(object: I): CDCTableReference {
    const message = createBaseCDCTableReference();
    message.name = object.name ?? "";
    message.schema = object.schema ?? "";
    return message;
  },
};

function createBaseCDCSource(): CDCSource {
  return { integrationName: "", tables: [] };
}

export const CDCSource: MessageFns<CDCSource> = {
  encode(message: CDCSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.integrationName !== "") {
      writer.uint32(10).string(message.integrationName);
    }
    for (const v of message.tables) {
      CDCTableReference.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CDCSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCDCSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.integrationName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tables.push(CDCTableReference.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CDCSource {
    return {
      integrationName: isSet(object.integrationName) ? globalThis.String(object.integrationName) : "",
      tables: globalThis.Array.isArray(object?.tables)
        ? object.tables.map((e: any) => CDCTableReference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CDCSource): unknown {
    const obj: any = {};
    if (message.integrationName !== "") {
      obj.integrationName = message.integrationName;
    }
    if (message.tables?.length) {
      obj.tables = message.tables.map((e) => CDCTableReference.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CDCSource>, I>>(base?: I): CDCSource {
    return CDCSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CDCSource>, I>>(object: I): CDCSource {
    const message = createBaseCDCSource();
    message.integrationName = object.integrationName ?? "";
    message.tables = object.tables?.map((e) => CDCTableReference.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
