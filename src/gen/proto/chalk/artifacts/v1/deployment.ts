// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/artifacts/v1/deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Graph } from "../../graph/v1/graph";
import { CDCSource } from "./cdc";
import { Chart } from "./chart";
import { CronQuery } from "./cron_query";
import { ChalkpyInfo, ProjectSettings } from "./export";

export const protobufPackage = "chalk.artifacts.v1";

export interface DeploymentArtifacts {
  graph: Graph | undefined;
  crons: CronQuery[];
  charts: Chart[];
  cdcSources: CDCSource[];
  config: ProjectSettings | undefined;
  chalkpy: ChalkpyInfo | undefined;
}

function createBaseDeploymentArtifacts(): DeploymentArtifacts {
  return { graph: undefined, crons: [], charts: [], cdcSources: [], config: undefined, chalkpy: undefined };
}

export const DeploymentArtifacts: MessageFns<DeploymentArtifacts> = {
  encode(message: DeploymentArtifacts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.graph !== undefined) {
      Graph.encode(message.graph, writer.uint32(10).fork()).join();
    }
    for (const v of message.crons) {
      CronQuery.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.charts) {
      Chart.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.cdcSources) {
      CDCSource.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.config !== undefined) {
      ProjectSettings.encode(message.config, writer.uint32(42).fork()).join();
    }
    if (message.chalkpy !== undefined) {
      ChalkpyInfo.encode(message.chalkpy, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentArtifacts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentArtifacts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.graph = Graph.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.crons.push(CronQuery.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.charts.push(Chart.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cdcSources.push(CDCSource.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.config = ProjectSettings.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.chalkpy = ChalkpyInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentArtifacts {
    return {
      graph: isSet(object.graph) ? Graph.fromJSON(object.graph) : undefined,
      crons: globalThis.Array.isArray(object?.crons) ? object.crons.map((e: any) => CronQuery.fromJSON(e)) : [],
      charts: globalThis.Array.isArray(object?.charts) ? object.charts.map((e: any) => Chart.fromJSON(e)) : [],
      cdcSources: globalThis.Array.isArray(object?.cdcSources)
        ? object.cdcSources.map((e: any) => CDCSource.fromJSON(e))
        : [],
      config: isSet(object.config) ? ProjectSettings.fromJSON(object.config) : undefined,
      chalkpy: isSet(object.chalkpy) ? ChalkpyInfo.fromJSON(object.chalkpy) : undefined,
    };
  },

  toJSON(message: DeploymentArtifacts): unknown {
    const obj: any = {};
    if (message.graph !== undefined) {
      obj.graph = Graph.toJSON(message.graph);
    }
    if (message.crons?.length) {
      obj.crons = message.crons.map((e) => CronQuery.toJSON(e));
    }
    if (message.charts?.length) {
      obj.charts = message.charts.map((e) => Chart.toJSON(e));
    }
    if (message.cdcSources?.length) {
      obj.cdcSources = message.cdcSources.map((e) => CDCSource.toJSON(e));
    }
    if (message.config !== undefined) {
      obj.config = ProjectSettings.toJSON(message.config);
    }
    if (message.chalkpy !== undefined) {
      obj.chalkpy = ChalkpyInfo.toJSON(message.chalkpy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentArtifacts>, I>>(base?: I): DeploymentArtifacts {
    return DeploymentArtifacts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentArtifacts>, I>>(object: I): DeploymentArtifacts {
    const message = createBaseDeploymentArtifacts();
    message.graph = (object.graph !== undefined && object.graph !== null) ? Graph.fromPartial(object.graph) : undefined;
    message.crons = object.crons?.map((e) => CronQuery.fromPartial(e)) || [];
    message.charts = object.charts?.map((e) => Chart.fromPartial(e)) || [];
    message.cdcSources = object.cdcSources?.map((e) => CDCSource.fromPartial(e)) || [];
    message.config = (object.config !== undefined && object.config !== null)
      ? ProjectSettings.fromPartial(object.config)
      : undefined;
    message.chalkpy = (object.chalkpy !== undefined && object.chalkpy !== null)
      ? ChalkpyInfo.fromPartial(object.chalkpy)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
