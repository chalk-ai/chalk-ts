// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/auth/v1/featurepermission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chalk.auth.v1";

export enum FeaturePermission {
  FEATURE_PERMISSION_UNSPECIFIED = 0,
  /**
   * FEATURE_PERMISSION_ALLOW - Allow unfettered access to the feature.
   * This permission is the default permission for all features.
   */
  FEATURE_PERMISSION_ALLOW = 1,
  /**
   * FEATURE_PERMISSION_ALLOW_INTERNAL - Allow access to the feature only within a query plan,
   * and do not return the feature to the client directly.
   */
  FEATURE_PERMISSION_ALLOW_INTERNAL = 2,
  /**
   * FEATURE_PERMISSION_DENY - Deny access to the feature, even if the user hasn't requested
   * access to this feature directly, but needs the feature to compute
   * the result of the query.
   */
  FEATURE_PERMISSION_DENY = 3,
  UNRECOGNIZED = -1,
}

export function featurePermissionFromJSON(object: any): FeaturePermission {
  switch (object) {
    case 0:
    case "FEATURE_PERMISSION_UNSPECIFIED":
      return FeaturePermission.FEATURE_PERMISSION_UNSPECIFIED;
    case 1:
    case "FEATURE_PERMISSION_ALLOW":
      return FeaturePermission.FEATURE_PERMISSION_ALLOW;
    case 2:
    case "FEATURE_PERMISSION_ALLOW_INTERNAL":
      return FeaturePermission.FEATURE_PERMISSION_ALLOW_INTERNAL;
    case 3:
    case "FEATURE_PERMISSION_DENY":
      return FeaturePermission.FEATURE_PERMISSION_DENY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeaturePermission.UNRECOGNIZED;
  }
}

export function featurePermissionToJSON(object: FeaturePermission): string {
  switch (object) {
    case FeaturePermission.FEATURE_PERMISSION_UNSPECIFIED:
      return "FEATURE_PERMISSION_UNSPECIFIED";
    case FeaturePermission.FEATURE_PERMISSION_ALLOW:
      return "FEATURE_PERMISSION_ALLOW";
    case FeaturePermission.FEATURE_PERMISSION_ALLOW_INTERNAL:
      return "FEATURE_PERMISSION_ALLOW_INTERNAL";
    case FeaturePermission.FEATURE_PERMISSION_DENY:
      return "FEATURE_PERMISSION_DENY";
    case FeaturePermission.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeaturePermissions {
  tags: { [key: string]: FeaturePermission };
}

export interface FeaturePermissions_TagsEntry {
  key: string;
  value: FeaturePermission;
}

function createBaseFeaturePermissions(): FeaturePermissions {
  return { tags: {} };
}

export const FeaturePermissions: MessageFns<FeaturePermissions> = {
  encode(message: FeaturePermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.tags).forEach(([key, value]) => {
      FeaturePermissions_TagsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeaturePermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturePermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = FeaturePermissions_TagsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.tags[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeaturePermissions {
    return {
      tags: isObject(object.tags)
        ? Object.entries(object.tags).reduce<{ [key: string]: FeaturePermission }>((acc, [key, value]) => {
          acc[key] = featurePermissionFromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: FeaturePermissions): unknown {
    const obj: any = {};
    if (message.tags) {
      const entries = Object.entries(message.tags);
      if (entries.length > 0) {
        obj.tags = {};
        entries.forEach(([k, v]) => {
          obj.tags[k] = featurePermissionToJSON(v);
        });
      }
    }
    return obj;
  },
};

function createBaseFeaturePermissions_TagsEntry(): FeaturePermissions_TagsEntry {
  return { key: "", value: 0 };
}

export const FeaturePermissions_TagsEntry: MessageFns<FeaturePermissions_TagsEntry> = {
  encode(message: FeaturePermissions_TagsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeaturePermissions_TagsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturePermissions_TagsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeaturePermissions_TagsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? featurePermissionFromJSON(object.value) : 0,
    };
  },

  toJSON(message: FeaturePermissions_TagsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = featurePermissionToJSON(message.value);
    }
    return obj;
  },
};

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
