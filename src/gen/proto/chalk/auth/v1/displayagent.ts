// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/auth/v1/displayagent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { FeaturePermissions } from "./featurepermission";
import { Permission, permissionFromJSON, permissionToJSON } from "./permissions";

export const protobufPackage = "chalk.auth.v1";

export interface DisplayPermission {
  name: string;
  permission: Permission;
}

export interface DisplayEnvironmentPermissions {
  environmentId: string;
  environmentName: string;
  projectId: string;
  projectName: string;
  permissions: DisplayPermission[];
}

export interface DisplayUserAgent {
  /** @deprecated */
  clientId: string;
  userId: string;
  teamId: string;
  permissionsByEnvironment: DisplayEnvironmentPermissions[];
  impersonated: boolean;
  name: string;
  email: string;
  teamName: string;
  customerClaims: DisplayCustomClaim[];
}

export interface DisplayCustomClaim {
  key: string;
  values: string[];
}

export interface DisplayServiceTokenAgent {
  id: string;
  clientId: string;
  teamId: string;
  projectId: string;
  environmentId: string;
  permissions: DisplayPermission[];
  name: string;
  teamName: string;
  projectName: string;
  environmentName: string;
  customerClaims: DisplayCustomClaim[];
  featurePermissions: FeaturePermissions | undefined;
  createdAt: Date | undefined;
}

export interface DisplayEngineAgent {
  id: string;
  teamId: string;
  projectId: string;
  environmentId: string;
  impersonated: boolean;
  teamName: string;
  projectName: string;
  environmentName: string;
}

export interface DisplayTenantAgent {
}

export interface DisplayMetadataServiceAgent {
}

export interface DisplayAgent {
  userAgent?: DisplayUserAgent | undefined;
  serviceTokenAgent?: DisplayServiceTokenAgent | undefined;
  engineAgent?: DisplayEngineAgent | undefined;
  tenantAgent?: DisplayTenantAgent | undefined;
  metadataServiceAgent?: DisplayMetadataServiceAgent | undefined;
}

function createBaseDisplayPermission(): DisplayPermission {
  return { name: "", permission: 0 };
}

export const DisplayPermission: MessageFns<DisplayPermission> = {
  encode(message: DisplayPermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.permission !== 0) {
      writer.uint32(16).int32(message.permission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.permission = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayPermission {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      permission: isSet(object.permission) ? permissionFromJSON(object.permission) : 0,
    };
  },

  toJSON(message: DisplayPermission): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.permission !== 0) {
      obj.permission = permissionToJSON(message.permission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayPermission>, I>>(base?: I): DisplayPermission {
    return DisplayPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayPermission>, I>>(object: I): DisplayPermission {
    const message = createBaseDisplayPermission();
    message.name = object.name ?? "";
    message.permission = object.permission ?? 0;
    return message;
  },
};

function createBaseDisplayEnvironmentPermissions(): DisplayEnvironmentPermissions {
  return { environmentId: "", environmentName: "", projectId: "", projectName: "", permissions: [] };
}

export const DisplayEnvironmentPermissions: MessageFns<DisplayEnvironmentPermissions> = {
  encode(message: DisplayEnvironmentPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environmentId !== "") {
      writer.uint32(10).string(message.environmentId);
    }
    if (message.environmentName !== "") {
      writer.uint32(18).string(message.environmentName);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.projectName !== "") {
      writer.uint32(34).string(message.projectName);
    }
    for (const v of message.permissions) {
      DisplayPermission.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayEnvironmentPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayEnvironmentPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environmentName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.permissions.push(DisplayPermission.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayEnvironmentPermissions {
    return {
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      environmentName: isSet(object.environmentName) ? globalThis.String(object.environmentName) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => DisplayPermission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DisplayEnvironmentPermissions): unknown {
    const obj: any = {};
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.environmentName !== "") {
      obj.environmentName = message.environmentName;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.projectName !== "") {
      obj.projectName = message.projectName;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => DisplayPermission.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayEnvironmentPermissions>, I>>(base?: I): DisplayEnvironmentPermissions {
    return DisplayEnvironmentPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayEnvironmentPermissions>, I>>(
    object: I,
  ): DisplayEnvironmentPermissions {
    const message = createBaseDisplayEnvironmentPermissions();
    message.environmentId = object.environmentId ?? "";
    message.environmentName = object.environmentName ?? "";
    message.projectId = object.projectId ?? "";
    message.projectName = object.projectName ?? "";
    message.permissions = object.permissions?.map((e) => DisplayPermission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDisplayUserAgent(): DisplayUserAgent {
  return {
    clientId: "",
    userId: "",
    teamId: "",
    permissionsByEnvironment: [],
    impersonated: false,
    name: "",
    email: "",
    teamName: "",
    customerClaims: [],
  };
}

export const DisplayUserAgent: MessageFns<DisplayUserAgent> = {
  encode(message: DisplayUserAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    for (const v of message.permissionsByEnvironment) {
      DisplayEnvironmentPermissions.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.impersonated !== false) {
      writer.uint32(40).bool(message.impersonated);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(58).string(message.email);
    }
    if (message.teamName !== "") {
      writer.uint32(66).string(message.teamName);
    }
    for (const v of message.customerClaims) {
      DisplayCustomClaim.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayUserAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayUserAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permissionsByEnvironment.push(DisplayEnvironmentPermissions.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.impersonated = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.teamName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.customerClaims.push(DisplayCustomClaim.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayUserAgent {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      permissionsByEnvironment: globalThis.Array.isArray(object?.permissionsByEnvironment)
        ? object.permissionsByEnvironment.map((e: any) => DisplayEnvironmentPermissions.fromJSON(e))
        : [],
      impersonated: isSet(object.impersonated) ? globalThis.Boolean(object.impersonated) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      customerClaims: globalThis.Array.isArray(object?.customerClaims)
        ? object.customerClaims.map((e: any) => DisplayCustomClaim.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DisplayUserAgent): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.permissionsByEnvironment?.length) {
      obj.permissionsByEnvironment = message.permissionsByEnvironment.map((e) =>
        DisplayEnvironmentPermissions.toJSON(e)
      );
    }
    if (message.impersonated !== false) {
      obj.impersonated = message.impersonated;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.customerClaims?.length) {
      obj.customerClaims = message.customerClaims.map((e) => DisplayCustomClaim.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayUserAgent>, I>>(base?: I): DisplayUserAgent {
    return DisplayUserAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayUserAgent>, I>>(object: I): DisplayUserAgent {
    const message = createBaseDisplayUserAgent();
    message.clientId = object.clientId ?? "";
    message.userId = object.userId ?? "";
    message.teamId = object.teamId ?? "";
    message.permissionsByEnvironment =
      object.permissionsByEnvironment?.map((e) => DisplayEnvironmentPermissions.fromPartial(e)) || [];
    message.impersonated = object.impersonated ?? false;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.teamName = object.teamName ?? "";
    message.customerClaims = object.customerClaims?.map((e) => DisplayCustomClaim.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDisplayCustomClaim(): DisplayCustomClaim {
  return { key: "", values: [] };
}

export const DisplayCustomClaim: MessageFns<DisplayCustomClaim> = {
  encode(message: DisplayCustomClaim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    for (const v of message.values) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayCustomClaim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayCustomClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayCustomClaim {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DisplayCustomClaim): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayCustomClaim>, I>>(base?: I): DisplayCustomClaim {
    return DisplayCustomClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayCustomClaim>, I>>(object: I): DisplayCustomClaim {
    const message = createBaseDisplayCustomClaim();
    message.key = object.key ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseDisplayServiceTokenAgent(): DisplayServiceTokenAgent {
  return {
    id: "",
    clientId: "",
    teamId: "",
    projectId: "",
    environmentId: "",
    permissions: [],
    name: "",
    teamName: "",
    projectName: "",
    environmentName: "",
    customerClaims: [],
    featurePermissions: undefined,
    createdAt: undefined,
  };
}

export const DisplayServiceTokenAgent: MessageFns<DisplayServiceTokenAgent> = {
  encode(message: DisplayServiceTokenAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.projectId !== "") {
      writer.uint32(34).string(message.projectId);
    }
    if (message.environmentId !== "") {
      writer.uint32(42).string(message.environmentId);
    }
    for (const v of message.permissions) {
      DisplayPermission.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.teamName !== "") {
      writer.uint32(66).string(message.teamName);
    }
    if (message.projectName !== "") {
      writer.uint32(74).string(message.projectName);
    }
    if (message.environmentName !== "") {
      writer.uint32(82).string(message.environmentName);
    }
    for (const v of message.customerClaims) {
      DisplayCustomClaim.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.featurePermissions !== undefined) {
      FeaturePermissions.encode(message.featurePermissions, writer.uint32(98).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayServiceTokenAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayServiceTokenAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.permissions.push(DisplayPermission.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.teamName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.environmentName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.customerClaims.push(DisplayCustomClaim.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.featurePermissions = FeaturePermissions.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayServiceTokenAgent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => DisplayPermission.fromJSON(e))
        : [],
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
      environmentName: isSet(object.environmentName) ? globalThis.String(object.environmentName) : "",
      customerClaims: globalThis.Array.isArray(object?.customerClaims)
        ? object.customerClaims.map((e: any) => DisplayCustomClaim.fromJSON(e))
        : [],
      featurePermissions: isSet(object.featurePermissions)
        ? FeaturePermissions.fromJSON(object.featurePermissions)
        : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: DisplayServiceTokenAgent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => DisplayPermission.toJSON(e));
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.projectName !== "") {
      obj.projectName = message.projectName;
    }
    if (message.environmentName !== "") {
      obj.environmentName = message.environmentName;
    }
    if (message.customerClaims?.length) {
      obj.customerClaims = message.customerClaims.map((e) => DisplayCustomClaim.toJSON(e));
    }
    if (message.featurePermissions !== undefined) {
      obj.featurePermissions = FeaturePermissions.toJSON(message.featurePermissions);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayServiceTokenAgent>, I>>(base?: I): DisplayServiceTokenAgent {
    return DisplayServiceTokenAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayServiceTokenAgent>, I>>(object: I): DisplayServiceTokenAgent {
    const message = createBaseDisplayServiceTokenAgent();
    message.id = object.id ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.projectId = object.projectId ?? "";
    message.environmentId = object.environmentId ?? "";
    message.permissions = object.permissions?.map((e) => DisplayPermission.fromPartial(e)) || [];
    message.name = object.name ?? "";
    message.teamName = object.teamName ?? "";
    message.projectName = object.projectName ?? "";
    message.environmentName = object.environmentName ?? "";
    message.customerClaims = object.customerClaims?.map((e) => DisplayCustomClaim.fromPartial(e)) || [];
    message.featurePermissions = (object.featurePermissions !== undefined && object.featurePermissions !== null)
      ? FeaturePermissions.fromPartial(object.featurePermissions)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseDisplayEngineAgent(): DisplayEngineAgent {
  return {
    id: "",
    teamId: "",
    projectId: "",
    environmentId: "",
    impersonated: false,
    teamName: "",
    projectName: "",
    environmentName: "",
  };
}

export const DisplayEngineAgent: MessageFns<DisplayEngineAgent> = {
  encode(message: DisplayEngineAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.teamId !== "") {
      writer.uint32(18).string(message.teamId);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.environmentId !== "") {
      writer.uint32(34).string(message.environmentId);
    }
    if (message.impersonated !== false) {
      writer.uint32(40).bool(message.impersonated);
    }
    if (message.teamName !== "") {
      writer.uint32(50).string(message.teamName);
    }
    if (message.projectName !== "") {
      writer.uint32(58).string(message.projectName);
    }
    if (message.environmentName !== "") {
      writer.uint32(66).string(message.environmentName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayEngineAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayEngineAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.impersonated = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.teamName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.environmentName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayEngineAgent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      impersonated: isSet(object.impersonated) ? globalThis.Boolean(object.impersonated) : false,
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
      environmentName: isSet(object.environmentName) ? globalThis.String(object.environmentName) : "",
    };
  },

  toJSON(message: DisplayEngineAgent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.impersonated !== false) {
      obj.impersonated = message.impersonated;
    }
    if (message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.projectName !== "") {
      obj.projectName = message.projectName;
    }
    if (message.environmentName !== "") {
      obj.environmentName = message.environmentName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayEngineAgent>, I>>(base?: I): DisplayEngineAgent {
    return DisplayEngineAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayEngineAgent>, I>>(object: I): DisplayEngineAgent {
    const message = createBaseDisplayEngineAgent();
    message.id = object.id ?? "";
    message.teamId = object.teamId ?? "";
    message.projectId = object.projectId ?? "";
    message.environmentId = object.environmentId ?? "";
    message.impersonated = object.impersonated ?? false;
    message.teamName = object.teamName ?? "";
    message.projectName = object.projectName ?? "";
    message.environmentName = object.environmentName ?? "";
    return message;
  },
};

function createBaseDisplayTenantAgent(): DisplayTenantAgent {
  return {};
}

export const DisplayTenantAgent: MessageFns<DisplayTenantAgent> = {
  encode(_: DisplayTenantAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayTenantAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayTenantAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisplayTenantAgent {
    return {};
  },

  toJSON(_: DisplayTenantAgent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayTenantAgent>, I>>(base?: I): DisplayTenantAgent {
    return DisplayTenantAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayTenantAgent>, I>>(_: I): DisplayTenantAgent {
    const message = createBaseDisplayTenantAgent();
    return message;
  },
};

function createBaseDisplayMetadataServiceAgent(): DisplayMetadataServiceAgent {
  return {};
}

export const DisplayMetadataServiceAgent: MessageFns<DisplayMetadataServiceAgent> = {
  encode(_: DisplayMetadataServiceAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayMetadataServiceAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayMetadataServiceAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisplayMetadataServiceAgent {
    return {};
  },

  toJSON(_: DisplayMetadataServiceAgent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayMetadataServiceAgent>, I>>(base?: I): DisplayMetadataServiceAgent {
    return DisplayMetadataServiceAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayMetadataServiceAgent>, I>>(_: I): DisplayMetadataServiceAgent {
    const message = createBaseDisplayMetadataServiceAgent();
    return message;
  },
};

function createBaseDisplayAgent(): DisplayAgent {
  return {
    userAgent: undefined,
    serviceTokenAgent: undefined,
    engineAgent: undefined,
    tenantAgent: undefined,
    metadataServiceAgent: undefined,
  };
}

export const DisplayAgent: MessageFns<DisplayAgent> = {
  encode(message: DisplayAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAgent !== undefined) {
      DisplayUserAgent.encode(message.userAgent, writer.uint32(10).fork()).join();
    }
    if (message.serviceTokenAgent !== undefined) {
      DisplayServiceTokenAgent.encode(message.serviceTokenAgent, writer.uint32(18).fork()).join();
    }
    if (message.engineAgent !== undefined) {
      DisplayEngineAgent.encode(message.engineAgent, writer.uint32(26).fork()).join();
    }
    if (message.tenantAgent !== undefined) {
      DisplayTenantAgent.encode(message.tenantAgent, writer.uint32(34).fork()).join();
    }
    if (message.metadataServiceAgent !== undefined) {
      DisplayMetadataServiceAgent.encode(message.metadataServiceAgent, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAgent = DisplayUserAgent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceTokenAgent = DisplayServiceTokenAgent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.engineAgent = DisplayEngineAgent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tenantAgent = DisplayTenantAgent.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadataServiceAgent = DisplayMetadataServiceAgent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayAgent {
    return {
      userAgent: isSet(object.userAgent) ? DisplayUserAgent.fromJSON(object.userAgent) : undefined,
      serviceTokenAgent: isSet(object.serviceTokenAgent)
        ? DisplayServiceTokenAgent.fromJSON(object.serviceTokenAgent)
        : undefined,
      engineAgent: isSet(object.engineAgent) ? DisplayEngineAgent.fromJSON(object.engineAgent) : undefined,
      tenantAgent: isSet(object.tenantAgent) ? DisplayTenantAgent.fromJSON(object.tenantAgent) : undefined,
      metadataServiceAgent: isSet(object.metadataServiceAgent)
        ? DisplayMetadataServiceAgent.fromJSON(object.metadataServiceAgent)
        : undefined,
    };
  },

  toJSON(message: DisplayAgent): unknown {
    const obj: any = {};
    if (message.userAgent !== undefined) {
      obj.userAgent = DisplayUserAgent.toJSON(message.userAgent);
    }
    if (message.serviceTokenAgent !== undefined) {
      obj.serviceTokenAgent = DisplayServiceTokenAgent.toJSON(message.serviceTokenAgent);
    }
    if (message.engineAgent !== undefined) {
      obj.engineAgent = DisplayEngineAgent.toJSON(message.engineAgent);
    }
    if (message.tenantAgent !== undefined) {
      obj.tenantAgent = DisplayTenantAgent.toJSON(message.tenantAgent);
    }
    if (message.metadataServiceAgent !== undefined) {
      obj.metadataServiceAgent = DisplayMetadataServiceAgent.toJSON(message.metadataServiceAgent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplayAgent>, I>>(base?: I): DisplayAgent {
    return DisplayAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplayAgent>, I>>(object: I): DisplayAgent {
    const message = createBaseDisplayAgent();
    message.userAgent = (object.userAgent !== undefined && object.userAgent !== null)
      ? DisplayUserAgent.fromPartial(object.userAgent)
      : undefined;
    message.serviceTokenAgent = (object.serviceTokenAgent !== undefined && object.serviceTokenAgent !== null)
      ? DisplayServiceTokenAgent.fromPartial(object.serviceTokenAgent)
      : undefined;
    message.engineAgent = (object.engineAgent !== undefined && object.engineAgent !== null)
      ? DisplayEngineAgent.fromPartial(object.engineAgent)
      : undefined;
    message.tenantAgent = (object.tenantAgent !== undefined && object.tenantAgent !== null)
      ? DisplayTenantAgent.fromPartial(object.tenantAgent)
      : undefined;
    message.metadataServiceAgent = (object.metadataServiceAgent !== undefined && object.metadataServiceAgent !== null)
      ? DisplayMetadataServiceAgent.fromPartial(object.metadataServiceAgent)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
