// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/auth/v1/agent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FeaturePermissions } from "./featurepermission";
import { Permission, permissionFromJSON, permissionToJSON } from "./permissions";

export const protobufPackage = "chalk.auth.v1";

export interface EnvironmentPermissions {
  permissions: Permission[];
  featurePermissions: FeaturePermissions | undefined;
  customerClaims: CustomClaim[];
}

export interface UserAgent {
  /** @deprecated */
  clientId: string;
  userId: string;
  teamId: string;
  permissionsByEnvironment: { [key: string]: EnvironmentPermissions };
  impersonated: boolean;
}

export interface UserAgent_PermissionsByEnvironmentEntry {
  key: string;
  value: EnvironmentPermissions | undefined;
}

/**
 * CustomClaim is used to encode customer permissions.
 * The keys used are:
 * - `query_tags`: The tags of features that the user is allowed to query.
 */
export interface CustomClaim {
  key: string;
  values: string[];
}

export interface ServiceTokenAgent {
  id: string;
  clientId: string;
  teamId: string;
  environment: string;
  permissions: Permission[];
  /** @deprecated */
  customClaims: string[];
  customerClaims: CustomClaim[];
  featurePermissions: FeaturePermissions | undefined;
}

export interface EngineAgent {
  id: string;
  teamId: string;
  projectId: string;
  environmentId: string;
  impersonated: boolean;
}

export interface MetadataServiceAgent {
}

export interface TenantAgent {
}

export interface Agent {
  userAgent?: UserAgent | undefined;
  serviceTokenAgent?: ServiceTokenAgent | undefined;
  engineAgent?: EngineAgent | undefined;
  tenantAgent?: TenantAgent | undefined;
  metadataServiceAgent?: MetadataServiceAgent | undefined;
}

function createBaseEnvironmentPermissions(): EnvironmentPermissions {
  return { permissions: [], featurePermissions: undefined, customerClaims: [] };
}

export const EnvironmentPermissions: MessageFns<EnvironmentPermissions> = {
  encode(message: EnvironmentPermissions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(18).fork();
    for (const v of message.permissions) {
      writer.int32(v);
    }
    writer.join();
    if (message.featurePermissions !== undefined) {
      FeaturePermissions.encode(message.featurePermissions, writer.uint32(26).fork()).join();
    }
    for (const v of message.customerClaims) {
      CustomClaim.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentPermissions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentPermissions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag === 16) {
            message.permissions.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.featurePermissions = FeaturePermissions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.customerClaims.push(CustomClaim.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentPermissions {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => permissionFromJSON(e))
        : [],
      featurePermissions: isSet(object.featurePermissions)
        ? FeaturePermissions.fromJSON(object.featurePermissions)
        : undefined,
      customerClaims: globalThis.Array.isArray(object?.customerClaims)
        ? object.customerClaims.map((e: any) => CustomClaim.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EnvironmentPermissions): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => permissionToJSON(e));
    }
    if (message.featurePermissions !== undefined) {
      obj.featurePermissions = FeaturePermissions.toJSON(message.featurePermissions);
    }
    if (message.customerClaims?.length) {
      obj.customerClaims = message.customerClaims.map((e) => CustomClaim.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentPermissions>, I>>(base?: I): EnvironmentPermissions {
    return EnvironmentPermissions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentPermissions>, I>>(object: I): EnvironmentPermissions {
    const message = createBaseEnvironmentPermissions();
    message.permissions = object.permissions?.map((e) => e) || [];
    message.featurePermissions = (object.featurePermissions !== undefined && object.featurePermissions !== null)
      ? FeaturePermissions.fromPartial(object.featurePermissions)
      : undefined;
    message.customerClaims = object.customerClaims?.map((e) => CustomClaim.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserAgent(): UserAgent {
  return { clientId: "", userId: "", teamId: "", permissionsByEnvironment: {}, impersonated: false };
}

export const UserAgent: MessageFns<UserAgent> = {
  encode(message: UserAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    Object.entries(message.permissionsByEnvironment).forEach(([key, value]) => {
      UserAgent_PermissionsByEnvironmentEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.impersonated !== false) {
      writer.uint32(40).bool(message.impersonated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = UserAgent_PermissionsByEnvironmentEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.permissionsByEnvironment[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.impersonated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserAgent {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      permissionsByEnvironment: isObject(object.permissionsByEnvironment)
        ? Object.entries(object.permissionsByEnvironment).reduce<{ [key: string]: EnvironmentPermissions }>(
          (acc, [key, value]) => {
            acc[key] = EnvironmentPermissions.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      impersonated: isSet(object.impersonated) ? globalThis.Boolean(object.impersonated) : false,
    };
  },

  toJSON(message: UserAgent): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.permissionsByEnvironment) {
      const entries = Object.entries(message.permissionsByEnvironment);
      if (entries.length > 0) {
        obj.permissionsByEnvironment = {};
        entries.forEach(([k, v]) => {
          obj.permissionsByEnvironment[k] = EnvironmentPermissions.toJSON(v);
        });
      }
    }
    if (message.impersonated !== false) {
      obj.impersonated = message.impersonated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserAgent>, I>>(base?: I): UserAgent {
    return UserAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserAgent>, I>>(object: I): UserAgent {
    const message = createBaseUserAgent();
    message.clientId = object.clientId ?? "";
    message.userId = object.userId ?? "";
    message.teamId = object.teamId ?? "";
    message.permissionsByEnvironment = Object.entries(object.permissionsByEnvironment ?? {}).reduce<
      { [key: string]: EnvironmentPermissions }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = EnvironmentPermissions.fromPartial(value);
      }
      return acc;
    }, {});
    message.impersonated = object.impersonated ?? false;
    return message;
  },
};

function createBaseUserAgent_PermissionsByEnvironmentEntry(): UserAgent_PermissionsByEnvironmentEntry {
  return { key: "", value: undefined };
}

export const UserAgent_PermissionsByEnvironmentEntry: MessageFns<UserAgent_PermissionsByEnvironmentEntry> = {
  encode(message: UserAgent_PermissionsByEnvironmentEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      EnvironmentPermissions.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserAgent_PermissionsByEnvironmentEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserAgent_PermissionsByEnvironmentEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = EnvironmentPermissions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserAgent_PermissionsByEnvironmentEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? EnvironmentPermissions.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UserAgent_PermissionsByEnvironmentEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = EnvironmentPermissions.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserAgent_PermissionsByEnvironmentEntry>, I>>(
    base?: I,
  ): UserAgent_PermissionsByEnvironmentEntry {
    return UserAgent_PermissionsByEnvironmentEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserAgent_PermissionsByEnvironmentEntry>, I>>(
    object: I,
  ): UserAgent_PermissionsByEnvironmentEntry {
    const message = createBaseUserAgent_PermissionsByEnvironmentEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? EnvironmentPermissions.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseCustomClaim(): CustomClaim {
  return { key: "", values: [] };
}

export const CustomClaim: MessageFns<CustomClaim> = {
  encode(message: CustomClaim, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    for (const v of message.values) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomClaim {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomClaim {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CustomClaim): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomClaim>, I>>(base?: I): CustomClaim {
    return CustomClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomClaim>, I>>(object: I): CustomClaim {
    const message = createBaseCustomClaim();
    message.key = object.key ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseServiceTokenAgent(): ServiceTokenAgent {
  return {
    id: "",
    clientId: "",
    teamId: "",
    environment: "",
    permissions: [],
    customClaims: [],
    customerClaims: [],
    featurePermissions: undefined,
  };
}

export const ServiceTokenAgent: MessageFns<ServiceTokenAgent> = {
  encode(message: ServiceTokenAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.environment !== "") {
      writer.uint32(34).string(message.environment);
    }
    writer.uint32(42).fork();
    for (const v of message.permissions) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.customClaims) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.customerClaims) {
      CustomClaim.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.featurePermissions !== undefined) {
      FeaturePermissions.encode(message.featurePermissions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceTokenAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceTokenAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.permissions.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.customClaims.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.customerClaims.push(CustomClaim.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.featurePermissions = FeaturePermissions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceTokenAgent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => permissionFromJSON(e))
        : [],
      customClaims: globalThis.Array.isArray(object?.customClaims)
        ? object.customClaims.map((e: any) => globalThis.String(e))
        : [],
      customerClaims: globalThis.Array.isArray(object?.customerClaims)
        ? object.customerClaims.map((e: any) => CustomClaim.fromJSON(e))
        : [],
      featurePermissions: isSet(object.featurePermissions)
        ? FeaturePermissions.fromJSON(object.featurePermissions)
        : undefined,
    };
  },

  toJSON(message: ServiceTokenAgent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => permissionToJSON(e));
    }
    if (message.customClaims?.length) {
      obj.customClaims = message.customClaims;
    }
    if (message.customerClaims?.length) {
      obj.customerClaims = message.customerClaims.map((e) => CustomClaim.toJSON(e));
    }
    if (message.featurePermissions !== undefined) {
      obj.featurePermissions = FeaturePermissions.toJSON(message.featurePermissions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceTokenAgent>, I>>(base?: I): ServiceTokenAgent {
    return ServiceTokenAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceTokenAgent>, I>>(object: I): ServiceTokenAgent {
    const message = createBaseServiceTokenAgent();
    message.id = object.id ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.environment = object.environment ?? "";
    message.permissions = object.permissions?.map((e) => e) || [];
    message.customClaims = object.customClaims?.map((e) => e) || [];
    message.customerClaims = object.customerClaims?.map((e) => CustomClaim.fromPartial(e)) || [];
    message.featurePermissions = (object.featurePermissions !== undefined && object.featurePermissions !== null)
      ? FeaturePermissions.fromPartial(object.featurePermissions)
      : undefined;
    return message;
  },
};

function createBaseEngineAgent(): EngineAgent {
  return { id: "", teamId: "", projectId: "", environmentId: "", impersonated: false };
}

export const EngineAgent: MessageFns<EngineAgent> = {
  encode(message: EngineAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.teamId !== "") {
      writer.uint32(18).string(message.teamId);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.environmentId !== "") {
      writer.uint32(34).string(message.environmentId);
    }
    if (message.impersonated !== false) {
      writer.uint32(40).bool(message.impersonated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.impersonated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineAgent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      impersonated: isSet(object.impersonated) ? globalThis.Boolean(object.impersonated) : false,
    };
  },

  toJSON(message: EngineAgent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.impersonated !== false) {
      obj.impersonated = message.impersonated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EngineAgent>, I>>(base?: I): EngineAgent {
    return EngineAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EngineAgent>, I>>(object: I): EngineAgent {
    const message = createBaseEngineAgent();
    message.id = object.id ?? "";
    message.teamId = object.teamId ?? "";
    message.projectId = object.projectId ?? "";
    message.environmentId = object.environmentId ?? "";
    message.impersonated = object.impersonated ?? false;
    return message;
  },
};

function createBaseMetadataServiceAgent(): MetadataServiceAgent {
  return {};
}

export const MetadataServiceAgent: MessageFns<MetadataServiceAgent> = {
  encode(_: MetadataServiceAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataServiceAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataServiceAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MetadataServiceAgent {
    return {};
  },

  toJSON(_: MetadataServiceAgent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataServiceAgent>, I>>(base?: I): MetadataServiceAgent {
    return MetadataServiceAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataServiceAgent>, I>>(_: I): MetadataServiceAgent {
    const message = createBaseMetadataServiceAgent();
    return message;
  },
};

function createBaseTenantAgent(): TenantAgent {
  return {};
}

export const TenantAgent: MessageFns<TenantAgent> = {
  encode(_: TenantAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TenantAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTenantAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TenantAgent {
    return {};
  },

  toJSON(_: TenantAgent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TenantAgent>, I>>(base?: I): TenantAgent {
    return TenantAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TenantAgent>, I>>(_: I): TenantAgent {
    const message = createBaseTenantAgent();
    return message;
  },
};

function createBaseAgent(): Agent {
  return {
    userAgent: undefined,
    serviceTokenAgent: undefined,
    engineAgent: undefined,
    tenantAgent: undefined,
    metadataServiceAgent: undefined,
  };
}

export const Agent: MessageFns<Agent> = {
  encode(message: Agent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAgent !== undefined) {
      UserAgent.encode(message.userAgent, writer.uint32(10).fork()).join();
    }
    if (message.serviceTokenAgent !== undefined) {
      ServiceTokenAgent.encode(message.serviceTokenAgent, writer.uint32(18).fork()).join();
    }
    if (message.engineAgent !== undefined) {
      EngineAgent.encode(message.engineAgent, writer.uint32(26).fork()).join();
    }
    if (message.tenantAgent !== undefined) {
      TenantAgent.encode(message.tenantAgent, writer.uint32(34).fork()).join();
    }
    if (message.metadataServiceAgent !== undefined) {
      MetadataServiceAgent.encode(message.metadataServiceAgent, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAgent = UserAgent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceTokenAgent = ServiceTokenAgent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.engineAgent = EngineAgent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tenantAgent = TenantAgent.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadataServiceAgent = MetadataServiceAgent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent {
    return {
      userAgent: isSet(object.userAgent) ? UserAgent.fromJSON(object.userAgent) : undefined,
      serviceTokenAgent: isSet(object.serviceTokenAgent)
        ? ServiceTokenAgent.fromJSON(object.serviceTokenAgent)
        : undefined,
      engineAgent: isSet(object.engineAgent) ? EngineAgent.fromJSON(object.engineAgent) : undefined,
      tenantAgent: isSet(object.tenantAgent) ? TenantAgent.fromJSON(object.tenantAgent) : undefined,
      metadataServiceAgent: isSet(object.metadataServiceAgent)
        ? MetadataServiceAgent.fromJSON(object.metadataServiceAgent)
        : undefined,
    };
  },

  toJSON(message: Agent): unknown {
    const obj: any = {};
    if (message.userAgent !== undefined) {
      obj.userAgent = UserAgent.toJSON(message.userAgent);
    }
    if (message.serviceTokenAgent !== undefined) {
      obj.serviceTokenAgent = ServiceTokenAgent.toJSON(message.serviceTokenAgent);
    }
    if (message.engineAgent !== undefined) {
      obj.engineAgent = EngineAgent.toJSON(message.engineAgent);
    }
    if (message.tenantAgent !== undefined) {
      obj.tenantAgent = TenantAgent.toJSON(message.tenantAgent);
    }
    if (message.metadataServiceAgent !== undefined) {
      obj.metadataServiceAgent = MetadataServiceAgent.toJSON(message.metadataServiceAgent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Agent>, I>>(base?: I): Agent {
    return Agent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Agent>, I>>(object: I): Agent {
    const message = createBaseAgent();
    message.userAgent = (object.userAgent !== undefined && object.userAgent !== null)
      ? UserAgent.fromPartial(object.userAgent)
      : undefined;
    message.serviceTokenAgent = (object.serviceTokenAgent !== undefined && object.serviceTokenAgent !== null)
      ? ServiceTokenAgent.fromPartial(object.serviceTokenAgent)
      : undefined;
    message.engineAgent = (object.engineAgent !== undefined && object.engineAgent !== null)
      ? EngineAgent.fromPartial(object.engineAgent)
      : undefined;
    message.tenantAgent = (object.tenantAgent !== undefined && object.tenantAgent !== null)
      ? TenantAgent.fromPartial(object.tenantAgent)
      : undefined;
    message.metadataServiceAgent = (object.metadataServiceAgent !== undefined && object.metadataServiceAgent !== null)
      ? MetadataServiceAgent.fromPartial(object.metadataServiceAgent)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
