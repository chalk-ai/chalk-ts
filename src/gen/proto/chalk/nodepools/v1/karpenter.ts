// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: chalk/nodepools/v1/karpenter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { KubernetesNodeTaint } from "../../kubernetes/v1/nodes";

export const protobufPackage = "chalk.nodepools.v1";

export interface KarpenterNodepoolDisruptionBudget {
  nodes: string;
  schedule?: string | undefined;
  duration?: Duration | undefined;
}

export interface KarpenterNodepoolDisruption {
  consolidateAfter?: Duration | undefined;
  consolidationPolicy?: string | undefined;
  budgets: KarpenterNodepoolDisruptionBudget[];
}

export interface KarpenterNodeClassRef {
  name: string;
  kind?: string | undefined;
  group?: string | undefined;
}

export interface KarpenterNodeSelectorRequirement {
  key: string;
  operator: string;
  values: string[];
}

export interface KarpenterNodepoolTemplateSpec {
  taints: KubernetesNodeTaint[];
  startupTaints: KubernetesNodeTaint[];
  requirements: KarpenterNodeSelectorRequirement[];
  nodeClassRef: KarpenterNodeClassRef | undefined;
  expireAfter?: Duration | undefined;
  terminationGracePeriod?: Duration | undefined;
}

export interface KarpenterNodepoolTemplateMetadata {
  labels: { [key: string]: string };
  annotations: { [key: string]: string };
}

export interface KarpenterNodepoolTemplateMetadata_LabelsEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepoolTemplate {
  metadata: KarpenterNodepoolTemplateMetadata | undefined;
  spec: KarpenterNodepoolTemplateSpec | undefined;
}

export interface KarpenterNodepoolSpec {
  disruption: KarpenterNodepoolDisruption | undefined;
  template: KarpenterNodepoolTemplate | undefined;
  limits: { [key: string]: string };
  weight?: number | undefined;
}

export interface KarpenterNodepoolSpec_LimitsEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepoolMetadata {
  annotations: { [key: string]: string };
  creationTimestamp: Date | undefined;
  generation: number;
  name: string;
  resourceVersion: string;
  uid: string;
  labels: { [key: string]: string };
}

export interface KarpenterNodepoolMetadata_AnnotationsEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepoolMetadata_LabelsEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepoolCondition {
  type: string;
  status: string;
  lastTransitionTime: number;
  reason?: string | undefined;
  message?: string | undefined;
}

export interface KarpenterNodepoolStatus {
  resources: { [key: string]: string };
  conditions: KarpenterNodepoolCondition[];
}

export interface KarpenterNodepoolStatus_ResourcesEntry {
  key: string;
  value: string;
}

export interface KarpenterNodepool {
  apiVersion: string;
  kind: string;
  metadata: KarpenterNodepoolMetadata | undefined;
  spec: KarpenterNodepoolSpec | undefined;
  status: KarpenterNodepoolStatus | undefined;
}

function createBaseKarpenterNodepoolDisruptionBudget(): KarpenterNodepoolDisruptionBudget {
  return { nodes: "", schedule: undefined, duration: undefined };
}

export const KarpenterNodepoolDisruptionBudget: MessageFns<KarpenterNodepoolDisruptionBudget> = {
  encode(message: KarpenterNodepoolDisruptionBudget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodes !== "") {
      writer.uint32(10).string(message.nodes);
    }
    if (message.schedule !== undefined) {
      writer.uint32(18).string(message.schedule);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolDisruptionBudget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolDisruptionBudget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schedule = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolDisruptionBudget {
    return {
      nodes: isSet(object.nodes) ? globalThis.String(object.nodes) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
    };
  },

  toJSON(message: KarpenterNodepoolDisruptionBudget): unknown {
    const obj: any = {};
    if (message.nodes !== "") {
      obj.nodes = message.nodes;
    }
    if (message.schedule !== undefined) {
      obj.schedule = message.schedule;
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolDisruptionBudget>, I>>(
    base?: I,
  ): KarpenterNodepoolDisruptionBudget {
    return KarpenterNodepoolDisruptionBudget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolDisruptionBudget>, I>>(
    object: I,
  ): KarpenterNodepoolDisruptionBudget {
    const message = createBaseKarpenterNodepoolDisruptionBudget();
    message.nodes = object.nodes ?? "";
    message.schedule = object.schedule ?? undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    return message;
  },
};

function createBaseKarpenterNodepoolDisruption(): KarpenterNodepoolDisruption {
  return { consolidateAfter: undefined, consolidationPolicy: undefined, budgets: [] };
}

export const KarpenterNodepoolDisruption: MessageFns<KarpenterNodepoolDisruption> = {
  encode(message: KarpenterNodepoolDisruption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consolidateAfter !== undefined) {
      Duration.encode(message.consolidateAfter, writer.uint32(10).fork()).join();
    }
    if (message.consolidationPolicy !== undefined) {
      writer.uint32(18).string(message.consolidationPolicy);
    }
    for (const v of message.budgets) {
      KarpenterNodepoolDisruptionBudget.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolDisruption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolDisruption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consolidateAfter = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consolidationPolicy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.budgets.push(KarpenterNodepoolDisruptionBudget.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolDisruption {
    return {
      consolidateAfter: isSet(object.consolidateAfter) ? Duration.fromJSON(object.consolidateAfter) : undefined,
      consolidationPolicy: isSet(object.consolidationPolicy)
        ? globalThis.String(object.consolidationPolicy)
        : undefined,
      budgets: globalThis.Array.isArray(object?.budgets)
        ? object.budgets.map((e: any) => KarpenterNodepoolDisruptionBudget.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KarpenterNodepoolDisruption): unknown {
    const obj: any = {};
    if (message.consolidateAfter !== undefined) {
      obj.consolidateAfter = Duration.toJSON(message.consolidateAfter);
    }
    if (message.consolidationPolicy !== undefined) {
      obj.consolidationPolicy = message.consolidationPolicy;
    }
    if (message.budgets?.length) {
      obj.budgets = message.budgets.map((e) => KarpenterNodepoolDisruptionBudget.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolDisruption>, I>>(base?: I): KarpenterNodepoolDisruption {
    return KarpenterNodepoolDisruption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolDisruption>, I>>(object: I): KarpenterNodepoolDisruption {
    const message = createBaseKarpenterNodepoolDisruption();
    message.consolidateAfter = (object.consolidateAfter !== undefined && object.consolidateAfter !== null)
      ? Duration.fromPartial(object.consolidateAfter)
      : undefined;
    message.consolidationPolicy = object.consolidationPolicy ?? undefined;
    message.budgets = object.budgets?.map((e) => KarpenterNodepoolDisruptionBudget.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKarpenterNodeClassRef(): KarpenterNodeClassRef {
  return { name: "", kind: undefined, group: undefined };
}

export const KarpenterNodeClassRef: MessageFns<KarpenterNodeClassRef> = {
  encode(message: KarpenterNodeClassRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kind !== undefined) {
      writer.uint32(18).string(message.kind);
    }
    if (message.group !== undefined) {
      writer.uint32(26).string(message.group);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodeClassRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodeClassRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.group = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodeClassRef {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : undefined,
      group: isSet(object.group) ? globalThis.String(object.group) : undefined,
    };
  },

  toJSON(message: KarpenterNodeClassRef): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kind !== undefined) {
      obj.kind = message.kind;
    }
    if (message.group !== undefined) {
      obj.group = message.group;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodeClassRef>, I>>(base?: I): KarpenterNodeClassRef {
    return KarpenterNodeClassRef.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodeClassRef>, I>>(object: I): KarpenterNodeClassRef {
    const message = createBaseKarpenterNodeClassRef();
    message.name = object.name ?? "";
    message.kind = object.kind ?? undefined;
    message.group = object.group ?? undefined;
    return message;
  },
};

function createBaseKarpenterNodeSelectorRequirement(): KarpenterNodeSelectorRequirement {
  return { key: "", operator: "", values: [] };
}

export const KarpenterNodeSelectorRequirement: MessageFns<KarpenterNodeSelectorRequirement> = {
  encode(message: KarpenterNodeSelectorRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.operator !== "") {
      writer.uint32(18).string(message.operator);
    }
    for (const v of message.values) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodeSelectorRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodeSelectorRequirement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodeSelectorRequirement {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: KarpenterNodeSelectorRequirement): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodeSelectorRequirement>, I>>(
    base?: I,
  ): KarpenterNodeSelectorRequirement {
    return KarpenterNodeSelectorRequirement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodeSelectorRequirement>, I>>(
    object: I,
  ): KarpenterNodeSelectorRequirement {
    const message = createBaseKarpenterNodeSelectorRequirement();
    message.key = object.key ?? "";
    message.operator = object.operator ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseKarpenterNodepoolTemplateSpec(): KarpenterNodepoolTemplateSpec {
  return {
    taints: [],
    startupTaints: [],
    requirements: [],
    nodeClassRef: undefined,
    expireAfter: undefined,
    terminationGracePeriod: undefined,
  };
}

export const KarpenterNodepoolTemplateSpec: MessageFns<KarpenterNodepoolTemplateSpec> = {
  encode(message: KarpenterNodepoolTemplateSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.taints) {
      KubernetesNodeTaint.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.startupTaints) {
      KubernetesNodeTaint.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.requirements) {
      KarpenterNodeSelectorRequirement.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.nodeClassRef !== undefined) {
      KarpenterNodeClassRef.encode(message.nodeClassRef, writer.uint32(34).fork()).join();
    }
    if (message.expireAfter !== undefined) {
      Duration.encode(message.expireAfter, writer.uint32(42).fork()).join();
    }
    if (message.terminationGracePeriod !== undefined) {
      Duration.encode(message.terminationGracePeriod, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolTemplateSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolTemplateSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taints.push(KubernetesNodeTaint.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startupTaints.push(KubernetesNodeTaint.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requirements.push(KarpenterNodeSelectorRequirement.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nodeClassRef = KarpenterNodeClassRef.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expireAfter = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.terminationGracePeriod = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolTemplateSpec {
    return {
      taints: globalThis.Array.isArray(object?.taints)
        ? object.taints.map((e: any) => KubernetesNodeTaint.fromJSON(e))
        : [],
      startupTaints: globalThis.Array.isArray(object?.startupTaints)
        ? object.startupTaints.map((e: any) => KubernetesNodeTaint.fromJSON(e))
        : [],
      requirements: globalThis.Array.isArray(object?.requirements)
        ? object.requirements.map((e: any) => KarpenterNodeSelectorRequirement.fromJSON(e))
        : [],
      nodeClassRef: isSet(object.nodeClassRef) ? KarpenterNodeClassRef.fromJSON(object.nodeClassRef) : undefined,
      expireAfter: isSet(object.expireAfter) ? Duration.fromJSON(object.expireAfter) : undefined,
      terminationGracePeriod: isSet(object.terminationGracePeriod)
        ? Duration.fromJSON(object.terminationGracePeriod)
        : undefined,
    };
  },

  toJSON(message: KarpenterNodepoolTemplateSpec): unknown {
    const obj: any = {};
    if (message.taints?.length) {
      obj.taints = message.taints.map((e) => KubernetesNodeTaint.toJSON(e));
    }
    if (message.startupTaints?.length) {
      obj.startupTaints = message.startupTaints.map((e) => KubernetesNodeTaint.toJSON(e));
    }
    if (message.requirements?.length) {
      obj.requirements = message.requirements.map((e) => KarpenterNodeSelectorRequirement.toJSON(e));
    }
    if (message.nodeClassRef !== undefined) {
      obj.nodeClassRef = KarpenterNodeClassRef.toJSON(message.nodeClassRef);
    }
    if (message.expireAfter !== undefined) {
      obj.expireAfter = Duration.toJSON(message.expireAfter);
    }
    if (message.terminationGracePeriod !== undefined) {
      obj.terminationGracePeriod = Duration.toJSON(message.terminationGracePeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolTemplateSpec>, I>>(base?: I): KarpenterNodepoolTemplateSpec {
    return KarpenterNodepoolTemplateSpec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolTemplateSpec>, I>>(
    object: I,
  ): KarpenterNodepoolTemplateSpec {
    const message = createBaseKarpenterNodepoolTemplateSpec();
    message.taints = object.taints?.map((e) => KubernetesNodeTaint.fromPartial(e)) || [];
    message.startupTaints = object.startupTaints?.map((e) => KubernetesNodeTaint.fromPartial(e)) || [];
    message.requirements = object.requirements?.map((e) => KarpenterNodeSelectorRequirement.fromPartial(e)) || [];
    message.nodeClassRef = (object.nodeClassRef !== undefined && object.nodeClassRef !== null)
      ? KarpenterNodeClassRef.fromPartial(object.nodeClassRef)
      : undefined;
    message.expireAfter = (object.expireAfter !== undefined && object.expireAfter !== null)
      ? Duration.fromPartial(object.expireAfter)
      : undefined;
    message.terminationGracePeriod =
      (object.terminationGracePeriod !== undefined && object.terminationGracePeriod !== null)
        ? Duration.fromPartial(object.terminationGracePeriod)
        : undefined;
    return message;
  },
};

function createBaseKarpenterNodepoolTemplateMetadata(): KarpenterNodepoolTemplateMetadata {
  return { labels: {}, annotations: {} };
}

export const KarpenterNodepoolTemplateMetadata: MessageFns<KarpenterNodepoolTemplateMetadata> = {
  encode(message: KarpenterNodepoolTemplateMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.labels).forEach(([key, value]) => {
      KarpenterNodepoolTemplateMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      KarpenterNodepoolTemplateMetadata_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolTemplateMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolTemplateMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = KarpenterNodepoolTemplateMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.labels[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = KarpenterNodepoolTemplateMetadata_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.annotations[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolTemplateMetadata {
    return {
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: KarpenterNodepoolTemplateMetadata): unknown {
    const obj: any = {};
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata>, I>>(
    base?: I,
  ): KarpenterNodepoolTemplateMetadata {
    return KarpenterNodepoolTemplateMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata>, I>>(
    object: I,
  ): KarpenterNodepoolTemplateMetadata {
    const message = createBaseKarpenterNodepoolTemplateMetadata();
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseKarpenterNodepoolTemplateMetadata_LabelsEntry(): KarpenterNodepoolTemplateMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolTemplateMetadata_LabelsEntry: MessageFns<KarpenterNodepoolTemplateMetadata_LabelsEntry> =
  {
    encode(
      message: KarpenterNodepoolTemplateMetadata_LabelsEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolTemplateMetadata_LabelsEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseKarpenterNodepoolTemplateMetadata_LabelsEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): KarpenterNodepoolTemplateMetadata_LabelsEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: KarpenterNodepoolTemplateMetadata_LabelsEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata_LabelsEntry>, I>>(
      base?: I,
    ): KarpenterNodepoolTemplateMetadata_LabelsEntry {
      return KarpenterNodepoolTemplateMetadata_LabelsEntry.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata_LabelsEntry>, I>>(
      object: I,
    ): KarpenterNodepoolTemplateMetadata_LabelsEntry {
      const message = createBaseKarpenterNodepoolTemplateMetadata_LabelsEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseKarpenterNodepoolTemplateMetadata_AnnotationsEntry(): KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolTemplateMetadata_AnnotationsEntry: MessageFns<
  KarpenterNodepoolTemplateMetadata_AnnotationsEntry
> = {
  encode(
    message: KarpenterNodepoolTemplateMetadata_AnnotationsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolTemplateMetadata_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KarpenterNodepoolTemplateMetadata_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata_AnnotationsEntry>, I>>(
    base?: I,
  ): KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
    return KarpenterNodepoolTemplateMetadata_AnnotationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolTemplateMetadata_AnnotationsEntry>, I>>(
    object: I,
  ): KarpenterNodepoolTemplateMetadata_AnnotationsEntry {
    const message = createBaseKarpenterNodepoolTemplateMetadata_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKarpenterNodepoolTemplate(): KarpenterNodepoolTemplate {
  return { metadata: undefined, spec: undefined };
}

export const KarpenterNodepoolTemplate: MessageFns<KarpenterNodepoolTemplate> = {
  encode(message: KarpenterNodepoolTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      KarpenterNodepoolTemplateMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.spec !== undefined) {
      KarpenterNodepoolTemplateSpec.encode(message.spec, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = KarpenterNodepoolTemplateMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.spec = KarpenterNodepoolTemplateSpec.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolTemplate {
    return {
      metadata: isSet(object.metadata) ? KarpenterNodepoolTemplateMetadata.fromJSON(object.metadata) : undefined,
      spec: isSet(object.spec) ? KarpenterNodepoolTemplateSpec.fromJSON(object.spec) : undefined,
    };
  },

  toJSON(message: KarpenterNodepoolTemplate): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = KarpenterNodepoolTemplateMetadata.toJSON(message.metadata);
    }
    if (message.spec !== undefined) {
      obj.spec = KarpenterNodepoolTemplateSpec.toJSON(message.spec);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolTemplate>, I>>(base?: I): KarpenterNodepoolTemplate {
    return KarpenterNodepoolTemplate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolTemplate>, I>>(object: I): KarpenterNodepoolTemplate {
    const message = createBaseKarpenterNodepoolTemplate();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? KarpenterNodepoolTemplateMetadata.fromPartial(object.metadata)
      : undefined;
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? KarpenterNodepoolTemplateSpec.fromPartial(object.spec)
      : undefined;
    return message;
  },
};

function createBaseKarpenterNodepoolSpec(): KarpenterNodepoolSpec {
  return { disruption: undefined, template: undefined, limits: {}, weight: undefined };
}

export const KarpenterNodepoolSpec: MessageFns<KarpenterNodepoolSpec> = {
  encode(message: KarpenterNodepoolSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disruption !== undefined) {
      KarpenterNodepoolDisruption.encode(message.disruption, writer.uint32(10).fork()).join();
    }
    if (message.template !== undefined) {
      KarpenterNodepoolTemplate.encode(message.template, writer.uint32(18).fork()).join();
    }
    Object.entries(message.limits).forEach(([key, value]) => {
      KarpenterNodepoolSpec_LimitsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.weight !== undefined) {
      writer.uint32(32).int32(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.disruption = KarpenterNodepoolDisruption.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.template = KarpenterNodepoolTemplate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = KarpenterNodepoolSpec_LimitsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.limits[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.weight = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolSpec {
    return {
      disruption: isSet(object.disruption) ? KarpenterNodepoolDisruption.fromJSON(object.disruption) : undefined,
      template: isSet(object.template) ? KarpenterNodepoolTemplate.fromJSON(object.template) : undefined,
      limits: isObject(object.limits)
        ? Object.entries(object.limits).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
    };
  },

  toJSON(message: KarpenterNodepoolSpec): unknown {
    const obj: any = {};
    if (message.disruption !== undefined) {
      obj.disruption = KarpenterNodepoolDisruption.toJSON(message.disruption);
    }
    if (message.template !== undefined) {
      obj.template = KarpenterNodepoolTemplate.toJSON(message.template);
    }
    if (message.limits) {
      const entries = Object.entries(message.limits);
      if (entries.length > 0) {
        obj.limits = {};
        entries.forEach(([k, v]) => {
          obj.limits[k] = v;
        });
      }
    }
    if (message.weight !== undefined) {
      obj.weight = Math.round(message.weight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolSpec>, I>>(base?: I): KarpenterNodepoolSpec {
    return KarpenterNodepoolSpec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolSpec>, I>>(object: I): KarpenterNodepoolSpec {
    const message = createBaseKarpenterNodepoolSpec();
    message.disruption = (object.disruption !== undefined && object.disruption !== null)
      ? KarpenterNodepoolDisruption.fromPartial(object.disruption)
      : undefined;
    message.template = (object.template !== undefined && object.template !== null)
      ? KarpenterNodepoolTemplate.fromPartial(object.template)
      : undefined;
    message.limits = Object.entries(object.limits ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.weight = object.weight ?? undefined;
    return message;
  },
};

function createBaseKarpenterNodepoolSpec_LimitsEntry(): KarpenterNodepoolSpec_LimitsEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolSpec_LimitsEntry: MessageFns<KarpenterNodepoolSpec_LimitsEntry> = {
  encode(message: KarpenterNodepoolSpec_LimitsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolSpec_LimitsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolSpec_LimitsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolSpec_LimitsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KarpenterNodepoolSpec_LimitsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolSpec_LimitsEntry>, I>>(
    base?: I,
  ): KarpenterNodepoolSpec_LimitsEntry {
    return KarpenterNodepoolSpec_LimitsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolSpec_LimitsEntry>, I>>(
    object: I,
  ): KarpenterNodepoolSpec_LimitsEntry {
    const message = createBaseKarpenterNodepoolSpec_LimitsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKarpenterNodepoolMetadata(): KarpenterNodepoolMetadata {
  return {
    annotations: {},
    creationTimestamp: undefined,
    generation: 0,
    name: "",
    resourceVersion: "",
    uid: "",
    labels: {},
  };
}

export const KarpenterNodepoolMetadata: MessageFns<KarpenterNodepoolMetadata> = {
  encode(message: KarpenterNodepoolMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.annotations).forEach(([key, value]) => {
      KarpenterNodepoolMetadata_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.creationTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTimestamp), writer.uint32(18).fork()).join();
    }
    if (message.generation !== 0) {
      writer.uint32(24).int64(message.generation);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.resourceVersion !== "") {
      writer.uint32(42).string(message.resourceVersion);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      KarpenterNodepoolMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = KarpenterNodepoolMetadata_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.annotations[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creationTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.generation = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resourceVersion = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = KarpenterNodepoolMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolMetadata {
    return {
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      creationTimestamp: isSet(object.creationTimestamp) ? fromJsonTimestamp(object.creationTimestamp) : undefined,
      generation: isSet(object.generation) ? globalThis.Number(object.generation) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resourceVersion: isSet(object.resourceVersion) ? globalThis.String(object.resourceVersion) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: KarpenterNodepoolMetadata): unknown {
    const obj: any = {};
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.creationTimestamp !== undefined) {
      obj.creationTimestamp = message.creationTimestamp.toISOString();
    }
    if (message.generation !== 0) {
      obj.generation = Math.round(message.generation);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.resourceVersion !== "") {
      obj.resourceVersion = message.resourceVersion;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolMetadata>, I>>(base?: I): KarpenterNodepoolMetadata {
    return KarpenterNodepoolMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolMetadata>, I>>(object: I): KarpenterNodepoolMetadata {
    const message = createBaseKarpenterNodepoolMetadata();
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.creationTimestamp = object.creationTimestamp ?? undefined;
    message.generation = object.generation ?? 0;
    message.name = object.name ?? "";
    message.resourceVersion = object.resourceVersion ?? "";
    message.uid = object.uid ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseKarpenterNodepoolMetadata_AnnotationsEntry(): KarpenterNodepoolMetadata_AnnotationsEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolMetadata_AnnotationsEntry: MessageFns<KarpenterNodepoolMetadata_AnnotationsEntry> = {
  encode(message: KarpenterNodepoolMetadata_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolMetadata_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolMetadata_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolMetadata_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KarpenterNodepoolMetadata_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolMetadata_AnnotationsEntry>, I>>(
    base?: I,
  ): KarpenterNodepoolMetadata_AnnotationsEntry {
    return KarpenterNodepoolMetadata_AnnotationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolMetadata_AnnotationsEntry>, I>>(
    object: I,
  ): KarpenterNodepoolMetadata_AnnotationsEntry {
    const message = createBaseKarpenterNodepoolMetadata_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKarpenterNodepoolMetadata_LabelsEntry(): KarpenterNodepoolMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolMetadata_LabelsEntry: MessageFns<KarpenterNodepoolMetadata_LabelsEntry> = {
  encode(message: KarpenterNodepoolMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KarpenterNodepoolMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolMetadata_LabelsEntry>, I>>(
    base?: I,
  ): KarpenterNodepoolMetadata_LabelsEntry {
    return KarpenterNodepoolMetadata_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolMetadata_LabelsEntry>, I>>(
    object: I,
  ): KarpenterNodepoolMetadata_LabelsEntry {
    const message = createBaseKarpenterNodepoolMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKarpenterNodepoolCondition(): KarpenterNodepoolCondition {
  return { type: "", status: "", lastTransitionTime: 0, reason: undefined, message: undefined };
}

export const KarpenterNodepoolCondition: MessageFns<KarpenterNodepoolCondition> = {
  encode(message: KarpenterNodepoolCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.lastTransitionTime !== 0) {
      writer.uint32(32).int64(message.lastTransitionTime);
    }
    if (message.reason !== undefined) {
      writer.uint32(42).string(message.reason);
    }
    if (message.message !== undefined) {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastTransitionTime = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolCondition {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      lastTransitionTime: isSet(object.lastTransitionTime) ? globalThis.Number(object.lastTransitionTime) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: KarpenterNodepoolCondition): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.lastTransitionTime !== 0) {
      obj.lastTransitionTime = Math.round(message.lastTransitionTime);
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolCondition>, I>>(base?: I): KarpenterNodepoolCondition {
    return KarpenterNodepoolCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolCondition>, I>>(object: I): KarpenterNodepoolCondition {
    const message = createBaseKarpenterNodepoolCondition();
    message.type = object.type ?? "";
    message.status = object.status ?? "";
    message.lastTransitionTime = object.lastTransitionTime ?? 0;
    message.reason = object.reason ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseKarpenterNodepoolStatus(): KarpenterNodepoolStatus {
  return { resources: {}, conditions: [] };
}

export const KarpenterNodepoolStatus: MessageFns<KarpenterNodepoolStatus> = {
  encode(message: KarpenterNodepoolStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.resources).forEach(([key, value]) => {
      KarpenterNodepoolStatus_ResourcesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    for (const v of message.conditions) {
      KarpenterNodepoolCondition.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = KarpenterNodepoolStatus_ResourcesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.resources[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conditions.push(KarpenterNodepoolCondition.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolStatus {
    return {
      resources: isObject(object.resources)
        ? Object.entries(object.resources).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => KarpenterNodepoolCondition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KarpenterNodepoolStatus): unknown {
    const obj: any = {};
    if (message.resources) {
      const entries = Object.entries(message.resources);
      if (entries.length > 0) {
        obj.resources = {};
        entries.forEach(([k, v]) => {
          obj.resources[k] = v;
        });
      }
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => KarpenterNodepoolCondition.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolStatus>, I>>(base?: I): KarpenterNodepoolStatus {
    return KarpenterNodepoolStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolStatus>, I>>(object: I): KarpenterNodepoolStatus {
    const message = createBaseKarpenterNodepoolStatus();
    message.resources = Object.entries(object.resources ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.conditions = object.conditions?.map((e) => KarpenterNodepoolCondition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKarpenterNodepoolStatus_ResourcesEntry(): KarpenterNodepoolStatus_ResourcesEntry {
  return { key: "", value: "" };
}

export const KarpenterNodepoolStatus_ResourcesEntry: MessageFns<KarpenterNodepoolStatus_ResourcesEntry> = {
  encode(message: KarpenterNodepoolStatus_ResourcesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepoolStatus_ResourcesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepoolStatus_ResourcesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepoolStatus_ResourcesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KarpenterNodepoolStatus_ResourcesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepoolStatus_ResourcesEntry>, I>>(
    base?: I,
  ): KarpenterNodepoolStatus_ResourcesEntry {
    return KarpenterNodepoolStatus_ResourcesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepoolStatus_ResourcesEntry>, I>>(
    object: I,
  ): KarpenterNodepoolStatus_ResourcesEntry {
    const message = createBaseKarpenterNodepoolStatus_ResourcesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKarpenterNodepool(): KarpenterNodepool {
  return { apiVersion: "", kind: "", metadata: undefined, spec: undefined, status: undefined };
}

export const KarpenterNodepool: MessageFns<KarpenterNodepool> = {
  encode(message: KarpenterNodepool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiVersion !== "") {
      writer.uint32(10).string(message.apiVersion);
    }
    if (message.kind !== "") {
      writer.uint32(18).string(message.kind);
    }
    if (message.metadata !== undefined) {
      KarpenterNodepoolMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.spec !== undefined) {
      KarpenterNodepoolSpec.encode(message.spec, writer.uint32(34).fork()).join();
    }
    if (message.status !== undefined) {
      KarpenterNodepoolStatus.encode(message.status, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KarpenterNodepool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKarpenterNodepool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = KarpenterNodepoolMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.spec = KarpenterNodepoolSpec.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = KarpenterNodepoolStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KarpenterNodepool {
    return {
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      metadata: isSet(object.metadata) ? KarpenterNodepoolMetadata.fromJSON(object.metadata) : undefined,
      spec: isSet(object.spec) ? KarpenterNodepoolSpec.fromJSON(object.spec) : undefined,
      status: isSet(object.status) ? KarpenterNodepoolStatus.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: KarpenterNodepool): unknown {
    const obj: any = {};
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.metadata !== undefined) {
      obj.metadata = KarpenterNodepoolMetadata.toJSON(message.metadata);
    }
    if (message.spec !== undefined) {
      obj.spec = KarpenterNodepoolSpec.toJSON(message.spec);
    }
    if (message.status !== undefined) {
      obj.status = KarpenterNodepoolStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KarpenterNodepool>, I>>(base?: I): KarpenterNodepool {
    return KarpenterNodepool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KarpenterNodepool>, I>>(object: I): KarpenterNodepool {
    const message = createBaseKarpenterNodepool();
    message.apiVersion = object.apiVersion ?? "";
    message.kind = object.kind ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? KarpenterNodepoolMetadata.fromPartial(object.metadata)
      : undefined;
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? KarpenterNodepoolSpec.fromPartial(object.spec)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? KarpenterNodepoolStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
