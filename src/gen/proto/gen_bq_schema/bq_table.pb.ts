// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: gen_bq_schema/bq_table.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "gen_bq_schema";

export interface BigQueryMessageOptions {
  /**
   * Specifies a name of table in BigQuery for the message.
   *
   * If not blank, indicates the message is a type of record to be stored into BigQuery.
   */
  tableName: string;
  /**
   * If true, BigQuery field names will default to a field's JSON name,
   * not its original/proto field name.
   */
  useJsonNames: boolean;
  /**
   * If set, adds defined extra fields to a JSON representation of the message.
   * Value format: "<field name>:<BigQuery field type>" for basic types
   * or "<field name>:RECORD:<protobuf type>" for message types.
   * "NULLABLE" by default, different mode may be set via optional suffix ":<mode>"
   */
  extraFields: string[];
}

function createBaseBigQueryMessageOptions(): BigQueryMessageOptions {
  return { tableName: "", useJsonNames: false, extraFields: [] };
}

export const BigQueryMessageOptions: MessageFns<BigQueryMessageOptions> = {
  encode(message: BigQueryMessageOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tableName !== "") {
      writer.uint32(10).string(message.tableName);
    }
    if (message.useJsonNames !== false) {
      writer.uint32(16).bool(message.useJsonNames);
    }
    for (const v of message.extraFields) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryMessageOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryMessageOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tableName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.useJsonNames = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extraFields.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryMessageOptions {
    return {
      tableName: isSet(object.tableName) ? globalThis.String(object.tableName) : "",
      useJsonNames: isSet(object.useJsonNames) ? globalThis.Boolean(object.useJsonNames) : false,
      extraFields: globalThis.Array.isArray(object?.extraFields)
        ? object.extraFields.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BigQueryMessageOptions): unknown {
    const obj: any = {};
    if (message.tableName !== "") {
      obj.tableName = message.tableName;
    }
    if (message.useJsonNames !== false) {
      obj.useJsonNames = message.useJsonNames;
    }
    if (message.extraFields?.length) {
      obj.extraFields = message.extraFields;
    }
    return obj;
  },
};

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
