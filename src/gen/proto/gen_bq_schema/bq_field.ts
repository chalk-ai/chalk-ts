// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: gen_bq_schema/bq_field.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "gen_bq_schema";

/**
 * Message containing options related to BigQuery schema generation
 * and management via Protobuf.
 */
export interface BigQueryFieldOptions {
  /**
   * Flag to specify that a field should be marked as 'REQUIRED' when
   * used to generate schema for BigQuery.
   */
  require: boolean;
  /**
   * Optionally override whatever type is resolved by the schema
   * generator. This is useful, for example, to store epoch timestamps
   * with the underlying 'TIMESTAMP' type, when normally, they would
   * be structured as 'INTEGER' fields.
   */
  typeOverride: string;
  /** Optionally omit a field from BigQuery schema. */
  ignore: boolean;
  /** Set the description for a field in BigQuery schema. */
  description: string;
  /** Customize the name of the field in the BigQuery schema. */
  name: string;
  /** Optionally add PolicyTag for a field in BigQuery schema. */
  policyTags: string;
}

function createBaseBigQueryFieldOptions(): BigQueryFieldOptions {
  return { require: false, typeOverride: "", ignore: false, description: "", name: "", policyTags: "" };
}

export const BigQueryFieldOptions: MessageFns<BigQueryFieldOptions> = {
  encode(message: BigQueryFieldOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.require !== false) {
      writer.uint32(8).bool(message.require);
    }
    if (message.typeOverride !== "") {
      writer.uint32(18).string(message.typeOverride);
    }
    if (message.ignore !== false) {
      writer.uint32(24).bool(message.ignore);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.policyTags !== "") {
      writer.uint32(50).string(message.policyTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryFieldOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryFieldOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.require = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.typeOverride = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ignore = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.policyTags = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryFieldOptions {
    return {
      require: isSet(object.require) ? globalThis.Boolean(object.require) : false,
      typeOverride: isSet(object.typeOverride) ? globalThis.String(object.typeOverride) : "",
      ignore: isSet(object.ignore) ? globalThis.Boolean(object.ignore) : false,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      policyTags: isSet(object.policyTags) ? globalThis.String(object.policyTags) : "",
    };
  },

  toJSON(message: BigQueryFieldOptions): unknown {
    const obj: any = {};
    if (message.require !== false) {
      obj.require = message.require;
    }
    if (message.typeOverride !== "") {
      obj.typeOverride = message.typeOverride;
    }
    if (message.ignore !== false) {
      obj.ignore = message.ignore;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.policyTags !== "") {
      obj.policyTags = message.policyTags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BigQueryFieldOptions>, I>>(base?: I): BigQueryFieldOptions {
    return BigQueryFieldOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BigQueryFieldOptions>, I>>(object: I): BigQueryFieldOptions {
    const message = createBaseBigQueryFieldOptions();
    message.require = object.require ?? false;
    message.typeOverride = object.typeOverride ?? "";
    message.ignore = object.ignore ?? false;
    message.description = object.description ?? "";
    message.name = object.name ?? "";
    message.policyTags = object.policyTags ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
