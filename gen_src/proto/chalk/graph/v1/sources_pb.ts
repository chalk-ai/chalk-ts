// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/graph/v1/sources.proto (package chalk.graph.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { ScalarValue } from "../../arrow/v1/arrow_pb";

/**
 * @generated from enum chalk.graph.v1.StreamSourceType
 */
export enum StreamSourceType {
  /**
   * @generated from enum value: STREAM_SOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STREAM_SOURCE_TYPE_KAFKA = 1;
   */
  KAFKA = 1,

  /**
   * @generated from enum value: STREAM_SOURCE_TYPE_KINESIS = 2;
   */
  KINESIS = 2,

  /**
   * @generated from enum value: STREAM_SOURCE_TYPE_PUBSUB = 3;
   */
  PUBSUB = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamSourceType)
proto3.util.setEnumType(StreamSourceType, "chalk.graph.v1.StreamSourceType", [
  { no: 0, name: "STREAM_SOURCE_TYPE_UNSPECIFIED" },
  { no: 1, name: "STREAM_SOURCE_TYPE_KAFKA" },
  { no: 2, name: "STREAM_SOURCE_TYPE_KINESIS" },
  { no: 3, name: "STREAM_SOURCE_TYPE_PUBSUB" },
]);

/**
 * @generated from enum chalk.graph.v1.DatabaseSourceType
 */
export enum DatabaseSourceType {
  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_BIGQUERY = 1;
   */
  BIGQUERY = 1,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_CLOUDSQL = 2;
   */
  CLOUDSQL = 2,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_DATABRICKS = 3;
   */
  DATABRICKS = 3,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_MYSQL = 4;
   */
  MYSQL = 4,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_POSTGRES = 5;
   */
  POSTGRES = 5,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_REDSHIFT = 6;
   */
  REDSHIFT = 6,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_SNOWFLAKE = 7;
   */
  SNOWFLAKE = 7,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_SQLITE = 8;
   */
  SQLITE = 8,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_SPANNER = 9;
   */
  SPANNER = 9,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_TRINO = 10;
   */
  TRINO = 10,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_DYNAMODB = 11;
   */
  DYNAMODB = 11,

  /**
   * @generated from enum value: DATABASE_SOURCE_TYPE_ATHENA = 12;
   */
  ATHENA = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(DatabaseSourceType)
proto3.util.setEnumType(DatabaseSourceType, "chalk.graph.v1.DatabaseSourceType", [
  { no: 0, name: "DATABASE_SOURCE_TYPE_UNSPECIFIED" },
  { no: 1, name: "DATABASE_SOURCE_TYPE_BIGQUERY" },
  { no: 2, name: "DATABASE_SOURCE_TYPE_CLOUDSQL" },
  { no: 3, name: "DATABASE_SOURCE_TYPE_DATABRICKS" },
  { no: 4, name: "DATABASE_SOURCE_TYPE_MYSQL" },
  { no: 5, name: "DATABASE_SOURCE_TYPE_POSTGRES" },
  { no: 6, name: "DATABASE_SOURCE_TYPE_REDSHIFT" },
  { no: 7, name: "DATABASE_SOURCE_TYPE_SNOWFLAKE" },
  { no: 8, name: "DATABASE_SOURCE_TYPE_SQLITE" },
  { no: 9, name: "DATABASE_SOURCE_TYPE_SPANNER" },
  { no: 10, name: "DATABASE_SOURCE_TYPE_TRINO" },
  { no: 11, name: "DATABASE_SOURCE_TYPE_DYNAMODB" },
  { no: 12, name: "DATABASE_SOURCE_TYPE_ATHENA" },
]);

/**
 * @generated from message chalk.graph.v1.StreamSourceReference
 */
export class StreamSourceReference extends Message<StreamSourceReference> {
  /**
   * @generated from field: chalk.graph.v1.StreamSourceType type = 1;
   */
  type = StreamSourceType.UNSPECIFIED;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<StreamSourceReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamSourceReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(StreamSourceType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamSourceReference {
    return new StreamSourceReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamSourceReference {
    return new StreamSourceReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamSourceReference {
    return new StreamSourceReference().fromJsonString(jsonString, options);
  }

  static equals(a: StreamSourceReference | PlainMessage<StreamSourceReference> | undefined, b: StreamSourceReference | PlainMessage<StreamSourceReference> | undefined): boolean {
    return proto3.util.equals(StreamSourceReference, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.StreamSource
 */
export class StreamSource extends Message<StreamSource> {
  /**
   * @generated from oneof chalk.graph.v1.StreamSource.source
   */
  source: {
    /**
     * @generated from field: chalk.graph.v1.KafkaSource kafka = 1;
     */
    value: KafkaSource;
    case: "kafka";
  } | {
    /**
     * @generated from field: chalk.graph.v1.KinesisSource kinesis = 2;
     */
    value: KinesisSource;
    case: "kinesis";
  } | {
    /**
     * @generated from field: chalk.graph.v1.PubSubSource pubsub = 3;
     */
    value: PubSubSource;
    case: "pubsub";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.StreamSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kafka", kind: "message", T: KafkaSource, oneof: "source" },
    { no: 2, name: "kinesis", kind: "message", T: KinesisSource, oneof: "source" },
    { no: 3, name: "pubsub", kind: "message", T: PubSubSource, oneof: "source" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamSource {
    return new StreamSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamSource {
    return new StreamSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamSource {
    return new StreamSource().fromJsonString(jsonString, options);
  }

  static equals(a: StreamSource | PlainMessage<StreamSource> | undefined, b: StreamSource | PlainMessage<StreamSource> | undefined): boolean {
    return proto3.util.equals(StreamSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.KinesisSource
 */
export class KinesisSource extends Message<KinesisSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string stream_name = 2;
   */
  streamName = "";

  /**
   * @generated from field: string stream_arn = 3;
   */
  streamArn = "";

  /**
   * @generated from field: string region_name = 4;
   */
  regionName = "";

  /**
   * @generated from field: google.protobuf.Duration late_arrival_deadline = 5;
   */
  lateArrivalDeadline?: Duration;

  /**
   * @generated from field: string dead_letter_queue_stream_name = 6;
   */
  deadLetterQueueStreamName = "";

  /**
   * @generated from field: string aws_access_key_id = 7;
   */
  awsAccessKeyId = "";

  /**
   * @generated from field: string aws_secret_access_key = 8;
   */
  awsSecretAccessKey = "";

  /**
   * @generated from field: string aws_session_token = 9;
   */
  awsSessionToken = "";

  /**
   * @generated from field: string endpoint_url = 10;
   */
  endpointUrl = "";

  /**
   * @generated from field: string consumer_role_arn = 11;
   */
  consumerRoleArn = "";

  constructor(data?: PartialMessage<KinesisSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.KinesisSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stream_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stream_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "region_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "late_arrival_deadline", kind: "message", T: Duration },
    { no: 6, name: "dead_letter_queue_stream_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "aws_access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "aws_secret_access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "aws_session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "endpoint_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "consumer_role_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KinesisSource {
    return new KinesisSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KinesisSource {
    return new KinesisSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KinesisSource {
    return new KinesisSource().fromJsonString(jsonString, options);
  }

  static equals(a: KinesisSource | PlainMessage<KinesisSource> | undefined, b: KinesisSource | PlainMessage<KinesisSource> | undefined): boolean {
    return proto3.util.equals(KinesisSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.KafkaSource
 */
export class KafkaSource extends Message<KafkaSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string bootstrap_servers = 2;
   */
  bootstrapServers: string[] = [];

  /**
   * @generated from field: string topic = 3;
   */
  topic = "";

  /**
   * @generated from field: string ssl_keystore_location = 4;
   */
  sslKeystoreLocation = "";

  /**
   * @generated from field: string ssl_ca_file = 5;
   */
  sslCaFile = "";

  /**
   * @generated from field: string client_id_prefix = 6;
   */
  clientIdPrefix = "";

  /**
   * @generated from field: string group_id_prefix = 7;
   */
  groupIdPrefix = "";

  /**
   * @generated from field: string security_protocol = 8;
   */
  securityProtocol = "";

  /**
   * @generated from field: string sasl_mechanism = 9;
   */
  saslMechanism = "";

  /**
   * @generated from field: string sasl_username = 10;
   */
  saslUsername = "";

  /**
   * @generated from field: string sasl_password = 11;
   */
  saslPassword = "";

  /**
   * @generated from field: google.protobuf.Duration late_arrival_deadline = 12;
   */
  lateArrivalDeadline?: Duration;

  /**
   * @generated from field: string dead_letter_queue_topic = 13;
   */
  deadLetterQueueTopic = "";

  constructor(data?: PartialMessage<KafkaSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.KafkaSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bootstrap_servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ssl_keystore_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ssl_ca_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_id_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "group_id_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "security_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sasl_mechanism", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sasl_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "sasl_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "late_arrival_deadline", kind: "message", T: Duration },
    { no: 13, name: "dead_letter_queue_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KafkaSource {
    return new KafkaSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KafkaSource {
    return new KafkaSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KafkaSource {
    return new KafkaSource().fromJsonString(jsonString, options);
  }

  static equals(a: KafkaSource | PlainMessage<KafkaSource> | undefined, b: KafkaSource | PlainMessage<KafkaSource> | undefined): boolean {
    return proto3.util.equals(KafkaSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.PubSubSource
 */
export class PubSubSource extends Message<PubSubSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string subscription_id = 3;
   */
  subscriptionId = "";

  /**
   * @generated from field: google.protobuf.Duration late_arrival_deadline = 4;
   */
  lateArrivalDeadline?: Duration;

  /**
   * @generated from field: string dead_letter_queue_topic = 5;
   */
  deadLetterQueueTopic = "";

  constructor(data?: PartialMessage<PubSubSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.PubSubSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "late_arrival_deadline", kind: "message", T: Duration },
    { no: 5, name: "dead_letter_queue_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubSubSource {
    return new PubSubSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubSubSource {
    return new PubSubSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubSubSource {
    return new PubSubSource().fromJsonString(jsonString, options);
  }

  static equals(a: PubSubSource | PlainMessage<PubSubSource> | undefined, b: PubSubSource | PlainMessage<PubSubSource> | undefined): boolean {
    return proto3.util.equals(PubSubSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.DatabaseSourceReference
 */
export class DatabaseSourceReference extends Message<DatabaseSourceReference> {
  /**
   * @generated from field: chalk.graph.v1.DatabaseSourceType type = 1;
   */
  type = DatabaseSourceType.UNSPECIFIED;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DatabaseSourceReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.DatabaseSourceReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(DatabaseSourceType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseSourceReference {
    return new DatabaseSourceReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseSourceReference {
    return new DatabaseSourceReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseSourceReference {
    return new DatabaseSourceReference().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseSourceReference | PlainMessage<DatabaseSourceReference> | undefined, b: DatabaseSourceReference | PlainMessage<DatabaseSourceReference> | undefined): boolean {
    return proto3.util.equals(DatabaseSourceReference, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.DatabaseSource
 */
export class DatabaseSource extends Message<DatabaseSource> {
  /**
   * @generated from oneof chalk.graph.v1.DatabaseSource.source
   */
  source: {
    /**
     * @generated from field: chalk.graph.v1.BigQuerySource bigquery = 1;
     */
    value: BigQuerySource;
    case: "bigquery";
  } | {
    /**
     * @generated from field: chalk.graph.v1.CloudSQLSource cloudsql = 2;
     */
    value: CloudSQLSource;
    case: "cloudsql";
  } | {
    /**
     * @generated from field: chalk.graph.v1.DatabricksSource databricks = 3;
     */
    value: DatabricksSource;
    case: "databricks";
  } | {
    /**
     * @generated from field: chalk.graph.v1.MySQLSource mysql = 4;
     */
    value: MySQLSource;
    case: "mysql";
  } | {
    /**
     * @generated from field: chalk.graph.v1.PostgresSource postgres = 5;
     */
    value: PostgresSource;
    case: "postgres";
  } | {
    /**
     * @generated from field: chalk.graph.v1.RedshiftSource redshift = 6;
     */
    value: RedshiftSource;
    case: "redshift";
  } | {
    /**
     * @generated from field: chalk.graph.v1.SnowflakeSource snowflake = 7;
     */
    value: SnowflakeSource;
    case: "snowflake";
  } | {
    /**
     * @generated from field: chalk.graph.v1.SQLiteSource sqlite = 8;
     */
    value: SQLiteSource;
    case: "sqlite";
  } | {
    /**
     * @generated from field: chalk.graph.v1.SpannerSource spanner = 9;
     */
    value: SpannerSource;
    case: "spanner";
  } | {
    /**
     * @generated from field: chalk.graph.v1.TrinoSource trino = 10;
     */
    value: TrinoSource;
    case: "trino";
  } | {
    /**
     * @generated from field: chalk.graph.v1.DynamoDBSource dynamodb = 11;
     */
    value: DynamoDBSource;
    case: "dynamodb";
  } | {
    /**
     * @generated from field: chalk.graph.v1.AthenaSource athena = 12;
     */
    value: AthenaSource;
    case: "athena";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DatabaseSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.DatabaseSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bigquery", kind: "message", T: BigQuerySource, oneof: "source" },
    { no: 2, name: "cloudsql", kind: "message", T: CloudSQLSource, oneof: "source" },
    { no: 3, name: "databricks", kind: "message", T: DatabricksSource, oneof: "source" },
    { no: 4, name: "mysql", kind: "message", T: MySQLSource, oneof: "source" },
    { no: 5, name: "postgres", kind: "message", T: PostgresSource, oneof: "source" },
    { no: 6, name: "redshift", kind: "message", T: RedshiftSource, oneof: "source" },
    { no: 7, name: "snowflake", kind: "message", T: SnowflakeSource, oneof: "source" },
    { no: 8, name: "sqlite", kind: "message", T: SQLiteSource, oneof: "source" },
    { no: 9, name: "spanner", kind: "message", T: SpannerSource, oneof: "source" },
    { no: 10, name: "trino", kind: "message", T: TrinoSource, oneof: "source" },
    { no: 11, name: "dynamodb", kind: "message", T: DynamoDBSource, oneof: "source" },
    { no: 12, name: "athena", kind: "message", T: AthenaSource, oneof: "source" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseSource {
    return new DatabaseSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseSource {
    return new DatabaseSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseSource {
    return new DatabaseSource().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseSource | PlainMessage<DatabaseSource> | undefined, b: DatabaseSource | PlainMessage<DatabaseSource> | undefined): boolean {
    return proto3.util.equals(DatabaseSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.BigQuerySource
 */
export class BigQuerySource extends Message<BigQuerySource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string dataset = 3;
   */
  dataset = "";

  /**
   * @generated from field: string location = 4;
   */
  location = "";

  /**
   * @generated from field: string credentials_base64 = 5;
   */
  credentialsBase64 = "";

  /**
   * @generated from field: string credentials_path = 6;
   */
  credentialsPath = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 7;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 8;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<BigQuerySource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.BigQuerySource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "credentials_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "credentials_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 8, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQuerySource {
    return new BigQuerySource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQuerySource {
    return new BigQuerySource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQuerySource {
    return new BigQuerySource().fromJsonString(jsonString, options);
  }

  static equals(a: BigQuerySource | PlainMessage<BigQuerySource> | undefined, b: BigQuerySource | PlainMessage<BigQuerySource> | undefined): boolean {
    return proto3.util.equals(BigQuerySource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.CloudSQLSource
 */
export class CloudSQLSource extends Message<CloudSQLSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string db = 2;
   */
  db = "";

  /**
   * @generated from field: string user = 3;
   */
  user = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: string instance_name = 5;
   */
  instanceName = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 6;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 7;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<CloudSQLSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.CloudSQLSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 7, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudSQLSource {
    return new CloudSQLSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudSQLSource {
    return new CloudSQLSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudSQLSource {
    return new CloudSQLSource().fromJsonString(jsonString, options);
  }

  static equals(a: CloudSQLSource | PlainMessage<CloudSQLSource> | undefined, b: CloudSQLSource | PlainMessage<CloudSQLSource> | undefined): boolean {
    return proto3.util.equals(CloudSQLSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.DatabricksSource
 */
export class DatabricksSource extends Message<DatabricksSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: string port = 3;
   */
  port = "";

  /**
   * @generated from field: string db = 4;
   */
  db = "";

  /**
   * @generated from field: string http_path = 5;
   */
  httpPath = "";

  /**
   * @generated from field: string access_token = 6;
   */
  accessToken = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 7;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 8;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<DatabricksSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.DatabricksSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "http_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 8, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabricksSource {
    return new DatabricksSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabricksSource {
    return new DatabricksSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabricksSource {
    return new DatabricksSource().fromJsonString(jsonString, options);
  }

  static equals(a: DatabricksSource | PlainMessage<DatabricksSource> | undefined, b: DatabricksSource | PlainMessage<DatabricksSource> | undefined): boolean {
    return proto3.util.equals(DatabricksSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.DynamoDBSource
 */
export class DynamoDBSource extends Message<DynamoDBSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string aws_client_id_override = 2;
   */
  awsClientIdOverride?: string;

  /**
   * @generated from field: optional string aws_client_secret_override = 3;
   */
  awsClientSecretOverride?: string;

  /**
   * @generated from field: optional string aws_region_override = 4;
   */
  awsRegionOverride?: string;

  /**
   * @generated from field: optional string endpoint_override = 5;
   */
  endpointOverride?: string;

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 6;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 7;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<DynamoDBSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.DynamoDBSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aws_client_id_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "aws_client_secret_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "aws_region_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "endpoint_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 7, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DynamoDBSource {
    return new DynamoDBSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DynamoDBSource {
    return new DynamoDBSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DynamoDBSource {
    return new DynamoDBSource().fromJsonString(jsonString, options);
  }

  static equals(a: DynamoDBSource | PlainMessage<DynamoDBSource> | undefined, b: DynamoDBSource | PlainMessage<DynamoDBSource> | undefined): boolean {
    return proto3.util.equals(DynamoDBSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.MySQLSource
 */
export class MySQLSource extends Message<MySQLSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: string port = 3;
   */
  port = "";

  /**
   * @generated from field: string db = 4;
   */
  db = "";

  /**
   * @generated from field: string user = 5;
   */
  user = "";

  /**
   * @generated from field: string password = 6;
   */
  password = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 7;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 8;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<MySQLSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.MySQLSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 8, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MySQLSource {
    return new MySQLSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MySQLSource {
    return new MySQLSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MySQLSource {
    return new MySQLSource().fromJsonString(jsonString, options);
  }

  static equals(a: MySQLSource | PlainMessage<MySQLSource> | undefined, b: MySQLSource | PlainMessage<MySQLSource> | undefined): boolean {
    return proto3.util.equals(MySQLSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.PostgresSource
 */
export class PostgresSource extends Message<PostgresSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: string port = 3;
   */
  port = "";

  /**
   * @generated from field: string db = 4;
   */
  db = "";

  /**
   * @generated from field: string user = 5;
   */
  user = "";

  /**
   * @generated from field: string password = 6;
   */
  password = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 7;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 8;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<PostgresSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.PostgresSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 8, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresSource {
    return new PostgresSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresSource {
    return new PostgresSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresSource {
    return new PostgresSource().fromJsonString(jsonString, options);
  }

  static equals(a: PostgresSource | PlainMessage<PostgresSource> | undefined, b: PostgresSource | PlainMessage<PostgresSource> | undefined): boolean {
    return proto3.util.equals(PostgresSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.RedshiftSource
 */
export class RedshiftSource extends Message<RedshiftSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: string port = 3;
   */
  port = "";

  /**
   * @generated from field: string db = 4;
   */
  db = "";

  /**
   * @generated from field: string user = 5;
   */
  user = "";

  /**
   * @generated from field: string password = 6;
   */
  password = "";

  /**
   * @generated from field: string s3_client = 7;
   */
  s3Client = "";

  /**
   * @generated from field: string s3_bucket = 8;
   */
  s3Bucket = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 9;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 10;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: string unload_iam_role = 11;
   */
  unloadIamRole = "";

  constructor(data?: PartialMessage<RedshiftSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.RedshiftSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "s3_client", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "s3_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 10, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 11, name: "unload_iam_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedshiftSource {
    return new RedshiftSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedshiftSource {
    return new RedshiftSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedshiftSource {
    return new RedshiftSource().fromJsonString(jsonString, options);
  }

  static equals(a: RedshiftSource | PlainMessage<RedshiftSource> | undefined, b: RedshiftSource | PlainMessage<RedshiftSource> | undefined): boolean {
    return proto3.util.equals(RedshiftSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SnowflakeSource
 */
export class SnowflakeSource extends Message<SnowflakeSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string db = 2;
   */
  db = "";

  /**
   * @generated from field: string schema = 3;
   */
  schema = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  /**
   * @generated from field: string user = 5;
   */
  user = "";

  /**
   * @generated from field: string password = 6;
   */
  password = "";

  /**
   * @generated from field: string account_identifier = 7;
   */
  accountIdentifier = "";

  /**
   * @generated from field: string warehouse = 8;
   */
  warehouse = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 9;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 10;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: string private_key_b64 = 11;
   */
  privateKeyB64 = "";

  constructor(data?: PartialMessage<SnowflakeSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SnowflakeSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "account_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "warehouse", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 10, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 11, name: "private_key_b64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnowflakeSource {
    return new SnowflakeSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnowflakeSource {
    return new SnowflakeSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnowflakeSource {
    return new SnowflakeSource().fromJsonString(jsonString, options);
  }

  static equals(a: SnowflakeSource | PlainMessage<SnowflakeSource> | undefined, b: SnowflakeSource | PlainMessage<SnowflakeSource> | undefined): boolean {
    return proto3.util.equals(SnowflakeSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SQLiteSource
 */
export class SQLiteSource extends Message<SQLiteSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string file_name = 2;
   */
  fileName = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 3;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 4;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<SQLiteSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SQLiteSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 4, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SQLiteSource {
    return new SQLiteSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SQLiteSource {
    return new SQLiteSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SQLiteSource {
    return new SQLiteSource().fromJsonString(jsonString, options);
  }

  static equals(a: SQLiteSource | PlainMessage<SQLiteSource> | undefined, b: SQLiteSource | PlainMessage<SQLiteSource> | undefined): boolean {
    return proto3.util.equals(SQLiteSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.SpannerSource
 */
export class SpannerSource extends Message<SpannerSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string instance = 3;
   */
  instance = "";

  /**
   * @generated from field: string db = 4;
   */
  db = "";

  /**
   * @generated from field: string credentials_base64 = 5;
   */
  credentialsBase64 = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 6;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 7;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<SpannerSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.SpannerSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "credentials_base64", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 7, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpannerSource {
    return new SpannerSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpannerSource {
    return new SpannerSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpannerSource {
    return new SpannerSource().fromJsonString(jsonString, options);
  }

  static equals(a: SpannerSource | PlainMessage<SpannerSource> | undefined, b: SpannerSource | PlainMessage<SpannerSource> | undefined): boolean {
    return proto3.util.equals(SpannerSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.TrinoSource
 */
export class TrinoSource extends Message<TrinoSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: string port = 3;
   */
  port = "";

  /**
   * @generated from field: string catalog = 4;
   */
  catalog = "";

  /**
   * @generated from field: string schema = 5;
   */
  schema = "";

  /**
   * @generated from field: string user = 6;
   */
  user = "";

  /**
   * @generated from field: string password = 7;
   */
  password = "";

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 8;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 9;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  constructor(data?: PartialMessage<TrinoSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.TrinoSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 9, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrinoSource {
    return new TrinoSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrinoSource {
    return new TrinoSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrinoSource {
    return new TrinoSource().fromJsonString(jsonString, options);
  }

  static equals(a: TrinoSource | PlainMessage<TrinoSource> | undefined, b: TrinoSource | PlainMessage<TrinoSource> | undefined): boolean {
    return proto3.util.equals(TrinoSource, a, b);
  }
}

/**
 * @generated from message chalk.graph.v1.AthenaSource
 */
export class AthenaSource extends Message<AthenaSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string aws_region = 2;
   */
  awsRegion = "";

  /**
   * @generated from field: optional string aws_access_key_id = 3;
   */
  awsAccessKeyId?: string;

  /**
   * @generated from field: optional string aws_access_key_secret = 4;
   */
  awsAccessKeySecret?: string;

  /**
   * @generated from field: string s3_staging_dir = 5;
   */
  s3StagingDir = "";

  /**
   * @generated from field: optional string catalog_name = 6;
   */
  catalogName?: string;

  /**
   * @generated from field: optional string schema_name = 7;
   */
  schemaName?: string;

  /**
   * @generated from field: optional string role_arn = 8;
   */
  roleArn?: string;

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> engine_args = 9;
   */
  engineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: map<string, chalk.arrow.v1.ScalarValue> async_engine_args = 10;
   */
  asyncEngineArgs: { [key: string]: ScalarValue } = {};

  /**
   * @generated from field: optional string work_group = 11;
   */
  workGroup?: string;

  constructor(data?: PartialMessage<AthenaSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.graph.v1.AthenaSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aws_region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "aws_access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "aws_access_key_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "s3_staging_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "catalog_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "schema_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "role_arn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 10, name: "async_engine_args", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ScalarValue} },
    { no: 11, name: "work_group", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AthenaSource {
    return new AthenaSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AthenaSource {
    return new AthenaSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AthenaSource {
    return new AthenaSource().fromJsonString(jsonString, options);
  }

  static equals(a: AthenaSource | PlainMessage<AthenaSource> | undefined, b: AthenaSource | PlainMessage<AthenaSource> | undefined): boolean {
    return proto3.util.equals(AthenaSource, a, b);
  }
}

