// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/auth/v1/featurepermission.proto (package chalk.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.auth.v1.FeaturePermission
 */
export enum FeaturePermission {
  /**
   * @generated from enum value: FEATURE_PERMISSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Allow unfettered access to the feature.
   * This permission is the default permission for all features.
   *
   * @generated from enum value: FEATURE_PERMISSION_ALLOW = 1;
   */
  ALLOW = 1,

  /**
   * Allow access to the feature only within a query plan,
   * and do not return the feature to the client directly.
   *
   * @generated from enum value: FEATURE_PERMISSION_ALLOW_INTERNAL = 2;
   */
  ALLOW_INTERNAL = 2,

  /**
   * Deny access to the feature, even if the user hasn't requested
   * access to this feature directly, but needs the feature to compute
   * the result of the query.
   *
   * @generated from enum value: FEATURE_PERMISSION_DENY = 3;
   */
  DENY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FeaturePermission)
proto3.util.setEnumType(FeaturePermission, "chalk.auth.v1.FeaturePermission", [
  { no: 0, name: "FEATURE_PERMISSION_UNSPECIFIED" },
  { no: 1, name: "FEATURE_PERMISSION_ALLOW" },
  { no: 2, name: "FEATURE_PERMISSION_ALLOW_INTERNAL" },
  { no: 3, name: "FEATURE_PERMISSION_DENY" },
]);

/**
 * @generated from message chalk.auth.v1.FeaturePermissions
 */
export class FeaturePermissions extends Message<FeaturePermissions> {
  /**
   * @generated from field: map<string, chalk.auth.v1.FeaturePermission> tags = 1;
   */
  tags: { [key: string]: FeaturePermission } = {};

  constructor(data?: PartialMessage<FeaturePermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.FeaturePermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(FeaturePermission)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeaturePermissions {
    return new FeaturePermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeaturePermissions {
    return new FeaturePermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeaturePermissions {
    return new FeaturePermissions().fromJsonString(jsonString, options);
  }

  static equals(a: FeaturePermissions | PlainMessage<FeaturePermissions> | undefined, b: FeaturePermissions | PlainMessage<FeaturePermissions> | undefined): boolean {
    return proto3.util.equals(FeaturePermissions, a, b);
  }
}

