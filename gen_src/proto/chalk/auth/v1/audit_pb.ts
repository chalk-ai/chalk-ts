// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/auth/v1/audit.proto (package chalk.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, MethodOptions, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.auth.v1.AuditLevel
 */
export enum AuditLevel {
  /**
   * @generated from enum value: AUDIT_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUDIT_LEVEL_ERRORS = 1;
   */
  ERRORS = 1,

  /**
   * @generated from enum value: AUDIT_LEVEL_ALL = 2;
   */
  ALL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuditLevel)
proto3.util.setEnumType(AuditLevel, "chalk.auth.v1.AuditLevel", [
  { no: 0, name: "AUDIT_LEVEL_UNSPECIFIED" },
  { no: 1, name: "AUDIT_LEVEL_ERRORS" },
  { no: 2, name: "AUDIT_LEVEL_ALL" },
]);

/**
 * @generated from message chalk.auth.v1.AuditOptions
 */
export class AuditOptions extends Message<AuditOptions> {
  /**
   * @generated from field: chalk.auth.v1.AuditLevel level = 1;
   */
  level = AuditLevel.UNSPECIFIED;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<AuditOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.AuditOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(AuditLevel) },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditOptions {
    return new AuditOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditOptions {
    return new AuditOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditOptions {
    return new AuditOptions().fromJsonString(jsonString, options);
  }

  static equals(a: AuditOptions | PlainMessage<AuditOptions> | undefined, b: AuditOptions | PlainMessage<AuditOptions> | undefined): boolean {
    return proto3.util.equals(AuditOptions, a, b);
  }
}

/**
 * @generated from extension: optional chalk.auth.v1.AuditOptions audit = 30001;
 */
export const audit = proto3.makeExtension<MethodOptions, AuditOptions>(
  "chalk.auth.v1.audit", 
  MethodOptions, 
  () => ({ no: 30001, kind: "message", T: AuditOptions, opt: true }),
);

