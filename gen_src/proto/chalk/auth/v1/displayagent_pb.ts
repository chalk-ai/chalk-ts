// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/auth/v1/displayagent.proto (package chalk.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Permission } from "./permissions_pb";
import { FeaturePermissions } from "./featurepermission_pb";

/**
 * @generated from message chalk.auth.v1.DisplayPermission
 */
export class DisplayPermission extends Message<DisplayPermission> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.auth.v1.Permission permission = 2;
   */
  permission = Permission.UNSPECIFIED;

  constructor(data?: PartialMessage<DisplayPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "enum", T: proto3.getEnumType(Permission) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayPermission {
    return new DisplayPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayPermission {
    return new DisplayPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayPermission {
    return new DisplayPermission().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayPermission | PlainMessage<DisplayPermission> | undefined, b: DisplayPermission | PlainMessage<DisplayPermission> | undefined): boolean {
    return proto3.util.equals(DisplayPermission, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayEnvironmentPermissions
 */
export class DisplayEnvironmentPermissions extends Message<DisplayEnvironmentPermissions> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * @generated from field: string environment_name = 2;
   */
  environmentName = "";

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * @generated from field: string project_name = 4;
   */
  projectName = "";

  /**
   * @generated from field: repeated chalk.auth.v1.DisplayPermission permissions = 5;
   */
  permissions: DisplayPermission[] = [];

  constructor(data?: PartialMessage<DisplayEnvironmentPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayEnvironmentPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "permissions", kind: "message", T: DisplayPermission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayEnvironmentPermissions {
    return new DisplayEnvironmentPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayEnvironmentPermissions {
    return new DisplayEnvironmentPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayEnvironmentPermissions {
    return new DisplayEnvironmentPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayEnvironmentPermissions | PlainMessage<DisplayEnvironmentPermissions> | undefined, b: DisplayEnvironmentPermissions | PlainMessage<DisplayEnvironmentPermissions> | undefined): boolean {
    return proto3.util.equals(DisplayEnvironmentPermissions, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayUserAgent
 */
export class DisplayUserAgent extends Message<DisplayUserAgent> {
  /**
   * @generated from field: string client_id = 1 [deprecated = true];
   * @deprecated
   */
  clientId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: repeated chalk.auth.v1.DisplayEnvironmentPermissions permissions_by_environment = 4;
   */
  permissionsByEnvironment: DisplayEnvironmentPermissions[] = [];

  /**
   * @generated from field: bool impersonated = 5;
   */
  impersonated = false;

  /**
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * @generated from field: string email = 7;
   */
  email = "";

  /**
   * @generated from field: string team_name = 8;
   */
  teamName = "";

  /**
   * @generated from field: repeated chalk.auth.v1.DisplayCustomClaim customer_claims = 9;
   */
  customerClaims: DisplayCustomClaim[] = [];

  constructor(data?: PartialMessage<DisplayUserAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayUserAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "permissions_by_environment", kind: "message", T: DisplayEnvironmentPermissions, repeated: true },
    { no: 5, name: "impersonated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "team_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "customer_claims", kind: "message", T: DisplayCustomClaim, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayUserAgent {
    return new DisplayUserAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayUserAgent {
    return new DisplayUserAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayUserAgent {
    return new DisplayUserAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayUserAgent | PlainMessage<DisplayUserAgent> | undefined, b: DisplayUserAgent | PlainMessage<DisplayUserAgent> | undefined): boolean {
    return proto3.util.equals(DisplayUserAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayCustomClaim
 */
export class DisplayCustomClaim extends Message<DisplayCustomClaim> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<DisplayCustomClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayCustomClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayCustomClaim {
    return new DisplayCustomClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayCustomClaim {
    return new DisplayCustomClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayCustomClaim {
    return new DisplayCustomClaim().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayCustomClaim | PlainMessage<DisplayCustomClaim> | undefined, b: DisplayCustomClaim | PlainMessage<DisplayCustomClaim> | undefined): boolean {
    return proto3.util.equals(DisplayCustomClaim, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayServiceTokenAgent
 */
export class DisplayServiceTokenAgent extends Message<DisplayServiceTokenAgent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * @generated from field: repeated chalk.auth.v1.DisplayPermission permissions = 6;
   */
  permissions: DisplayPermission[] = [];

  /**
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * @generated from field: string team_name = 8;
   */
  teamName = "";

  /**
   * @generated from field: string project_name = 9;
   */
  projectName = "";

  /**
   * @generated from field: string environment_name = 10;
   */
  environmentName = "";

  /**
   * @generated from field: repeated chalk.auth.v1.DisplayCustomClaim customer_claims = 11;
   */
  customerClaims: DisplayCustomClaim[] = [];

  /**
   * @generated from field: chalk.auth.v1.FeaturePermissions feature_permissions = 12;
   */
  featurePermissions?: FeaturePermissions;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 13;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<DisplayServiceTokenAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayServiceTokenAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "permissions", kind: "message", T: DisplayPermission, repeated: true },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "team_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "environment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "customer_claims", kind: "message", T: DisplayCustomClaim, repeated: true },
    { no: 12, name: "feature_permissions", kind: "message", T: FeaturePermissions },
    { no: 13, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayServiceTokenAgent {
    return new DisplayServiceTokenAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayServiceTokenAgent {
    return new DisplayServiceTokenAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayServiceTokenAgent {
    return new DisplayServiceTokenAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayServiceTokenAgent | PlainMessage<DisplayServiceTokenAgent> | undefined, b: DisplayServiceTokenAgent | PlainMessage<DisplayServiceTokenAgent> | undefined): boolean {
    return proto3.util.equals(DisplayServiceTokenAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayEngineAgent
 */
export class DisplayEngineAgent extends Message<DisplayEngineAgent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string team_id = 2;
   */
  teamId = "";

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * @generated from field: bool impersonated = 5;
   */
  impersonated = false;

  /**
   * @generated from field: string team_name = 6;
   */
  teamName = "";

  /**
   * @generated from field: string project_name = 7;
   */
  projectName = "";

  /**
   * @generated from field: string environment_name = 8;
   */
  environmentName = "";

  constructor(data?: PartialMessage<DisplayEngineAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayEngineAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "impersonated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "team_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "environment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayEngineAgent {
    return new DisplayEngineAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayEngineAgent {
    return new DisplayEngineAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayEngineAgent {
    return new DisplayEngineAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayEngineAgent | PlainMessage<DisplayEngineAgent> | undefined, b: DisplayEngineAgent | PlainMessage<DisplayEngineAgent> | undefined): boolean {
    return proto3.util.equals(DisplayEngineAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayTenantAgent
 */
export class DisplayTenantAgent extends Message<DisplayTenantAgent> {
  constructor(data?: PartialMessage<DisplayTenantAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayTenantAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayTenantAgent {
    return new DisplayTenantAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayTenantAgent {
    return new DisplayTenantAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayTenantAgent {
    return new DisplayTenantAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayTenantAgent | PlainMessage<DisplayTenantAgent> | undefined, b: DisplayTenantAgent | PlainMessage<DisplayTenantAgent> | undefined): boolean {
    return proto3.util.equals(DisplayTenantAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayMetadataServiceAgent
 */
export class DisplayMetadataServiceAgent extends Message<DisplayMetadataServiceAgent> {
  constructor(data?: PartialMessage<DisplayMetadataServiceAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayMetadataServiceAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayMetadataServiceAgent {
    return new DisplayMetadataServiceAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayMetadataServiceAgent {
    return new DisplayMetadataServiceAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayMetadataServiceAgent {
    return new DisplayMetadataServiceAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayMetadataServiceAgent | PlainMessage<DisplayMetadataServiceAgent> | undefined, b: DisplayMetadataServiceAgent | PlainMessage<DisplayMetadataServiceAgent> | undefined): boolean {
    return proto3.util.equals(DisplayMetadataServiceAgent, a, b);
  }
}

/**
 * @generated from message chalk.auth.v1.DisplayAgent
 */
export class DisplayAgent extends Message<DisplayAgent> {
  /**
   * @generated from oneof chalk.auth.v1.DisplayAgent.agent
   */
  agent: {
    /**
     * @generated from field: chalk.auth.v1.DisplayUserAgent user_agent = 1;
     */
    value: DisplayUserAgent;
    case: "userAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.DisplayServiceTokenAgent service_token_agent = 2;
     */
    value: DisplayServiceTokenAgent;
    case: "serviceTokenAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.DisplayEngineAgent engine_agent = 3;
     */
    value: DisplayEngineAgent;
    case: "engineAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.DisplayTenantAgent tenant_agent = 4;
     */
    value: DisplayTenantAgent;
    case: "tenantAgent";
  } | {
    /**
     * @generated from field: chalk.auth.v1.DisplayMetadataServiceAgent metadata_service_agent = 5;
     */
    value: DisplayMetadataServiceAgent;
    case: "metadataServiceAgent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DisplayAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.auth.v1.DisplayAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_agent", kind: "message", T: DisplayUserAgent, oneof: "agent" },
    { no: 2, name: "service_token_agent", kind: "message", T: DisplayServiceTokenAgent, oneof: "agent" },
    { no: 3, name: "engine_agent", kind: "message", T: DisplayEngineAgent, oneof: "agent" },
    { no: 4, name: "tenant_agent", kind: "message", T: DisplayTenantAgent, oneof: "agent" },
    { no: 5, name: "metadata_service_agent", kind: "message", T: DisplayMetadataServiceAgent, oneof: "agent" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayAgent {
    return new DisplayAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayAgent {
    return new DisplayAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayAgent {
    return new DisplayAgent().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayAgent | PlainMessage<DisplayAgent> | undefined, b: DisplayAgent | PlainMessage<DisplayAgent> | undefined): boolean {
    return proto3.util.equals(DisplayAgent, a, b);
  }
}

