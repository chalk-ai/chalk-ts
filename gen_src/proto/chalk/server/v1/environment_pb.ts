// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/environment.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp, Value } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.server.v1.CloudProviderKind
 */
export enum CloudProviderKind {
  /**
   * @generated from enum value: CLOUD_PROVIDER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CLOUD_PROVIDER_KIND_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: CLOUD_PROVIDER_KIND_GCP = 2;
   */
  GCP = 2,

  /**
   * @generated from enum value: CLOUD_PROVIDER_KIND_AWS = 3;
   */
  AWS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CloudProviderKind)
proto3.util.setEnumType(CloudProviderKind, "chalk.server.v1.CloudProviderKind", [
  { no: 0, name: "CLOUD_PROVIDER_KIND_UNSPECIFIED" },
  { no: 1, name: "CLOUD_PROVIDER_KIND_UNKNOWN" },
  { no: 2, name: "CLOUD_PROVIDER_KIND_GCP" },
  { no: 3, name: "CLOUD_PROVIDER_KIND_AWS" },
]);

/**
 * @generated from message chalk.server.v1.AWSCloudWatchConfig
 */
export class AWSCloudWatchConfig extends Message<AWSCloudWatchConfig> {
  /**
   * @generated from field: optional string log_group_path = 1;
   */
  logGroupPath?: string;

  /**
   * @generated from field: repeated string log_group_paths = 2;
   */
  logGroupPaths: string[] = [];

  constructor(data?: PartialMessage<AWSCloudWatchConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AWSCloudWatchConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log_group_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "log_group_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSCloudWatchConfig {
    return new AWSCloudWatchConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSCloudWatchConfig {
    return new AWSCloudWatchConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSCloudWatchConfig {
    return new AWSCloudWatchConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AWSCloudWatchConfig | PlainMessage<AWSCloudWatchConfig> | undefined, b: AWSCloudWatchConfig | PlainMessage<AWSCloudWatchConfig> | undefined): boolean {
    return proto3.util.equals(AWSCloudWatchConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.AWSSecretManagerConfig
 */
export class AWSSecretManagerConfig extends Message<AWSSecretManagerConfig> {
  /**
   * @generated from field: optional string secret_kms_arn = 1;
   */
  secretKmsArn?: string;

  /**
   * @generated from field: map<string, string> secret_tags = 2;
   */
  secretTags: { [key: string]: string } = {};

  /**
   * @generated from field: optional string secret_prefix = 3;
   */
  secretPrefix?: string;

  constructor(data?: PartialMessage<AWSSecretManagerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AWSSecretManagerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret_kms_arn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "secret_tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "secret_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSSecretManagerConfig {
    return new AWSSecretManagerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSSecretManagerConfig {
    return new AWSSecretManagerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSSecretManagerConfig {
    return new AWSSecretManagerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AWSSecretManagerConfig | PlainMessage<AWSSecretManagerConfig> | undefined, b: AWSSecretManagerConfig | PlainMessage<AWSSecretManagerConfig> | undefined): boolean {
    return proto3.util.equals(AWSSecretManagerConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GCPWorkloadIdentity
 */
export class GCPWorkloadIdentity extends Message<GCPWorkloadIdentity> {
  /**
   * @generated from field: string gcp_project_number = 1;
   */
  gcpProjectNumber = "";

  /**
   * @generated from field: string gcp_service_account = 2;
   */
  gcpServiceAccount = "";

  /**
   * @generated from field: string pool_id = 3;
   */
  poolId = "";

  /**
   * @generated from field: string provider_id = 4;
   */
  providerId = "";

  constructor(data?: PartialMessage<GCPWorkloadIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GCPWorkloadIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gcp_project_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gcp_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GCPWorkloadIdentity {
    return new GCPWorkloadIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GCPWorkloadIdentity {
    return new GCPWorkloadIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GCPWorkloadIdentity {
    return new GCPWorkloadIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: GCPWorkloadIdentity | PlainMessage<GCPWorkloadIdentity> | undefined, b: GCPWorkloadIdentity | PlainMessage<GCPWorkloadIdentity> | undefined): boolean {
    return proto3.util.equals(GCPWorkloadIdentity, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DockerBuildConfig
 */
export class DockerBuildConfig extends Message<DockerBuildConfig> {
  /**
   * @generated from field: string builder = 1;
   */
  builder = "";

  /**
   * @generated from field: string push_registry_type = 2;
   */
  pushRegistryType = "";

  /**
   * @generated from field: string push_registry_tag_prefix = 3;
   */
  pushRegistryTagPrefix = "";

  /**
   * @generated from field: string registry_credentials_secret_id = 4;
   */
  registryCredentialsSecretId = "";

  /**
   * @generated from field: string notification_topic = 5;
   */
  notificationTopic = "";

  constructor(data?: PartialMessage<DockerBuildConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DockerBuildConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "push_registry_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "push_registry_tag_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "registry_credentials_secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "notification_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DockerBuildConfig {
    return new DockerBuildConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DockerBuildConfig {
    return new DockerBuildConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DockerBuildConfig {
    return new DockerBuildConfig().fromJsonString(jsonString, options);
  }

  static equals(a: DockerBuildConfig | PlainMessage<DockerBuildConfig> | undefined, b: DockerBuildConfig | PlainMessage<DockerBuildConfig> | undefined): boolean {
    return proto3.util.equals(DockerBuildConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ElasticsearchLogConfig
 */
export class ElasticsearchLogConfig extends Message<ElasticsearchLogConfig> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  constructor(data?: PartialMessage<ElasticsearchLogConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ElasticsearchLogConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElasticsearchLogConfig {
    return new ElasticsearchLogConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElasticsearchLogConfig {
    return new ElasticsearchLogConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElasticsearchLogConfig {
    return new ElasticsearchLogConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ElasticsearchLogConfig | PlainMessage<ElasticsearchLogConfig> | undefined, b: ElasticsearchLogConfig | PlainMessage<ElasticsearchLogConfig> | undefined): boolean {
    return proto3.util.equals(ElasticsearchLogConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.AWSCloudConfig
 */
export class AWSCloudConfig extends Message<AWSCloudConfig> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string management_role_arn = 2;
   */
  managementRoleArn = "";

  /**
   * @generated from field: string region = 3;
   */
  region = "";

  /**
   * @generated from field: optional string external_id = 4;
   */
  externalId?: string;

  /**
   * @generated from field: chalk.server.v1.AWSCloudWatchConfig deprecated_cloud_watch_config = 5 [deprecated = true];
   * @deprecated
   */
  deprecatedCloudWatchConfig?: AWSCloudWatchConfig;

  /**
   * @generated from field: chalk.server.v1.AWSSecretManagerConfig deprecated_secret_manager_config = 6 [deprecated = true];
   * @deprecated
   */
  deprecatedSecretManagerConfig?: AWSSecretManagerConfig;

  /**
   * @generated from field: chalk.server.v1.GCPWorkloadIdentity workload_identity = 7 [deprecated = true];
   * @deprecated
   */
  workloadIdentity?: GCPWorkloadIdentity;

  /**
   * @generated from field: chalk.server.v1.DockerBuildConfig docker_build_config = 8;
   */
  dockerBuildConfig?: DockerBuildConfig;

  /**
   * @generated from field: chalk.server.v1.ElasticsearchLogConfig elasticsearch_log_config = 9;
   */
  elasticsearchLogConfig?: ElasticsearchLogConfig;

  /**
   * @generated from field: chalk.server.v1.AWSCloudWatchConfig cloudwatch_config = 10;
   */
  cloudwatchConfig?: AWSCloudWatchConfig;

  /**
   * @generated from field: chalk.server.v1.AWSSecretManagerConfig secretmanager_config = 11;
   */
  secretmanagerConfig?: AWSSecretManagerConfig;

  /**
   * @generated from field: chalk.server.v1.GCPWorkloadIdentity gcp_workload_identity = 12;
   */
  gcpWorkloadIdentity?: GCPWorkloadIdentity;

  constructor(data?: PartialMessage<AWSCloudConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AWSCloudConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "management_role_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "deprecated_cloud_watch_config", kind: "message", T: AWSCloudWatchConfig },
    { no: 6, name: "deprecated_secret_manager_config", kind: "message", T: AWSSecretManagerConfig },
    { no: 7, name: "workload_identity", kind: "message", T: GCPWorkloadIdentity },
    { no: 8, name: "docker_build_config", kind: "message", T: DockerBuildConfig },
    { no: 9, name: "elasticsearch_log_config", kind: "message", T: ElasticsearchLogConfig },
    { no: 10, name: "cloudwatch_config", kind: "message", T: AWSCloudWatchConfig },
    { no: 11, name: "secretmanager_config", kind: "message", T: AWSSecretManagerConfig },
    { no: 12, name: "gcp_workload_identity", kind: "message", T: GCPWorkloadIdentity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSCloudConfig {
    return new AWSCloudConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSCloudConfig {
    return new AWSCloudConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSCloudConfig {
    return new AWSCloudConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AWSCloudConfig | PlainMessage<AWSCloudConfig> | undefined, b: AWSCloudConfig | PlainMessage<AWSCloudConfig> | undefined): boolean {
    return proto3.util.equals(AWSCloudConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GCPCloudConfig
 */
export class GCPCloudConfig extends Message<GCPCloudConfig> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string region = 2;
   */
  region = "";

  /**
   * @generated from field: optional string management_service_account = 3;
   */
  managementServiceAccount?: string;

  /**
   * @generated from field: chalk.server.v1.DockerBuildConfig docker_build_config = 4;
   */
  dockerBuildConfig?: DockerBuildConfig;

  constructor(data?: PartialMessage<GCPCloudConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GCPCloudConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "management_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "docker_build_config", kind: "message", T: DockerBuildConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GCPCloudConfig {
    return new GCPCloudConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GCPCloudConfig {
    return new GCPCloudConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GCPCloudConfig {
    return new GCPCloudConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GCPCloudConfig | PlainMessage<GCPCloudConfig> | undefined, b: GCPCloudConfig | PlainMessage<GCPCloudConfig> | undefined): boolean {
    return proto3.util.equals(GCPCloudConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CloudConfig
 */
export class CloudConfig extends Message<CloudConfig> {
  /**
   * @generated from oneof chalk.server.v1.CloudConfig.config
   */
  config: {
    /**
     * @generated from field: chalk.server.v1.AWSCloudConfig aws = 1;
     */
    value: AWSCloudConfig;
    case: "aws";
  } | {
    /**
     * @generated from field: chalk.server.v1.GCPCloudConfig gcp = 2;
     */
    value: GCPCloudConfig;
    case: "gcp";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CloudConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CloudConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aws", kind: "message", T: AWSCloudConfig, oneof: "config" },
    { no: 2, name: "gcp", kind: "message", T: GCPCloudConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudConfig {
    return new CloudConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudConfig {
    return new CloudConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudConfig {
    return new CloudConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CloudConfig | PlainMessage<CloudConfig> | undefined, b: CloudConfig | PlainMessage<CloudConfig> | undefined): boolean {
    return proto3.util.equals(CloudConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvironmentObjectStorageConfig
 */
export class EnvironmentObjectStorageConfig extends Message<EnvironmentObjectStorageConfig> {
  /**
   * @generated from field: string dataset_bucket = 1;
   */
  datasetBucket = "";

  /**
   * @generated from field: string plan_stages_bucket = 2;
   */
  planStagesBucket = "";

  /**
   * @generated from field: string source_bundle_bucket = 3;
   */
  sourceBundleBucket = "";

  constructor(data?: PartialMessage<EnvironmentObjectStorageConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvironmentObjectStorageConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan_stages_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source_bundle_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentObjectStorageConfig {
    return new EnvironmentObjectStorageConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentObjectStorageConfig {
    return new EnvironmentObjectStorageConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentObjectStorageConfig {
    return new EnvironmentObjectStorageConfig().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentObjectStorageConfig | PlainMessage<EnvironmentObjectStorageConfig> | undefined, b: EnvironmentObjectStorageConfig | PlainMessage<EnvironmentObjectStorageConfig> | undefined): boolean {
    return proto3.util.equals(EnvironmentObjectStorageConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string team_id = 4;
   */
  teamId = "";

  /**
   * @generated from field: optional string active_deployment_id = 5;
   */
  activeDeploymentId?: string;

  /**
   * @generated from field: optional string worker_url = 6;
   */
  workerUrl?: string;

  /**
   * @generated from field: optional string service_url = 7;
   */
  serviceUrl?: string;

  /**
   * @generated from field: optional string branch_url = 8;
   */
  branchUrl?: string;

  /**
   * @generated from field: optional string offline_store_secret = 9;
   */
  offlineStoreSecret?: string;

  /**
   * @generated from field: optional string online_store_secret = 10;
   */
  onlineStoreSecret?: string;

  /**
   * @generated from field: optional string feature_store_secret = 11;
   */
  featureStoreSecret?: string;

  /**
   * @generated from field: optional string postgres_secret = 12;
   */
  postgresSecret?: string;

  /**
   * @generated from field: optional string online_store_kind = 13;
   */
  onlineStoreKind?: string;

  /**
   * @generated from field: optional string emq_uri = 14;
   */
  emqUri?: string;

  /**
   * @generated from field: optional string vpc_connector_name = 15;
   */
  vpcConnectorName?: string;

  /**
   * @generated from field: optional string kube_cluster_name = 16;
   */
  kubeClusterName?: string;

  /**
   * @generated from field: optional string branch_kube_cluster_name = 17;
   */
  branchKubeClusterName?: string;

  /**
   * @generated from field: optional string engine_kube_cluster_name = 18;
   */
  engineKubeClusterName?: string;

  /**
   * @generated from field: optional string shadow_engine_kube_cluster_name = 19;
   */
  shadowEngineKubeClusterName?: string;

  /**
   * @generated from field: optional string kube_job_namespace = 20;
   */
  kubeJobNamespace?: string;

  /**
   * @generated from field: optional string kube_preview_namespace = 21;
   */
  kubePreviewNamespace?: string;

  /**
   * @generated from field: optional string kube_service_account_name = 22;
   */
  kubeServiceAccountName?: string;

  /**
   * @generated from field: optional string streaming_query_service_uri = 23;
   */
  streamingQueryServiceUri?: string;

  /**
   * @generated from field: bool skip_offline_writes_for_online_cached_features = 24;
   */
  skipOfflineWritesForOnlineCachedFeatures = false;

  /**
   * @generated from field: optional string result_bus_topic = 25;
   */
  resultBusTopic?: string;

  /**
   * @generated from field: optional string online_persistence_mode = 26;
   */
  onlinePersistenceMode?: string;

  /**
   * @generated from field: optional string metrics_bus_topic = 27;
   */
  metricsBusTopic?: string;

  /**
   * @generated from field: optional string bigtable_instance_name = 28;
   */
  bigtableInstanceName?: string;

  /**
   * @generated from field: optional string bigtable_table_name = 29;
   */
  bigtableTableName?: string;

  /**
   * @generated from field: optional string cloud_account_locator = 30;
   */
  cloudAccountLocator?: string;

  /**
   * @generated from field: optional string cloud_region = 31;
   */
  cloudRegion?: string;

  /**
   * @generated from field: optional string cloud_tenancy_id = 32;
   */
  cloudTenancyId?: string;

  /**
   * @generated from field: optional string source_bundle_bucket = 33;
   */
  sourceBundleBucket?: string;

  /**
   * @generated from field: optional string engine_docker_registry_path = 34;
   */
  engineDockerRegistryPath?: string;

  /**
   * @generated from field: optional string default_planner = 35;
   */
  defaultPlanner?: string;

  /**
   * @generated from field: map<string, string> additional_env_vars = 36;
   */
  additionalEnvVars: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> additional_cron_env_vars = 37;
   */
  additionalCronEnvVars: { [key: string]: string } = {};

  /**
   * @generated from field: optional string private_pip_repositories = 38;
   */
  privatePipRepositories?: string;

  /**
   * @generated from field: bool is_sandbox = 39;
   */
  isSandbox = false;

  /**
   * AWS/GCP
   *
   * @generated from field: chalk.server.v1.CloudProviderKind cloud_provider = 41;
   */
  cloudProvider = CloudProviderKind.UNSPECIFIED;

  /**
   * Null if the environment is hosted by Chalk.
   *
   * @generated from field: optional chalk.server.v1.CloudConfig cloud_config = 42;
   */
  cloudConfig?: CloudConfig;

  /**
   * TODO: really a structured object.
   *
   * @generated from field: map<string, google.protobuf.Value> spec_config_json = 40;
   */
  specConfigJson: { [key: string]: Value } = {};

  /**
   * @generated from field: optional google.protobuf.Timestamp archived_at = 43;
   */
  archivedAt?: Timestamp;

  /**
   * @generated from field: optional string metadata_server_metrics_store_secret = 44;
   */
  metadataServerMetricsStoreSecret?: string;

  /**
   * @generated from field: optional string query_server_metrics_store_secret = 45;
   */
  queryServerMetricsStoreSecret?: string;

  /**
   * @generated from field: optional string pinned_base_image = 46;
   */
  pinnedBaseImage?: string;

  /**
   * @generated from field: optional string cluster_gateway_id = 47;
   */
  clusterGatewayId?: string;

  /**
   * @generated from field: optional string cluster_timescaledb_id = 48;
   */
  clusterTimescaledbId?: string;

  /**
   * @generated from field: optional string background_persistence_deployment_id = 49;
   */
  backgroundPersistenceDeploymentId?: string;

  /**
   * @generated from field: optional chalk.server.v1.EnvironmentObjectStorageConfig environment_buckets = 50;
   */
  environmentBuckets?: EnvironmentObjectStorageConfig;

  /**
   * @generated from field: optional string cluster_timescaledb_secret = 51;
   */
  clusterTimescaledbSecret?: string;

  /**
   * @generated from field: optional string grpc_engine_url = 52;
   */
  grpcEngineUrl?: string;

  /**
   * @generated from field: optional string kube_cluster_mode = 53;
   */
  kubeClusterMode?: string;

  /**
   * string created_at: datetime=None,
   * string updated_at: Optional[datetime]=None,
   *
   * @generated from field: optional string dashboard_url = 54;
   */
  dashboardUrl?: string;

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "active_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "worker_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "service_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "branch_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "offline_store_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "online_store_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "feature_store_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "postgres_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "online_store_kind", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "emq_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "vpc_connector_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "kube_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "branch_kube_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "engine_kube_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 19, name: "shadow_engine_kube_cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 20, name: "kube_job_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 21, name: "kube_preview_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: "kube_service_account_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 23, name: "streaming_query_service_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 24, name: "skip_offline_writes_for_online_cached_features", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "result_bus_topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 26, name: "online_persistence_mode", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 27, name: "metrics_bus_topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 28, name: "bigtable_instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 29, name: "bigtable_table_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 30, name: "cloud_account_locator", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 31, name: "cloud_region", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 32, name: "cloud_tenancy_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 33, name: "source_bundle_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 34, name: "engine_docker_registry_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 35, name: "default_planner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 36, name: "additional_env_vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 37, name: "additional_cron_env_vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 38, name: "private_pip_repositories", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 39, name: "is_sandbox", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 41, name: "cloud_provider", kind: "enum", T: proto3.getEnumType(CloudProviderKind) },
    { no: 42, name: "cloud_config", kind: "message", T: CloudConfig, opt: true },
    { no: 40, name: "spec_config_json", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 43, name: "archived_at", kind: "message", T: Timestamp, opt: true },
    { no: 44, name: "metadata_server_metrics_store_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 45, name: "query_server_metrics_store_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 46, name: "pinned_base_image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 47, name: "cluster_gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 48, name: "cluster_timescaledb_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 49, name: "background_persistence_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 50, name: "environment_buckets", kind: "message", T: EnvironmentObjectStorageConfig, opt: true },
    { no: 51, name: "cluster_timescaledb_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 52, name: "grpc_engine_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 53, name: "kube_cluster_mode", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 54, name: "dashboard_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

