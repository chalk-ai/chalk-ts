// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/chart.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { MetricConfig } from "../../artifacts/v1/chart_pb";

/**
 * @generated from message chalk.server.v1.Series
 */
export class Series extends Message<Series> {
  /**
   * @generated from field: repeated double points = 1;
   */
  points: number[] = [];

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string units = 3;
   */
  units = "";

  constructor(data?: PartialMessage<Series>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Series";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "units", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Series {
    return new Series().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Series {
    return new Series().fromJsonString(jsonString, options);
  }

  static equals(a: Series | PlainMessage<Series> | undefined, b: Series | PlainMessage<Series> | undefined): boolean {
    return proto3.util.equals(Series, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Chart
 */
export class Chart extends Message<Chart> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated chalk.server.v1.Series series = 2;
   */
  series: Series[] = [];

  /**
   * @generated from field: repeated int64 x_timestamp_ms = 4;
   */
  xTimestampMs: bigint[] = [];

  constructor(data?: PartialMessage<Chart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Chart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: Series, repeated: true },
    { no: 4, name: "x_timestamp_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chart {
    return new Chart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJsonString(jsonString, options);
  }

  static equals(a: Chart | PlainMessage<Chart> | undefined, b: Chart | PlainMessage<Chart> | undefined): boolean {
    return proto3.util.equals(Chart, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Point
 * @deprecated
 */
export class Point extends Message<Point> {
  /**
   * wrapped in a Point to allow for optional (empty space in time series)
   *
   * @generated from field: optional int64 value = 1;
   */
  value?: bigint;

  constructor(data?: PartialMessage<Point>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Point";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Point {
    return new Point().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJsonString(jsonString, options);
  }

  static equals(a: Point | PlainMessage<Point> | undefined, b: Point | PlainMessage<Point> | undefined): boolean {
    return proto3.util.equals(Point, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TimeSeries
 * @deprecated
 */
export class TimeSeries extends Message<TimeSeries> {
  /**
   * @generated from field: repeated chalk.server.v1.Point points = 1;
   */
  points: Point[] = [];

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string units = 3;
   */
  units = "";

  constructor(data?: PartialMessage<TimeSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TimeSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: Point, repeated: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "units", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeries {
    return new TimeSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeries {
    return new TimeSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeries {
    return new TimeSeries().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeries | PlainMessage<TimeSeries> | undefined, b: TimeSeries | PlainMessage<TimeSeries> | undefined): boolean {
    return proto3.util.equals(TimeSeries, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TimeSeriesChart
 * @deprecated
 */
export class TimeSeriesChart extends Message<TimeSeriesChart> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated chalk.server.v1.TimeSeries series = 2;
   */
  series: TimeSeries[] = [];

  /**
   * @generated from field: repeated google.protobuf.Timestamp x_series = 3;
   */
  xSeries: Timestamp[] = [];

  /**
   * @generated from field: google.protobuf.Duration window_period = 4;
   */
  windowPeriod?: Duration;

  constructor(data?: PartialMessage<TimeSeriesChart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TimeSeriesChart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: TimeSeries, repeated: true },
    { no: 3, name: "x_series", kind: "message", T: Timestamp, repeated: true },
    { no: 4, name: "window_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesChart {
    return new TimeSeriesChart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesChart {
    return new TimeSeriesChart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesChart {
    return new TimeSeriesChart().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesChart | PlainMessage<TimeSeriesChart> | undefined, b: TimeSeriesChart | PlainMessage<TimeSeriesChart> | undefined): boolean {
    return proto3.util.equals(TimeSeriesChart, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListChartsRequest
 */
export class ListChartsRequest extends Message<ListChartsRequest> {
  constructor(data?: PartialMessage<ListChartsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListChartsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChartsRequest {
    return new ListChartsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChartsRequest {
    return new ListChartsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChartsRequest {
    return new ListChartsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListChartsRequest | PlainMessage<ListChartsRequest> | undefined, b: ListChartsRequest | PlainMessage<ListChartsRequest> | undefined): boolean {
    return proto3.util.equals(ListChartsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListChartsResponse
 */
export class ListChartsResponse extends Message<ListChartsResponse> {
  /**
   * @generated from field: repeated chalk.artifacts.v1.MetricConfig charts = 1;
   */
  charts: MetricConfig[] = [];

  constructor(data?: PartialMessage<ListChartsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListChartsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "charts", kind: "message", T: MetricConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChartsResponse {
    return new ListChartsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChartsResponse {
    return new ListChartsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChartsResponse {
    return new ListChartsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListChartsResponse | PlainMessage<ListChartsResponse> | undefined, b: ListChartsResponse | PlainMessage<ListChartsResponse> | undefined): boolean {
    return proto3.util.equals(ListChartsResponse, a, b);
  }
}

