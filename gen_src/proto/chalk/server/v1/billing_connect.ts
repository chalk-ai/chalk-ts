// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/billing.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetNodesAndPodsRequest, GetNodesAndPodsResponse, GetNodesAndPodsUIRequest, GetNodesAndPodsUIResponse, GetUsageChartRequest, GetUsageChartResponse, GetUtilizationRatesRequest, GetUtilizationRatesResponse, SyncUtilizationRequest, SyncUtilizationResponse } from "./billing_pb";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { GetPodRequestChartsRequest, GetPodRequestChartsResponse } from "./pod_request_pb";

/**
 * @generated from service chalk.server.v1.BillingService
 */
export const BillingService = {
  typeName: "chalk.server.v1.BillingService",
  methods: {
    /**
     * GetNodesAndPodsUI returns the nodes and pods for the team by default,
     * not just a single environment. To limit the scope, add filters to
     * the request object.
     * Use this endpoint going forward; GetNodesAndPods should be deprecated because
     * it reuses PubSub types that are dangerous to update and are not intended for UI use.
     *
     * @generated from rpc chalk.server.v1.BillingService.GetNodesAndPodsUI
     */
    getNodesAndPodsUI: {
      name: "GetNodesAndPodsUI",
      I: GetNodesAndPodsUIRequest,
      O: GetNodesAndPodsUIResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * GetNodesAndPods returns the nodes and pods for the team by default,
     * not just a single environment. To limit the scope, add filters to
     * the request object.
     *
     * @generated from rpc chalk.server.v1.BillingService.GetNodesAndPods
     */
    getNodesAndPods: {
      name: "GetNodesAndPods",
      I: GetNodesAndPodsRequest,
      O: GetNodesAndPodsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * GetUsageChart shows the Chalk credit usage between a provided start and
     * end period. The usage can be grouped by UsageChartPeriod for daily or
     * monthly usage, and by UsageChartGrouping for instance type or cluster usage.
     *
     * @generated from rpc chalk.server.v1.BillingService.GetUsageChart
     */
    getUsageChart: {
      name: "GetUsageChart",
      I: GetUsageChartRequest,
      O: GetUsageChartResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * GetUtilizationRates returns the current utilization rates for all
     * instance types.
     *
     * @generated from rpc chalk.server.v1.BillingService.GetUtilizationRates
     */
    getUtilizationRates: {
      name: "GetUtilizationRates",
      I: GetUtilizationRatesRequest,
      O: GetUtilizationRatesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.server.v1.BillingService.GetPodRequestCharts
     */
    getPodRequestCharts: {
      name: "GetPodRequestCharts",
      I: GetPodRequestChartsRequest,
      O: GetPodRequestChartsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.server.v1.BillingService.SyncUtilization
     */
    syncUtilization: {
      name: "SyncUtilization",
      I: SyncUtilizationRequest,
      O: SyncUtilizationResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
  }
} as const;

