// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/graph.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Graph } from "../../graph/v1/graph_pb";
import { Export } from "../../artifacts/v1/export_pb";
import { ChalkError } from "../../common/v1/chalk_error_pb";

/**
 * @generated from message chalk.server.v1.FeatureSQL
 */
export class FeatureSQL extends Message<FeatureSQL> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: optional string deployment_id = 3;
   */
  deploymentId?: string;

  /**
   * @generated from field: string fqn = 4;
   */
  fqn = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string namespace = 6;
   */
  namespace = "";

  /**
   * @generated from field: optional string max_staleness = 7;
   */
  maxStaleness?: string;

  /**
   * @generated from field: bool etl_offline_to_online = 8;
   */
  etlOfflineToOnline = false;

  /**
   * @generated from field: optional string description = 9;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 10;
   */
  owner?: string;

  /**
   * @generated from field: repeated string tags = 11;
   */
  tags: string[] = [];

  /**
   * @generated from field: string kind_enum = 12;
   */
  kindEnum = "";

  /**
   * @generated from field: string kind = 13;
   */
  kind = "";

  /**
   * @generated from field: bool was_reset = 14;
   */
  wasReset = false;

  /**
   * @generated from field: optional int64 internal_version = 15;
   */
  internalVersion?: bigint;

  /**
   *  string created_at = 14;
   *  string updated_at = 15;
   *
   * @generated from field: bool is_singleton = 16;
   */
  isSingleton = false;

  constructor(data?: PartialMessage<FeatureSQL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.FeatureSQL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "max_staleness", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "etl_offline_to_online", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "kind_enum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "was_reset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "internal_version", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 16, name: "is_singleton", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureSQL {
    return new FeatureSQL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureSQL {
    return new FeatureSQL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureSQL {
    return new FeatureSQL().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureSQL | PlainMessage<FeatureSQL> | undefined, b: FeatureSQL | PlainMessage<FeatureSQL> | undefined): boolean {
    return proto3.util.equals(FeatureSQL, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeatureSQLResponse
 */
export class GetFeatureSQLResponse extends Message<GetFeatureSQLResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.FeatureSQL features = 1;
   */
  features: FeatureSQL[] = [];

  constructor(data?: PartialMessage<GetFeatureSQLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeatureSQLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "features", kind: "message", T: FeatureSQL, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureSQLResponse {
    return new GetFeatureSQLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureSQLResponse {
    return new GetFeatureSQLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureSQLResponse {
    return new GetFeatureSQLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureSQLResponse | PlainMessage<GetFeatureSQLResponse> | undefined, b: GetFeatureSQLResponse | PlainMessage<GetFeatureSQLResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureSQLResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeatureSQLRequest
 */
export class GetFeatureSQLRequest extends Message<GetFeatureSQLRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetFeatureSQLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeatureSQLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureSQLRequest {
    return new GetFeatureSQLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureSQLRequest {
    return new GetFeatureSQLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureSQLRequest {
    return new GetFeatureSQLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureSQLRequest | PlainMessage<GetFeatureSQLRequest> | undefined, b: GetFeatureSQLRequest | PlainMessage<GetFeatureSQLRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureSQLRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.FeatureMetadata
 */
export class FeatureMetadata extends Message<FeatureMetadata> {
  /**
   * @generated from field: string fqn = 1;
   */
  fqn = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from field: optional string owner = 5;
   */
  owner?: string;

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string max_staleness = 7;
   */
  maxStaleness?: string;

  /**
   * @generated from field: bool etl_offline_to_online = 8;
   */
  etlOfflineToOnline = false;

  constructor(data?: PartialMessage<FeatureMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.FeatureMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "max_staleness", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "etl_offline_to_online", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureMetadata {
    return new FeatureMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureMetadata {
    return new FeatureMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureMetadata {
    return new FeatureMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureMetadata | PlainMessage<FeatureMetadata> | undefined, b: FeatureMetadata | PlainMessage<FeatureMetadata> | undefined): boolean {
    return proto3.util.equals(FeatureMetadata, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeaturesMetadataResponse
 */
export class GetFeaturesMetadataResponse extends Message<GetFeaturesMetadataResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.FeatureMetadata features = 1;
   */
  features: FeatureMetadata[] = [];

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string deployment_id = 3;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetFeaturesMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeaturesMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "features", kind: "message", T: FeatureMetadata, repeated: true },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturesMetadataResponse {
    return new GetFeaturesMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturesMetadataResponse {
    return new GetFeaturesMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturesMetadataResponse {
    return new GetFeaturesMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeaturesMetadataResponse | PlainMessage<GetFeaturesMetadataResponse> | undefined, b: GetFeaturesMetadataResponse | PlainMessage<GetFeaturesMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetFeaturesMetadataResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeaturesMetadataRequest
 */
export class GetFeaturesMetadataRequest extends Message<GetFeaturesMetadataRequest> {
  constructor(data?: PartialMessage<GetFeaturesMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeaturesMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeaturesMetadataRequest {
    return new GetFeaturesMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeaturesMetadataRequest {
    return new GetFeaturesMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeaturesMetadataRequest {
    return new GetFeaturesMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeaturesMetadataRequest | PlainMessage<GetFeaturesMetadataRequest> | undefined, b: GetFeaturesMetadataRequest | PlainMessage<GetFeaturesMetadataRequest> | undefined): boolean {
    return proto3.util.equals(GetFeaturesMetadataRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateGraphRequest
 */
export class UpdateGraphRequest extends Message<UpdateGraphRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * Use Export instead, which includes a graph + additional metadata
   *
   * @generated from field: chalk.graph.v1.Graph graph = 2 [deprecated = true];
   * @deprecated
   */
  graph?: Graph;

  /**
   * @generated from field: string chalkpy_version = 3;
   */
  chalkpyVersion = "";

  /**
   * @generated from field: optional string tag = 4;
   */
  tag?: string;

  /**
   * @generated from field: chalk.artifacts.v1.Export export = 5;
   */
  export?: Export;

  constructor(data?: PartialMessage<UpdateGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "graph", kind: "message", T: Graph },
    { no: 3, name: "chalkpy_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "export", kind: "message", T: Export },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGraphRequest {
    return new UpdateGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGraphRequest {
    return new UpdateGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGraphRequest {
    return new UpdateGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGraphRequest | PlainMessage<UpdateGraphRequest> | undefined, b: UpdateGraphRequest | PlainMessage<UpdateGraphRequest> | undefined): boolean {
    return proto3.util.equals(UpdateGraphRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateGraphResponse
 */
export class UpdateGraphResponse extends Message<UpdateGraphResponse> {
  constructor(data?: PartialMessage<UpdateGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGraphResponse {
    return new UpdateGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGraphResponse {
    return new UpdateGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGraphResponse {
    return new UpdateGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGraphResponse | PlainMessage<UpdateGraphResponse> | undefined, b: UpdateGraphResponse | PlainMessage<UpdateGraphResponse> | undefined): boolean {
    return proto3.util.equals(UpdateGraphResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetGraphRequest
 */
export class GetGraphRequest extends Message<GetGraphRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined, b: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined): boolean {
    return proto3.util.equals(GetGraphRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetGraphResponse
 */
export class GetGraphResponse extends Message<GetGraphResponse> {
  /**
   * Use Export instead, which includes a graph + additional metadata
   *
   * @generated from field: chalk.graph.v1.Graph graph = 1 [deprecated = true];
   * @deprecated
   */
  graph?: Graph;

  /**
   * @generated from field: string chalkpy_version = 2;
   */
  chalkpyVersion = "";

  /**
   * @generated from field: optional string tag = 3;
   */
  tag?: string;

  /**
   * @generated from field: chalk.artifacts.v1.Export export = 4;
   */
  export?: Export;

  constructor(data?: PartialMessage<GetGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph", kind: "message", T: Graph },
    { no: 2, name: "chalkpy_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "export", kind: "message", T: Export },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined, b: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined): boolean {
    return proto3.util.equals(GetGraphResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PythonVersion
 */
export class PythonVersion extends Message<PythonVersion> {
  /**
   * @generated from field: int64 major = 1;
   */
  major = protoInt64.zero;

  /**
   * @generated from field: int64 minor = 2;
   */
  minor = protoInt64.zero;

  /**
   * @generated from field: int64 patch = 3;
   */
  patch = protoInt64.zero;

  constructor(data?: PartialMessage<PythonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PythonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "major", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "minor", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "patch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PythonVersion {
    return new PythonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PythonVersion {
    return new PythonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PythonVersion {
    return new PythonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: PythonVersion | PlainMessage<PythonVersion> | undefined, b: PythonVersion | PlainMessage<PythonVersion> | undefined): boolean {
    return proto3.util.equals(PythonVersion, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetCodegenFeaturesFromGraphRequest
 */
export class GetCodegenFeaturesFromGraphRequest extends Message<GetCodegenFeaturesFromGraphRequest> {
  /**
   * @generated from field: optional string deployment_id = 1;
   */
  deploymentId?: string;

  /**
   * @generated from field: optional string branch = 2;
   */
  branch?: string;

  /**
   * @generated from field: optional chalk.server.v1.PythonVersion python_version = 3;
   */
  pythonVersion?: PythonVersion;

  constructor(data?: PartialMessage<GetCodegenFeaturesFromGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetCodegenFeaturesFromGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "python_version", kind: "message", T: PythonVersion, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCodegenFeaturesFromGraphRequest {
    return new GetCodegenFeaturesFromGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCodegenFeaturesFromGraphRequest {
    return new GetCodegenFeaturesFromGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCodegenFeaturesFromGraphRequest {
    return new GetCodegenFeaturesFromGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCodegenFeaturesFromGraphRequest | PlainMessage<GetCodegenFeaturesFromGraphRequest> | undefined, b: GetCodegenFeaturesFromGraphRequest | PlainMessage<GetCodegenFeaturesFromGraphRequest> | undefined): boolean {
    return proto3.util.equals(GetCodegenFeaturesFromGraphRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetCodegenFeaturesFromGraphResponse
 */
export class GetCodegenFeaturesFromGraphResponse extends Message<GetCodegenFeaturesFromGraphResponse> {
  /**
   * @generated from field: string codegen = 1;
   */
  codegen = "";

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 2;
   */
  errors: ChalkError[] = [];

  constructor(data?: PartialMessage<GetCodegenFeaturesFromGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetCodegenFeaturesFromGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codegen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "errors", kind: "message", T: ChalkError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCodegenFeaturesFromGraphResponse {
    return new GetCodegenFeaturesFromGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCodegenFeaturesFromGraphResponse {
    return new GetCodegenFeaturesFromGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCodegenFeaturesFromGraphResponse {
    return new GetCodegenFeaturesFromGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCodegenFeaturesFromGraphResponse | PlainMessage<GetCodegenFeaturesFromGraphResponse> | undefined, b: GetCodegenFeaturesFromGraphResponse | PlainMessage<GetCodegenFeaturesFromGraphResponse> | undefined): boolean {
    return proto3.util.equals(GetCodegenFeaturesFromGraphResponse, a, b);
  }
}

