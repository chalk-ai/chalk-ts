// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/timeserieschart.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.PointV2
 * @deprecated
 */
export class PointV2 extends Message<PointV2> {
  /**
   * @generated from field: optional double value = 1;
   */
  value?: number;

  constructor(data?: PartialMessage<PointV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PointV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointV2 {
    return new PointV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointV2 {
    return new PointV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointV2 {
    return new PointV2().fromJsonString(jsonString, options);
  }

  static equals(a: PointV2 | PlainMessage<PointV2> | undefined, b: PointV2 | PlainMessage<PointV2> | undefined): boolean {
    return proto3.util.equals(PointV2, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TimeSeriesV2
 * @deprecated
 */
export class TimeSeriesV2 extends Message<TimeSeriesV2> {
  /**
   * @generated from field: repeated chalk.server.v1.PointV2 points = 1;
   */
  points: PointV2[] = [];

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string units = 3;
   */
  units = "";

  constructor(data?: PartialMessage<TimeSeriesV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TimeSeriesV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointV2, repeated: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "units", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesV2 {
    return new TimeSeriesV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesV2 {
    return new TimeSeriesV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesV2 {
    return new TimeSeriesV2().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesV2 | PlainMessage<TimeSeriesV2> | undefined, b: TimeSeriesV2 | PlainMessage<TimeSeriesV2> | undefined): boolean {
    return proto3.util.equals(TimeSeriesV2, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.TimeSeriesChartV2
 * @deprecated
 */
export class TimeSeriesChartV2 extends Message<TimeSeriesChartV2> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated chalk.server.v1.TimeSeriesV2 series = 2;
   */
  series: TimeSeriesV2[] = [];

  /**
   * @generated from field: repeated google.protobuf.Timestamp x_series = 3;
   */
  xSeries: Timestamp[] = [];

  /**
   * @generated from field: google.protobuf.Duration window_period = 4;
   */
  windowPeriod?: Duration;

  constructor(data?: PartialMessage<TimeSeriesChartV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.TimeSeriesChartV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: TimeSeriesV2, repeated: true },
    { no: 3, name: "x_series", kind: "message", T: Timestamp, repeated: true },
    { no: 4, name: "window_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesChartV2 {
    return new TimeSeriesChartV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesChartV2 {
    return new TimeSeriesChartV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesChartV2 {
    return new TimeSeriesChartV2().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesChartV2 | PlainMessage<TimeSeriesChartV2> | undefined, b: TimeSeriesChartV2 | PlainMessage<TimeSeriesChartV2> | undefined): boolean {
    return proto3.util.equals(TimeSeriesChartV2, a, b);
  }
}

