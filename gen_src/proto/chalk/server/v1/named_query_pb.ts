// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/named_query.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { NamedQuery } from "../../graph/v1/graph_pb";

/**
 * @generated from message chalk.server.v1.GetAllNamedQueriesRequest
 */
export class GetAllNamedQueriesRequest extends Message<GetAllNamedQueriesRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetAllNamedQueriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAllNamedQueriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllNamedQueriesRequest {
    return new GetAllNamedQueriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllNamedQueriesRequest {
    return new GetAllNamedQueriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllNamedQueriesRequest {
    return new GetAllNamedQueriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllNamedQueriesRequest | PlainMessage<GetAllNamedQueriesRequest> | undefined, b: GetAllNamedQueriesRequest | PlainMessage<GetAllNamedQueriesRequest> | undefined): boolean {
    return proto3.util.equals(GetAllNamedQueriesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNamedQueryByNameRequest
 */
export class GetNamedQueryByNameRequest extends Message<GetNamedQueryByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetNamedQueryByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNamedQueryByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamedQueryByNameRequest {
    return new GetNamedQueryByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamedQueryByNameRequest {
    return new GetNamedQueryByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamedQueryByNameRequest {
    return new GetNamedQueryByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamedQueryByNameRequest | PlainMessage<GetNamedQueryByNameRequest> | undefined, b: GetNamedQueryByNameRequest | PlainMessage<GetNamedQueryByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetNamedQueryByNameRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNamedQueryByNameResponse
 */
export class GetNamedQueryByNameResponse extends Message<GetNamedQueryByNameResponse> {
  /**
   * @generated from field: repeated chalk.graph.v1.NamedQuery named_queries = 1;
   */
  namedQueries: NamedQuery[] = [];

  constructor(data?: PartialMessage<GetNamedQueryByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNamedQueryByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_queries", kind: "message", T: NamedQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamedQueryByNameResponse {
    return new GetNamedQueryByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamedQueryByNameResponse {
    return new GetNamedQueryByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamedQueryByNameResponse {
    return new GetNamedQueryByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamedQueryByNameResponse | PlainMessage<GetNamedQueryByNameResponse> | undefined, b: GetNamedQueryByNameResponse | PlainMessage<GetNamedQueryByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetNamedQueryByNameResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAllNamedQueriesResponse
 */
export class GetAllNamedQueriesResponse extends Message<GetAllNamedQueriesResponse> {
  /**
   * @generated from field: repeated chalk.graph.v1.NamedQuery named_queries = 1;
   */
  namedQueries: NamedQuery[] = [];

  constructor(data?: PartialMessage<GetAllNamedQueriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAllNamedQueriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_queries", kind: "message", T: NamedQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllNamedQueriesResponse {
    return new GetAllNamedQueriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllNamedQueriesResponse {
    return new GetAllNamedQueriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllNamedQueriesResponse {
    return new GetAllNamedQueriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllNamedQueriesResponse | PlainMessage<GetAllNamedQueriesResponse> | undefined, b: GetAllNamedQueriesResponse | PlainMessage<GetAllNamedQueriesResponse> | undefined): boolean {
    return proto3.util.equals(GetAllNamedQueriesResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAllNamedQueriesActiveDeploymentRequest
 */
export class GetAllNamedQueriesActiveDeploymentRequest extends Message<GetAllNamedQueriesActiveDeploymentRequest> {
  constructor(data?: PartialMessage<GetAllNamedQueriesActiveDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAllNamedQueriesActiveDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllNamedQueriesActiveDeploymentRequest {
    return new GetAllNamedQueriesActiveDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllNamedQueriesActiveDeploymentRequest {
    return new GetAllNamedQueriesActiveDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllNamedQueriesActiveDeploymentRequest {
    return new GetAllNamedQueriesActiveDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllNamedQueriesActiveDeploymentRequest | PlainMessage<GetAllNamedQueriesActiveDeploymentRequest> | undefined, b: GetAllNamedQueriesActiveDeploymentRequest | PlainMessage<GetAllNamedQueriesActiveDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetAllNamedQueriesActiveDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAllNamedQueriesActiveDeploymentResponse
 */
export class GetAllNamedQueriesActiveDeploymentResponse extends Message<GetAllNamedQueriesActiveDeploymentResponse> {
  /**
   * @generated from field: repeated chalk.graph.v1.NamedQuery named_queries = 1;
   */
  namedQueries: NamedQuery[] = [];

  constructor(data?: PartialMessage<GetAllNamedQueriesActiveDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAllNamedQueriesActiveDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "named_queries", kind: "message", T: NamedQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllNamedQueriesActiveDeploymentResponse {
    return new GetAllNamedQueriesActiveDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllNamedQueriesActiveDeploymentResponse {
    return new GetAllNamedQueriesActiveDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllNamedQueriesActiveDeploymentResponse {
    return new GetAllNamedQueriesActiveDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllNamedQueriesActiveDeploymentResponse | PlainMessage<GetAllNamedQueriesActiveDeploymentResponse> | undefined, b: GetAllNamedQueriesActiveDeploymentResponse | PlainMessage<GetAllNamedQueriesActiveDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetAllNamedQueriesActiveDeploymentResponse, a, b);
  }
}

