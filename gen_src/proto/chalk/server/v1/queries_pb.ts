// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/queries.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { DenseTimeSeriesChart } from "../../chart/v1/densetimeserieschart_pb";

/**
 * @generated from message chalk.server.v1.GetQueryPerformanceSummaryRequest
 */
export class GetQueryPerformanceSummaryRequest extends Message<GetQueryPerformanceSummaryRequest> {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  constructor(data?: PartialMessage<GetQueryPerformanceSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetQueryPerformanceSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQueryPerformanceSummaryRequest {
    return new GetQueryPerformanceSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQueryPerformanceSummaryRequest {
    return new GetQueryPerformanceSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQueryPerformanceSummaryRequest {
    return new GetQueryPerformanceSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetQueryPerformanceSummaryRequest | PlainMessage<GetQueryPerformanceSummaryRequest> | undefined, b: GetQueryPerformanceSummaryRequest | PlainMessage<GetQueryPerformanceSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetQueryPerformanceSummaryRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetQueryPerformanceSummaryResponse
 */
export class GetQueryPerformanceSummaryResponse extends Message<GetQueryPerformanceSummaryResponse> {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * @generated from field: optional string performance_summary = 2;
   */
  performanceSummary?: string;

  constructor(data?: PartialMessage<GetQueryPerformanceSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetQueryPerformanceSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "performance_summary", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQueryPerformanceSummaryResponse {
    return new GetQueryPerformanceSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQueryPerformanceSummaryResponse {
    return new GetQueryPerformanceSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQueryPerformanceSummaryResponse {
    return new GetQueryPerformanceSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetQueryPerformanceSummaryResponse | PlainMessage<GetQueryPerformanceSummaryResponse> | undefined, b: GetQueryPerformanceSummaryResponse | PlainMessage<GetQueryPerformanceSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetQueryPerformanceSummaryResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListQueryErrorsPageToken
 */
export class ListQueryErrorsPageToken extends Message<ListQueryErrorsPageToken> {
  /**
   * @generated from field: int64 numeric_id_hwm = 1;
   */
  numericIdHwm = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp error_timestamp_hwm = 2;
   */
  errorTimestampHwm?: Timestamp;

  constructor(data?: PartialMessage<ListQueryErrorsPageToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListQueryErrorsPageToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_id_hwm", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "error_timestamp_hwm", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListQueryErrorsPageToken {
    return new ListQueryErrorsPageToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListQueryErrorsPageToken {
    return new ListQueryErrorsPageToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListQueryErrorsPageToken {
    return new ListQueryErrorsPageToken().fromJsonString(jsonString, options);
  }

  static equals(a: ListQueryErrorsPageToken | PlainMessage<ListQueryErrorsPageToken> | undefined, b: ListQueryErrorsPageToken | PlainMessage<ListQueryErrorsPageToken> | undefined): boolean {
    return proto3.util.equals(ListQueryErrorsPageToken, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.QueryErrorFilters
 */
export class QueryErrorFilters extends Message<QueryErrorFilters> {
  /**
   * @generated from field: optional string operation_id = 1;
   */
  operationId?: string;

  /**
   * @generated from field: optional string feature_fqn = 2;
   */
  featureFqn?: string;

  /**
   * @generated from field: optional string resolver_fqn = 3;
   */
  resolverFqn?: string;

  /**
   * @generated from field: optional string query_name = 4;
   */
  queryName?: string;

  constructor(data?: PartialMessage<QueryErrorFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.QueryErrorFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "feature_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "resolver_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "query_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryErrorFilters {
    return new QueryErrorFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryErrorFilters {
    return new QueryErrorFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryErrorFilters {
    return new QueryErrorFilters().fromJsonString(jsonString, options);
  }

  static equals(a: QueryErrorFilters | PlainMessage<QueryErrorFilters> | undefined, b: QueryErrorFilters | PlainMessage<QueryErrorFilters> | undefined): boolean {
    return proto3.util.equals(QueryErrorFilters, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.QueryErrorMeta
 */
export class QueryErrorMeta extends Message<QueryErrorMeta> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string category = 3;
   */
  category = "";

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: optional string display_primary_key = 5;
   */
  displayPrimaryKey?: string;

  /**
   * @generated from field: optional string display_primary_key_fqn = 6;
   */
  displayPrimaryKeyFqn?: string;

  /**
   * @generated from field: optional string feature = 7;
   */
  feature?: string;

  /**
   * @generated from field: optional string resolver = 8;
   */
  resolver?: string;

  /**
   * @generated from field: optional string query_name = 9;
   */
  queryName?: string;

  /**
   * @generated from field: optional string exception_kind = 10;
   */
  exceptionKind?: string;

  /**
   * @generated from field: optional string exception_message = 11;
   */
  exceptionMessage?: string;

  /**
   * @generated from field: optional string exception_stacktrace = 12;
   */
  exceptionStacktrace?: string;

  /**
   * @generated from field: optional string exception_internal_stacktrace = 13;
   */
  exceptionInternalStacktrace?: string;

  /**
   * @generated from field: optional string operation_id = 14;
   */
  operationId?: string;

  /**
   * @generated from field: optional string deployment_id = 15;
   */
  deploymentId?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 16;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<QueryErrorMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.QueryErrorMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "display_primary_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "display_primary_key_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "feature", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "query_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "exception_kind", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "exception_message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "exception_stacktrace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "exception_internal_stacktrace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryErrorMeta {
    return new QueryErrorMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryErrorMeta {
    return new QueryErrorMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryErrorMeta {
    return new QueryErrorMeta().fromJsonString(jsonString, options);
  }

  static equals(a: QueryErrorMeta | PlainMessage<QueryErrorMeta> | undefined, b: QueryErrorMeta | PlainMessage<QueryErrorMeta> | undefined): boolean {
    return proto3.util.equals(QueryErrorMeta, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListQueryErrorsRequest
 */
export class ListQueryErrorsRequest extends Message<ListQueryErrorsRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_date = 1;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 2;
   */
  endDate?: Timestamp;

  /**
   * @generated from field: chalk.server.v1.QueryErrorFilters filters = 3;
   */
  filters?: QueryErrorFilters;

  /**
   * @generated from field: optional int32 page_size = 4;
   */
  pageSize?: number;

  /**
   * This page_token is a b64-encoded ListQueryErrorsPageToken message
   *
   * @generated from field: optional string page_token = 5;
   */
  pageToken?: string;

  constructor(data?: PartialMessage<ListQueryErrorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListQueryErrorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_date", kind: "message", T: Timestamp },
    { no: 2, name: "end_date", kind: "message", T: Timestamp },
    { no: 3, name: "filters", kind: "message", T: QueryErrorFilters },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListQueryErrorsRequest {
    return new ListQueryErrorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListQueryErrorsRequest {
    return new ListQueryErrorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListQueryErrorsRequest {
    return new ListQueryErrorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListQueryErrorsRequest | PlainMessage<ListQueryErrorsRequest> | undefined, b: ListQueryErrorsRequest | PlainMessage<ListQueryErrorsRequest> | undefined): boolean {
    return proto3.util.equals(ListQueryErrorsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListQueryErrorsResponse
 */
export class ListQueryErrorsResponse extends Message<ListQueryErrorsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.QueryErrorMeta query_errors = 1;
   */
  queryErrors: QueryErrorMeta[] = [];

  /**
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;

  constructor(data?: PartialMessage<ListQueryErrorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListQueryErrorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_errors", kind: "message", T: QueryErrorMeta, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListQueryErrorsResponse {
    return new ListQueryErrorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListQueryErrorsResponse {
    return new ListQueryErrorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListQueryErrorsResponse {
    return new ListQueryErrorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListQueryErrorsResponse | PlainMessage<ListQueryErrorsResponse> | undefined, b: ListQueryErrorsResponse | PlainMessage<ListQueryErrorsResponse> | undefined): boolean {
    return proto3.util.equals(ListQueryErrorsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetQueryErrorsChartRequest
 */
export class GetQueryErrorsChartRequest extends Message<GetQueryErrorsChartRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_timestamp_inclusive = 1;
   */
  startTimestampInclusive?: Timestamp;

  /**
   * If not specified, assumes the current timestamp
   * To avoid awkward small window buckets at the end, specify this.
   *
   * @generated from field: optional google.protobuf.Timestamp end_timestamp_exclusive = 2;
   */
  endTimestampExclusive?: Timestamp;

  /**
   * The size of each time bucket + how far apart time points are in the chart
   * Ideally a divisor of the total window between end and start ms
   * If not, the bucket start-aligned with end_timestamp_exclusive will be of size total_window % window_period
   *
   * @generated from field: google.protobuf.Duration window_period = 3;
   */
  windowPeriod?: Duration;

  /**
   * @generated from field: chalk.server.v1.QueryErrorFilters filters = 4;
   */
  filters?: QueryErrorFilters;

  constructor(data?: PartialMessage<GetQueryErrorsChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetQueryErrorsChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_timestamp_inclusive", kind: "message", T: Timestamp },
    { no: 2, name: "end_timestamp_exclusive", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "window_period", kind: "message", T: Duration },
    { no: 4, name: "filters", kind: "message", T: QueryErrorFilters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQueryErrorsChartRequest {
    return new GetQueryErrorsChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQueryErrorsChartRequest {
    return new GetQueryErrorsChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQueryErrorsChartRequest {
    return new GetQueryErrorsChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetQueryErrorsChartRequest | PlainMessage<GetQueryErrorsChartRequest> | undefined, b: GetQueryErrorsChartRequest | PlainMessage<GetQueryErrorsChartRequest> | undefined): boolean {
    return proto3.util.equals(GetQueryErrorsChartRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetQueryErrorsChartResponse
 */
export class GetQueryErrorsChartResponse extends Message<GetQueryErrorsChartResponse> {
  /**
   * @generated from field: chalk.chart.v1.DenseTimeSeriesChart chart = 1;
   */
  chart?: DenseTimeSeriesChart;

  constructor(data?: PartialMessage<GetQueryErrorsChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetQueryErrorsChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "message", T: DenseTimeSeriesChart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetQueryErrorsChartResponse {
    return new GetQueryErrorsChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetQueryErrorsChartResponse {
    return new GetQueryErrorsChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetQueryErrorsChartResponse {
    return new GetQueryErrorsChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetQueryErrorsChartResponse | PlainMessage<GetQueryErrorsChartResponse> | undefined, b: GetQueryErrorsChartResponse | PlainMessage<GetQueryErrorsChartResponse> | undefined): boolean {
    return proto3.util.equals(GetQueryErrorsChartResponse, a, b);
  }
}

