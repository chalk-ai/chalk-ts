// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/builder.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ActivateDeploymentRequest, ActivateDeploymentResponse, AddKarpenterNodepoolRequest, AddKarpenterNodepoolResponse, CreateClusterBackgroundPersistenceRequest, CreateClusterBackgroundPersistenceResponse, CreateClusterGatewayRequest, CreateClusterGatewayResponse, CreateClusterTimescaleDBRequest, CreateClusterTimescaleDBResponse, CreateKafkaTopicsRequest, CreateKafkaTopicsResponse, DeleteKarpenterNodepoolRequest, DeleteKarpenterNodepoolResponse, DeployKubeComponentsRequest, DeployKubeComponentsResponse, GetClusterBackgroundPersistenceRequest, GetClusterBackgroundPersistenceResponse, GetClusterGatewayRequest, GetClusterGatewayResponse, GetClusterTimescaleDBRequest, GetClusterTimescaleDBResponse, GetDeploymentLogsRequest, GetDeploymentLogsResponse, GetDeploymentStepsRequest, GetDeploymentStepsResponse, GetKafkaTopicsRequest, GetKafkaTopicsResponse, GetKarpenterInstallationMetadataRequest, GetKarpenterInstallationMetadataResponse, GetKarpenterNodepoolsRequest, GetKarpenterNodepoolsResponse, GetSearchConfigRequest, GetSearchConfigResponse, GetTagWeightsRequest, GetTagWeightsResponse, IndexDeploymentRequest, IndexDeploymentResponse, LintSourceRequest, LintSourceResponse, MigrateClusterTimescaleDBRequest, MigrateClusterTimescaleDBResponse, RebuildDeploymentRequest, RebuildDeploymentResponse, RedeployDeploymentRequest, RedeployDeploymentResponse, SetTagWeightsRequest, SetTagWeightsResponse, StartBranchRequest, StartBranchResponse, UpdateEnvironmentVariablesRequest, UpdateEnvironmentVariablesResponse, UpdateKarpenterNodepoolRequest, UpdateKarpenterNodepoolResponse, UploadSourceRequest, UploadSourceResponse } from "./builder_pb";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service chalk.server.v1.BuilderService
 */
export const BuilderService = {
  typeName: "chalk.server.v1.BuilderService",
  methods: {
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetSearchConfig
     */
    getSearchConfig: {
      name: "GetSearchConfig",
      I: GetSearchConfigRequest,
      O: GetSearchConfigResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Takes an existing (past) deployment and promotes the k8s resources / other things associated with it.
     * Useful for debugging in local development where the auto activation doesn't work b/c no pubsub.
     *
     * @generated from rpc chalk.server.v1.BuilderService.ActivateDeployment
     */
    activateDeployment: {
      name: "ActivateDeployment",
      I: ActivateDeploymentRequest,
      O: ActivateDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.IndexDeployment
     */
    indexDeployment: {
      name: "IndexDeployment",
      I: IndexDeploymentRequest,
      O: IndexDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Intermediate step in the deployment activation process. Allows for partial migration to the new
     * go-api-server builder service.
     *
     * @generated from rpc chalk.server.v1.BuilderService.DeployKubeComponents
     */
    deployKubeComponents: {
      name: "DeployKubeComponents",
      I: DeployKubeComponentsRequest,
      O: DeployKubeComponentsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Takes an existing (past) deployment and re-creates the image associated with it,
     * publishing the image as 'new_image_tag'.
     *
     * @generated from rpc chalk.server.v1.BuilderService.RebuildDeployment
     */
    rebuildDeployment: {
      name: "RebuildDeployment",
      I: RebuildDeploymentRequest,
      O: RebuildDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Triggers a new build with the source code from this deployment and deploys the result
     *
     * @generated from rpc chalk.server.v1.BuilderService.RedeployDeployment
     */
    redeployDeployment: {
      name: "RedeployDeployment",
      I: RedeployDeploymentRequest,
      O: RedeployDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Triggers a new build with the provided source code archive and deploys the result
     *
     * @generated from rpc chalk.server.v1.BuilderService.UploadSource
     */
    uploadSource: {
      name: "UploadSource",
      I: UploadSourceRequest,
      O: UploadSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.LintSource
     */
    lintSource: {
      name: "LintSource",
      I: LintSourceRequest,
      O: LintSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetDeploymentSteps
     */
    getDeploymentSteps: {
      name: "GetDeploymentSteps",
      I: GetDeploymentStepsRequest,
      O: GetDeploymentStepsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetDeploymentLogs
     */
    getDeploymentLogs: {
      name: "GetDeploymentLogs",
      I: GetDeploymentLogsRequest,
      O: GetDeploymentLogsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetClusterTimescaleDB
     */
    getClusterTimescaleDB: {
      name: "GetClusterTimescaleDB",
      I: GetClusterTimescaleDBRequest,
      O: GetClusterTimescaleDBResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetClusterGateway
     */
    getClusterGateway: {
      name: "GetClusterGateway",
      I: GetClusterGatewayRequest,
      O: GetClusterGatewayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetClusterBackgroundPersistence
     */
    getClusterBackgroundPersistence: {
      name: "GetClusterBackgroundPersistence",
      I: GetClusterBackgroundPersistenceRequest,
      O: GetClusterBackgroundPersistenceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.CreateClusterTimescaleDB
     */
    createClusterTimescaleDB: {
      name: "CreateClusterTimescaleDB",
      I: CreateClusterTimescaleDBRequest,
      O: CreateClusterTimescaleDBResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.MigrateClusterTimescaleDB
     */
    migrateClusterTimescaleDB: {
      name: "MigrateClusterTimescaleDB",
      I: MigrateClusterTimescaleDBRequest,
      O: MigrateClusterTimescaleDBResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.CreateClusterGateway
     */
    createClusterGateway: {
      name: "CreateClusterGateway",
      I: CreateClusterGatewayRequest,
      O: CreateClusterGatewayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.CreateClusterBackgroundPersistence
     */
    createClusterBackgroundPersistence: {
      name: "CreateClusterBackgroundPersistence",
      I: CreateClusterBackgroundPersistenceRequest,
      O: CreateClusterBackgroundPersistenceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.UpdateEnvironmentVariables
     */
    updateEnvironmentVariables: {
      name: "UpdateEnvironmentVariables",
      I: UpdateEnvironmentVariablesRequest,
      O: UpdateEnvironmentVariablesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.StartBranch
     */
    startBranch: {
      name: "StartBranch",
      I: StartBranchRequest,
      O: StartBranchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetKarpenterNodepools
     */
    getKarpenterNodepools: {
      name: "GetKarpenterNodepools",
      I: GetKarpenterNodepoolsRequest,
      O: GetKarpenterNodepoolsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.AddKarpenterNodepool
     */
    addKarpenterNodepool: {
      name: "AddKarpenterNodepool",
      I: AddKarpenterNodepoolRequest,
      O: AddKarpenterNodepoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.UpdateKarpenterNodepool
     */
    updateKarpenterNodepool: {
      name: "UpdateKarpenterNodepool",
      I: UpdateKarpenterNodepoolRequest,
      O: UpdateKarpenterNodepoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.DeleteKarpenterNodepool
     */
    deleteKarpenterNodepool: {
      name: "DeleteKarpenterNodepool",
      I: DeleteKarpenterNodepoolRequest,
      O: DeleteKarpenterNodepoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetKarpenterInstallationMetadata
     */
    getKarpenterInstallationMetadata: {
      name: "GetKarpenterInstallationMetadata",
      I: GetKarpenterInstallationMetadataRequest,
      O: GetKarpenterInstallationMetadataResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.GetTagWeights
     */
    getTagWeights: {
      name: "GetTagWeights",
      I: GetTagWeightsRequest,
      O: GetTagWeightsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.BuilderService.SetTagWeights
     */
    setTagWeights: {
      name: "SetTagWeights",
      I: SetTagWeightsRequest,
      O: SetTagWeightsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service chalk.server.v1.ClusterBuilderService
 */
export const ClusterBuilderService = {
  typeName: "chalk.server.v1.ClusterBuilderService",
  methods: {
    /**
     * @generated from rpc chalk.server.v1.ClusterBuilderService.CreateKafkaTopics
     */
    createKafkaTopics: {
      name: "CreateKafkaTopics",
      I: CreateKafkaTopicsRequest,
      O: CreateKafkaTopicsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc chalk.server.v1.ClusterBuilderService.GetKafkaTopics
     */
    getKafkaTopics: {
      name: "GetKafkaTopics",
      I: GetKafkaTopicsRequest,
      O: GetKafkaTopicsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

