// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/cli.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.CommandLineInterfaceVersion
 */
export class CommandLineInterfaceVersion extends Message<CommandLineInterfaceVersion> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string download_url = 2;
   */
  downloadUrl = "";

  /**
   * @generated from field: string os = 3;
   */
  os = "";

  /**
   * @generated from field: string arch = 4;
   */
  arch = "";

  /**
   * @generated from field: int64 generation = 5;
   */
  generation = protoInt64.zero;

  constructor(data?: PartialMessage<CommandLineInterfaceVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CommandLineInterfaceVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandLineInterfaceVersion {
    return new CommandLineInterfaceVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandLineInterfaceVersion {
    return new CommandLineInterfaceVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandLineInterfaceVersion {
    return new CommandLineInterfaceVersion().fromJsonString(jsonString, options);
  }

  static equals(a: CommandLineInterfaceVersion | PlainMessage<CommandLineInterfaceVersion> | undefined, b: CommandLineInterfaceVersion | PlainMessage<CommandLineInterfaceVersion> | undefined): boolean {
    return proto3.util.equals(CommandLineInterfaceVersion, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetVersionsRequest
 */
export class GetVersionsRequest extends Message<GetVersionsRequest> {
  /**
   * @generated from field: optional string os = 1;
   */
  os?: string;

  /**
   * @generated from field: optional string arch = 2;
   */
  arch?: string;

  constructor(data?: PartialMessage<GetVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "arch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionsRequest {
    return new GetVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionsRequest {
    return new GetVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionsRequest {
    return new GetVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionsRequest | PlainMessage<GetVersionsRequest> | undefined, b: GetVersionsRequest | PlainMessage<GetVersionsRequest> | undefined): boolean {
    return proto3.util.equals(GetVersionsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetVersionsResponse
 */
export class GetVersionsResponse extends Message<GetVersionsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.CommandLineInterfaceVersion versions = 1;
   */
  versions: CommandLineInterfaceVersion[] = [];

  /**
   * @generated from field: chalk.server.v1.CommandLineInterfaceVersion latest = 2;
   */
  latest?: CommandLineInterfaceVersion;

  /**
   * @generated from field: chalk.server.v1.CommandLineInterfaceVersion nightly = 3;
   */
  nightly?: CommandLineInterfaceVersion;

  /**
   * @generated from field: string minimum = 4;
   */
  minimum = "";

  constructor(data?: PartialMessage<GetVersionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetVersionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "versions", kind: "message", T: CommandLineInterfaceVersion, repeated: true },
    { no: 2, name: "latest", kind: "message", T: CommandLineInterfaceVersion },
    { no: 3, name: "nightly", kind: "message", T: CommandLineInterfaceVersion },
    { no: 4, name: "minimum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionsResponse {
    return new GetVersionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionsResponse {
    return new GetVersionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionsResponse {
    return new GetVersionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionsResponse | PlainMessage<GetVersionsResponse> | undefined, b: GetVersionsResponse | PlainMessage<GetVersionsResponse> | undefined): boolean {
    return proto3.util.equals(GetVersionsResponse, a, b);
  }
}

