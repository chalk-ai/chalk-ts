// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/scheduled_query_run.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { OfflineQueryMeta } from "./offline_queries_pb";

/**
 * @generated from message chalk.server.v1.ScheduledQueryRun
 */
export class ScheduledQueryRun extends Message<ScheduledQueryRun> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: optional string deployment_id = 3;
   */
  deploymentId?: string;

  /**
   * @generated from field: optional string run_id = 4;
   */
  runId?: string;

  /**
   * @generated from field: int64 cron_query_id = 5;
   */
  cronQueryId = protoInt64.zero;

  /**
   * @generated from field: int64 cron_query_schedule_id = 6;
   */
  cronQueryScheduleId = protoInt64.zero;

  /**
   * @generated from field: string cron_name = 7;
   */
  cronName = "";

  /**
   * @generated from field: optional string gcr_execution_id = 8;
   */
  gcrExecutionId?: string;

  /**
   * @generated from field: optional string gcr_job_name = 9;
   */
  gcrJobName?: string;

  /**
   * @generated from field: string offline_query_id = 10;
   */
  offlineQueryId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<ScheduledQueryRun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ScheduledQueryRun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "cron_query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "cron_query_schedule_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "cron_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "gcr_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "gcr_job_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "offline_query_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
    { no: 12, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduledQueryRun {
    return new ScheduledQueryRun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduledQueryRun {
    return new ScheduledQueryRun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduledQueryRun {
    return new ScheduledQueryRun().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduledQueryRun | PlainMessage<ScheduledQueryRun> | undefined, b: ScheduledQueryRun | PlainMessage<ScheduledQueryRun> | undefined): boolean {
    return proto3.util.equals(ScheduledQueryRun, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetScheduledQueryRunRequest
 */
export class GetScheduledQueryRunRequest extends Message<GetScheduledQueryRunRequest> {
  /**
   * @generated from oneof chalk.server.v1.GetScheduledQueryRunRequest.identifier
   */
  identifier: {
    /**
     * @generated from field: int64 run_id = 1;
     */
    value: bigint;
    case: "runId";
  } | {
    /**
     * @generated from field: string offline_query_id = 2;
     */
    value: string;
    case: "offlineQueryId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: google.protobuf.FieldMask get_mask = 3;
   */
  getMask?: FieldMask;

  constructor(data?: PartialMessage<GetScheduledQueryRunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetScheduledQueryRunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "run_id", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "identifier" },
    { no: 2, name: "offline_query_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 3, name: "get_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduledQueryRunRequest {
    return new GetScheduledQueryRunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduledQueryRunRequest {
    return new GetScheduledQueryRunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduledQueryRunRequest {
    return new GetScheduledQueryRunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduledQueryRunRequest | PlainMessage<GetScheduledQueryRunRequest> | undefined, b: GetScheduledQueryRunRequest | PlainMessage<GetScheduledQueryRunRequest> | undefined): boolean {
    return proto3.util.equals(GetScheduledQueryRunRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetScheduledQueryRunResponse
 */
export class GetScheduledQueryRunResponse extends Message<GetScheduledQueryRunResponse> {
  /**
   * @generated from field: chalk.server.v1.ScheduledQueryRun scheduled_query_run = 1;
   */
  scheduledQueryRun?: ScheduledQueryRun;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryMeta offline_query = 2;
   */
  offlineQuery?: OfflineQueryMeta;

  constructor(data?: PartialMessage<GetScheduledQueryRunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetScheduledQueryRunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scheduled_query_run", kind: "message", T: ScheduledQueryRun },
    { no: 2, name: "offline_query", kind: "message", T: OfflineQueryMeta, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduledQueryRunResponse {
    return new GetScheduledQueryRunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduledQueryRunResponse {
    return new GetScheduledQueryRunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduledQueryRunResponse {
    return new GetScheduledQueryRunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduledQueryRunResponse | PlainMessage<GetScheduledQueryRunResponse> | undefined, b: GetScheduledQueryRunResponse | PlainMessage<GetScheduledQueryRunResponse> | undefined): boolean {
    return proto3.util.equals(GetScheduledQueryRunResponse, a, b);
  }
}

