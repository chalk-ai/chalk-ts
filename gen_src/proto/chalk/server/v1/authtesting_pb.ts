// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/authtesting.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.GetUnauthedTestEndpointRequest
 */
export class GetUnauthedTestEndpointRequest extends Message<GetUnauthedTestEndpointRequest> {
  constructor(data?: PartialMessage<GetUnauthedTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUnauthedTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnauthedTestEndpointRequest {
    return new GetUnauthedTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnauthedTestEndpointRequest {
    return new GetUnauthedTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnauthedTestEndpointRequest {
    return new GetUnauthedTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnauthedTestEndpointRequest | PlainMessage<GetUnauthedTestEndpointRequest> | undefined, b: GetUnauthedTestEndpointRequest | PlainMessage<GetUnauthedTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetUnauthedTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAuthedTestEndpointRequest
 */
export class GetAuthedTestEndpointRequest extends Message<GetAuthedTestEndpointRequest> {
  constructor(data?: PartialMessage<GetAuthedTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAuthedTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthedTestEndpointRequest {
    return new GetAuthedTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthedTestEndpointRequest {
    return new GetAuthedTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthedTestEndpointRequest {
    return new GetAuthedTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthedTestEndpointRequest | PlainMessage<GetAuthedTestEndpointRequest> | undefined, b: GetAuthedTestEndpointRequest | PlainMessage<GetAuthedTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthedTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetViewerTestEndpointRequest
 */
export class GetViewerTestEndpointRequest extends Message<GetViewerTestEndpointRequest> {
  constructor(data?: PartialMessage<GetViewerTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetViewerTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetViewerTestEndpointRequest {
    return new GetViewerTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetViewerTestEndpointRequest {
    return new GetViewerTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetViewerTestEndpointRequest {
    return new GetViewerTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetViewerTestEndpointRequest | PlainMessage<GetViewerTestEndpointRequest> | undefined, b: GetViewerTestEndpointRequest | PlainMessage<GetViewerTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetViewerTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDataScientistTestEndpointRequest
 */
export class GetDataScientistTestEndpointRequest extends Message<GetDataScientistTestEndpointRequest> {
  constructor(data?: PartialMessage<GetDataScientistTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDataScientistTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataScientistTestEndpointRequest {
    return new GetDataScientistTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataScientistTestEndpointRequest {
    return new GetDataScientistTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataScientistTestEndpointRequest {
    return new GetDataScientistTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataScientistTestEndpointRequest | PlainMessage<GetDataScientistTestEndpointRequest> | undefined, b: GetDataScientistTestEndpointRequest | PlainMessage<GetDataScientistTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetDataScientistTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeveloperTestEndpointRequest
 */
export class GetDeveloperTestEndpointRequest extends Message<GetDeveloperTestEndpointRequest> {
  constructor(data?: PartialMessage<GetDeveloperTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeveloperTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeveloperTestEndpointRequest {
    return new GetDeveloperTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeveloperTestEndpointRequest {
    return new GetDeveloperTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeveloperTestEndpointRequest {
    return new GetDeveloperTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeveloperTestEndpointRequest | PlainMessage<GetDeveloperTestEndpointRequest> | undefined, b: GetDeveloperTestEndpointRequest | PlainMessage<GetDeveloperTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetDeveloperTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAdminTestEndpointRequest
 */
export class GetAdminTestEndpointRequest extends Message<GetAdminTestEndpointRequest> {
  constructor(data?: PartialMessage<GetAdminTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAdminTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminTestEndpointRequest {
    return new GetAdminTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminTestEndpointRequest {
    return new GetAdminTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminTestEndpointRequest {
    return new GetAdminTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminTestEndpointRequest | PlainMessage<GetAdminTestEndpointRequest> | undefined, b: GetAdminTestEndpointRequest | PlainMessage<GetAdminTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetAdminTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetOwnerTestEndpointRequest
 */
export class GetOwnerTestEndpointRequest extends Message<GetOwnerTestEndpointRequest> {
  constructor(data?: PartialMessage<GetOwnerTestEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetOwnerTestEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTestEndpointRequest {
    return new GetOwnerTestEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTestEndpointRequest {
    return new GetOwnerTestEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTestEndpointRequest {
    return new GetOwnerTestEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnerTestEndpointRequest | PlainMessage<GetOwnerTestEndpointRequest> | undefined, b: GetOwnerTestEndpointRequest | PlainMessage<GetOwnerTestEndpointRequest> | undefined): boolean {
    return proto3.util.equals(GetOwnerTestEndpointRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetUnauthedTestEndpointResponse
 */
export class GetUnauthedTestEndpointResponse extends Message<GetUnauthedTestEndpointResponse> {
  constructor(data?: PartialMessage<GetUnauthedTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUnauthedTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnauthedTestEndpointResponse {
    return new GetUnauthedTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnauthedTestEndpointResponse {
    return new GetUnauthedTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnauthedTestEndpointResponse {
    return new GetUnauthedTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnauthedTestEndpointResponse | PlainMessage<GetUnauthedTestEndpointResponse> | undefined, b: GetUnauthedTestEndpointResponse | PlainMessage<GetUnauthedTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetUnauthedTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAuthedTestEndpointResponse
 */
export class GetAuthedTestEndpointResponse extends Message<GetAuthedTestEndpointResponse> {
  constructor(data?: PartialMessage<GetAuthedTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAuthedTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthedTestEndpointResponse {
    return new GetAuthedTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthedTestEndpointResponse {
    return new GetAuthedTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthedTestEndpointResponse {
    return new GetAuthedTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthedTestEndpointResponse | PlainMessage<GetAuthedTestEndpointResponse> | undefined, b: GetAuthedTestEndpointResponse | PlainMessage<GetAuthedTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthedTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetViewerTestEndpointResponse
 */
export class GetViewerTestEndpointResponse extends Message<GetViewerTestEndpointResponse> {
  constructor(data?: PartialMessage<GetViewerTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetViewerTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetViewerTestEndpointResponse {
    return new GetViewerTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetViewerTestEndpointResponse {
    return new GetViewerTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetViewerTestEndpointResponse {
    return new GetViewerTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetViewerTestEndpointResponse | PlainMessage<GetViewerTestEndpointResponse> | undefined, b: GetViewerTestEndpointResponse | PlainMessage<GetViewerTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetViewerTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDataScientistTestEndpointResponse
 */
export class GetDataScientistTestEndpointResponse extends Message<GetDataScientistTestEndpointResponse> {
  constructor(data?: PartialMessage<GetDataScientistTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDataScientistTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataScientistTestEndpointResponse {
    return new GetDataScientistTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataScientistTestEndpointResponse {
    return new GetDataScientistTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataScientistTestEndpointResponse {
    return new GetDataScientistTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataScientistTestEndpointResponse | PlainMessage<GetDataScientistTestEndpointResponse> | undefined, b: GetDataScientistTestEndpointResponse | PlainMessage<GetDataScientistTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetDataScientistTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeveloperTestEndpointResponse
 */
export class GetDeveloperTestEndpointResponse extends Message<GetDeveloperTestEndpointResponse> {
  constructor(data?: PartialMessage<GetDeveloperTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeveloperTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeveloperTestEndpointResponse {
    return new GetDeveloperTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeveloperTestEndpointResponse {
    return new GetDeveloperTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeveloperTestEndpointResponse {
    return new GetDeveloperTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeveloperTestEndpointResponse | PlainMessage<GetDeveloperTestEndpointResponse> | undefined, b: GetDeveloperTestEndpointResponse | PlainMessage<GetDeveloperTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetDeveloperTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetAdminTestEndpointResponse
 */
export class GetAdminTestEndpointResponse extends Message<GetAdminTestEndpointResponse> {
  constructor(data?: PartialMessage<GetAdminTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetAdminTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminTestEndpointResponse {
    return new GetAdminTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminTestEndpointResponse {
    return new GetAdminTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminTestEndpointResponse {
    return new GetAdminTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminTestEndpointResponse | PlainMessage<GetAdminTestEndpointResponse> | undefined, b: GetAdminTestEndpointResponse | PlainMessage<GetAdminTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetAdminTestEndpointResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetOwnerTestEndpointResponse
 */
export class GetOwnerTestEndpointResponse extends Message<GetOwnerTestEndpointResponse> {
  constructor(data?: PartialMessage<GetOwnerTestEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetOwnerTestEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTestEndpointResponse {
    return new GetOwnerTestEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTestEndpointResponse {
    return new GetOwnerTestEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTestEndpointResponse {
    return new GetOwnerTestEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnerTestEndpointResponse | PlainMessage<GetOwnerTestEndpointResponse> | undefined, b: GetOwnerTestEndpointResponse | PlainMessage<GetOwnerTestEndpointResponse> | undefined): boolean {
    return proto3.util.equals(GetOwnerTestEndpointResponse, a, b);
  }
}

