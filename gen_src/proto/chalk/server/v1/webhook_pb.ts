// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/webhook.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.Webhook
 */
export class Webhook extends Message<Webhook> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string team_id = 3;
   */
  teamId = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * @generated from field: repeated string subscriptions = 6;
   */
  subscriptions: string[] = [];

  /**
   * @generated from field: optional string secret = 7;
   */
  secret?: string;

  /**
   * @generated from field: optional google.protobuf.Struct headers = 8;
   */
  headers?: Struct;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Webhook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Webhook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subscriptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "headers", kind: "message", T: Struct, opt: true },
    { no: 9, name: "created_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Webhook {
    return new Webhook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Webhook {
    return new Webhook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Webhook {
    return new Webhook().fromJsonString(jsonString, options);
  }

  static equals(a: Webhook | PlainMessage<Webhook> | undefined, b: Webhook | PlainMessage<Webhook> | undefined): boolean {
    return proto3.util.equals(Webhook, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateWebhookRequest
 */
export class CreateWebhookRequest extends Message<CreateWebhookRequest> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: repeated string subscriptions = 4;
   */
  subscriptions: string[] = [];

  /**
   * @generated from field: optional string secret = 5;
   */
  secret?: string;

  /**
   * @generated from field: optional google.protobuf.Struct headers = 6;
   */
  headers?: Struct;

  constructor(data?: PartialMessage<CreateWebhookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateWebhookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subscriptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "headers", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebhookRequest {
    return new CreateWebhookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebhookRequest {
    return new CreateWebhookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebhookRequest {
    return new CreateWebhookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebhookRequest | PlainMessage<CreateWebhookRequest> | undefined, b: CreateWebhookRequest | PlainMessage<CreateWebhookRequest> | undefined): boolean {
    return proto3.util.equals(CreateWebhookRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateWebhookResponse
 */
export class CreateWebhookResponse extends Message<CreateWebhookResponse> {
  /**
   * @generated from field: chalk.server.v1.Webhook webhook = 1;
   */
  webhook?: Webhook;

  constructor(data?: PartialMessage<CreateWebhookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateWebhookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhook", kind: "message", T: Webhook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebhookResponse {
    return new CreateWebhookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebhookResponse {
    return new CreateWebhookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebhookResponse {
    return new CreateWebhookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebhookResponse | PlainMessage<CreateWebhookResponse> | undefined, b: CreateWebhookResponse | PlainMessage<CreateWebhookResponse> | undefined): boolean {
    return proto3.util.equals(CreateWebhookResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateWebhookRequest
 */
export class UpdateWebhookRequest extends Message<UpdateWebhookRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string url = 3;
   */
  url?: string;

  /**
   * @generated from field: repeated string subscriptions = 4;
   */
  subscriptions: string[] = [];

  /**
   * @generated from field: optional string secret = 5;
   */
  secret?: string;

  /**
   * @generated from field: optional google.protobuf.Struct headers = 6;
   */
  headers?: Struct;

  constructor(data?: PartialMessage<UpdateWebhookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateWebhookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "subscriptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "headers", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWebhookRequest {
    return new UpdateWebhookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWebhookRequest {
    return new UpdateWebhookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWebhookRequest {
    return new UpdateWebhookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWebhookRequest | PlainMessage<UpdateWebhookRequest> | undefined, b: UpdateWebhookRequest | PlainMessage<UpdateWebhookRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWebhookRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateWebhookResponse
 */
export class UpdateWebhookResponse extends Message<UpdateWebhookResponse> {
  /**
   * @generated from field: chalk.server.v1.Webhook webhook = 1;
   */
  webhook?: Webhook;

  constructor(data?: PartialMessage<UpdateWebhookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateWebhookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhook", kind: "message", T: Webhook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWebhookResponse {
    return new UpdateWebhookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWebhookResponse {
    return new UpdateWebhookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWebhookResponse {
    return new UpdateWebhookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWebhookResponse | PlainMessage<UpdateWebhookResponse> | undefined, b: UpdateWebhookResponse | PlainMessage<UpdateWebhookResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWebhookResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteWebhookRequest
 */
export class DeleteWebhookRequest extends Message<DeleteWebhookRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteWebhookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteWebhookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebhookRequest {
    return new DeleteWebhookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebhookRequest {
    return new DeleteWebhookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebhookRequest {
    return new DeleteWebhookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebhookRequest | PlainMessage<DeleteWebhookRequest> | undefined, b: DeleteWebhookRequest | PlainMessage<DeleteWebhookRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWebhookRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteWebhookResponse
 */
export class DeleteWebhookResponse extends Message<DeleteWebhookResponse> {
  /**
   * @generated from field: chalk.server.v1.Webhook webhook = 1;
   */
  webhook?: Webhook;

  constructor(data?: PartialMessage<DeleteWebhookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteWebhookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhook", kind: "message", T: Webhook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebhookResponse {
    return new DeleteWebhookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebhookResponse {
    return new DeleteWebhookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebhookResponse {
    return new DeleteWebhookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebhookResponse | PlainMessage<DeleteWebhookResponse> | undefined, b: DeleteWebhookResponse | PlainMessage<DeleteWebhookResponse> | undefined): boolean {
    return proto3.util.equals(DeleteWebhookResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetWebhookRequest
 */
export class GetWebhookRequest extends Message<GetWebhookRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetWebhookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetWebhookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWebhookRequest {
    return new GetWebhookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWebhookRequest {
    return new GetWebhookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWebhookRequest {
    return new GetWebhookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWebhookRequest | PlainMessage<GetWebhookRequest> | undefined, b: GetWebhookRequest | PlainMessage<GetWebhookRequest> | undefined): boolean {
    return proto3.util.equals(GetWebhookRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetWebhookResponse
 */
export class GetWebhookResponse extends Message<GetWebhookResponse> {
  /**
   * @generated from field: chalk.server.v1.Webhook webhook = 1;
   */
  webhook?: Webhook;

  constructor(data?: PartialMessage<GetWebhookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetWebhookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhook", kind: "message", T: Webhook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWebhookResponse {
    return new GetWebhookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWebhookResponse {
    return new GetWebhookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWebhookResponse {
    return new GetWebhookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWebhookResponse | PlainMessage<GetWebhookResponse> | undefined, b: GetWebhookResponse | PlainMessage<GetWebhookResponse> | undefined): boolean {
    return proto3.util.equals(GetWebhookResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListWebhooksRequest
 */
export class ListWebhooksRequest extends Message<ListWebhooksRequest> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ListWebhooksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListWebhooksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWebhooksRequest {
    return new ListWebhooksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWebhooksRequest {
    return new ListWebhooksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWebhooksRequest {
    return new ListWebhooksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWebhooksRequest | PlainMessage<ListWebhooksRequest> | undefined, b: ListWebhooksRequest | PlainMessage<ListWebhooksRequest> | undefined): boolean {
    return proto3.util.equals(ListWebhooksRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListWebhooksResponse
 */
export class ListWebhooksResponse extends Message<ListWebhooksResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.Webhook webhooks = 1;
   */
  webhooks: Webhook[] = [];

  constructor(data?: PartialMessage<ListWebhooksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListWebhooksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhooks", kind: "message", T: Webhook, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWebhooksResponse {
    return new ListWebhooksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWebhooksResponse {
    return new ListWebhooksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWebhooksResponse {
    return new ListWebhooksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWebhooksResponse | PlainMessage<ListWebhooksResponse> | undefined, b: ListWebhooksResponse | PlainMessage<ListWebhooksResponse> | undefined): boolean {
    return proto3.util.equals(ListWebhooksResponse, a, b);
  }
}

