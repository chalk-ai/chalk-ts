// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/topic.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.SQSTopic
 */
export class SQSTopic extends Message<SQSTopic> {
  /**
   * @generated from field: string queue_url = 1;
   */
  queueUrl = "";

  constructor(data?: PartialMessage<SQSTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SQSTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queue_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SQSTopic {
    return new SQSTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SQSTopic {
    return new SQSTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SQSTopic {
    return new SQSTopic().fromJsonString(jsonString, options);
  }

  static equals(a: SQSTopic | PlainMessage<SQSTopic> | undefined, b: SQSTopic | PlainMessage<SQSTopic> | undefined): boolean {
    return proto3.util.equals(SQSTopic, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.PubSubTopic
 */
export class PubSubTopic extends Message<PubSubTopic> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string topic_id = 2;
   */
  topicId = "";

  constructor(data?: PartialMessage<PubSubTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.PubSubTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topic_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubSubTopic {
    return new PubSubTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubSubTopic {
    return new PubSubTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubSubTopic {
    return new PubSubTopic().fromJsonString(jsonString, options);
  }

  static equals(a: PubSubTopic | PlainMessage<PubSubTopic> | undefined, b: PubSubTopic | PlainMessage<PubSubTopic> | undefined): boolean {
    return proto3.util.equals(PubSubTopic, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.Topic
 */
export class Topic extends Message<Topic> {
  /**
   * @generated from oneof chalk.server.v1.Topic.topic
   */
  topic: {
    /**
     * @generated from field: chalk.server.v1.SQSTopic sqs_topic = 1;
     */
    value: SQSTopic;
    case: "sqsTopic";
  } | {
    /**
     * @generated from field: chalk.server.v1.PubSubTopic pubsub_topic = 2;
     */
    value: PubSubTopic;
    case: "pubsubTopic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sqs_topic", kind: "message", T: SQSTopic, oneof: "topic" },
    { no: 2, name: "pubsub_topic", kind: "message", T: PubSubTopic, oneof: "topic" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic {
    return new Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJsonString(jsonString, options);
  }

  static equals(a: Topic | PlainMessage<Topic> | undefined, b: Topic | PlainMessage<Topic> | undefined): boolean {
    return proto3.util.equals(Topic, a, b);
  }
}

