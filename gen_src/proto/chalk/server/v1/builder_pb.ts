// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/builder.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Graph } from "../../graph/v1/graph_pb";
import { LSP } from "../../lsp/v1/lsp_pb";
import { Deployment } from "./deployment_pb";
import { LogEntry } from "./log_pb";
import { KarpenterNodepool } from "../../nodepools/v1/karpenter_pb";

/**
 * @generated from enum chalk.server.v1.DeploymentBuildStatus
 */
export enum DeploymentBuildStatus {
  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_PENDING = 2;
   */
  PENDING = 2,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_QUEUED = 3;
   */
  QUEUED = 3,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_WORKING = 4;
   */
  WORKING = 4,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_SUCCESS = 5;
   */
  SUCCESS = 5,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_FAILURE = 6;
   */
  FAILURE = 6,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_INTERNAL_ERROR = 7;
   */
  INTERNAL_ERROR = 7,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_TIMEOUT = 8;
   */
  TIMEOUT = 8,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_CANCELLED = 9;
   */
  CANCELLED = 9,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_EXPIRED = 10;
   */
  EXPIRED = 10,

  /**
   * @generated from enum value: DEPLOYMENT_BUILD_STATUS_BOOT_ERRORS = 11;
   */
  BOOT_ERRORS = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentBuildStatus)
proto3.util.setEnumType(DeploymentBuildStatus, "chalk.server.v1.DeploymentBuildStatus", [
  { no: 0, name: "DEPLOYMENT_BUILD_STATUS_UNSPECIFIED" },
  { no: 1, name: "DEPLOYMENT_BUILD_STATUS_UNKNOWN" },
  { no: 2, name: "DEPLOYMENT_BUILD_STATUS_PENDING" },
  { no: 3, name: "DEPLOYMENT_BUILD_STATUS_QUEUED" },
  { no: 4, name: "DEPLOYMENT_BUILD_STATUS_WORKING" },
  { no: 5, name: "DEPLOYMENT_BUILD_STATUS_SUCCESS" },
  { no: 6, name: "DEPLOYMENT_BUILD_STATUS_FAILURE" },
  { no: 7, name: "DEPLOYMENT_BUILD_STATUS_INTERNAL_ERROR" },
  { no: 8, name: "DEPLOYMENT_BUILD_STATUS_TIMEOUT" },
  { no: 9, name: "DEPLOYMENT_BUILD_STATUS_CANCELLED" },
  { no: 10, name: "DEPLOYMENT_BUILD_STATUS_EXPIRED" },
  { no: 11, name: "DEPLOYMENT_BUILD_STATUS_BOOT_ERRORS" },
]);

/**
 * @generated from enum chalk.server.v1.BranchScalingState
 */
export enum BranchScalingState {
  /**
   * @generated from enum value: BRANCH_SCALING_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BRANCH_SCALING_STATE_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: BRANCH_SCALING_STATE_IN_PROGRESS = 2;
   */
  IN_PROGRESS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BranchScalingState)
proto3.util.setEnumType(BranchScalingState, "chalk.server.v1.BranchScalingState", [
  { no: 0, name: "BRANCH_SCALING_STATE_UNSPECIFIED" },
  { no: 1, name: "BRANCH_SCALING_STATE_SUCCESS" },
  { no: 2, name: "BRANCH_SCALING_STATE_IN_PROGRESS" },
]);

/**
 * @generated from message chalk.server.v1.ActivateDeploymentTarget
 */
export class ActivateDeploymentTarget extends Message<ActivateDeploymentTarget> {
  /**
   * @generated from field: string service_kind = 1;
   */
  serviceKind = "";

  /**
   * @generated from field: string resource_group_name = 2;
   */
  resourceGroupName = "";

  constructor(data?: PartialMessage<ActivateDeploymentTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ActivateDeploymentTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateDeploymentTarget {
    return new ActivateDeploymentTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateDeploymentTarget {
    return new ActivateDeploymentTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateDeploymentTarget {
    return new ActivateDeploymentTarget().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateDeploymentTarget | PlainMessage<ActivateDeploymentTarget> | undefined, b: ActivateDeploymentTarget | PlainMessage<ActivateDeploymentTarget> | undefined): boolean {
    return proto3.util.equals(ActivateDeploymentTarget, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ActivateDeploymentRequest
 */
export class ActivateDeploymentRequest extends Message<ActivateDeploymentRequest> {
  /**
   * @generated from field: string existing_deployment_id = 1;
   */
  existingDeploymentId = "";

  /**
   * @generated from field: repeated chalk.server.v1.ActivateDeploymentTarget targets = 2;
   */
  targets: ActivateDeploymentTarget[] = [];

  constructor(data?: PartialMessage<ActivateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ActivateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "targets", kind: "message", T: ActivateDeploymentTarget, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateDeploymentRequest {
    return new ActivateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateDeploymentRequest {
    return new ActivateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateDeploymentRequest {
    return new ActivateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateDeploymentRequest | PlainMessage<ActivateDeploymentRequest> | undefined, b: ActivateDeploymentRequest | PlainMessage<ActivateDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(ActivateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ActivateDeploymentResponse
 */
export class ActivateDeploymentResponse extends Message<ActivateDeploymentResponse> {
  constructor(data?: PartialMessage<ActivateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ActivateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateDeploymentResponse {
    return new ActivateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateDeploymentResponse {
    return new ActivateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateDeploymentResponse {
    return new ActivateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateDeploymentResponse | PlainMessage<ActivateDeploymentResponse> | undefined, b: ActivateDeploymentResponse | PlainMessage<ActivateDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(ActivateDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.IndexDeploymentRequest
 */
export class IndexDeploymentRequest extends Message<IndexDeploymentRequest> {
  /**
   * @generated from field: string existing_deployment_id = 1;
   */
  existingDeploymentId = "";

  constructor(data?: PartialMessage<IndexDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.IndexDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexDeploymentRequest {
    return new IndexDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexDeploymentRequest {
    return new IndexDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexDeploymentRequest {
    return new IndexDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IndexDeploymentRequest | PlainMessage<IndexDeploymentRequest> | undefined, b: IndexDeploymentRequest | PlainMessage<IndexDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(IndexDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.IndexDeploymentResponse
 */
export class IndexDeploymentResponse extends Message<IndexDeploymentResponse> {
  constructor(data?: PartialMessage<IndexDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.IndexDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexDeploymentResponse {
    return new IndexDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexDeploymentResponse {
    return new IndexDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexDeploymentResponse {
    return new IndexDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IndexDeploymentResponse | PlainMessage<IndexDeploymentResponse> | undefined, b: IndexDeploymentResponse | PlainMessage<IndexDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(IndexDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeployKubeComponentsRequest
 */
export class DeployKubeComponentsRequest extends Message<DeployKubeComponentsRequest> {
  /**
   * @generated from field: string existing_deployment_id = 1;
   */
  existingDeploymentId = "";

  /**
   * @generated from field: repeated chalk.server.v1.ActivateDeploymentTarget targets = 2;
   */
  targets: ActivateDeploymentTarget[] = [];

  constructor(data?: PartialMessage<DeployKubeComponentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeployKubeComponentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "targets", kind: "message", T: ActivateDeploymentTarget, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployKubeComponentsRequest {
    return new DeployKubeComponentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployKubeComponentsRequest {
    return new DeployKubeComponentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployKubeComponentsRequest {
    return new DeployKubeComponentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployKubeComponentsRequest | PlainMessage<DeployKubeComponentsRequest> | undefined, b: DeployKubeComponentsRequest | PlainMessage<DeployKubeComponentsRequest> | undefined): boolean {
    return proto3.util.equals(DeployKubeComponentsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeployKubeComponentsResponse
 */
export class DeployKubeComponentsResponse extends Message<DeployKubeComponentsResponse> {
  constructor(data?: PartialMessage<DeployKubeComponentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeployKubeComponentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployKubeComponentsResponse {
    return new DeployKubeComponentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployKubeComponentsResponse {
    return new DeployKubeComponentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployKubeComponentsResponse {
    return new DeployKubeComponentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployKubeComponentsResponse | PlainMessage<DeployKubeComponentsResponse> | undefined, b: DeployKubeComponentsResponse | PlainMessage<DeployKubeComponentsResponse> | undefined): boolean {
    return proto3.util.equals(DeployKubeComponentsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.RebuildDeploymentRequest
 */
export class RebuildDeploymentRequest extends Message<RebuildDeploymentRequest> {
  /**
   * @generated from field: string existing_deployment_id = 1;
   */
  existingDeploymentId = "";

  /**
   * @generated from field: string new_image_tag = 2;
   */
  newImageTag = "";

  /**
   * @generated from field: optional string base_image_override = 3;
   */
  baseImageOverride?: string;

  /**
   * @generated from field: bool enable_profiling = 4;
   */
  enableProfiling = false;

  constructor(data?: PartialMessage<RebuildDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.RebuildDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_image_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base_image_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "enable_profiling", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebuildDeploymentRequest {
    return new RebuildDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebuildDeploymentRequest {
    return new RebuildDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebuildDeploymentRequest {
    return new RebuildDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RebuildDeploymentRequest | PlainMessage<RebuildDeploymentRequest> | undefined, b: RebuildDeploymentRequest | PlainMessage<RebuildDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(RebuildDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.RebuildDeploymentResponse
 */
export class RebuildDeploymentResponse extends Message<RebuildDeploymentResponse> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<RebuildDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.RebuildDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebuildDeploymentResponse {
    return new RebuildDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebuildDeploymentResponse {
    return new RebuildDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebuildDeploymentResponse {
    return new RebuildDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RebuildDeploymentResponse | PlainMessage<RebuildDeploymentResponse> | undefined, b: RebuildDeploymentResponse | PlainMessage<RebuildDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(RebuildDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.RedeployDeploymentRequest
 */
export class RedeployDeploymentRequest extends Message<RedeployDeploymentRequest> {
  /**
   * @generated from field: string existing_deployment_id = 1;
   */
  existingDeploymentId = "";

  /**
   * @generated from field: bool enable_profiling = 2;
   */
  enableProfiling = false;

  /**
   * @generated from field: repeated string deployment_tags = 3;
   */
  deploymentTags: string[] = [];

  constructor(data?: PartialMessage<RedeployDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.RedeployDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "existing_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enable_profiling", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "deployment_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployDeploymentRequest {
    return new RedeployDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployDeploymentRequest {
    return new RedeployDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployDeploymentRequest {
    return new RedeployDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployDeploymentRequest | PlainMessage<RedeployDeploymentRequest> | undefined, b: RedeployDeploymentRequest | PlainMessage<RedeployDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(RedeployDeploymentRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.RedeployDeploymentResponse
 */
export class RedeployDeploymentResponse extends Message<RedeployDeploymentResponse> {
  /**
   * don't care about this
   *
   * @generated from field: string build_id = 1 [deprecated = true];
   * @deprecated
   */
  buildId = "";

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<RedeployDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.RedeployDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployDeploymentResponse {
    return new RedeployDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployDeploymentResponse {
    return new RedeployDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployDeploymentResponse {
    return new RedeployDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployDeploymentResponse | PlainMessage<RedeployDeploymentResponse> | undefined, b: RedeployDeploymentResponse | PlainMessage<RedeployDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(RedeployDeploymentResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UploadSourceRequest
 */
export class UploadSourceRequest extends Message<UploadSourceRequest> {
  /**
   * @generated from field: string deployment_id = 7;
   */
  deploymentId = "";

  /**
   * @generated from field: bytes archive = 1;
   */
  archive = new Uint8Array(0);

  /**
   * @generated from field: bool no_promote = 2;
   */
  noPromote = false;

  /**
   * @generated from field: optional string dependency_hash = 3;
   */
  dependencyHash?: string;

  /**
   * @generated from field: optional string base_image_override = 4;
   */
  baseImageOverride?: string;

  /**
   * @generated from field: bool use_grpc = 5;
   */
  useGrpc = false;

  /**
   * @generated from field: bool enable_profiling = 6;
   */
  enableProfiling = false;

  constructor(data?: PartialMessage<UploadSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UploadSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "archive", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "no_promote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "dependency_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "base_image_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "use_grpc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "enable_profiling", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadSourceRequest {
    return new UploadSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadSourceRequest {
    return new UploadSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadSourceRequest {
    return new UploadSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadSourceRequest | PlainMessage<UploadSourceRequest> | undefined, b: UploadSourceRequest | PlainMessage<UploadSourceRequest> | undefined): boolean {
    return proto3.util.equals(UploadSourceRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UploadSourceResponse
 */
export class UploadSourceResponse extends Message<UploadSourceResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string progress_url = 2;
   */
  progressUrl = "";

  constructor(data?: PartialMessage<UploadSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UploadSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "progress_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadSourceResponse {
    return new UploadSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadSourceResponse {
    return new UploadSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadSourceResponse {
    return new UploadSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadSourceResponse | PlainMessage<UploadSourceResponse> | undefined, b: UploadSourceResponse | PlainMessage<UploadSourceResponse> | undefined): boolean {
    return proto3.util.equals(UploadSourceResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.LintSourceRequest
 */
export class LintSourceRequest extends Message<LintSourceRequest> {
  /**
   *  optional string dependency_hash = 3;
   *  optional string base_image_override = 4;
   *  string deployment_id = 7;
   *
   * @generated from field: bytes archive = 1;
   */
  archive = new Uint8Array(0);

  constructor(data?: PartialMessage<LintSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.LintSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "archive", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LintSourceRequest {
    return new LintSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LintSourceRequest {
    return new LintSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LintSourceRequest {
    return new LintSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LintSourceRequest | PlainMessage<LintSourceRequest> | undefined, b: LintSourceRequest | PlainMessage<LintSourceRequest> | undefined): boolean {
    return proto3.util.equals(LintSourceRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.LintSourceResponse
 */
export class LintSourceResponse extends Message<LintSourceResponse> {
  /**
   * @generated from field: chalk.graph.v1.Graph graph = 1;
   */
  graph?: Graph;

  /**
   * @generated from field: chalk.lsp.v1.LSP lsp = 2;
   */
  lsp?: LSP;

  constructor(data?: PartialMessage<LintSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.LintSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph", kind: "message", T: Graph },
    { no: 2, name: "lsp", kind: "message", T: LSP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LintSourceResponse {
    return new LintSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LintSourceResponse {
    return new LintSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LintSourceResponse {
    return new LintSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LintSourceResponse | PlainMessage<LintSourceResponse> | undefined, b: LintSourceResponse | PlainMessage<LintSourceResponse> | undefined): boolean {
    return proto3.util.equals(LintSourceResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentStepsRequest
 */
export class GetDeploymentStepsRequest extends Message<GetDeploymentStepsRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetDeploymentStepsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentStepsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentStepsRequest {
    return new GetDeploymentStepsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentStepsRequest {
    return new GetDeploymentStepsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentStepsRequest {
    return new GetDeploymentStepsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentStepsRequest | PlainMessage<GetDeploymentStepsRequest> | undefined, b: GetDeploymentStepsRequest | PlainMessage<GetDeploymentStepsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentStepsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeploymentBuildStep
 */
export class DeploymentBuildStep extends Message<DeploymentBuildStep> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: chalk.server.v1.DeploymentBuildStatus status = 3;
   */
  status = DeploymentBuildStatus.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<DeploymentBuildStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeploymentBuildStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentBuildStatus) },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentBuildStep {
    return new DeploymentBuildStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentBuildStep {
    return new DeploymentBuildStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentBuildStep {
    return new DeploymentBuildStep().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentBuildStep | PlainMessage<DeploymentBuildStep> | undefined, b: DeploymentBuildStep | PlainMessage<DeploymentBuildStep> | undefined): boolean {
    return proto3.util.equals(DeploymentBuildStep, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentStepsResponse
 */
export class GetDeploymentStepsResponse extends Message<GetDeploymentStepsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.DeploymentBuildStep steps = 1;
   */
  steps: DeploymentBuildStep[] = [];

  /**
   * @generated from field: chalk.server.v1.Deployment deployment = 2;
   */
  deployment?: Deployment;

  constructor(data?: PartialMessage<GetDeploymentStepsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentStepsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "steps", kind: "message", T: DeploymentBuildStep, repeated: true },
    { no: 2, name: "deployment", kind: "message", T: Deployment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentStepsResponse {
    return new GetDeploymentStepsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentStepsResponse {
    return new GetDeploymentStepsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentStepsResponse {
    return new GetDeploymentStepsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentStepsResponse | PlainMessage<GetDeploymentStepsResponse> | undefined, b: GetDeploymentStepsResponse | PlainMessage<GetDeploymentStepsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentStepsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentLogsRequest
 */
export class GetDeploymentLogsRequest extends Message<GetDeploymentLogsRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetDeploymentLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentLogsRequest {
    return new GetDeploymentLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentLogsRequest {
    return new GetDeploymentLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentLogsRequest {
    return new GetDeploymentLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentLogsRequest | PlainMessage<GetDeploymentLogsRequest> | undefined, b: GetDeploymentLogsRequest | PlainMessage<GetDeploymentLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentLogsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDeploymentLogsResponse
 */
export class GetDeploymentLogsResponse extends Message<GetDeploymentLogsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.LogEntry logs = 1;
   */
  logs: LogEntry[] = [];

  constructor(data?: PartialMessage<GetDeploymentLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDeploymentLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: LogEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentLogsResponse {
    return new GetDeploymentLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentLogsResponse {
    return new GetDeploymentLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentLogsResponse {
    return new GetDeploymentLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentLogsResponse | PlainMessage<GetDeploymentLogsResponse> | undefined, b: GetDeploymentLogsResponse | PlainMessage<GetDeploymentLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentLogsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterTimescaleDBRequest
 */
export class GetClusterTimescaleDBRequest extends Message<GetClusterTimescaleDBRequest> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetClusterTimescaleDBRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterTimescaleDBRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterTimescaleDBRequest {
    return new GetClusterTimescaleDBRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterTimescaleDBRequest {
    return new GetClusterTimescaleDBRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterTimescaleDBRequest {
    return new GetClusterTimescaleDBRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterTimescaleDBRequest | PlainMessage<GetClusterTimescaleDBRequest> | undefined, b: GetClusterTimescaleDBRequest | PlainMessage<GetClusterTimescaleDBRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterTimescaleDBRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterTimescaleDBResponse
 */
export class GetClusterTimescaleDBResponse extends Message<GetClusterTimescaleDBResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * use specs instead
   *
   * @generated from field: string specs_string = 2 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: chalk.server.v1.ClusterTimescaleSpecs specs = 5;
   */
  specs?: ClusterTimescaleSpecs;

  constructor(data?: PartialMessage<GetClusterTimescaleDBResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterTimescaleDBResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "specs", kind: "message", T: ClusterTimescaleSpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterTimescaleDBResponse {
    return new GetClusterTimescaleDBResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterTimescaleDBResponse {
    return new GetClusterTimescaleDBResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterTimescaleDBResponse {
    return new GetClusterTimescaleDBResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterTimescaleDBResponse | PlainMessage<GetClusterTimescaleDBResponse> | undefined, b: GetClusterTimescaleDBResponse | PlainMessage<GetClusterTimescaleDBResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterTimescaleDBResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterGatewayRequest
 */
export class GetClusterGatewayRequest extends Message<GetClusterGatewayRequest> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetClusterGatewayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterGatewayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterGatewayRequest {
    return new GetClusterGatewayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterGatewayRequest {
    return new GetClusterGatewayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterGatewayRequest {
    return new GetClusterGatewayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterGatewayRequest | PlainMessage<GetClusterGatewayRequest> | undefined, b: GetClusterGatewayRequest | PlainMessage<GetClusterGatewayRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterGatewayRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterGatewayResponse
 */
export class GetClusterGatewayResponse extends Message<GetClusterGatewayResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * use specs instead
   *
   * @generated from field: string specs_string = 2 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: chalk.server.v1.EnvoyGatewaySpecs specs = 5;
   */
  specs?: EnvoyGatewaySpecs;

  constructor(data?: PartialMessage<GetClusterGatewayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterGatewayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "specs", kind: "message", T: EnvoyGatewaySpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterGatewayResponse {
    return new GetClusterGatewayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterGatewayResponse {
    return new GetClusterGatewayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterGatewayResponse {
    return new GetClusterGatewayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterGatewayResponse | PlainMessage<GetClusterGatewayResponse> | undefined, b: GetClusterGatewayResponse | PlainMessage<GetClusterGatewayResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterGatewayResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BackgroundPersistence
 */
export class BackgroundPersistence extends Message<BackgroundPersistence> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * use specs instead
   *
   * @generated from field: string specs_string = 3 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: chalk.server.v1.BackgroundPersistenceDeploymentSpecs specs = 6;
   */
  specs?: BackgroundPersistenceDeploymentSpecs;

  constructor(data?: PartialMessage<BackgroundPersistence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BackgroundPersistence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "specs", kind: "message", T: BackgroundPersistenceDeploymentSpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundPersistence {
    return new BackgroundPersistence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundPersistence {
    return new BackgroundPersistence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundPersistence {
    return new BackgroundPersistence().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundPersistence | PlainMessage<BackgroundPersistence> | undefined, b: BackgroundPersistence | PlainMessage<BackgroundPersistence> | undefined): boolean {
    return proto3.util.equals(BackgroundPersistence, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterBackgroundPersistenceRequest
 */
export class GetClusterBackgroundPersistenceRequest extends Message<GetClusterBackgroundPersistenceRequest> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetClusterBackgroundPersistenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterBackgroundPersistenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterBackgroundPersistenceRequest {
    return new GetClusterBackgroundPersistenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterBackgroundPersistenceRequest {
    return new GetClusterBackgroundPersistenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterBackgroundPersistenceRequest {
    return new GetClusterBackgroundPersistenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterBackgroundPersistenceRequest | PlainMessage<GetClusterBackgroundPersistenceRequest> | undefined, b: GetClusterBackgroundPersistenceRequest | PlainMessage<GetClusterBackgroundPersistenceRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterBackgroundPersistenceRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetClusterBackgroundPersistenceResponse
 */
export class GetClusterBackgroundPersistenceResponse extends Message<GetClusterBackgroundPersistenceResponse> {
  /**
   * @generated from field: chalk.server.v1.BackgroundPersistence background_persistence = 1;
   */
  backgroundPersistence?: BackgroundPersistence;

  constructor(data?: PartialMessage<GetClusterBackgroundPersistenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetClusterBackgroundPersistenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "background_persistence", kind: "message", T: BackgroundPersistence },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterBackgroundPersistenceResponse {
    return new GetClusterBackgroundPersistenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterBackgroundPersistenceResponse {
    return new GetClusterBackgroundPersistenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterBackgroundPersistenceResponse {
    return new GetClusterBackgroundPersistenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterBackgroundPersistenceResponse | PlainMessage<GetClusterBackgroundPersistenceResponse> | undefined, b: GetClusterBackgroundPersistenceResponse | PlainMessage<GetClusterBackgroundPersistenceResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterBackgroundPersistenceResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterTimescaleDBRequest
 */
export class CreateClusterTimescaleDBRequest extends Message<CreateClusterTimescaleDBRequest> {
  /**
   * spelling
   *
   * @generated from field: repeated string environment_id = 1 [deprecated = true];
   * @deprecated
   */
  environmentId: string[] = [];

  /**
   * @generated from field: repeated string environment_ids = 3;
   */
  environmentIds: string[] = [];

  /**
   * @generated from field: string specs_string = 2 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: chalk.server.v1.ClusterTimescaleSpecs specs = 4;
   */
  specs?: ClusterTimescaleSpecs;

  constructor(data?: PartialMessage<CreateClusterTimescaleDBRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterTimescaleDBRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "specs", kind: "message", T: ClusterTimescaleSpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterTimescaleDBRequest {
    return new CreateClusterTimescaleDBRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterTimescaleDBRequest {
    return new CreateClusterTimescaleDBRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterTimescaleDBRequest {
    return new CreateClusterTimescaleDBRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterTimescaleDBRequest | PlainMessage<CreateClusterTimescaleDBRequest> | undefined, b: CreateClusterTimescaleDBRequest | PlainMessage<CreateClusterTimescaleDBRequest> | undefined): boolean {
    return proto3.util.equals(CreateClusterTimescaleDBRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.KubeResourceConfig
 */
export class KubeResourceConfig extends Message<KubeResourceConfig> {
  /**
   * @generated from field: string cpu = 1;
   */
  cpu = "";

  /**
   * @generated from field: string memory = 2;
   */
  memory = "";

  /**
   * @generated from field: string ephemeral_storage = 3;
   */
  ephemeralStorage = "";

  /**
   * @generated from field: string storage = 4;
   */
  storage = "";

  constructor(data?: PartialMessage<KubeResourceConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.KubeResourceConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ephemeral_storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubeResourceConfig {
    return new KubeResourceConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubeResourceConfig {
    return new KubeResourceConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubeResourceConfig {
    return new KubeResourceConfig().fromJsonString(jsonString, options);
  }

  static equals(a: KubeResourceConfig | PlainMessage<KubeResourceConfig> | undefined, b: KubeResourceConfig | PlainMessage<KubeResourceConfig> | undefined): boolean {
    return proto3.util.equals(KubeResourceConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ClusterTimescaleSpecs
 */
export class ClusterTimescaleSpecs extends Message<ClusterTimescaleSpecs> {
  /**
   * @generated from field: string timescale_image = 1;
   */
  timescaleImage = "";

  /**
   * @generated from field: string database_name = 2;
   */
  databaseName = "";

  /**
   * @generated from field: int32 database_replicas = 3;
   */
  databaseReplicas = 0;

  /**
   * @generated from field: string storage = 4;
   */
  storage = "";

  /**
   * @generated from field: optional string storage_class = 5;
   */
  storageClass?: string;

  /**
   * @generated from field: string namespace = 6;
   */
  namespace = "";

  /**
   * @generated from field: optional chalk.server.v1.KubeResourceConfig request = 7;
   */
  request?: KubeResourceConfig;

  /**
   * @generated from field: optional chalk.server.v1.KubeResourceConfig limit = 8;
   */
  limit?: KubeResourceConfig;

  /**
   * @generated from field: int32 connection_pool_replicas = 9;
   */
  connectionPoolReplicas = 0;

  /**
   * @generated from field: string connection_pool_max_connections = 10;
   */
  connectionPoolMaxConnections = "";

  /**
   * @generated from field: string connection_pool_size = 11;
   */
  connectionPoolSize = "";

  /**
   * @generated from field: string connection_pool_mode = 12;
   */
  connectionPoolMode = "";

  /**
   * @generated from field: string backup_bucket = 13;
   */
  backupBucket = "";

  /**
   * @generated from field: string backup_iam_role_arn = 14;
   */
  backupIamRoleArn = "";

  /**
   * @generated from field: string secret_name = 15;
   */
  secretName = "";

  /**
   * @generated from field: optional bool internal = 16;
   */
  internal?: boolean;

  /**
   * @generated from field: optional string service_type = 17;
   */
  serviceType?: string;

  /**
   * @generated from field: map<string, string> postgres_parameters = 18;
   */
  postgresParameters: { [key: string]: string } = {};

  /**
   * @generated from field: bool include_chalk_node_selector = 19;
   */
  includeChalkNodeSelector = false;

  /**
   * @generated from field: string backup_gcp_service_account = 20;
   */
  backupGcpServiceAccount = "";

  /**
   * @generated from field: string instance_type = 21;
   */
  instanceType = "";

  constructor(data?: PartialMessage<ClusterTimescaleSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ClusterTimescaleSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timescale_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "database_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "database_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "storage_class", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "request", kind: "message", T: KubeResourceConfig, opt: true },
    { no: 8, name: "limit", kind: "message", T: KubeResourceConfig, opt: true },
    { no: 9, name: "connection_pool_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "connection_pool_max_connections", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "connection_pool_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "connection_pool_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "backup_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "backup_iam_role_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "secret_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "internal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: "service_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "postgres_parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 19, name: "include_chalk_node_selector", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "backup_gcp_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "instance_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterTimescaleSpecs {
    return new ClusterTimescaleSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterTimescaleSpecs {
    return new ClusterTimescaleSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterTimescaleSpecs {
    return new ClusterTimescaleSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterTimescaleSpecs | PlainMessage<ClusterTimescaleSpecs> | undefined, b: ClusterTimescaleSpecs | PlainMessage<ClusterTimescaleSpecs> | undefined): boolean {
    return proto3.util.equals(ClusterTimescaleSpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterTimescaleDBResponse
 */
export class CreateClusterTimescaleDBResponse extends Message<CreateClusterTimescaleDBResponse> {
  constructor(data?: PartialMessage<CreateClusterTimescaleDBResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterTimescaleDBResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterTimescaleDBResponse {
    return new CreateClusterTimescaleDBResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterTimescaleDBResponse {
    return new CreateClusterTimescaleDBResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterTimescaleDBResponse {
    return new CreateClusterTimescaleDBResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterTimescaleDBResponse | PlainMessage<CreateClusterTimescaleDBResponse> | undefined, b: CreateClusterTimescaleDBResponse | PlainMessage<CreateClusterTimescaleDBResponse> | undefined): boolean {
    return proto3.util.equals(CreateClusterTimescaleDBResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.MigrateClusterTimescaleDBRequest
 */
export class MigrateClusterTimescaleDBRequest extends Message<MigrateClusterTimescaleDBRequest> {
  /**
   * @generated from field: string cluster_timescale_id = 1;
   */
  clusterTimescaleId = "";

  /**
   * @generated from field: optional string migration_image = 2;
   */
  migrationImage?: string;

  /**
   * @generated from field: repeated string environment_ids = 3;
   */
  environmentIds: string[] = [];

  constructor(data?: PartialMessage<MigrateClusterTimescaleDBRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.MigrateClusterTimescaleDBRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_timescale_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "migration_image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateClusterTimescaleDBRequest {
    return new MigrateClusterTimescaleDBRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateClusterTimescaleDBRequest {
    return new MigrateClusterTimescaleDBRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateClusterTimescaleDBRequest {
    return new MigrateClusterTimescaleDBRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateClusterTimescaleDBRequest | PlainMessage<MigrateClusterTimescaleDBRequest> | undefined, b: MigrateClusterTimescaleDBRequest | PlainMessage<MigrateClusterTimescaleDBRequest> | undefined): boolean {
    return proto3.util.equals(MigrateClusterTimescaleDBRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.MigrateClusterTimescaleDBResponse
 */
export class MigrateClusterTimescaleDBResponse extends Message<MigrateClusterTimescaleDBResponse> {
  constructor(data?: PartialMessage<MigrateClusterTimescaleDBResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.MigrateClusterTimescaleDBResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateClusterTimescaleDBResponse {
    return new MigrateClusterTimescaleDBResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateClusterTimescaleDBResponse {
    return new MigrateClusterTimescaleDBResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateClusterTimescaleDBResponse {
    return new MigrateClusterTimescaleDBResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateClusterTimescaleDBResponse | PlainMessage<MigrateClusterTimescaleDBResponse> | undefined, b: MigrateClusterTimescaleDBResponse | PlainMessage<MigrateClusterTimescaleDBResponse> | undefined): boolean {
    return proto3.util.equals(MigrateClusterTimescaleDBResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterGatewayRequest
 */
export class CreateClusterGatewayRequest extends Message<CreateClusterGatewayRequest> {
  /**
   * spelling
   *
   * @generated from field: repeated string environment_id = 1 [deprecated = true];
   * @deprecated
   */
  environmentId: string[] = [];

  /**
   * @generated from field: repeated string environment_ids = 3;
   */
  environmentIds: string[] = [];

  /**
   * use specs instead
   *
   * @generated from field: string specs_string = 2 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: chalk.server.v1.EnvoyGatewaySpecs specs = 4;
   */
  specs?: EnvoyGatewaySpecs;

  constructor(data?: PartialMessage<CreateClusterGatewayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterGatewayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "specs", kind: "message", T: EnvoyGatewaySpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterGatewayRequest {
    return new CreateClusterGatewayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterGatewayRequest {
    return new CreateClusterGatewayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterGatewayRequest {
    return new CreateClusterGatewayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterGatewayRequest | PlainMessage<CreateClusterGatewayRequest> | undefined, b: CreateClusterGatewayRequest | PlainMessage<CreateClusterGatewayRequest> | undefined): boolean {
    return proto3.util.equals(CreateClusterGatewayRequest, a, b);
  }
}

/**
 * name not necessarily reflective of the actual gateway being used
 *
 * @generated from message chalk.server.v1.EnvoyGatewaySpecs
 */
export class EnvoyGatewaySpecs extends Message<EnvoyGatewaySpecs> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string gateway_name = 2;
   */
  gatewayName = "";

  /**
   * @generated from field: string gateway_class_name = 3;
   */
  gatewayClassName = "";

  /**
   * @generated from field: repeated chalk.server.v1.EnvoyGatewayListener listeners = 4;
   */
  listeners: EnvoyGatewayListener[] = [];

  /**
   * @generated from field: optional chalk.server.v1.GatewayProviderConfig config = 5;
   */
  config?: GatewayProviderConfig;

  /**
   * @generated from field: bool include_chalk_node_selector = 6;
   */
  includeChalkNodeSelector = false;

  constructor(data?: PartialMessage<EnvoyGatewaySpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvoyGatewaySpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gateway_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gateway_class_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "listeners", kind: "message", T: EnvoyGatewayListener, repeated: true },
    { no: 5, name: "config", kind: "message", T: GatewayProviderConfig, opt: true },
    { no: 6, name: "include_chalk_node_selector", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvoyGatewaySpecs {
    return new EnvoyGatewaySpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvoyGatewaySpecs {
    return new EnvoyGatewaySpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvoyGatewaySpecs {
    return new EnvoyGatewaySpecs().fromJsonString(jsonString, options);
  }

  static equals(a: EnvoyGatewaySpecs | PlainMessage<EnvoyGatewaySpecs> | undefined, b: EnvoyGatewaySpecs | PlainMessage<EnvoyGatewaySpecs> | undefined): boolean {
    return proto3.util.equals(EnvoyGatewaySpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvoyGatewayListener
 */
export class EnvoyGatewayListener extends Message<EnvoyGatewayListener> {
  /**
   * @generated from field: int32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: string protocol = 2;
   */
  protocol = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: chalk.server.v1.EnvoyGatewayAllowedRoutes allowed_routes = 4;
   */
  allowedRoutes?: EnvoyGatewayAllowedRoutes;

  constructor(data?: PartialMessage<EnvoyGatewayListener>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvoyGatewayListener";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allowed_routes", kind: "message", T: EnvoyGatewayAllowedRoutes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvoyGatewayListener {
    return new EnvoyGatewayListener().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvoyGatewayListener {
    return new EnvoyGatewayListener().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvoyGatewayListener {
    return new EnvoyGatewayListener().fromJsonString(jsonString, options);
  }

  static equals(a: EnvoyGatewayListener | PlainMessage<EnvoyGatewayListener> | undefined, b: EnvoyGatewayListener | PlainMessage<EnvoyGatewayListener> | undefined): boolean {
    return proto3.util.equals(EnvoyGatewayListener, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvoyGatewayAllowedRoutes
 */
export class EnvoyGatewayAllowedRoutes extends Message<EnvoyGatewayAllowedRoutes> {
  /**
   * @generated from field: chalk.server.v1.EnvoyGatewayAllowedNamespaces namespaces = 1;
   */
  namespaces?: EnvoyGatewayAllowedNamespaces;

  constructor(data?: PartialMessage<EnvoyGatewayAllowedRoutes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvoyGatewayAllowedRoutes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespaces", kind: "message", T: EnvoyGatewayAllowedNamespaces },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvoyGatewayAllowedRoutes {
    return new EnvoyGatewayAllowedRoutes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvoyGatewayAllowedRoutes {
    return new EnvoyGatewayAllowedRoutes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvoyGatewayAllowedRoutes {
    return new EnvoyGatewayAllowedRoutes().fromJsonString(jsonString, options);
  }

  static equals(a: EnvoyGatewayAllowedRoutes | PlainMessage<EnvoyGatewayAllowedRoutes> | undefined, b: EnvoyGatewayAllowedRoutes | PlainMessage<EnvoyGatewayAllowedRoutes> | undefined): boolean {
    return proto3.util.equals(EnvoyGatewayAllowedRoutes, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvoyGatewayAllowedNamespaces
 */
export class EnvoyGatewayAllowedNamespaces extends Message<EnvoyGatewayAllowedNamespaces> {
  /**
   * @generated from field: string from = 1;
   */
  from = "";

  constructor(data?: PartialMessage<EnvoyGatewayAllowedNamespaces>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvoyGatewayAllowedNamespaces";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvoyGatewayAllowedNamespaces {
    return new EnvoyGatewayAllowedNamespaces().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvoyGatewayAllowedNamespaces {
    return new EnvoyGatewayAllowedNamespaces().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvoyGatewayAllowedNamespaces {
    return new EnvoyGatewayAllowedNamespaces().fromJsonString(jsonString, options);
  }

  static equals(a: EnvoyGatewayAllowedNamespaces | PlainMessage<EnvoyGatewayAllowedNamespaces> | undefined, b: EnvoyGatewayAllowedNamespaces | PlainMessage<EnvoyGatewayAllowedNamespaces> | undefined): boolean {
    return proto3.util.equals(EnvoyGatewayAllowedNamespaces, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GatewayProviderConfig
 */
export class GatewayProviderConfig extends Message<GatewayProviderConfig> {
  /**
   * @generated from oneof chalk.server.v1.GatewayProviderConfig.config
   */
  config: {
    /**
     * @generated from field: chalk.server.v1.EnvoyGatewayProviderConfig envoy = 1;
     */
    value: EnvoyGatewayProviderConfig;
    case: "envoy";
  } | {
    /**
     * @generated from field: chalk.server.v1.GCPGatewayProviderConfig gcp = 2;
     */
    value: GCPGatewayProviderConfig;
    case: "gcp";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GatewayProviderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GatewayProviderConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "envoy", kind: "message", T: EnvoyGatewayProviderConfig, oneof: "config" },
    { no: 2, name: "gcp", kind: "message", T: GCPGatewayProviderConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayProviderConfig {
    return new GatewayProviderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayProviderConfig {
    return new GatewayProviderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayProviderConfig {
    return new GatewayProviderConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GatewayProviderConfig | PlainMessage<GatewayProviderConfig> | undefined, b: GatewayProviderConfig | PlainMessage<GatewayProviderConfig> | undefined): boolean {
    return proto3.util.equals(GatewayProviderConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.EnvoyGatewayProviderConfig
 */
export class EnvoyGatewayProviderConfig extends Message<EnvoyGatewayProviderConfig> {
  /**
   * @generated from field: optional string timeout_duration = 1;
   */
  timeoutDuration?: string;

  /**
   * @generated from field: optional string dns_hostname = 2;
   */
  dnsHostname?: string;

  /**
   * @generated from field: optional int32 replicas = 3;
   */
  replicas?: number;

  /**
   * @generated from field: optional int32 min_available = 4;
   */
  minAvailable?: number;

  constructor(data?: PartialMessage<EnvoyGatewayProviderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.EnvoyGatewayProviderConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeout_duration", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "dns_hostname", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "min_available", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvoyGatewayProviderConfig {
    return new EnvoyGatewayProviderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvoyGatewayProviderConfig {
    return new EnvoyGatewayProviderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvoyGatewayProviderConfig {
    return new EnvoyGatewayProviderConfig().fromJsonString(jsonString, options);
  }

  static equals(a: EnvoyGatewayProviderConfig | PlainMessage<EnvoyGatewayProviderConfig> | undefined, b: EnvoyGatewayProviderConfig | PlainMessage<EnvoyGatewayProviderConfig> | undefined): boolean {
    return proto3.util.equals(EnvoyGatewayProviderConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GCPGatewayProviderConfig
 */
export class GCPGatewayProviderConfig extends Message<GCPGatewayProviderConfig> {
  /**
   * @generated from field: string dns_hostname = 1;
   */
  dnsHostname = "";

  constructor(data?: PartialMessage<GCPGatewayProviderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GCPGatewayProviderConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dns_hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GCPGatewayProviderConfig {
    return new GCPGatewayProviderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GCPGatewayProviderConfig {
    return new GCPGatewayProviderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GCPGatewayProviderConfig {
    return new GCPGatewayProviderConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GCPGatewayProviderConfig | PlainMessage<GCPGatewayProviderConfig> | undefined, b: GCPGatewayProviderConfig | PlainMessage<GCPGatewayProviderConfig> | undefined): boolean {
    return proto3.util.equals(GCPGatewayProviderConfig, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterGatewayResponse
 */
export class CreateClusterGatewayResponse extends Message<CreateClusterGatewayResponse> {
  constructor(data?: PartialMessage<CreateClusterGatewayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterGatewayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterGatewayResponse {
    return new CreateClusterGatewayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterGatewayResponse {
    return new CreateClusterGatewayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterGatewayResponse {
    return new CreateClusterGatewayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterGatewayResponse | PlainMessage<CreateClusterGatewayResponse> | undefined, b: CreateClusterGatewayResponse | PlainMessage<CreateClusterGatewayResponse> | undefined): boolean {
    return proto3.util.equals(CreateClusterGatewayResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterBackgroundPersistenceRequest
 */
export class CreateClusterBackgroundPersistenceRequest extends Message<CreateClusterBackgroundPersistenceRequest> {
  /**
   * @generated from field: repeated string environment_ids = 1;
   */
  environmentIds: string[] = [];

  /**
   * use specs instead
   *
   * @generated from field: string specs_string = 2 [deprecated = true];
   * @deprecated
   */
  specsString = "";

  /**
   * @generated from field: chalk.server.v1.BackgroundPersistenceDeploymentSpecs specs = 3;
   */
  specs?: BackgroundPersistenceDeploymentSpecs;

  constructor(data?: PartialMessage<CreateClusterBackgroundPersistenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterBackgroundPersistenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "specs_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "specs", kind: "message", T: BackgroundPersistenceDeploymentSpecs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterBackgroundPersistenceRequest {
    return new CreateClusterBackgroundPersistenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterBackgroundPersistenceRequest {
    return new CreateClusterBackgroundPersistenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterBackgroundPersistenceRequest {
    return new CreateClusterBackgroundPersistenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterBackgroundPersistenceRequest | PlainMessage<CreateClusterBackgroundPersistenceRequest> | undefined, b: CreateClusterBackgroundPersistenceRequest | PlainMessage<CreateClusterBackgroundPersistenceRequest> | undefined): boolean {
    return proto3.util.equals(CreateClusterBackgroundPersistenceRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BackgroundPersistenceCommonSpecs
 */
export class BackgroundPersistenceCommonSpecs extends Message<BackgroundPersistenceCommonSpecs> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string bus_writer_image_go = 2;
   */
  busWriterImageGo = "";

  /**
   * @generated from field: string bus_writer_image_python = 3;
   */
  busWriterImagePython = "";

  /**
   * @generated from field: string bus_writer_image_bswl = 4;
   */
  busWriterImageBswl = "";

  /**
   * @generated from field: string service_account_name = 5;
   */
  serviceAccountName = "";

  /**
   * @generated from field: string bus_backend = 6;
   */
  busBackend = "";

  /**
   * @generated from field: string secret_client = 7;
   */
  secretClient = "";

  /**
   * @generated from field: string bigquery_parquet_upload_subscription_id = 8;
   */
  bigqueryParquetUploadSubscriptionId = "";

  /**
   * @generated from field: string bigquery_streaming_write_subscription_id = 9;
   */
  bigqueryStreamingWriteSubscriptionId = "";

  /**
   * @generated from field: string bigquery_streaming_write_topic = 10;
   */
  bigqueryStreamingWriteTopic = "";

  /**
   * spelling;
   *
   * @generated from field: string bigquery_upload_bucket = 11 [deprecated = true];
   * @deprecated
   */
  bigqueryUploadBucket = "";

  /**
   * spelling;
   *
   * @generated from field: string bigquery_upload_topic = 12 [deprecated = true];
   * @deprecated
   */
  bigqueryUploadTopic = "";

  /**
   * @generated from field: string google_cloud_project = 13;
   */
  googleCloudProject = "";

  /**
   * @generated from field: string kafka_dlq_topic = 14;
   */
  kafkaDlqTopic = "";

  /**
   * @generated from field: string metrics_bus_subscription_id = 15;
   */
  metricsBusSubscriptionId = "";

  /**
   * @generated from field: string metrics_bus_topic_id = 16;
   */
  metricsBusTopicId = "";

  /**
   * @generated from field: string operation_subscription_id = 17;
   */
  operationSubscriptionId = "";

  /**
   * @generated from field: string query_log_result_topic = 18;
   */
  queryLogResultTopic = "";

  /**
   * @generated from field: string query_log_subscription_id = 19;
   */
  queryLogSubscriptionId = "";

  /**
   * @generated from field: string result_bus_metrics_subscription_id = 20;
   */
  resultBusMetricsSubscriptionId = "";

  /**
   * @generated from field: string result_bus_offline_store_subscription_id = 21;
   */
  resultBusOfflineStoreSubscriptionId = "";

  /**
   * @generated from field: string result_bus_online_store_subscription_id = 22;
   */
  resultBusOnlineStoreSubscriptionId = "";

  /**
   * @generated from field: string result_bus_topic_id = 23;
   */
  resultBusTopicId = "";

  /**
   * @generated from field: string usage_bus_topic_id = 24;
   */
  usageBusTopicId = "";

  /**
   * @generated from field: string usage_events_subscription_id = 25;
   */
  usageEventsSubscriptionId = "";

  /**
   * @generated from field: string bq_upload_bucket = 26;
   */
  bqUploadBucket = "";

  /**
   * @generated from field: string bq_upload_topic = 27;
   */
  bqUploadTopic = "";

  /**
   * @generated from field: bool include_chalk_node_selector = 28;
   */
  includeChalkNodeSelector = false;

  constructor(data?: PartialMessage<BackgroundPersistenceCommonSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BackgroundPersistenceCommonSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bus_writer_image_go", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bus_writer_image_python", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bus_writer_image_bswl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "service_account_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "bus_backend", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "secret_client", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "bigquery_parquet_upload_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "bigquery_streaming_write_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "bigquery_streaming_write_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "bigquery_upload_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "bigquery_upload_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "google_cloud_project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "kafka_dlq_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "metrics_bus_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "metrics_bus_topic_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "operation_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "query_log_result_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "query_log_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "result_bus_metrics_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "result_bus_offline_store_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "result_bus_online_store_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "result_bus_topic_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "usage_bus_topic_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "usage_events_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "bq_upload_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "bq_upload_topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "include_chalk_node_selector", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundPersistenceCommonSpecs {
    return new BackgroundPersistenceCommonSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundPersistenceCommonSpecs {
    return new BackgroundPersistenceCommonSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundPersistenceCommonSpecs {
    return new BackgroundPersistenceCommonSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundPersistenceCommonSpecs | PlainMessage<BackgroundPersistenceCommonSpecs> | undefined, b: BackgroundPersistenceCommonSpecs | PlainMessage<BackgroundPersistenceCommonSpecs> | undefined): boolean {
    return proto3.util.equals(BackgroundPersistenceCommonSpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BackgroundPersistenceWriterHpaSpecs
 */
export class BackgroundPersistenceWriterHpaSpecs extends Message<BackgroundPersistenceWriterHpaSpecs> {
  /**
   * @generated from field: string hpa_pubsub_subscription_id = 1;
   */
  hpaPubsubSubscriptionId = "";

  /**
   * @generated from field: optional int32 hpa_min_replicas = 2;
   */
  hpaMinReplicas?: number;

  /**
   * @generated from field: optional int32 hpa_max_replicas = 3;
   */
  hpaMaxReplicas?: number;

  /**
   * @generated from field: optional int32 hpa_target_average_value = 4;
   */
  hpaTargetAverageValue?: number;

  constructor(data?: PartialMessage<BackgroundPersistenceWriterHpaSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BackgroundPersistenceWriterHpaSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hpa_pubsub_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hpa_min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "hpa_max_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "hpa_target_average_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundPersistenceWriterHpaSpecs {
    return new BackgroundPersistenceWriterHpaSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundPersistenceWriterHpaSpecs {
    return new BackgroundPersistenceWriterHpaSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundPersistenceWriterHpaSpecs {
    return new BackgroundPersistenceWriterHpaSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundPersistenceWriterHpaSpecs | PlainMessage<BackgroundPersistenceWriterHpaSpecs> | undefined, b: BackgroundPersistenceWriterHpaSpecs | PlainMessage<BackgroundPersistenceWriterHpaSpecs> | undefined): boolean {
    return proto3.util.equals(BackgroundPersistenceWriterHpaSpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BackgroundPersistenceWriterSpecs
 */
export class BackgroundPersistenceWriterSpecs extends Message<BackgroundPersistenceWriterSpecs> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string image_override = 2;
   */
  imageOverride = "";

  /**
   * @generated from field: optional chalk.server.v1.BackgroundPersistenceWriterHpaSpecs hpa_specs = 3;
   */
  hpaSpecs?: BackgroundPersistenceWriterHpaSpecs;

  /**
   * @generated from field: optional bool gke_spot = 4;
   */
  gkeSpot?: boolean;

  /**
   * @generated from field: optional bool load_writer_configmap = 5;
   */
  loadWriterConfigmap?: boolean;

  /**
   * @generated from field: string version = 6;
   */
  version = "";

  /**
   * @generated from field: optional chalk.server.v1.KubeResourceConfig request = 7;
   */
  request?: KubeResourceConfig;

  /**
   * @generated from field: optional chalk.server.v1.KubeResourceConfig limit = 8;
   */
  limit?: KubeResourceConfig;

  /**
   * @generated from field: string bus_subscriber_type = 9;
   */
  busSubscriberType = "";

  /**
   * @generated from field: int32 default_replica_count = 10;
   */
  defaultReplicaCount = 0;

  /**
   * @generated from field: string kafka_consumer_group_override = 11;
   */
  kafkaConsumerGroupOverride = "";

  /**
   * @generated from field: optional int32 max_batch_size = 12;
   */
  maxBatchSize?: number;

  /**
   * @generated from field: optional int32 message_processing_concurrency = 13;
   */
  messageProcessingConcurrency?: number;

  /**
   * @generated from field: string metadata_sql_ssl_ca_cert_secret = 14;
   */
  metadataSqlSslCaCertSecret = "";

  /**
   * @generated from field: string metadata_sql_ssl_client_cert_secret = 15;
   */
  metadataSqlSslClientCertSecret = "";

  /**
   * @generated from field: string metadata_sql_ssl_client_key_secret = 16;
   */
  metadataSqlSslClientKeySecret = "";

  /**
   * @generated from field: string metadata_sql_uri_secret = 17;
   */
  metadataSqlUriSecret = "";

  /**
   * @generated from field: string offline_store_inserter_db_type = 18;
   */
  offlineStoreInserterDbType = "";

  /**
   * @generated from field: string storage_cache_prefix = 19;
   */
  storageCachePrefix = "";

  /**
   * @generated from field: string usage_store_uri = 20;
   */
  usageStoreUri = "";

  /**
   * @generated from field: optional bool results_writer_skip_producing_feature_metrics = 21;
   */
  resultsWriterSkipProducingFeatureMetrics?: boolean;

  constructor(data?: PartialMessage<BackgroundPersistenceWriterSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BackgroundPersistenceWriterSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image_override", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hpa_specs", kind: "message", T: BackgroundPersistenceWriterHpaSpecs, opt: true },
    { no: 4, name: "gke_spot", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "load_writer_configmap", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "request", kind: "message", T: KubeResourceConfig, opt: true },
    { no: 8, name: "limit", kind: "message", T: KubeResourceConfig, opt: true },
    { no: 9, name: "bus_subscriber_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "default_replica_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "kafka_consumer_group_override", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "max_batch_size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 13, name: "message_processing_concurrency", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 14, name: "metadata_sql_ssl_ca_cert_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "metadata_sql_ssl_client_cert_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "metadata_sql_ssl_client_key_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "metadata_sql_uri_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "offline_store_inserter_db_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "storage_cache_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "usage_store_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "results_writer_skip_producing_feature_metrics", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundPersistenceWriterSpecs {
    return new BackgroundPersistenceWriterSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundPersistenceWriterSpecs {
    return new BackgroundPersistenceWriterSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundPersistenceWriterSpecs {
    return new BackgroundPersistenceWriterSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundPersistenceWriterSpecs | PlainMessage<BackgroundPersistenceWriterSpecs> | undefined, b: BackgroundPersistenceWriterSpecs | PlainMessage<BackgroundPersistenceWriterSpecs> | undefined): boolean {
    return proto3.util.equals(BackgroundPersistenceWriterSpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.BackgroundPersistenceDeploymentSpecs
 */
export class BackgroundPersistenceDeploymentSpecs extends Message<BackgroundPersistenceDeploymentSpecs> {
  /**
   * @generated from field: chalk.server.v1.BackgroundPersistenceCommonSpecs common_persistence_specs = 1;
   */
  commonPersistenceSpecs?: BackgroundPersistenceCommonSpecs;

  /**
   * @generated from field: string api_server_host = 2;
   */
  apiServerHost = "";

  /**
   * @generated from field: string kafka_sasl_secret = 3;
   */
  kafkaSaslSecret = "";

  /**
   * @generated from field: string metadata_provider = 4;
   */
  metadataProvider = "";

  /**
   * @generated from field: string kafka_bootstrap_servers = 5;
   */
  kafkaBootstrapServers = "";

  /**
   * @generated from field: string kafka_security_protocol = 6;
   */
  kafkaSecurityProtocol = "";

  /**
   * @generated from field: string kafka_sasl_mechanism = 7;
   */
  kafkaSaslMechanism = "";

  /**
   * @generated from field: string redis_is_clustered = 8;
   */
  redisIsClustered = "";

  /**
   * @generated from field: string snowflake_storage_integration_name = 9;
   */
  snowflakeStorageIntegrationName = "";

  /**
   * @generated from field: bool redis_lightning_supports_has_many = 10;
   */
  redisLightningSupportsHasMany = false;

  /**
   * @generated from field: bool insecure = 11;
   */
  insecure = false;

  /**
   * @generated from field: repeated chalk.server.v1.BackgroundPersistenceWriterSpecs writers = 12;
   */
  writers: BackgroundPersistenceWriterSpecs[] = [];

  constructor(data?: PartialMessage<BackgroundPersistenceDeploymentSpecs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.BackgroundPersistenceDeploymentSpecs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common_persistence_specs", kind: "message", T: BackgroundPersistenceCommonSpecs },
    { no: 2, name: "api_server_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kafka_sasl_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "kafka_bootstrap_servers", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "kafka_security_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "kafka_sasl_mechanism", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "redis_is_clustered", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "snowflake_storage_integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "redis_lightning_supports_has_many", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "insecure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "writers", kind: "message", T: BackgroundPersistenceWriterSpecs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundPersistenceDeploymentSpecs {
    return new BackgroundPersistenceDeploymentSpecs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundPersistenceDeploymentSpecs {
    return new BackgroundPersistenceDeploymentSpecs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundPersistenceDeploymentSpecs {
    return new BackgroundPersistenceDeploymentSpecs().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundPersistenceDeploymentSpecs | PlainMessage<BackgroundPersistenceDeploymentSpecs> | undefined, b: BackgroundPersistenceDeploymentSpecs | PlainMessage<BackgroundPersistenceDeploymentSpecs> | undefined): boolean {
    return proto3.util.equals(BackgroundPersistenceDeploymentSpecs, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateClusterBackgroundPersistenceResponse
 */
export class CreateClusterBackgroundPersistenceResponse extends Message<CreateClusterBackgroundPersistenceResponse> {
  constructor(data?: PartialMessage<CreateClusterBackgroundPersistenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateClusterBackgroundPersistenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterBackgroundPersistenceResponse {
    return new CreateClusterBackgroundPersistenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterBackgroundPersistenceResponse {
    return new CreateClusterBackgroundPersistenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterBackgroundPersistenceResponse {
    return new CreateClusterBackgroundPersistenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterBackgroundPersistenceResponse | PlainMessage<CreateClusterBackgroundPersistenceResponse> | undefined, b: CreateClusterBackgroundPersistenceResponse | PlainMessage<CreateClusterBackgroundPersistenceResponse> | undefined): boolean {
    return proto3.util.equals(CreateClusterBackgroundPersistenceResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetSearchConfigRequest
 */
export class GetSearchConfigRequest extends Message<GetSearchConfigRequest> {
  constructor(data?: PartialMessage<GetSearchConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetSearchConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSearchConfigRequest {
    return new GetSearchConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSearchConfigRequest {
    return new GetSearchConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSearchConfigRequest {
    return new GetSearchConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSearchConfigRequest | PlainMessage<GetSearchConfigRequest> | undefined, b: GetSearchConfigRequest | PlainMessage<GetSearchConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetSearchConfigRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetSearchConfigResponse
 */
export class GetSearchConfigResponse extends Message<GetSearchConfigResponse> {
  /**
   * @generated from field: string team_id = 1;
   */
  teamId = "";

  /**
   * @generated from field: string team_api_key = 2;
   */
  teamApiKey = "";

  constructor(data?: PartialMessage<GetSearchConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetSearchConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "team_api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSearchConfigResponse {
    return new GetSearchConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSearchConfigResponse {
    return new GetSearchConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSearchConfigResponse {
    return new GetSearchConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSearchConfigResponse | PlainMessage<GetSearchConfigResponse> | undefined, b: GetSearchConfigResponse | PlainMessage<GetSearchConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetSearchConfigResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateEnvironmentVariablesRequest
 */
export class UpdateEnvironmentVariablesRequest extends Message<UpdateEnvironmentVariablesRequest> {
  /**
   * @generated from field: map<string, string> environment_variables = 1;
   */
  environmentVariables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateEnvironmentVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateEnvironmentVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnvironmentVariablesRequest {
    return new UpdateEnvironmentVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnvironmentVariablesRequest {
    return new UpdateEnvironmentVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnvironmentVariablesRequest {
    return new UpdateEnvironmentVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnvironmentVariablesRequest | PlainMessage<UpdateEnvironmentVariablesRequest> | undefined, b: UpdateEnvironmentVariablesRequest | PlainMessage<UpdateEnvironmentVariablesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEnvironmentVariablesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateEnvironmentVariablesResponse
 */
export class UpdateEnvironmentVariablesResponse extends Message<UpdateEnvironmentVariablesResponse> {
  constructor(data?: PartialMessage<UpdateEnvironmentVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateEnvironmentVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnvironmentVariablesResponse {
    return new UpdateEnvironmentVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnvironmentVariablesResponse {
    return new UpdateEnvironmentVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnvironmentVariablesResponse {
    return new UpdateEnvironmentVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnvironmentVariablesResponse | PlainMessage<UpdateEnvironmentVariablesResponse> | undefined, b: UpdateEnvironmentVariablesResponse | PlainMessage<UpdateEnvironmentVariablesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEnvironmentVariablesResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.StartBranchRequest
 */
export class StartBranchRequest extends Message<StartBranchRequest> {
  constructor(data?: PartialMessage<StartBranchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.StartBranchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartBranchRequest {
    return new StartBranchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartBranchRequest {
    return new StartBranchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartBranchRequest {
    return new StartBranchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartBranchRequest | PlainMessage<StartBranchRequest> | undefined, b: StartBranchRequest | PlainMessage<StartBranchRequest> | undefined): boolean {
    return proto3.util.equals(StartBranchRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.StartBranchResponse
 */
export class StartBranchResponse extends Message<StartBranchResponse> {
  /**
   * @generated from field: chalk.server.v1.BranchScalingState state = 1;
   */
  state = BranchScalingState.UNSPECIFIED;

  constructor(data?: PartialMessage<StartBranchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.StartBranchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(BranchScalingState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartBranchResponse {
    return new StartBranchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartBranchResponse {
    return new StartBranchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartBranchResponse {
    return new StartBranchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartBranchResponse | PlainMessage<StartBranchResponse> | undefined, b: StartBranchResponse | PlainMessage<StartBranchResponse> | undefined): boolean {
    return proto3.util.equals(StartBranchResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.KafkaTopic
 */
export class KafkaTopic extends Message<KafkaTopic> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 partitions = 2;
   */
  partitions = 0;

  /**
   * @generated from field: optional int32 replication = 3;
   */
  replication?: number;

  /**
   * @generated from field: int32 retention_ms = 4;
   */
  retentionMs = 0;

  constructor(data?: PartialMessage<KafkaTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.KafkaTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partitions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "replication", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "retention_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KafkaTopic {
    return new KafkaTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KafkaTopic {
    return new KafkaTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KafkaTopic {
    return new KafkaTopic().fromJsonString(jsonString, options);
  }

  static equals(a: KafkaTopic | PlainMessage<KafkaTopic> | undefined, b: KafkaTopic | PlainMessage<KafkaTopic> | undefined): boolean {
    return proto3.util.equals(KafkaTopic, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateKafkaTopicsRequest
 */
export class CreateKafkaTopicsRequest extends Message<CreateKafkaTopicsRequest> {
  /**
   * @generated from field: repeated chalk.server.v1.KafkaTopic topics = 1;
   */
  topics: KafkaTopic[] = [];

  constructor(data?: PartialMessage<CreateKafkaTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateKafkaTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: KafkaTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKafkaTopicsRequest {
    return new CreateKafkaTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKafkaTopicsRequest {
    return new CreateKafkaTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKafkaTopicsRequest {
    return new CreateKafkaTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKafkaTopicsRequest | PlainMessage<CreateKafkaTopicsRequest> | undefined, b: CreateKafkaTopicsRequest | PlainMessage<CreateKafkaTopicsRequest> | undefined): boolean {
    return proto3.util.equals(CreateKafkaTopicsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateKafkaTopicsResponse
 */
export class CreateKafkaTopicsResponse extends Message<CreateKafkaTopicsResponse> {
  constructor(data?: PartialMessage<CreateKafkaTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateKafkaTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKafkaTopicsResponse {
    return new CreateKafkaTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKafkaTopicsResponse {
    return new CreateKafkaTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKafkaTopicsResponse {
    return new CreateKafkaTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKafkaTopicsResponse | PlainMessage<CreateKafkaTopicsResponse> | undefined, b: CreateKafkaTopicsResponse | PlainMessage<CreateKafkaTopicsResponse> | undefined): boolean {
    return proto3.util.equals(CreateKafkaTopicsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKafkaTopicsRequest
 */
export class GetKafkaTopicsRequest extends Message<GetKafkaTopicsRequest> {
  constructor(data?: PartialMessage<GetKafkaTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKafkaTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKafkaTopicsRequest {
    return new GetKafkaTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKafkaTopicsRequest {
    return new GetKafkaTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKafkaTopicsRequest {
    return new GetKafkaTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKafkaTopicsRequest | PlainMessage<GetKafkaTopicsRequest> | undefined, b: GetKafkaTopicsRequest | PlainMessage<GetKafkaTopicsRequest> | undefined): boolean {
    return proto3.util.equals(GetKafkaTopicsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKafkaTopicsResponse
 */
export class GetKafkaTopicsResponse extends Message<GetKafkaTopicsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.KafkaTopic topics = 1;
   */
  topics: KafkaTopic[] = [];

  constructor(data?: PartialMessage<GetKafkaTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKafkaTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: KafkaTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKafkaTopicsResponse {
    return new GetKafkaTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKafkaTopicsResponse {
    return new GetKafkaTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKafkaTopicsResponse {
    return new GetKafkaTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKafkaTopicsResponse | PlainMessage<GetKafkaTopicsResponse> | undefined, b: GetKafkaTopicsResponse | PlainMessage<GetKafkaTopicsResponse> | undefined): boolean {
    return proto3.util.equals(GetKafkaTopicsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKarpenterNodepoolsRequest
 */
export class GetKarpenterNodepoolsRequest extends Message<GetKarpenterNodepoolsRequest> {
  constructor(data?: PartialMessage<GetKarpenterNodepoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKarpenterNodepoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKarpenterNodepoolsRequest {
    return new GetKarpenterNodepoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKarpenterNodepoolsRequest {
    return new GetKarpenterNodepoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKarpenterNodepoolsRequest {
    return new GetKarpenterNodepoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKarpenterNodepoolsRequest | PlainMessage<GetKarpenterNodepoolsRequest> | undefined, b: GetKarpenterNodepoolsRequest | PlainMessage<GetKarpenterNodepoolsRequest> | undefined): boolean {
    return proto3.util.equals(GetKarpenterNodepoolsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKarpenterNodepoolsResponse
 */
export class GetKarpenterNodepoolsResponse extends Message<GetKarpenterNodepoolsResponse> {
  /**
   * @generated from field: repeated chalk.nodepools.v1.KarpenterNodepool nodepools = 1;
   */
  nodepools: KarpenterNodepool[] = [];

  constructor(data?: PartialMessage<GetKarpenterNodepoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKarpenterNodepoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodepools", kind: "message", T: KarpenterNodepool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKarpenterNodepoolsResponse {
    return new GetKarpenterNodepoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKarpenterNodepoolsResponse {
    return new GetKarpenterNodepoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKarpenterNodepoolsResponse {
    return new GetKarpenterNodepoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKarpenterNodepoolsResponse | PlainMessage<GetKarpenterNodepoolsResponse> | undefined, b: GetKarpenterNodepoolsResponse | PlainMessage<GetKarpenterNodepoolsResponse> | undefined): boolean {
    return proto3.util.equals(GetKarpenterNodepoolsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.AddKarpenterNodepoolRequest
 */
export class AddKarpenterNodepoolRequest extends Message<AddKarpenterNodepoolRequest> {
  /**
   * @generated from field: chalk.nodepools.v1.KarpenterNodepool nodepool = 1;
   */
  nodepool?: KarpenterNodepool;

  constructor(data?: PartialMessage<AddKarpenterNodepoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AddKarpenterNodepoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodepool", kind: "message", T: KarpenterNodepool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddKarpenterNodepoolRequest {
    return new AddKarpenterNodepoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddKarpenterNodepoolRequest {
    return new AddKarpenterNodepoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddKarpenterNodepoolRequest {
    return new AddKarpenterNodepoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddKarpenterNodepoolRequest | PlainMessage<AddKarpenterNodepoolRequest> | undefined, b: AddKarpenterNodepoolRequest | PlainMessage<AddKarpenterNodepoolRequest> | undefined): boolean {
    return proto3.util.equals(AddKarpenterNodepoolRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.AddKarpenterNodepoolResponse
 */
export class AddKarpenterNodepoolResponse extends Message<AddKarpenterNodepoolResponse> {
  /**
   * @generated from field: chalk.nodepools.v1.KarpenterNodepool nodepool = 1;
   */
  nodepool?: KarpenterNodepool;

  constructor(data?: PartialMessage<AddKarpenterNodepoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.AddKarpenterNodepoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodepool", kind: "message", T: KarpenterNodepool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddKarpenterNodepoolResponse {
    return new AddKarpenterNodepoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddKarpenterNodepoolResponse {
    return new AddKarpenterNodepoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddKarpenterNodepoolResponse {
    return new AddKarpenterNodepoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddKarpenterNodepoolResponse | PlainMessage<AddKarpenterNodepoolResponse> | undefined, b: AddKarpenterNodepoolResponse | PlainMessage<AddKarpenterNodepoolResponse> | undefined): boolean {
    return proto3.util.equals(AddKarpenterNodepoolResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateKarpenterNodepoolRequest
 */
export class UpdateKarpenterNodepoolRequest extends Message<UpdateKarpenterNodepoolRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: chalk.nodepools.v1.KarpenterNodepool nodepool = 2;
   */
  nodepool?: KarpenterNodepool;

  constructor(data?: PartialMessage<UpdateKarpenterNodepoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateKarpenterNodepoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nodepool", kind: "message", T: KarpenterNodepool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateKarpenterNodepoolRequest {
    return new UpdateKarpenterNodepoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateKarpenterNodepoolRequest {
    return new UpdateKarpenterNodepoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateKarpenterNodepoolRequest {
    return new UpdateKarpenterNodepoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateKarpenterNodepoolRequest | PlainMessage<UpdateKarpenterNodepoolRequest> | undefined, b: UpdateKarpenterNodepoolRequest | PlainMessage<UpdateKarpenterNodepoolRequest> | undefined): boolean {
    return proto3.util.equals(UpdateKarpenterNodepoolRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateKarpenterNodepoolResponse
 */
export class UpdateKarpenterNodepoolResponse extends Message<UpdateKarpenterNodepoolResponse> {
  /**
   * @generated from field: chalk.nodepools.v1.KarpenterNodepool nodepool = 1;
   */
  nodepool?: KarpenterNodepool;

  constructor(data?: PartialMessage<UpdateKarpenterNodepoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateKarpenterNodepoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodepool", kind: "message", T: KarpenterNodepool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateKarpenterNodepoolResponse {
    return new UpdateKarpenterNodepoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateKarpenterNodepoolResponse {
    return new UpdateKarpenterNodepoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateKarpenterNodepoolResponse {
    return new UpdateKarpenterNodepoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateKarpenterNodepoolResponse | PlainMessage<UpdateKarpenterNodepoolResponse> | undefined, b: UpdateKarpenterNodepoolResponse | PlainMessage<UpdateKarpenterNodepoolResponse> | undefined): boolean {
    return proto3.util.equals(UpdateKarpenterNodepoolResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteKarpenterNodepoolRequest
 */
export class DeleteKarpenterNodepoolRequest extends Message<DeleteKarpenterNodepoolRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteKarpenterNodepoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteKarpenterNodepoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKarpenterNodepoolRequest {
    return new DeleteKarpenterNodepoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKarpenterNodepoolRequest {
    return new DeleteKarpenterNodepoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKarpenterNodepoolRequest {
    return new DeleteKarpenterNodepoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKarpenterNodepoolRequest | PlainMessage<DeleteKarpenterNodepoolRequest> | undefined, b: DeleteKarpenterNodepoolRequest | PlainMessage<DeleteKarpenterNodepoolRequest> | undefined): boolean {
    return proto3.util.equals(DeleteKarpenterNodepoolRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeleteKarpenterNodepoolResponse
 */
export class DeleteKarpenterNodepoolResponse extends Message<DeleteKarpenterNodepoolResponse> {
  constructor(data?: PartialMessage<DeleteKarpenterNodepoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeleteKarpenterNodepoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKarpenterNodepoolResponse {
    return new DeleteKarpenterNodepoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKarpenterNodepoolResponse {
    return new DeleteKarpenterNodepoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKarpenterNodepoolResponse {
    return new DeleteKarpenterNodepoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKarpenterNodepoolResponse | PlainMessage<DeleteKarpenterNodepoolResponse> | undefined, b: DeleteKarpenterNodepoolResponse | PlainMessage<DeleteKarpenterNodepoolResponse> | undefined): boolean {
    return proto3.util.equals(DeleteKarpenterNodepoolResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKarpenterInstallationMetadataRequest
 */
export class GetKarpenterInstallationMetadataRequest extends Message<GetKarpenterInstallationMetadataRequest> {
  constructor(data?: PartialMessage<GetKarpenterInstallationMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKarpenterInstallationMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKarpenterInstallationMetadataRequest {
    return new GetKarpenterInstallationMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKarpenterInstallationMetadataRequest {
    return new GetKarpenterInstallationMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKarpenterInstallationMetadataRequest {
    return new GetKarpenterInstallationMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKarpenterInstallationMetadataRequest | PlainMessage<GetKarpenterInstallationMetadataRequest> | undefined, b: GetKarpenterInstallationMetadataRequest | PlainMessage<GetKarpenterInstallationMetadataRequest> | undefined): boolean {
    return proto3.util.equals(GetKarpenterInstallationMetadataRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetKarpenterInstallationMetadataResponse
 */
export class GetKarpenterInstallationMetadataResponse extends Message<GetKarpenterInstallationMetadataResponse> {
  /**
   * @generated from field: map<string, string> deployment_labels = 1;
   */
  deploymentLabels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetKarpenterInstallationMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetKarpenterInstallationMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKarpenterInstallationMetadataResponse {
    return new GetKarpenterInstallationMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKarpenterInstallationMetadataResponse {
    return new GetKarpenterInstallationMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKarpenterInstallationMetadataResponse {
    return new GetKarpenterInstallationMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKarpenterInstallationMetadataResponse | PlainMessage<GetKarpenterInstallationMetadataResponse> | undefined, b: GetKarpenterInstallationMetadataResponse | PlainMessage<GetKarpenterInstallationMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetKarpenterInstallationMetadataResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DeploymentTag
 */
export class DeploymentTag extends Message<DeploymentTag> {
  /**
   * @generated from field: string tag = 1;
   */
  tag = "";

  /**
   * @generated from field: optional int32 weight = 2;
   */
  weight?: number;

  /**
   * @generated from field: optional string deployment_id = 3;
   */
  deploymentId?: string;

  constructor(data?: PartialMessage<DeploymentTag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DeploymentTag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentTag {
    return new DeploymentTag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentTag {
    return new DeploymentTag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentTag {
    return new DeploymentTag().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentTag | PlainMessage<DeploymentTag> | undefined, b: DeploymentTag | PlainMessage<DeploymentTag> | undefined): boolean {
    return proto3.util.equals(DeploymentTag, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTagWeightsRequest
 */
export class GetTagWeightsRequest extends Message<GetTagWeightsRequest> {
  constructor(data?: PartialMessage<GetTagWeightsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTagWeightsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTagWeightsRequest {
    return new GetTagWeightsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTagWeightsRequest {
    return new GetTagWeightsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTagWeightsRequest {
    return new GetTagWeightsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTagWeightsRequest | PlainMessage<GetTagWeightsRequest> | undefined, b: GetTagWeightsRequest | PlainMessage<GetTagWeightsRequest> | undefined): boolean {
    return proto3.util.equals(GetTagWeightsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTagWeightsResponse
 */
export class GetTagWeightsResponse extends Message<GetTagWeightsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.DeploymentTag tags = 1;
   */
  tags: DeploymentTag[] = [];

  constructor(data?: PartialMessage<GetTagWeightsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTagWeightsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "message", T: DeploymentTag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTagWeightsResponse {
    return new GetTagWeightsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTagWeightsResponse {
    return new GetTagWeightsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTagWeightsResponse {
    return new GetTagWeightsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTagWeightsResponse | PlainMessage<GetTagWeightsResponse> | undefined, b: GetTagWeightsResponse | PlainMessage<GetTagWeightsResponse> | undefined): boolean {
    return proto3.util.equals(GetTagWeightsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SetTagWeightsRequest
 */
export class SetTagWeightsRequest extends Message<SetTagWeightsRequest> {
  /**
   * @generated from field: repeated chalk.server.v1.DeploymentTag tags = 1;
   */
  tags: DeploymentTag[] = [];

  constructor(data?: PartialMessage<SetTagWeightsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SetTagWeightsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "message", T: DeploymentTag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTagWeightsRequest {
    return new SetTagWeightsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTagWeightsRequest {
    return new SetTagWeightsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTagWeightsRequest {
    return new SetTagWeightsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetTagWeightsRequest | PlainMessage<SetTagWeightsRequest> | undefined, b: SetTagWeightsRequest | PlainMessage<SetTagWeightsRequest> | undefined): boolean {
    return proto3.util.equals(SetTagWeightsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SetTagWeightsResponse
 */
export class SetTagWeightsResponse extends Message<SetTagWeightsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.DeploymentTag tags = 1;
   */
  tags: DeploymentTag[] = [];

  constructor(data?: PartialMessage<SetTagWeightsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SetTagWeightsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "message", T: DeploymentTag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTagWeightsResponse {
    return new SetTagWeightsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTagWeightsResponse {
    return new SetTagWeightsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTagWeightsResponse {
    return new SetTagWeightsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetTagWeightsResponse | PlainMessage<SetTagWeightsResponse> | undefined, b: SetTagWeightsResponse | PlainMessage<SetTagWeightsResponse> | undefined): boolean {
    return proto3.util.equals(SetTagWeightsResponse, a, b);
  }
}

