// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/performance_summary.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.ShardPerformanceSummary
 */
export class ShardPerformanceSummary extends Message<ShardPerformanceSummary> {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * @generated from field: int64 shard_id = 2;
   */
  shardId = protoInt64.zero;

  /**
   * This is called performance_summary in the DB,
   * but is a more comprehensive object where performance_summary is one of the fields
   *
   * @generated from field: google.protobuf.Struct performance_summary_with_query_config = 3;
   */
  performanceSummaryWithQueryConfig?: Struct;

  constructor(data?: PartialMessage<ShardPerformanceSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ShardPerformanceSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shard_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "performance_summary_with_query_config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShardPerformanceSummary {
    return new ShardPerformanceSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShardPerformanceSummary {
    return new ShardPerformanceSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShardPerformanceSummary {
    return new ShardPerformanceSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ShardPerformanceSummary | PlainMessage<ShardPerformanceSummary> | undefined, b: ShardPerformanceSummary | PlainMessage<ShardPerformanceSummary> | undefined): boolean {
    return proto3.util.equals(ShardPerformanceSummary, a, b);
  }
}

/**
 * Not directly used by any other proto, but used as page_token and next_page_token
 * after bytes are base64 encoded
 *
 * @generated from message chalk.server.v1.ListOfflineQueryShardPerformanceSummariesPageToken
 */
export class ListOfflineQueryShardPerformanceSummariesPageToken extends Message<ListOfflineQueryShardPerformanceSummariesPageToken> {
  /**
   * @generated from field: int64 shard_id_hwm = 1;
   */
  shardIdHwm = protoInt64.zero;

  constructor(data?: PartialMessage<ListOfflineQueryShardPerformanceSummariesPageToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListOfflineQueryShardPerformanceSummariesPageToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id_hwm", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOfflineQueryShardPerformanceSummariesPageToken {
    return new ListOfflineQueryShardPerformanceSummariesPageToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesPageToken {
    return new ListOfflineQueryShardPerformanceSummariesPageToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesPageToken {
    return new ListOfflineQueryShardPerformanceSummariesPageToken().fromJsonString(jsonString, options);
  }

  static equals(a: ListOfflineQueryShardPerformanceSummariesPageToken | PlainMessage<ListOfflineQueryShardPerformanceSummariesPageToken> | undefined, b: ListOfflineQueryShardPerformanceSummariesPageToken | PlainMessage<ListOfflineQueryShardPerformanceSummariesPageToken> | undefined): boolean {
    return proto3.util.equals(ListOfflineQueryShardPerformanceSummariesPageToken, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListOfflineQueryShardPerformanceSummariesRequest
 */
export class ListOfflineQueryShardPerformanceSummariesRequest extends Message<ListOfflineQueryShardPerformanceSummariesRequest> {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * expected to be an base64 encoded ListOfflineQueryShardPerformanceSummariesPageToken message
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOfflineQueryShardPerformanceSummariesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListOfflineQueryShardPerformanceSummariesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOfflineQueryShardPerformanceSummariesRequest {
    return new ListOfflineQueryShardPerformanceSummariesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesRequest {
    return new ListOfflineQueryShardPerformanceSummariesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesRequest {
    return new ListOfflineQueryShardPerformanceSummariesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOfflineQueryShardPerformanceSummariesRequest | PlainMessage<ListOfflineQueryShardPerformanceSummariesRequest> | undefined, b: ListOfflineQueryShardPerformanceSummariesRequest | PlainMessage<ListOfflineQueryShardPerformanceSummariesRequest> | undefined): boolean {
    return proto3.util.equals(ListOfflineQueryShardPerformanceSummariesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListOfflineQueryShardPerformanceSummariesResponse
 */
export class ListOfflineQueryShardPerformanceSummariesResponse extends Message<ListOfflineQueryShardPerformanceSummariesResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.ShardPerformanceSummary performance_summaries = 1;
   */
  performanceSummaries: ShardPerformanceSummary[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOfflineQueryShardPerformanceSummariesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListOfflineQueryShardPerformanceSummariesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "performance_summaries", kind: "message", T: ShardPerformanceSummary, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOfflineQueryShardPerformanceSummariesResponse {
    return new ListOfflineQueryShardPerformanceSummariesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesResponse {
    return new ListOfflineQueryShardPerformanceSummariesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOfflineQueryShardPerformanceSummariesResponse {
    return new ListOfflineQueryShardPerformanceSummariesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOfflineQueryShardPerformanceSummariesResponse | PlainMessage<ListOfflineQueryShardPerformanceSummariesResponse> | undefined, b: ListOfflineQueryShardPerformanceSummariesResponse | PlainMessage<ListOfflineQueryShardPerformanceSummariesResponse> | undefined): boolean {
    return proto3.util.equals(ListOfflineQueryShardPerformanceSummariesResponse, a, b);
  }
}

