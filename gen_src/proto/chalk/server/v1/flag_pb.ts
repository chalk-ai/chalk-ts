// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/flag.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.server.v1.FlagScope
 */
export enum FlagScope {
  /**
   * @generated from enum value: FLAG_SCOPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FLAG_SCOPE_TEAM = 1;
   */
  TEAM = 1,

  /**
   * @generated from enum value: FLAG_SCOPE_ENVIRONMENT = 2;
   */
  ENVIRONMENT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FlagScope)
proto3.util.setEnumType(FlagScope, "chalk.server.v1.FlagScope", [
  { no: 0, name: "FLAG_SCOPE_UNSPECIFIED" },
  { no: 1, name: "FLAG_SCOPE_TEAM" },
  { no: 2, name: "FLAG_SCOPE_ENVIRONMENT" },
]);

/**
 * @generated from message chalk.server.v1.FeatureFlagValue
 */
export class FeatureFlagValue extends Message<FeatureFlagValue> {
  /**
   * @generated from field: string flag = 1;
   */
  flag = "";

  /**
   * @generated from field: bool value = 2;
   */
  value = false;

  constructor(data?: PartialMessage<FeatureFlagValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.FeatureFlagValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureFlagValue {
    return new FeatureFlagValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureFlagValue {
    return new FeatureFlagValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureFlagValue {
    return new FeatureFlagValue().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureFlagValue | PlainMessage<FeatureFlagValue> | undefined, b: FeatureFlagValue | PlainMessage<FeatureFlagValue> | undefined): boolean {
    return proto3.util.equals(FeatureFlagValue, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeatureFlagsRequest
 */
export class GetFeatureFlagsRequest extends Message<GetFeatureFlagsRequest> {
  constructor(data?: PartialMessage<GetFeatureFlagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeatureFlagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureFlagsRequest | PlainMessage<GetFeatureFlagsRequest> | undefined, b: GetFeatureFlagsRequest | PlainMessage<GetFeatureFlagsRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureFlagsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetFeatureFlagsResponse
 */
export class GetFeatureFlagsResponse extends Message<GetFeatureFlagsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.FeatureFlagValue flags = 1;
   */
  flags: FeatureFlagValue[] = [];

  constructor(data?: PartialMessage<GetFeatureFlagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetFeatureFlagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "message", T: FeatureFlagValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureFlagsResponse | PlainMessage<GetFeatureFlagsResponse> | undefined, b: GetFeatureFlagsResponse | PlainMessage<GetFeatureFlagsResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureFlagsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SetFeatureFlagRequest
 */
export class SetFeatureFlagRequest extends Message<SetFeatureFlagRequest> {
  /**
   * @generated from field: string flag = 1;
   */
  flag = "";

  /**
   * @generated from field: bool value = 2;
   */
  value = false;

  /**
   * @generated from field: chalk.server.v1.FlagScope scope = 3;
   */
  scope = FlagScope.UNSPECIFIED;

  constructor(data?: PartialMessage<SetFeatureFlagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SetFeatureFlagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "scope", kind: "enum", T: proto3.getEnumType(FlagScope) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetFeatureFlagRequest {
    return new SetFeatureFlagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetFeatureFlagRequest {
    return new SetFeatureFlagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetFeatureFlagRequest {
    return new SetFeatureFlagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetFeatureFlagRequest | PlainMessage<SetFeatureFlagRequest> | undefined, b: SetFeatureFlagRequest | PlainMessage<SetFeatureFlagRequest> | undefined): boolean {
    return proto3.util.equals(SetFeatureFlagRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SetFeatureFlagResponse
 */
export class SetFeatureFlagResponse extends Message<SetFeatureFlagResponse> {
  constructor(data?: PartialMessage<SetFeatureFlagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SetFeatureFlagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetFeatureFlagResponse {
    return new SetFeatureFlagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetFeatureFlagResponse {
    return new SetFeatureFlagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetFeatureFlagResponse {
    return new SetFeatureFlagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetFeatureFlagResponse | PlainMessage<SetFeatureFlagResponse> | undefined, b: SetFeatureFlagResponse | PlainMessage<SetFeatureFlagResponse> | undefined): boolean {
    return proto3.util.equals(SetFeatureFlagResponse, a, b);
  }
}

