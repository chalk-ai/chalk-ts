// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/auth.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.server.v1.GetTokenRequest
 */
export class GetTokenRequest extends Message<GetTokenRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret = "";

  /**
   * @generated from field: string grant_type = 3;
   */
  grantType = "";

  /**
   * @generated from field: optional string scope = 4;
   */
  scope?: string;

  constructor(data?: PartialMessage<GetTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "grant_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTokenRequest | PlainMessage<GetTokenRequest> | undefined, b: GetTokenRequest | PlainMessage<GetTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetTokenRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetTokenResponse
 */
export class GetTokenResponse extends Message<GetTokenResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string token_type = 2;
   */
  tokenType = "";

  /**
   * @generated from field: int32 expires_in = 3;
   */
  expiresIn = 0;

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 4;
   */
  expiresAt?: Timestamp;

  /**
   * @generated from field: string api_server = 5;
   */
  apiServer = "";

  /**
   * @generated from field: optional string primary_environment = 6;
   */
  primaryEnvironment?: string;

  /**
   * Maps of environment_id --> url
   *
   * @generated from field: map<string, string> engines = 7;
   */
  engines: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> grpc_engines = 8;
   */
  grpcEngines: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> environment_id_to_name = 9;
   */
  environmentIdToName: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_in", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "expires_at", kind: "message", T: Timestamp },
    { no: 5, name: "api_server", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "primary_environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "engines", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "grpc_engines", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "environment_id_to_name", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTokenResponse | PlainMessage<GetTokenResponse> | undefined, b: GetTokenResponse | PlainMessage<GetTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetTokenResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateLinkSessionRequest
 */
export class UpdateLinkSessionRequest extends Message<UpdateLinkSessionRequest> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string session_id = 3;
   */
  sessionId = "";

  constructor(data?: PartialMessage<UpdateLinkSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateLinkSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLinkSessionRequest {
    return new UpdateLinkSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLinkSessionRequest {
    return new UpdateLinkSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLinkSessionRequest {
    return new UpdateLinkSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLinkSessionRequest | PlainMessage<UpdateLinkSessionRequest> | undefined, b: UpdateLinkSessionRequest | PlainMessage<UpdateLinkSessionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateLinkSessionRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.UpdateLinkSessionResponse
 */
export class UpdateLinkSessionResponse extends Message<UpdateLinkSessionResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UpdateLinkSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.UpdateLinkSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLinkSessionResponse {
    return new UpdateLinkSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLinkSessionResponse {
    return new UpdateLinkSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLinkSessionResponse {
    return new UpdateLinkSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLinkSessionResponse | PlainMessage<UpdateLinkSessionResponse> | undefined, b: UpdateLinkSessionResponse | PlainMessage<UpdateLinkSessionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateLinkSessionResponse, a, b);
  }
}

