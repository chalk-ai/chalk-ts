// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/billing.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Chart } from "./chart_pb";
import { MachineRate } from "../../usage/v1/rate_pb";
import { NodeStatusPubSub } from "../../pubsub/v1/node_status_pb";
import { PodStatusPubSub } from "../../pubsub/v1/pod_status_pb";
import { KubernetesNodeData } from "../../kubernetes/v1/nodes_pb";
import { KubernetesPodData } from "../../kubernetes/v1/pods_pb";

/**
 * @generated from enum chalk.server.v1.UsageChartPeriod
 */
export enum UsageChartPeriod {
  /**
   * @generated from enum value: USAGE_CHART_PERIOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USAGE_CHART_PERIOD_DAILY = 1;
   */
  DAILY = 1,

  /**
   * @generated from enum value: USAGE_CHART_PERIOD_MONTHLY = 2;
   */
  MONTHLY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UsageChartPeriod)
proto3.util.setEnumType(UsageChartPeriod, "chalk.server.v1.UsageChartPeriod", [
  { no: 0, name: "USAGE_CHART_PERIOD_UNSPECIFIED" },
  { no: 1, name: "USAGE_CHART_PERIOD_DAILY" },
  { no: 2, name: "USAGE_CHART_PERIOD_MONTHLY" },
]);

/**
 * @generated from enum chalk.server.v1.UsageChartGrouping
 */
export enum UsageChartGrouping {
  /**
   * @generated from enum value: USAGE_CHART_GROUPING_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USAGE_CHART_GROUPING_INSTANCE_TYPE = 1;
   */
  INSTANCE_TYPE = 1,

  /**
   * @generated from enum value: USAGE_CHART_GROUPING_CLUSTER = 2;
   */
  CLUSTER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UsageChartGrouping)
proto3.util.setEnumType(UsageChartGrouping, "chalk.server.v1.UsageChartGrouping", [
  { no: 0, name: "USAGE_CHART_GROUPING_UNSPECIFIED" },
  { no: 1, name: "USAGE_CHART_GROUPING_INSTANCE_TYPE" },
  { no: 2, name: "USAGE_CHART_GROUPING_CLUSTER" },
]);

/**
 * @generated from message chalk.server.v1.GetUsageChartRequest
 */
export class GetUsageChartRequest extends Message<GetUsageChartRequest> {
  /**
   * @generated from field: optional int64 start_ms = 1;
   */
  startMs?: bigint;

  /**
   * @generated from field: optional int64 end_ms = 2;
   */
  endMs?: bigint;

  /**
   * @generated from field: optional chalk.server.v1.UsageChartPeriod period = 3;
   */
  period?: UsageChartPeriod;

  /**
   * @generated from field: optional chalk.server.v1.UsageChartGrouping grouping = 4;
   */
  grouping?: UsageChartGrouping;

  constructor(data?: PartialMessage<GetUsageChartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUsageChartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "end_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "period", kind: "enum", T: proto3.getEnumType(UsageChartPeriod), opt: true },
    { no: 4, name: "grouping", kind: "enum", T: proto3.getEnumType(UsageChartGrouping), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageChartRequest {
    return new GetUsageChartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageChartRequest {
    return new GetUsageChartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageChartRequest {
    return new GetUsageChartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsageChartRequest | PlainMessage<GetUsageChartRequest> | undefined, b: GetUsageChartRequest | PlainMessage<GetUsageChartRequest> | undefined): boolean {
    return proto3.util.equals(GetUsageChartRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetUsageChartResponse
 */
export class GetUsageChartResponse extends Message<GetUsageChartResponse> {
  /**
   * @generated from field: chalk.server.v1.Chart chart = 1;
   */
  chart?: Chart;

  constructor(data?: PartialMessage<GetUsageChartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUsageChartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "message", T: Chart },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageChartResponse {
    return new GetUsageChartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageChartResponse {
    return new GetUsageChartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageChartResponse {
    return new GetUsageChartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsageChartResponse | PlainMessage<GetUsageChartResponse> | undefined, b: GetUsageChartResponse | PlainMessage<GetUsageChartResponse> | undefined): boolean {
    return proto3.util.equals(GetUsageChartResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetUtilizationRatesRequest
 */
export class GetUtilizationRatesRequest extends Message<GetUtilizationRatesRequest> {
  constructor(data?: PartialMessage<GetUtilizationRatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUtilizationRatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUtilizationRatesRequest {
    return new GetUtilizationRatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUtilizationRatesRequest {
    return new GetUtilizationRatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUtilizationRatesRequest {
    return new GetUtilizationRatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUtilizationRatesRequest | PlainMessage<GetUtilizationRatesRequest> | undefined, b: GetUtilizationRatesRequest | PlainMessage<GetUtilizationRatesRequest> | undefined): boolean {
    return proto3.util.equals(GetUtilizationRatesRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetUtilizationRatesResponse
 */
export class GetUtilizationRatesResponse extends Message<GetUtilizationRatesResponse> {
  /**
   * @generated from field: repeated chalk.usage.v1.MachineRate rates = 1;
   */
  rates: MachineRate[] = [];

  constructor(data?: PartialMessage<GetUtilizationRatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetUtilizationRatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rates", kind: "message", T: MachineRate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUtilizationRatesResponse {
    return new GetUtilizationRatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUtilizationRatesResponse {
    return new GetUtilizationRatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUtilizationRatesResponse {
    return new GetUtilizationRatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUtilizationRatesResponse | PlainMessage<GetUtilizationRatesResponse> | undefined, b: GetUtilizationRatesResponse | PlainMessage<GetUtilizationRatesResponse> | undefined): boolean {
    return proto3.util.equals(GetUtilizationRatesResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNodesAndPodsRequest
 */
export class GetNodesAndPodsRequest extends Message<GetNodesAndPodsRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: optional string pod_label_selector = 2;
   */
  podLabelSelector?: string;

  /**
   * @generated from field: optional string environment_id = 3;
   */
  environmentId?: string;

  constructor(data?: PartialMessage<GetNodesAndPodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNodesAndPodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pod_label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesAndPodsRequest {
    return new GetNodesAndPodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesAndPodsRequest {
    return new GetNodesAndPodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesAndPodsRequest {
    return new GetNodesAndPodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesAndPodsRequest | PlainMessage<GetNodesAndPodsRequest> | undefined, b: GetNodesAndPodsRequest | PlainMessage<GetNodesAndPodsRequest> | undefined): boolean {
    return proto3.util.equals(GetNodesAndPodsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNodesAndPodsResponse
 */
export class GetNodesAndPodsResponse extends Message<GetNodesAndPodsResponse> {
  /**
   * @generated from field: repeated chalk.pubsub.v1.NodeStatusPubSub nodes = 1;
   */
  nodes: NodeStatusPubSub[] = [];

  /**
   * @generated from field: repeated chalk.pubsub.v1.PodStatusPubSub pods = 2;
   */
  pods: PodStatusPubSub[] = [];

  constructor(data?: PartialMessage<GetNodesAndPodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNodesAndPodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: NodeStatusPubSub, repeated: true },
    { no: 2, name: "pods", kind: "message", T: PodStatusPubSub, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesAndPodsResponse {
    return new GetNodesAndPodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesAndPodsResponse {
    return new GetNodesAndPodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesAndPodsResponse {
    return new GetNodesAndPodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesAndPodsResponse | PlainMessage<GetNodesAndPodsResponse> | undefined, b: GetNodesAndPodsResponse | PlainMessage<GetNodesAndPodsResponse> | undefined): boolean {
    return proto3.util.equals(GetNodesAndPodsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNodesAndPodsUIRequest
 */
export class GetNodesAndPodsUIRequest extends Message<GetNodesAndPodsUIRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: optional string pod_label_selector = 2;
   */
  podLabelSelector?: string;

  /**
   * @generated from field: optional string environment_id = 3;
   */
  environmentId?: string;

  constructor(data?: PartialMessage<GetNodesAndPodsUIRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNodesAndPodsUIRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pod_label_selector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesAndPodsUIRequest {
    return new GetNodesAndPodsUIRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesAndPodsUIRequest {
    return new GetNodesAndPodsUIRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesAndPodsUIRequest {
    return new GetNodesAndPodsUIRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesAndPodsUIRequest | PlainMessage<GetNodesAndPodsUIRequest> | undefined, b: GetNodesAndPodsUIRequest | PlainMessage<GetNodesAndPodsUIRequest> | undefined): boolean {
    return proto3.util.equals(GetNodesAndPodsUIRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetNodesAndPodsUIResponse
 */
export class GetNodesAndPodsUIResponse extends Message<GetNodesAndPodsUIResponse> {
  /**
   * @generated from field: repeated chalk.kubernetes.v1.KubernetesNodeData nodes = 1;
   */
  nodes: KubernetesNodeData[] = [];

  /**
   * @generated from field: repeated chalk.kubernetes.v1.KubernetesPodData pods = 2;
   */
  pods: KubernetesPodData[] = [];

  constructor(data?: PartialMessage<GetNodesAndPodsUIResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetNodesAndPodsUIResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: KubernetesNodeData, repeated: true },
    { no: 2, name: "pods", kind: "message", T: KubernetesPodData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesAndPodsUIResponse {
    return new GetNodesAndPodsUIResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesAndPodsUIResponse {
    return new GetNodesAndPodsUIResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesAndPodsUIResponse {
    return new GetNodesAndPodsUIResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesAndPodsUIResponse | PlainMessage<GetNodesAndPodsUIResponse> | undefined, b: GetNodesAndPodsUIResponse | PlainMessage<GetNodesAndPodsUIResponse> | undefined): boolean {
    return proto3.util.equals(GetNodesAndPodsUIResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SyncUtilizationRequest
 */
export class SyncUtilizationRequest extends Message<SyncUtilizationRequest> {
  constructor(data?: PartialMessage<SyncUtilizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SyncUtilizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncUtilizationRequest {
    return new SyncUtilizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncUtilizationRequest {
    return new SyncUtilizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncUtilizationRequest {
    return new SyncUtilizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncUtilizationRequest | PlainMessage<SyncUtilizationRequest> | undefined, b: SyncUtilizationRequest | PlainMessage<SyncUtilizationRequest> | undefined): boolean {
    return proto3.util.equals(SyncUtilizationRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.SyncUtilizationResponse
 */
export class SyncUtilizationResponse extends Message<SyncUtilizationResponse> {
  constructor(data?: PartialMessage<SyncUtilizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.SyncUtilizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncUtilizationResponse {
    return new SyncUtilizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncUtilizationResponse {
    return new SyncUtilizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncUtilizationResponse {
    return new SyncUtilizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncUtilizationResponse | PlainMessage<SyncUtilizationResponse> | undefined, b: SyncUtilizationResponse | PlainMessage<SyncUtilizationResponse> | undefined): boolean {
    return proto3.util.equals(SyncUtilizationResponse, a, b);
  }
}

