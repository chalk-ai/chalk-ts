// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/datasets.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp, Value } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.server.v1.DatasetRevisionStatus
 */
export enum DatasetRevisionStatus {
  /**
   * @generated from enum value: DATASET_REVISION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_WORKING = 2;
   */
  WORKING = 2,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_CANCELED = 5;
   */
  CANCELED = 5,

  /**
   * @generated from enum value: DATASET_REVISION_STATUS_QUEUED = 6;
   */
  QUEUED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(DatasetRevisionStatus)
proto3.util.setEnumType(DatasetRevisionStatus, "chalk.server.v1.DatasetRevisionStatus", [
  { no: 0, name: "DATASET_REVISION_STATUS_UNSPECIFIED" },
  { no: 1, name: "DATASET_REVISION_STATUS_UNKNOWN" },
  { no: 2, name: "DATASET_REVISION_STATUS_WORKING" },
  { no: 3, name: "DATASET_REVISION_STATUS_COMPLETED" },
  { no: 4, name: "DATASET_REVISION_STATUS_FAILED" },
  { no: 5, name: "DATASET_REVISION_STATUS_CANCELED" },
  { no: 6, name: "DATASET_REVISION_STATUS_QUEUED" },
]);

/**
 * @generated from enum chalk.server.v1.DatasetVersion
 */
export enum DatasetVersion {
  /**
   * @generated from enum value: DATASET_VERSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATASET_VERSION_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES = 2;
   */
  BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES = 2,

  /**
   * @generated from enum value: DATASET_VERSION_DATASET_WRITER = 3;
   */
  DATASET_WRITER = 3,

  /**
   * @generated from enum value: DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2 = 4;
   */
  BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2 = 4,

  /**
   * @generated from enum value: DATASET_VERSION_COMPUTE_RESOLVER_OUTPUT_V1 = 5;
   */
  COMPUTE_RESOLVER_OUTPUT_V1 = 5,

  /**
   * @generated from enum value: DATASET_VERSION_NATIVE_DTYPES = 6;
   */
  NATIVE_DTYPES = 6,

  /**
   * @generated from enum value: DATASET_VERSION_NATIVE_COLUMN_NAMES = 7;
   */
  NATIVE_COLUMN_NAMES = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(DatasetVersion)
proto3.util.setEnumType(DatasetVersion, "chalk.server.v1.DatasetVersion", [
  { no: 0, name: "DATASET_VERSION_UNSPECIFIED" },
  { no: 1, name: "DATASET_VERSION_UNKNOWN" },
  { no: 2, name: "DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES" },
  { no: 3, name: "DATASET_VERSION_DATASET_WRITER" },
  { no: 4, name: "DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2" },
  { no: 5, name: "DATASET_VERSION_COMPUTE_RESOLVER_OUTPUT_V1" },
  { no: 6, name: "DATASET_VERSION_NATIVE_DTYPES" },
  { no: 7, name: "DATASET_VERSION_NATIVE_COLUMN_NAMES" },
]);

/**
 * @generated from enum chalk.server.v1.OfflineQueryGivensVersion
 */
export enum OfflineQueryGivensVersion {
  /**
   * @generated from enum value: OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OFFLINE_QUERY_GIVENS_VERSION_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: OFFLINE_QUERY_GIVENS_VERSION_NATIVE_TS_FEATURE_FOR_ROOT_NS = 2;
   */
  NATIVE_TS_FEATURE_FOR_ROOT_NS = 2,

  /**
   * @generated from enum value: OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME = 3;
   */
  SINGLE_TS_COL_NAME = 3,

  /**
   * @generated from enum value: OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME_WITH_URI_PREFIX = 4;
   */
  SINGLE_TS_COL_NAME_WITH_URI_PREFIX = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(OfflineQueryGivensVersion)
proto3.util.setEnumType(OfflineQueryGivensVersion, "chalk.server.v1.OfflineQueryGivensVersion", [
  { no: 0, name: "OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED" },
  { no: 1, name: "OFFLINE_QUERY_GIVENS_VERSION_UNKNOWN" },
  { no: 2, name: "OFFLINE_QUERY_GIVENS_VERSION_NATIVE_TS_FEATURE_FOR_ROOT_NS" },
  { no: 3, name: "OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME" },
  { no: 4, name: "OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME_WITH_URI_PREFIX" },
]);

/**
 * @generated from message chalk.server.v1.DatasetRevisionMeta
 */
export class DatasetRevisionMeta extends Message<DatasetRevisionMeta> {
  /**
   * @generated from field: int64 numeric_id = 1;
   */
  numericId = protoInt64.zero;

  /**
   * @generated from field: string offline_query_id = 2;
   */
  offlineQueryId = "";

  /**
   * @generated from field: string dataset_id = 3;
   */
  datasetId = "";

  /**
   * @generated from field: optional string givens_uri = 4;
   */
  givensUri?: string;

  /**
   * @generated from field: optional chalk.server.v1.OfflineQueryGivensVersion givens_version = 5;
   */
  givensVersion?: OfflineQueryGivensVersion;

  /**
   * @generated from field: optional string output_uri = 6;
   */
  outputUri?: string;

  /**
   * @generated from field: optional chalk.server.v1.DatasetVersion output_version = 7;
   */
  outputVersion?: DatasetVersion;

  /**
   * @generated from field: optional string branch_name = 8;
   */
  branchName?: string;

  /**
   * @generated from field: optional int64 num_rows = 9;
   */
  numRows?: bigint;

  /**
   * @generated from field: optional int64 physical_size_bytes = 10;
   */
  physicalSizeBytes?: bigint;

  /**
   * @generated from field: repeated string output_columns = 11;
   */
  outputColumns: string[] = [];

  /**
   * @generated from field: repeated string output_fqns = 12;
   */
  outputFqns: string[] = [];

  /**
   * @generated from field: optional string agent_id = 13;
   */
  agentId?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp completed_at = 14;
   */
  completedAt?: Timestamp;

  /**
   * @generated from field: optional int64 num_shards = 15;
   */
  numShards?: bigint;

  /**
   * @generated from field: optional int64 num_computers = 16;
   */
  numComputers?: bigint;

  /**
   * @generated from field: optional google.protobuf.Value metadata = 17;
   */
  metadata?: Value;

  /**
   * possibly deprecated?
   *
   * @generated from field: optional chalk.server.v1.DatasetRevisionStatus status = 18;
   */
  status?: DatasetRevisionStatus;

  /**
   * @generated from field: optional int64 num_rows_calculated = 19;
   */
  numRowsCalculated?: bigint;

  /**
   * @generated from field: optional int64 physical_size_bytes_calculated = 20;
   */
  physicalSizeBytesCalculated?: bigint;

  /**
   * @generated from field: optional google.protobuf.Timestamp created_at = 21;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<DatasetRevisionMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DatasetRevisionMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "offline_query_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "givens_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "givens_version", kind: "enum", T: proto3.getEnumType(OfflineQueryGivensVersion), opt: true },
    { no: 6, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "output_version", kind: "enum", T: proto3.getEnumType(DatasetVersion), opt: true },
    { no: 8, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "num_rows", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 10, name: "physical_size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 11, name: "output_columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "output_fqns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "agent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "completed_at", kind: "message", T: Timestamp, opt: true },
    { no: 15, name: "num_shards", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 16, name: "num_computers", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 17, name: "metadata", kind: "message", T: Value, opt: true },
    { no: 18, name: "status", kind: "enum", T: proto3.getEnumType(DatasetRevisionStatus), opt: true },
    { no: 19, name: "num_rows_calculated", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 20, name: "physical_size_bytes_calculated", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 21, name: "created_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetRevisionMeta {
    return new DatasetRevisionMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetRevisionMeta {
    return new DatasetRevisionMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetRevisionMeta {
    return new DatasetRevisionMeta().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetRevisionMeta | PlainMessage<DatasetRevisionMeta> | undefined, b: DatasetRevisionMeta | PlainMessage<DatasetRevisionMeta> | undefined): boolean {
    return proto3.util.equals(DatasetRevisionMeta, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.DatasetMeta
 */
export class DatasetMeta extends Message<DatasetMeta> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: optional string dataset_name = 3;
   */
  datasetName?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional chalk.server.v1.DatasetRevisionMeta most_recent_revision = 7;
   */
  mostRecentRevision?: DatasetRevisionMeta;

  constructor(data?: PartialMessage<DatasetMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.DatasetMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "most_recent_revision", kind: "message", T: DatasetRevisionMeta, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetMeta {
    return new DatasetMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetMeta {
    return new DatasetMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetMeta {
    return new DatasetMeta().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetMeta | PlainMessage<DatasetMeta> | undefined, b: DatasetMeta | PlainMessage<DatasetMeta> | undefined): boolean {
    return proto3.util.equals(DatasetMeta, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDatasetsRequest
 */
export class ListDatasetsRequest extends Message<ListDatasetsRequest> {
  /**
   * @generated from field: optional string cursor = 1;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  /**
   * @generated from field: optional string search = 3;
   */
  search?: string;

  constructor(data?: PartialMessage<ListDatasetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDatasetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetsRequest {
    return new ListDatasetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined, b: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDatasetsResponse
 */
export class ListDatasetsResponse extends Message<ListDatasetsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.DatasetMeta datasets = 1;
   */
  datasets: DatasetMeta[] = [];

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  constructor(data?: PartialMessage<ListDatasetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDatasetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasets", kind: "message", T: DatasetMeta, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetsResponse {
    return new ListDatasetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetsResponse {
    return new ListDatasetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetsResponse {
    return new ListDatasetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetsResponse | PlainMessage<ListDatasetsResponse> | undefined, b: ListDatasetsResponse | PlainMessage<ListDatasetsResponse> | undefined): boolean {
    return proto3.util.equals(ListDatasetsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDatasetRequest
 */
export class GetDatasetRequest extends Message<GetDatasetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetDatasetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDatasetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRequest {
    return new GetDatasetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined, b: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDatasetResponse
 */
export class GetDatasetResponse extends Message<GetDatasetResponse> {
  /**
   * @generated from field: chalk.server.v1.DatasetMeta dataset = 1;
   */
  dataset?: DatasetMeta;

  constructor(data?: PartialMessage<GetDatasetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDatasetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset", kind: "message", T: DatasetMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetResponse {
    return new GetDatasetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetResponse {
    return new GetDatasetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetResponse {
    return new GetDatasetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined, b: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined): boolean {
    return proto3.util.equals(GetDatasetResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDatasetRevisionsRequest
 */
export class ListDatasetRevisionsRequest extends Message<ListDatasetRevisionsRequest> {
  /**
   * @generated from field: string dataset_id = 1;
   */
  datasetId = "";

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  /**
   * @generated from field: optional int32 limit = 3;
   */
  limit?: number;

  constructor(data?: PartialMessage<ListDatasetRevisionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDatasetRevisionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetRevisionsRequest {
    return new ListDatasetRevisionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetRevisionsRequest {
    return new ListDatasetRevisionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetRevisionsRequest {
    return new ListDatasetRevisionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetRevisionsRequest | PlainMessage<ListDatasetRevisionsRequest> | undefined, b: ListDatasetRevisionsRequest | PlainMessage<ListDatasetRevisionsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatasetRevisionsRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.ListDatasetRevisionsResponse
 */
export class ListDatasetRevisionsResponse extends Message<ListDatasetRevisionsResponse> {
  /**
   * @generated from field: repeated chalk.server.v1.DatasetRevisionMeta revisions = 1;
   */
  revisions: DatasetRevisionMeta[] = [];

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  constructor(data?: PartialMessage<ListDatasetRevisionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.ListDatasetRevisionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revisions", kind: "message", T: DatasetRevisionMeta, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetRevisionsResponse {
    return new ListDatasetRevisionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetRevisionsResponse {
    return new ListDatasetRevisionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetRevisionsResponse {
    return new ListDatasetRevisionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatasetRevisionsResponse | PlainMessage<ListDatasetRevisionsResponse> | undefined, b: ListDatasetRevisionsResponse | PlainMessage<ListDatasetRevisionsResponse> | undefined): boolean {
    return proto3.util.equals(ListDatasetRevisionsResponse, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDatasetRevisionRequest
 */
export class GetDatasetRevisionRequest extends Message<GetDatasetRevisionRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetDatasetRevisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDatasetRevisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRevisionRequest {
    return new GetDatasetRevisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRevisionRequest {
    return new GetDatasetRevisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRevisionRequest {
    return new GetDatasetRevisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetRevisionRequest | PlainMessage<GetDatasetRevisionRequest> | undefined, b: GetDatasetRevisionRequest | PlainMessage<GetDatasetRevisionRequest> | undefined): boolean {
    return proto3.util.equals(GetDatasetRevisionRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.GetDatasetRevisionResponse
 */
export class GetDatasetRevisionResponse extends Message<GetDatasetRevisionResponse> {
  /**
   * @generated from field: chalk.server.v1.DatasetRevisionMeta revision = 1;
   */
  revision?: DatasetRevisionMeta;

  constructor(data?: PartialMessage<GetDatasetRevisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.GetDatasetRevisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: DatasetRevisionMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRevisionResponse {
    return new GetDatasetRevisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRevisionResponse {
    return new GetDatasetRevisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRevisionResponse {
    return new GetDatasetRevisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatasetRevisionResponse | PlainMessage<GetDatasetRevisionResponse> | undefined, b: GetDatasetRevisionResponse | PlainMessage<GetDatasetRevisionResponse> | undefined): boolean {
    return proto3.util.equals(GetDatasetRevisionResponse, a, b);
  }
}

