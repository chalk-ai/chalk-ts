// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/server/v1/http_engine_proxy.proto (package chalk.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ColumnMetadataList, OfflineQueryRequest } from "../../common/v1/offline_query_pb";
import { ChalkError } from "../../common/v1/chalk_error_pb";
import { DatasetResponse } from "../../common/v1/dataset_response_pb";

/**
 * @generated from message chalk.server.v1.CreateOfflineQueryRequest
 */
export class CreateOfflineQueryRequest extends Message<CreateOfflineQueryRequest> {
  /**
   * @generated from field: chalk.common.v1.OfflineQueryRequest request = 1;
   */
  request?: OfflineQueryRequest;

  constructor(data?: PartialMessage<CreateOfflineQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateOfflineQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: OfflineQueryRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOfflineQueryRequest {
    return new CreateOfflineQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOfflineQueryRequest {
    return new CreateOfflineQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOfflineQueryRequest {
    return new CreateOfflineQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOfflineQueryRequest | PlainMessage<CreateOfflineQueryRequest> | undefined, b: CreateOfflineQueryRequest | PlainMessage<CreateOfflineQueryRequest> | undefined): boolean {
    return proto3.util.equals(CreateOfflineQueryRequest, a, b);
  }
}

/**
 * @generated from message chalk.server.v1.CreateOfflineQueryResponse
 */
export class CreateOfflineQueryResponse extends Message<CreateOfflineQueryResponse> {
  /**
   * these fields are a pale mimicry of the better maintained dataset response
   *
   * @generated from field: bool is_finished = 1 [deprecated = true];
   * @deprecated
   */
  isFinished = false;

  /**
   * @generated from field: int32 version = 2 [deprecated = true];
   * @deprecated
   */
  version = 0;

  /**
   * @generated from field: repeated string urls = 3 [deprecated = true];
   * @deprecated
   */
  urls: string[] = [];

  /**
   * @generated from field: repeated chalk.common.v1.ChalkError errors = 4 [deprecated = true];
   * @deprecated
   */
  errors: ChalkError[] = [];

  /**
   * @generated from field: optional chalk.common.v1.ColumnMetadataList columns = 5 [deprecated = true];
   * @deprecated
   */
  columns?: ColumnMetadataList;

  /**
   * @generated from field: chalk.common.v1.DatasetResponse dataset_response = 6;
   */
  datasetResponse?: DatasetResponse;

  constructor(data?: PartialMessage<CreateOfflineQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.server.v1.CreateOfflineQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "errors", kind: "message", T: ChalkError, repeated: true },
    { no: 5, name: "columns", kind: "message", T: ColumnMetadataList, opt: true },
    { no: 6, name: "dataset_response", kind: "message", T: DatasetResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOfflineQueryResponse {
    return new CreateOfflineQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOfflineQueryResponse {
    return new CreateOfflineQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOfflineQueryResponse {
    return new CreateOfflineQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOfflineQueryResponse | PlainMessage<CreateOfflineQueryResponse> | undefined, b: CreateOfflineQueryResponse | PlainMessage<CreateOfflineQueryResponse> | undefined): boolean {
    return proto3.util.equals(CreateOfflineQueryResponse, a, b);
  }
}

