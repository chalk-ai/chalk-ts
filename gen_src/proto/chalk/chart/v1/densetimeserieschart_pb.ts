// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/chart/v1/densetimeserieschart.proto (package chalk.chart.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ScalarValue } from "../../arrow/v1/arrow_pb";

/**
 * @generated from message chalk.chart.v1.DensePoint
 */
export class DensePoint extends Message<DensePoint> {
  /**
   * wrapped in a Point to allow for optional (empty space in time series)
   *
   * @generated from field: optional double value = 1;
   */
  value?: number;

  constructor(data?: PartialMessage<DensePoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.chart.v1.DensePoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DensePoint {
    return new DensePoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DensePoint {
    return new DensePoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DensePoint {
    return new DensePoint().fromJsonString(jsonString, options);
  }

  static equals(a: DensePoint | PlainMessage<DensePoint> | undefined, b: DensePoint | PlainMessage<DensePoint> | undefined): boolean {
    return proto3.util.equals(DensePoint, a, b);
  }
}

/**
 * If this series was created as part of a group-by(s)
 * This stores extra information about which ones and what value it pertains to
 *
 * @generated from message chalk.chart.v1.GroupTag
 */
export class GroupTag extends Message<GroupTag> {
  /**
   * @generated from field: string group_key = 1;
   */
  groupKey = "";

  /**
   * @generated from field: chalk.arrow.v1.ScalarValue value = 2;
   */
  value?: ScalarValue;

  constructor(data?: PartialMessage<GroupTag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.chart.v1.GroupTag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: ScalarValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupTag {
    return new GroupTag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupTag {
    return new GroupTag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupTag {
    return new GroupTag().fromJsonString(jsonString, options);
  }

  static equals(a: GroupTag | PlainMessage<GroupTag> | undefined, b: GroupTag | PlainMessage<GroupTag> | undefined): boolean {
    return proto3.util.equals(GroupTag, a, b);
  }
}

/**
 * @generated from message chalk.chart.v1.DenseTimeSeries
 */
export class DenseTimeSeries extends Message<DenseTimeSeries> {
  /**
   * @generated from field: repeated chalk.chart.v1.DensePoint points = 1;
   */
  points: DensePoint[] = [];

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string unit = 3;
   */
  unit = "";

  /**
   * @generated from field: repeated chalk.chart.v1.GroupTag group_tags = 4;
   */
  groupTags: GroupTag[] = [];

  constructor(data?: PartialMessage<DenseTimeSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.chart.v1.DenseTimeSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: DensePoint, repeated: true },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "group_tags", kind: "message", T: GroupTag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenseTimeSeries {
    return new DenseTimeSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenseTimeSeries {
    return new DenseTimeSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenseTimeSeries {
    return new DenseTimeSeries().fromJsonString(jsonString, options);
  }

  static equals(a: DenseTimeSeries | PlainMessage<DenseTimeSeries> | undefined, b: DenseTimeSeries | PlainMessage<DenseTimeSeries> | undefined): boolean {
    return proto3.util.equals(DenseTimeSeries, a, b);
  }
}

/**
 * *
 * A representation of a densely encoded chart, suitable for time series where the series
 * have mostly non-null values.
 * Consider implementing a sparse chart if not every series has data at every tick
 *
 * @generated from message chalk.chart.v1.DenseTimeSeriesChart
 */
export class DenseTimeSeriesChart extends Message<DenseTimeSeriesChart> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated chalk.chart.v1.DenseTimeSeries series = 2;
   */
  series: DenseTimeSeries[] = [];

  /**
   * @generated from field: repeated google.protobuf.Timestamp x_series = 3;
   */
  xSeries: Timestamp[] = [];

  /**
   * @generated from field: google.protobuf.Duration window_period = 4;
   */
  windowPeriod?: Duration;

  constructor(data?: PartialMessage<DenseTimeSeriesChart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.chart.v1.DenseTimeSeriesChart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: DenseTimeSeries, repeated: true },
    { no: 3, name: "x_series", kind: "message", T: Timestamp, repeated: true },
    { no: 4, name: "window_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenseTimeSeriesChart {
    return new DenseTimeSeriesChart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenseTimeSeriesChart {
    return new DenseTimeSeriesChart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenseTimeSeriesChart {
    return new DenseTimeSeriesChart().fromJsonString(jsonString, options);
  }

  static equals(a: DenseTimeSeriesChart | PlainMessage<DenseTimeSeriesChart> | undefined, b: DenseTimeSeriesChart | PlainMessage<DenseTimeSeriesChart> | undefined): boolean {
    return proto3.util.equals(DenseTimeSeriesChart, a, b);
  }
}

