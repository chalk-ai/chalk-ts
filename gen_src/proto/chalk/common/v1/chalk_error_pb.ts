// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/common/v1/chalk_error.proto (package chalk.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chalk.common.v1.ErrorCode
 */
export enum ErrorCode {
  /**
   * An unspecified error occurred.
   *
   * @generated from enum value: ERROR_CODE_INTERNAL_SERVER_ERROR_UNSPECIFIED = 0;
   */
  INTERNAL_SERVER_ERROR_UNSPECIFIED = 0,

  /**
   * The query contained features that do not exist
   *
   * @generated from enum value: ERROR_CODE_PARSE_FAILED = 1;
   */
  PARSE_FAILED = 1,

  /**
   *
   * A resolver was required as part of running the dependency
   * graph that could not be found.
   *
   * @generated from enum value: ERROR_CODE_RESOLVER_NOT_FOUND = 2;
   */
  RESOLVER_NOT_FOUND = 2,

  /**
   *
   * The query is invalid. All supplied features need to be
   * rooted in the same top-level entity.
   *
   * @generated from enum value: ERROR_CODE_INVALID_QUERY = 3;
   */
  INVALID_QUERY = 3,

  /**
   *
   * A feature value did not match the expected schema
   * (e.g. `incompatible type "int"; expected "str"`)
   *
   * @generated from enum value: ERROR_CODE_VALIDATION_FAILED = 4;
   */
  VALIDATION_FAILED = 4,

  /**
   * The resolver for a feature errored.
   *
   * @generated from enum value: ERROR_CODE_RESOLVER_FAILED = 5;
   */
  RESOLVER_FAILED = 5,

  /**
   * The resolver for a feature timed out.
   *
   * @generated from enum value: ERROR_CODE_RESOLVER_TIMED_OUT = 6;
   */
  RESOLVER_TIMED_OUT = 6,

  /**
   *
   * A crash in a resolver that was to produce an input for
   * the resolver crashed, and so the resolver could not run
   * crashed, and so the resolver could not run.
   *
   * @generated from enum value: ERROR_CODE_UPSTREAM_FAILED = 7;
   */
  UPSTREAM_FAILED = 7,

  /**
   * The request was submitted with an invalid authentication header.
   *
   * @generated from enum value: ERROR_CODE_UNAUTHENTICATED = 8;
   */
  UNAUTHENTICATED = 8,

  /**
   * The supplied credentials do not provide the right authorization to execute the request.
   *
   * @generated from enum value: ERROR_CODE_UNAUTHORIZED = 9;
   */
  UNAUTHORIZED = 9,

  /**
   * The operation was cancelled, typically by the caller.
   *
   * @generated from enum value: ERROR_CODE_CANCELLED = 10;
   */
  CANCELLED = 10,

  /**
   * The deadline expired before the operation could complete.
   *
   * @generated from enum value: ERROR_CODE_DEADLINE_EXCEEDED = 11;
   */
  DEADLINE_EXCEEDED = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorCode)
proto3.util.setEnumType(ErrorCode, "chalk.common.v1.ErrorCode", [
  { no: 0, name: "ERROR_CODE_INTERNAL_SERVER_ERROR_UNSPECIFIED" },
  { no: 1, name: "ERROR_CODE_PARSE_FAILED" },
  { no: 2, name: "ERROR_CODE_RESOLVER_NOT_FOUND" },
  { no: 3, name: "ERROR_CODE_INVALID_QUERY" },
  { no: 4, name: "ERROR_CODE_VALIDATION_FAILED" },
  { no: 5, name: "ERROR_CODE_RESOLVER_FAILED" },
  { no: 6, name: "ERROR_CODE_RESOLVER_TIMED_OUT" },
  { no: 7, name: "ERROR_CODE_UPSTREAM_FAILED" },
  { no: 8, name: "ERROR_CODE_UNAUTHENTICATED" },
  { no: 9, name: "ERROR_CODE_UNAUTHORIZED" },
  { no: 10, name: "ERROR_CODE_CANCELLED" },
  { no: 11, name: "ERROR_CODE_DEADLINE_EXCEEDED" },
]);

/**
 *
 * Network errors are thrown outside your resolvers.
 * For example, your request was unauthenticated,
 * connection failed, or an error occurred within Chalk.
 *
 * @generated from enum chalk.common.v1.ErrorCodeCategory
 */
export enum ErrorCodeCategory {
  /**
   * -- DEFAULT VALUE --
   *
   * @generated from enum value: ERROR_CODE_CATEGORY_NETWORK_UNSPECIFIED = 0;
   */
  NETWORK_UNSPECIFIED = 0,

  /**
   *
   * Request errors are raised before execution of your
   * resolver code. They may occur due to invalid feature
   * names in the input or a request that cannot be satisfied
   * by the resolvers you have defined.
   *
   * @generated from enum value: ERROR_CODE_CATEGORY_REQUEST = 1;
   */
  REQUEST = 1,

  /**
   *
   * Field errors are raised while running a feature resolver
   * for a particular field. For this type of error, you'll
   * find a feature and resolver attribute in the error type.
   * When a feature resolver crashes, you will receive null
   * value in the response. To differentiate from a resolver
   * returning a null value and a failure in the resolver,
   * you need to check the error schema.
   *
   * @generated from enum value: ERROR_CODE_CATEGORY_FIELD = 2;
   */
  FIELD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorCodeCategory)
proto3.util.setEnumType(ErrorCodeCategory, "chalk.common.v1.ErrorCodeCategory", [
  { no: 0, name: "ERROR_CODE_CATEGORY_NETWORK_UNSPECIFIED" },
  { no: 1, name: "ERROR_CODE_CATEGORY_REQUEST" },
  { no: 2, name: "ERROR_CODE_CATEGORY_FIELD" },
]);

/**
 * @generated from message chalk.common.v1.ChalkException
 */
export class ChalkException extends Message<ChalkException> {
  /**
   * The name of the class of the exception.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * The message taken from the exception.
   *
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * The stacktrace produced by the code.
   *
   * @generated from field: string stacktrace = 3;
   */
  stacktrace = "";

  /**
   * The stacktrace produced by the code, full detail.
   *
   * @generated from field: string internal_stacktrace = 4;
   */
  internalStacktrace = "";

  constructor(data?: PartialMessage<ChalkException>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.ChalkException";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stacktrace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "internal_stacktrace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChalkException {
    return new ChalkException().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChalkException {
    return new ChalkException().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChalkException {
    return new ChalkException().fromJsonString(jsonString, options);
  }

  static equals(a: ChalkException | PlainMessage<ChalkException> | undefined, b: ChalkException | PlainMessage<ChalkException> | undefined): boolean {
    return proto3.util.equals(ChalkException, a, b);
  }
}

/**
 * @generated from message chalk.common.v1.ChalkError
 */
export class ChalkError extends Message<ChalkError> {
  /**
   * @generated from field: chalk.common.v1.ErrorCode code = 1;
   */
  code = ErrorCode.INTERNAL_SERVER_ERROR_UNSPECIFIED;

  /**
   * @generated from field: chalk.common.v1.ErrorCodeCategory category = 2;
   */
  category = ErrorCodeCategory.NETWORK_UNSPECIFIED;

  /**
   * A readable description of the error message.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * A human-readable hint that can be used to identify the entity that this error is associated with.
   *
   * @generated from field: optional string display_primary_key = 101;
   */
  displayPrimaryKey?: string;

  /**
   * If provided, can be used to add additional context to 'display_primary_key'.
   *
   * @generated from field: optional string display_primary_key_fqn = 102;
   */
  displayPrimaryKeyFqn?: string;

  /**
   * The exception that caused the failure, if applicable.
   *
   * @generated from field: optional chalk.common.v1.ChalkException exception = 103;
   */
  exception?: ChalkException;

  /**
   * The fully qualified name of the failing feature, e.g. `user.identity.has_voip_phone`.
   *
   * @generated from field: optional string feature = 104;
   */
  feature?: string;

  /**
   * The fully qualified name of the failing resolver, e.g. `my.project.get_fraud_score`.
   *
   * @generated from field: optional string resolver = 105;
   */
  resolver?: string;

  constructor(data?: PartialMessage<ChalkError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.common.v1.ChalkError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ErrorCode) },
    { no: 2, name: "category", kind: "enum", T: proto3.getEnumType(ErrorCodeCategory) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "display_primary_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 102, name: "display_primary_key_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 103, name: "exception", kind: "message", T: ChalkException, opt: true },
    { no: 104, name: "feature", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 105, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChalkError {
    return new ChalkError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChalkError {
    return new ChalkError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChalkError {
    return new ChalkError().fromJsonString(jsonString, options);
  }

  static equals(a: ChalkError | PlainMessage<ChalkError> | undefined, b: ChalkError | PlainMessage<ChalkError> | undefined): boolean {
    return proto3.util.equals(ChalkError, a, b);
  }
}

