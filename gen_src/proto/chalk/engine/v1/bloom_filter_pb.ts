// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/engine/v1/bloom_filter.proto (package chalk.engine.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.engine.v1.BloomFilter
 */
export class BloomFilter extends Message<BloomFilter> {
  /**
   * @generated from field: string environment = 1;
   */
  environment = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * number of items actually inserted into this bloom filter
   *
   * @generated from field: uint64 num_entries = 3;
   */
  numEntries = protoInt64.zero;

  /**
   * Expected max number of entries, used to calculate size w.r.t error rate
   *
   * @generated from field: uint64 num_expected_entries = 4;
   */
  numExpectedEntries = protoInt64.zero;

  /**
   * @generated from field: uint64 num_hashes = 5;
   */
  numHashes = protoInt64.zero;

  /**
   * @generated from field: uint64 size_bytes = 6;
   */
  sizeBytes = protoInt64.zero;

  /**
   * @generated from field: bytes data = 7;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BloomFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v1.BloomFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_entries", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "num_expected_entries", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "num_hashes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BloomFilter {
    return new BloomFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BloomFilter {
    return new BloomFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BloomFilter {
    return new BloomFilter().fromJsonString(jsonString, options);
  }

  static equals(a: BloomFilter | PlainMessage<BloomFilter> | undefined, b: BloomFilter | PlainMessage<BloomFilter> | undefined): boolean {
    return proto3.util.equals(BloomFilter, a, b);
  }
}

