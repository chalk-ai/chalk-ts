// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/engine/v1/plan_server.proto (package chalk.engine.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { OnlineQueryRequest, OnlineQueryResponse } from "../../common/v1/online_query_pb";
import { Plan } from "./plan_pb";

/**
 * @generated from message chalk.engine.v1.GetPlanRequest
 */
export class GetPlanRequest extends Message<GetPlanRequest> {
  /**
   * @generated from field: chalk.common.v1.OnlineQueryRequest online_query_request = 1;
   */
  onlineQueryRequest?: OnlineQueryRequest;

  constructor(data?: PartialMessage<GetPlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v1.GetPlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "online_query_request", kind: "message", T: OnlineQueryRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlanRequest {
    return new GetPlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlanRequest {
    return new GetPlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlanRequest {
    return new GetPlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlanRequest | PlainMessage<GetPlanRequest> | undefined, b: GetPlanRequest | PlainMessage<GetPlanRequest> | undefined): boolean {
    return proto3.util.equals(GetPlanRequest, a, b);
  }
}

/**
 * @generated from message chalk.engine.v1.GetPlanResponse
 */
export class GetPlanResponse extends Message<GetPlanResponse> {
  /**
   * @generated from field: chalk.engine.v1.Plan plan = 1;
   */
  plan?: Plan;

  constructor(data?: PartialMessage<GetPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v1.GetPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "message", T: Plan },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlanResponse {
    return new GetPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlanResponse {
    return new GetPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlanResponse {
    return new GetPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlanResponse | PlainMessage<GetPlanResponse> | undefined, b: GetPlanResponse | PlainMessage<GetPlanResponse> | undefined): boolean {
    return proto3.util.equals(GetPlanResponse, a, b);
  }
}

/**
 * @generated from message chalk.engine.v1.ExecuteQueryRequest
 */
export class ExecuteQueryRequest extends Message<ExecuteQueryRequest> {
  /**
   * @generated from field: chalk.common.v1.OnlineQueryRequest online_query_request = 1;
   */
  onlineQueryRequest?: OnlineQueryRequest;

  constructor(data?: PartialMessage<ExecuteQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v1.ExecuteQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "online_query_request", kind: "message", T: OnlineQueryRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteQueryRequest {
    return new ExecuteQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteQueryRequest {
    return new ExecuteQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteQueryRequest {
    return new ExecuteQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteQueryRequest | PlainMessage<ExecuteQueryRequest> | undefined, b: ExecuteQueryRequest | PlainMessage<ExecuteQueryRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteQueryRequest, a, b);
  }
}

/**
 * @generated from message chalk.engine.v1.ExecuteQueryResponse
 */
export class ExecuteQueryResponse extends Message<ExecuteQueryResponse> {
  /**
   * @generated from field: chalk.common.v1.OnlineQueryResponse online_query_response = 1;
   */
  onlineQueryResponse?: OnlineQueryResponse;

  constructor(data?: PartialMessage<ExecuteQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v1.ExecuteQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "online_query_response", kind: "message", T: OnlineQueryResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteQueryResponse {
    return new ExecuteQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteQueryResponse {
    return new ExecuteQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteQueryResponse {
    return new ExecuteQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteQueryResponse | PlainMessage<ExecuteQueryResponse> | undefined, b: ExecuteQueryResponse | PlainMessage<ExecuteQueryResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteQueryResponse, a, b);
  }
}

