// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/engine/v2/feature_values.proto (package chalk.engine.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { OperationKind } from "../../common/v1/operation_kind_pb";
import { ScalarValue } from "../../arrow/v1/arrow_pb";

/**
 * @generated from enum chalk.engine.v2.FeatureValuesTimestampType
 */
export enum FeatureValuesTimestampType {
  /**
   * @generated from enum value: FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT = 1;
   */
  INSERTED_AT = 1,

  /**
   * @generated from enum value: FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT = 2;
   */
  OBSERVED_AT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureValuesTimestampType)
proto3.util.setEnumType(FeatureValuesTimestampType, "chalk.engine.v2.FeatureValuesTimestampType", [
  { no: 0, name: "FEATURE_VALUES_TIMESTAMP_TYPE_UNSPECIFIED" },
  { no: 1, name: "FEATURE_VALUES_TIMESTAMP_TYPE_INSERTED_AT" },
  { no: 2, name: "FEATURE_VALUES_TIMESTAMP_TYPE_OBSERVED_AT" },
]);

/**
 * @generated from message chalk.engine.v2.FeatureValueFilters
 */
export class FeatureValueFilters extends Message<FeatureValueFilters> {
  /**
   * @generated from field: repeated string resolver_fqn = 1;
   */
  resolverFqn: string[] = [];

  /**
   * @generated from field: repeated string deployment_id = 2;
   */
  deploymentId: string[] = [];

  /**
   * @generated from field: repeated string operation_id = 3;
   */
  operationId: string[] = [];

  /**
   * @generated from field: repeated chalk.common.v1.OperationKind operation_kind = 4;
   */
  operationKind: OperationKind[] = [];

  /**
   * @generated from field: repeated chalk.arrow.v1.ScalarValue primary_key = 5;
   */
  primaryKey: ScalarValue[] = [];

  constructor(data?: PartialMessage<FeatureValueFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.FeatureValueFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resolver_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "operation_kind", kind: "enum", T: proto3.getEnumType(OperationKind), repeated: true },
    { no: 5, name: "primary_key", kind: "message", T: ScalarValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureValueFilters {
    return new FeatureValueFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureValueFilters {
    return new FeatureValueFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureValueFilters {
    return new FeatureValueFilters().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureValueFilters | PlainMessage<FeatureValueFilters> | undefined, b: FeatureValueFilters | PlainMessage<FeatureValueFilters> | undefined): boolean {
    return proto3.util.equals(FeatureValueFilters, a, b);
  }
}

/**
 * Internal protobuf representing a next page token. Contains the operation id and the query timestamp for the last row
 * in the previous batch. Results are sorted query timestamp, then by operation id, then observation id lexicographically,
 * so this is all we need to know where the next page begins
 *
 * @generated from message chalk.engine.v2.GetFeatureValuesPageToken
 */
export class GetFeatureValuesPageToken extends Message<GetFeatureValuesPageToken> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp_hwm = 1;
   */
  timestampHwm?: Timestamp;

  /**
   * @generated from field: string operation_id_hwm = 2;
   */
  operationIdHwm = "";

  /**
   * @generated from field: string observation_id_hwm = 3;
   */
  observationIdHwm = "";

  constructor(data?: PartialMessage<GetFeatureValuesPageToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.GetFeatureValuesPageToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp_hwm", kind: "message", T: Timestamp },
    { no: 2, name: "operation_id_hwm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "observation_id_hwm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesPageToken {
    return new GetFeatureValuesPageToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesPageToken {
    return new GetFeatureValuesPageToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesPageToken {
    return new GetFeatureValuesPageToken().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesPageToken | PlainMessage<GetFeatureValuesPageToken> | undefined, b: GetFeatureValuesPageToken | PlainMessage<GetFeatureValuesPageToken> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesPageToken, a, b);
  }
}

/**
 * @generated from message chalk.engine.v2.GetFeatureValuesRequest
 */
export class GetFeatureValuesRequest extends Message<GetFeatureValuesRequest> {
  /**
   * @generated from field: string feature_fqn = 1;
   */
  featureFqn = "";

  /**
   * Along which time dimension to query features by.
   * Time ranges can either be specified along inserted_at or observed_at
   * Optional. If unspecified, default to inserted_at
   *
   * @generated from field: chalk.engine.v2.FeatureValuesTimestampType timestamp_type = 2;
   */
  timestampType = FeatureValuesTimestampType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp lower_bound_inclusive = 3;
   */
  lowerBoundInclusive?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp upper_bound_exclusive = 4;
   */
  upperBoundExclusive?: Timestamp;

  /**
   * optional filters that can be specified to filter down feature rows returned
   *
   * @generated from field: chalk.engine.v2.FeatureValueFilters filters = 5;
   */
  filters?: FeatureValueFilters;

  /**
   * The (maximum) page size for results. If zero, then the server picks.
   *
   * @generated from field: int32 page_size = 6;
   */
  pageSize = 0;

  /**
   * When dealing with paginated responses, the next token can be provided to get the next page of responses
   * The query parameters above must be exactly the same when using a next token
   * This is opaque to the clients, but in practice, it is an encoding of the GetFeatureValuesPageToken
   * if unspecified, retrieve the zeroth page.
   *
   * @generated from field: string page_token = 7;
   */
  pageToken = "";

  constructor(data?: PartialMessage<GetFeatureValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.GetFeatureValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp_type", kind: "enum", T: proto3.getEnumType(FeatureValuesTimestampType) },
    { no: 3, name: "lower_bound_inclusive", kind: "message", T: Timestamp },
    { no: 4, name: "upper_bound_exclusive", kind: "message", T: Timestamp },
    { no: 5, name: "filters", kind: "message", T: FeatureValueFilters },
    { no: 6, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesRequest {
    return new GetFeatureValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesRequest {
    return new GetFeatureValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesRequest {
    return new GetFeatureValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesRequest | PlainMessage<GetFeatureValuesRequest> | undefined, b: GetFeatureValuesRequest | PlainMessage<GetFeatureValuesRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesRequest, a, b);
  }
}

/**
 * @generated from message chalk.engine.v2.GetFeatureValuesResponse
 */
export class GetFeatureValuesResponse extends Message<GetFeatureValuesResponse> {
  /**
   * If non-empty, call this endpoint again, with this next token to get the next page of responses.
   *
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * The number of results returned
   *
   * @generated from field: int32 total_size = 2;
   */
  totalSize = 0;

  /**
   * The response payload. Defining as a one-of to future-proof it should we decide to support multiple encodings (parquet, feather, ...)
   *
   * @generated from oneof chalk.engine.v2.GetFeatureValuesResponse.payload
   */
  payload: {
    /**
     * @generated from field: bytes parquet = 3;
     */
    value: Uint8Array;
    case: "parquet";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetFeatureValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.engine.v2.GetFeatureValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "parquet", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureValuesResponse {
    return new GetFeatureValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureValuesResponse {
    return new GetFeatureValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureValuesResponse {
    return new GetFeatureValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureValuesResponse | PlainMessage<GetFeatureValuesResponse> | undefined, b: GetFeatureValuesResponse | PlainMessage<GetFeatureValuesResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureValuesResponse, a, b);
  }
}

