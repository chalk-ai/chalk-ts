// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/artifacts/v1/cron_query.proto (package chalk.artifacts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.artifacts.v1.RecomputeSettings
 */
export class RecomputeSettings extends Message<RecomputeSettings> {
  /**
   * @generated from field: repeated string feature_fqns = 1;
   */
  featureFqns: string[] = [];

  /**
   * @generated from field: bool all_features = 2;
   */
  allFeatures = false;

  constructor(data?: PartialMessage<RecomputeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.RecomputeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feature_fqns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "all_features", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecomputeSettings {
    return new RecomputeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecomputeSettings {
    return new RecomputeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecomputeSettings {
    return new RecomputeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: RecomputeSettings | PlainMessage<RecomputeSettings> | undefined, b: RecomputeSettings | PlainMessage<RecomputeSettings> | undefined): boolean {
    return proto3.util.equals(RecomputeSettings, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.CronQuery
 */
export class CronQuery extends Message<CronQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string cron = 2;
   */
  cron = "";

  /**
   * @generated from field: string file_name = 3;
   */
  fileName = "";

  /**
   * @generated from field: repeated string output = 4;
   */
  output: string[] = [];

  /**
   * @generated from field: optional int64 max_samples = 5;
   */
  maxSamples?: bigint;

  /**
   * @generated from field: chalk.artifacts.v1.RecomputeSettings recompute = 6;
   */
  recompute?: RecomputeSettings;

  /**
   * @generated from field: google.protobuf.Timestamp lower_bound = 7;
   */
  lowerBound?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp upper_bound = 8;
   */
  upperBound?: Timestamp;

  /**
   * @generated from field: repeated string tags = 9;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated string required_resolver_tags = 10;
   */
  requiredResolverTags: string[] = [];

  /**
   * @generated from field: bool store_online = 11;
   */
  storeOnline = false;

  /**
   * @generated from field: bool store_offline = 12;
   */
  storeOffline = false;

  /**
   * @generated from field: repeated string incremental_sources = 13;
   */
  incrementalSources: string[] = [];

  /**
   * @generated from field: optional string resource_group = 14;
   */
  resourceGroup?: string;

  /**
   * @generated from field: map<string, string> planner_options = 15;
   */
  plannerOptions: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CronQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.CronQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cron", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "max_samples", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "recompute", kind: "message", T: RecomputeSettings },
    { no: 7, name: "lower_bound", kind: "message", T: Timestamp },
    { no: 8, name: "upper_bound", kind: "message", T: Timestamp },
    { no: 9, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "required_resolver_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "store_online", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "store_offline", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "incremental_sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "resource_group", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "planner_options", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronQuery {
    return new CronQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronQuery {
    return new CronQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronQuery {
    return new CronQuery().fromJsonString(jsonString, options);
  }

  static equals(a: CronQuery | PlainMessage<CronQuery> | undefined, b: CronQuery | PlainMessage<CronQuery> | undefined): boolean {
    return proto3.util.equals(CronQuery, a, b);
  }
}

