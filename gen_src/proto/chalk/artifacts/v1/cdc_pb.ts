// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file chalk/artifacts/v1/cdc.proto (package chalk.artifacts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chalk.artifacts.v1.CDCTableReference
 */
export class CDCTableReference extends Message<CDCTableReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<CDCTableReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.CDCTableReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CDCTableReference {
    return new CDCTableReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CDCTableReference {
    return new CDCTableReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CDCTableReference {
    return new CDCTableReference().fromJsonString(jsonString, options);
  }

  static equals(a: CDCTableReference | PlainMessage<CDCTableReference> | undefined, b: CDCTableReference | PlainMessage<CDCTableReference> | undefined): boolean {
    return proto3.util.equals(CDCTableReference, a, b);
  }
}

/**
 * @generated from message chalk.artifacts.v1.CDCSource
 */
export class CDCSource extends Message<CDCSource> {
  /**
   * @generated from field: string integration_name = 1;
   */
  integrationName = "";

  /**
   * @generated from field: repeated chalk.artifacts.v1.CDCTableReference tables = 2;
   */
  tables: CDCTableReference[] = [];

  constructor(data?: PartialMessage<CDCSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalk.artifacts.v1.CDCSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tables", kind: "message", T: CDCTableReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CDCSource {
    return new CDCSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CDCSource {
    return new CDCSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CDCSource {
    return new CDCSource().fromJsonString(jsonString, options);
  }

  static equals(a: CDCSource | PlainMessage<CDCSource> | undefined, b: CDCSource | PlainMessage<CDCSource> | undefined): boolean {
    return proto3.util.equals(CDCSource, a, b);
  }
}

